{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u6b22\u8fce","text":"<p>\u200b\u6b22\u8fce\u200b\u6765\u5230\u200bAppium\u200b\u6587\u6863\u200b\uff01Appium\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u548c\u200b\u76f8\u5173\u200b\u8f6f\u4ef6\u200b\u751f\u6001\u7cfb\u7edf\u200b\uff0c\u200b\u65e8\u5728\u200b\u4fc3\u8fdb\u200b\u8bb8\u591a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5e73\u53f0\u200b\u7684\u200bUI\u200b\u81ea\u52a8\u5316\u200b\uff0c\u200b\u5305\u62ec\u200b\u79fb\u52a8\u200b\u7aef\u200b\uff08iOS\u3001Android\u3001Tizen\uff09\u3001\u200b\u6d4f\u89c8\u5668\u200b\u7aef\u200b\uff08Chrome\u3001Firefox\u3001Safari\uff09\u3001\u200b\u684c\u9762\u200b\u7aef\u200b\uff08macOS\u3001Windows\uff09\u3001\u200b\u7535\u89c6\u200b\u7aef\u200b\uff08Roku\u3001tvOS\u3001Android TV\u3001\u200b\u4e09\u661f\u200b\uff09\u200b\u7b49\u200b\uff01</p>    Appium\u200b\u975e\u5e38\u611f\u8c22\u200b\u4e3b\u8981\u200b\u5408\u4f5c\u4f19\u4f34\u200b\u7684\u200b\u652f\u6301\u200b\uff01(\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u8d5e\u52a9\u200b\u8ba1\u5212\u200b\u548c\u200b\u8d21\u732e\u8005\u200b\u8865\u507f\u200b\u8ba1\u5212\u200b\u4fe1\u606f\u200b\u8bf7\u200b\u70b9\u51fb\u200b\u6b64\u5904\u200b)"},{"location":"#_1","title":"\u63a2\u7d22\u200b\u6587\u6863","text":"<ul> <li>\u200b\u67e5\u770b\u200b \u200b\u7b80\u4ecb\u200b \u200b\u4ee5\u200b\u786e\u4fdd\u60a8\u200b\u4e86\u89e3\u200b\u5173\u952e\u200b\u6982\u5ff5\u200b</li> <li>\u200b\u901a\u8fc7\u200b \u200b\u5feb\u901f\u200b\u5165\u95e8\u200b \u200b\u6765\u200b\u8fdb\u884c\u200b\u8bbe\u7f6e\u200b\u5e76\u200b\u8fd0\u884c\u200b\u57fa\u672c\u200b\u7684\u200b Android \u200b\u6d4b\u8bd5\u200b</li> <li>\u200b\u8bbf\u95ee\u200b \u200b\u751f\u6001\u7cfb\u7edf\u200b \u200b\u9875\u9762\u200b\uff0c\u200b\u83b7\u53d6\u200b\u60a8\u200b\u53ef\u80fd\u200b\u60f3\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3001\u200b\u5ba2\u6237\u7aef\u200b\u548c\u200b\u63d2\u4ef6\u200b\u5217\u8868\u200b</li> <li>\u200b\u53c2\u8003\u200b CLI Reference \u200b\u4ee5\u200b\u4e86\u89e3\u200b\u5982\u4f55\u200b\u4ece\u200b\u547d\u4ee4\u884c\u200b\u4f7f\u7528\u200bAppium</li> <li>\u200b\u53c2\u8003\u200b Command Reference \u200b\u4ee5\u200b\u4e86\u89e3\u200b\u6709\u5173\u200bAppium\u200b\u548c\u200b\u63d2\u4ef6\u200b\u7684\u200b\u547d\u4ee4\u200b\u5217\u8868\u200b</li> <li>\u200b\u9605\u8bfb\u200b\u4e0d\u540c\u200b\u7684\u200b \u200b\u6307\u5357\u200b\uff0c\u200b\u4e86\u89e3\u200b\u5404\u79cd\u200b\u8bf4\u660e\u200b\u3001\u200b\u63d0\u793a\u200b\u548c\u200b\u6280\u5de7\u200b</li> <li>\u200b\u67e5\u770b\u200b\u5404\u79cd\u200b\u7b2c\u4e09\u65b9\u200b \u200b\u8d44\u6e90\u200b \u200b\u4ee5\u200b\u63a2\u7d22\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u7684\u200bAppium</li> <li>\u200b\u8981\u200b\u521b\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200bAppium\u200b\u6269\u5c55\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b \u200b\u5f00\u53d1\u8005\u200b \u200b\u6587\u6863\u200b</li> <li>\u200b\u6709\u5173\u200b\u5bf9\u200bAppium\u200b\u672c\u8eab\u200b\u7684\u200b\u8d21\u732e\u200b\uff0c\u200b\u8bf7\u200b\u67e5\u9605\u200b \u200b\u8d21\u732e\u200b \u200b\u9875\u9762\u200b</li> </ul>"},{"location":"resources/","title":"\u5176\u4ed6\u200b\u8d44\u6e90","text":"<p>\u200b\u5728\u200b\u8fd9\u91cc\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u5176\u4ed6\u200b Appium \u200b\u8d44\u6e90\u200b\u7684\u200b\u94fe\u63a5\u200b:</p>"},{"location":"resources/#_1","title":"\u7f51\u7ad9","text":"<ul> <li>Appium Pro - \u200b\u662f\u200bAppium\u200b\u5176\u4e2d\u200b\u4e00\u540d\u200b\u7ef4\u62a4\u8005\u200b\u4e54\u7eb3\u68ee\u200b-\u200b\u5229\u666e\u65af\u200b\uff08Jonathan Lipps\uff09\u200b\u64b0\u5199\u200b\u7684\u200b\u535a\u5ba2\u200b\u548c\u200b\u65f6\u4e8b\u200b\u901a\u8baf\u200b\u3002 \u200b\u64b0\u5199\u200b\u7684\u200b\u535a\u5ba2\u200b\u548c\u200b\u65f6\u4e8b\u200b\u901a\u8baf\u200b\uff0c\u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u5927\u91cf\u200b\u5b9e\u7528\u200b\u6307\u5357\u200b</li> </ul>"},{"location":"resources/#_2","title":"\u5728\u7ebf\u200b\u8bfe\u7a0b","text":"<ul> <li>Appium \u200b\u548c\u200b Selenium \u200b\u57fa\u7840\u200b - Jonathan Lipps \u200b\u7f16\u5199\u200b\u7684\u200b\u5b66\u4e60\u200b Python\u3001Selenium \u200b\u548c\u200b Appium \u200b\u7684\u200b\u7efc\u5408\u200b\u89c6\u9891\u200b\u8bfe\u7a0b\u200b</li> <li>\u200b\u4f7f\u7528\u200b Appium \u200b\u5b9e\u73b0\u200b\u79fb\u52a8\u200b\u6d4b\u8bd5\u200b\u81ea\u52a8\u5316\u200b - \u200b\u7531\u200b Moataz Nabil \u200b\u5236\u4f5c\u200b\u7684\u200b\u89c6\u9891\u200b\u8bfe\u7a0b\u200b</li> <li>\u200b\u9ad8\u7ea7\u200bAppoium - \u200b\u4e54\u7eb3\u68ee\u200b-\u200b\u5229\u666e\u65af\u200b\uff08Jonathan Lipps\uff09\u200b\u7684\u200b\u89c6\u9891\u200b\u8bfe\u7a0b\u200b</li> </ul>"},{"location":"blog/","title":"\u535a\u5ba2","text":""},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/","title":"Appium Conf 2024: Call for Proposals Now Open!","text":"<p>We're thrilled to announce that Appium Conf is back and going online for 2024! This is the official Appium conference where you can learn all about what's new in Appium 2.0 and explore the latest in automating tests for devices, mobile apps, and desktop applications.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#mark-your-calendars-september-13-2024","title":"Mark Your Calendars: September 13, 2024","text":"<p>Join us on September 13, 2024, for a full day of inspiring and practical talks from the Appium team and the world's top mobile testing and automation experts. With Appium 2.0 now well-established, this is your opportunity to dive deep and learn how to maximize its potential.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#why-attend-appium-conf-2024","title":"Why Attend Appium Conf 2024?","text":"<ol> <li>Gain Insights: Hear interesting insights and inspiring case studies from global experts and the core Appium team.</li> <li>Improve Your Strategy: Gain valuable knowledge to enhance your own automation strategy.</li> <li>Network: Make connections with Appium users from around the globe.</li> <li>Learn from Specialists: Benefit from Appium specialists' expertise on a variety of topics.</li> </ol>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#call-for-proposals-share-your-knowledge","title":"Call for Proposals: Share Your Knowledge!","text":"<p>We're looking for a diverse range of speakers from around the globe who are eager to share innovative ideas and use-cases of mobile test automation. If you have experience with Appium and insights that could benefit the community of test practitioners, we want to hear from you!</p> <p>Don't miss this chance to contribute to the Appium community and showcase your expertise on a global stage.</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#how-to-submit-your-proposal","title":"How to Submit Your Proposal","text":"<p>Visit our website at https://appiumconf.com/ and Submit a Proposal. We're excited to see your innovative ideas and experiences with Appium!</p>"},{"location":"blog/2024/07/13/appium-conf-2024-call-for-proposals-now-open/#stay-tuned","title":"Stay Tuned","text":"<p>Keep an eye on our website and social media channels for updates on the conference schedule, keynote speakers, and more exciting details about Appium Conf 2024.</p> <p>Join us in shaping the future of mobile and device test automation. Submit your proposal today and be part of this exciting event!</p>"},{"location":"blog/2024/06/10/announcing-browserstack-as-appiums-strategic-partner/","title":"Announcing BrowserStack as Appium's Strategic Partner","text":"<p>We have another exciting announcement for you! As part of our recently-announced sponsorship and contributor compensation program, we are obviously in need of significant funding to support giving back to our contributor community. We are therefore extremely happy to announce one of our brand new exclusive Strategic Partners: BrowserStack!</p> <p>BrowserStack has long been recognized in the industry as having extensive support for Appium, allowing you to run functional and visual regression tests for your native and hybrid apps at scale across a variety of devices and platforms.</p> <p>As a token of this collaboration, BrowserStack is extending a special premium access of BrowserStack App Automate product to Appium users. Discover more about this special offer at browserstack.com</p> <p>With the decision to come on board as Strategic Partner, BrowserStack is making a huge investment in Appium and the Appium community. BrowserStack is very interested in supporting the development of the Appium contributor base, and is proud to be a key part of our contributor compensation scheme. Without Strategic Partners like BrowserStack, we would not be able to maintain such a program! We welcome them with gratitude!</p> <p>About BrowserStack</p> <p>BrowserStack is the world\u2019s leading software testing platform powering over two million tests every day across 19 global data centers. BrowserStack helps Tesco, Shell, NVIDIA, Discovery, Wells Fargo, and over 50,000 customers deliver quality software at speed by moving testing to their Cloud. BrowserStack\u2019s platform provides instant access to 20,000+ real mobile devices on a highly reliable cloud infrastructure that effortlessly scales as testing needs grow. With BrowserStack, Dev and QA teams can move fast while delivering an amazing experience for every customer.</p>"},{"location":"blog/2024/06/06/announcing-headspin-as-appiums-development-partner/","title":"Announcing HeadSpin as Appium's Development Partner","text":"<p>Recently, we announced a new sponsorship and contributor compensation program for the Appium project. As part of this program, we felt it was important to have a place to recognize those companies who make an extremely valuable kind of contribution to the project: dedicated maintainer time. Appium only survives because of the tireless efforts of the core maintainers, and some of us are only able to do this work because it is donated on behalf of our day jobs. We're therefore very excited to announce our first Development Partner: HeadSpin!</p> <p>HeadSpin is a real device performance and UX analysis cloud, with full support for Appium. When you run your Appium tests on HeadSpin, you get access to comprehensive performance reports about your app, including potential network, system resource, or user experience issues. HeadSpin supports a variety of complex testing modes, including hooking up your own devices to the cloud, injecting and receiving video and audio to/from devices, working with media (streaming) platforms, and more.</p> <p>HeadSpin has been one of the Appium project's biggest supporters for a long time, and currently employs two of Appium's core maintainers, donating a significant portion of their time towards the development, maintenance, support, and leadership of open source Appium repos. HeadSpin has also worked hard towards Appium's vision of a robust Appium ecosystem, contributing several HeadSpin-maintained Appium drivers and plugins to the community:</p> <ul> <li>A Roku TV driver</li> <li>A Tizen TV driver</li> <li>A LG webOS TV driver</li> <li>A Unity game automation plugin</li> </ul> <p>These are all free and open source Appium components that HeadSpin has donated to the community with the goal of fostering collaboration in these areas of media app automation.</p> <p>Looking to the future, HeadSpin plans to continue supporting Appium in significant ways, both as a Development Partner and a significant contributor to the Appium ecosystem. The Appium project is deeply indebted to HeadSpin for all of its support, and is proud to take this moment to recognize HeadSpin as our first official Development Partner!</p>"},{"location":"blog/2024/06/10/announcing-sauce-labs-as-appiums-strategic-partner/","title":"Announcing Sauce Labs as Appium's Strategic Partner","text":"<p>The good news surrounding our new sponsorship and contributor compensation program just keeps coming! Effective immediately we are fortunate and excited to be able to welcome a new Strategic Partner to the Appium project: Sauce Labs!</p> <p>Sauce Labs has a long history of support for the Appium project. In fact, Appium was initially incubated at Sauce Labs under the direction of @jlipps, in the early days of mobile automation. Sauce Labs always envisioned Appium as being a project for and by the community, and cemented this perspective in 2016 with the donation of Appium to the JS Foundation (now the OpenJS Foundation). To this day, developers associated with Sauce Labs continue to help maintain various parts of the Appium project.</p> <p>Now, Sauce Labs is making a further commitment to support Appium financially as a way to enable our new contributor compensation program. We're very excited about this program as a vehicle for getting more people involved in Appium's development and maintenance. With the help of Strategic Partners like Sauce Labs, our project will be better able to meet the needs of our constantly growing userbase, and attract new developers (like you?) to build the Appium ecosystem together. Needless to say, we are extremely grateful for Sauce Labs's support!</p> <p>About Sauce Labs</p> <p>Sauce Labs is the leader in continuous quality. Our Platform for Test helps organizations transform software testing from a chore to a competitive advantage. With decades of expertise and deep roots in the Selenium and Appium open source communities, high performing software teams use our platform to execute any testing workload across thousands of different devices, browsers, and operating systems\u2014anywhere, any time, and at any scale. For more information, please visit saucelabs.com.</p>"},{"location":"blog/2024/05/14/announcing-appiums-sponsorship-program/","title":"Announcing Appium's Sponsorship Program","text":"<p>Over the last several months, the Appium team has been working on a sponsorship program that is designed to help give back to Appium's contributors as well as to recognize important partner individuals or companies in the industry. This program is now officially launching! Let's dive into some of the details.</p> <p>First of all, the details and fine print will always be available at Appium's Governance document, which outlines how the project is run, who makes project decisions, etc... This document will be kept up to date with the latest details of the program, so that's the place to bookmark for reference!</p> <p>As of now, Appium has opened up sponsorship opportunities via our OpenCollective page. OpenCollective is a service which allows people to donate to open source groups. We've defined a number of giving tiers for donations, within a very wide range, and welcome any financial amount with gratitude! Based on the donation tier, sponsorship comes with a variety of benefits, including recognition at different places in the Appium repo, docs, and website. In addition to financial sponsorship, the project has decided to recognize significant donations of project leadership and maintenance efforts from companies who have invested heavily into Appium with their employees' time (we call these \"Development Partners\").</p> <p>What will the project do with the funds raised through this sponsorship program? We aim to give it all back to the Appium community! With the details again available at our Governance document, we have implemented a scheme very much inspired by our friends at WebdriverIO (thanks WDIO friends!) There are three groups of contributors to Appium that this scheme supports: (1) project maintainers (those who devote consistent time to leading the project), (2) project contributors (anyone in the wider community that contributes code or documentation), and (3) upstream projects (other open source projects Appium relies heavily on to work well). Each month, the funds raised via sponsorship will be distributed in different amounts to each of these groups. So if you make a valuable contribution to Appium moving forward, you'll be eligible to get some cash as a thank-you! (You'll need to have your own OpenCollective account in good standing to receive funds).</p> <p>We're very excited about this new program, and hope that it helps existing and new contributors to feel even better about donating their time to making Appium better. And of course, none of this would be possible without the amazing Partners and Sponsors we hope to attract! On that note, stay tuned over the next few weeks as we unveil some of our initial program launch Partners! And if you or your company would like to participate by supporting Appium financially, you are most welcome. Just head over to our OpenCollective page and choose the tier that reflects your desired contribution level.</p>"},{"location":"blog/2024/03/07/hello-world/","title":"Hello World!","text":"<p>This is the first post in the Appium blog. There's not much to see here yet. We're creating this space so we can make announcements or post other news, or information about events, that don't really fit inside the documentation itself.</p> <p>Stay tuned for more!</p>"},{"location":"cli/","title":"Command-Line Overview","text":"<p>Appium provides a command-line executable (<code>appium</code>), which will likely be your main way of interacting with the Appium server. This section of the Appium documentation describes how to use this executable.</p> <p>To start off, you can run <code>appium -v</code> or <code>appium --version</code> to return the installed version,  or run <code>appium -h</code> or <code>appium --help</code> to return the help message.</p> <p>The main <code>appium</code> executable provides the following subcommands:</p> <ol> <li><code>appium server</code> (or simply <code>appium</code>) - launch an Appium server<ul> <li>See here for accepted arguments</li> <li>For advanced features, see here for accepted environment variables</li> </ul> </li> <li><code>appium driver</code> - manage Appium drivers<ul> <li>See here for details</li> </ul> </li> <li><code>appium plugin</code> - manage Appium plugins<ul> <li>See here for details</li> </ul> </li> <li><code>appium setup</code> - batch install a preset of drivers and plugins<ul> <li>See here for details</li> </ul> </li> </ol> <p>Like the main command, you can also run each subcommand with the <code>-h</code> or <code>--help</code> flag to learn more about it.</p>"},{"location":"cli/args/","title":"Server Command-Line Arguments","text":"<p>To start the Appium server, you may either run <code>appium</code> or <code>appium server</code>. The <code>server</code> subcommand is considered to be the default, so if you omit it, Appium will interpret this as your request to run the Appium server.</p> <p>The invocation of <code>appium</code> (or <code>appium server</code>) can take a number of arguments, which are detailed below.</p> <p>Note</p> <p>All of these arguments can be set via a Configuration File instead if you want. Any arguments set on the command line will override any arguments found in a configuration file.</p> Argument Description Type Default Aliases <code>--address</code> IP address to listen on string <code>0.0.0.0</code> <code>-a</code> <code>--allow-cors</code> Whether the Appium server should allow web browser connections from any host boolean <code>false</code> <code>--allow-insecure</code> Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via <code>--deny-insecure</code> will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list. array <code>[]</code> <code>--base-path</code> Base path to use as the prefix for all webdriver routes running on the server string <code>\"\"</code> <code>-pa</code> <code>--callback-address</code> Callback IP address (default: same as <code>--address</code>) string <code>-ca</code> <code>--callback-port</code> Callback port (default: same as <code>--port</code>) (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-cp</code> <code>--config</code> Path to an Appium configuration JSON file string <code>--debug-log-spacing</code> Add exaggerated spacing in logs to help with visual inspection boolean <code>false</code> <code>--default-capabilities</code> Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON. object <code>-dc</code> <code>--deny-insecure</code> Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in <code>--allow-insecure</code>, and even if <code>--relaxed-security</code> is enabled. If string, a path to a text file containing policy or a comma-delimited list. array <code>[]</code> <code>--driver</code> Driver-specific configuration. Keys should correspond to driver package names object <code>--drivers-import-chunk-size</code> The maximum amount of drivers that could be imported in parallel on server startup number <code>3</code> <code>--keep-alive-timeout</code> Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. Setting this to <code>0</code> disables the timeout. integer <code>600</code> <code>-ka</code> <code>--local-timezone</code> Use local timezone for timestamps boolean <code>false</code> <code>--log</code> Also send log output to this file string <code>-g</code> <code>--log-filters</code> One or more log filtering rules array <code>--log-level</code> Log level (console[:file]) (Value must be one of: <code>info</code>, <code>info:debug</code>, <code>info:info</code>, <code>info:warn</code>, <code>info:error</code>, <code>warn</code>, <code>warn:debug</code>, <code>warn:info</code>, <code>warn:warn</code>, <code>warn:error</code>, <code>error</code>, <code>error:debug</code>, <code>error:info</code>, <code>error:warn</code>, <code>error:error</code>, <code>debug</code>, <code>debug:debug</code>, <code>debug:info</code>, <code>debug:warn</code>, <code>debug:error</code>) string <code>debug</code> <code>--log-format</code> Log format (Value must be to one of: <code>text</code>, <code>json</code>, <code>pretty_json</code>). If logs are printed as JSON then the text coloring is always disabled. string <code>text</code> <code>--log-no-colors</code> Do not use color in console output boolean <code>false</code> <code>--log-timestamp</code> Show timestamps in console output boolean <code>false</code> <code>--long-stacktrace</code> Add long stack traces to log entries. Recommended for debugging only. boolean <code>false</code> <code>--no-perms-check</code> Skip various permission checks on the server startup boolean <code>false</code> <code>--nodeconfig</code> Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself string <code>--plugin</code> Plugin-specific configuration. Keys should correspond to plugin package names object <code>--plugins-import-chunk-size</code> The maximum amount of plugins that could be imported in parallel on server startup number <code>7</code> <code>--port</code> Port to listen on (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-p</code> <code>--relaxed-security</code> Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using <code>--deny-insecure</code> boolean <code>false</code> <code>--session-override</code> Enables session override (clobbering) boolean <code>false</code> <code>--ssl-cert-path</code> Absolute path to the <code>.cert</code> file if TLS is used. Must be provided together with <code>--ssl-key-path</code>. See the SSL/TLS/SPDY Support guide for details string <code>--ssl-key-path</code> Absolute path to the <code>.key</code> file if TLS is used. Must be provided together with <code>--ssl-cert-path</code>. See the SSL/TLS/SPDY Support guide for details string <code>--strict-caps</code> Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device boolean <code>false</code> <code>--tmp</code> Absolute path to directory Appium can use to manage temp files string Windows: <code>C:\\Windows\\Temp</code>Others: <code>/tmp</code> <code>--trace-dir</code> Absolute path to directory Appium can use to save iOS instrument traces string <code>&lt;tmp&gt;/appium-instruments</code> <code>--use-drivers</code> A list of drivers to activate. By default, all installed drivers will be activated. array <code>[]</code> <code>--use-plugins</code> A list of plugins to activate. To activate all plugins, the value should be an array with a single item <code>\"all\"</code>. array <code>[]</code> <code>--webhook</code> Also send log output to this http listener string <code>-G</code> <p>The following arguments are used for information retrieval, after which the server will automatically exit. They are therefore meant for reference or debug purposes.</p> Argument Description Alias <code>--help</code> Print instructions on using the Appium command-line. This argument can also be used for any Appium subcommands. <code>-h</code> <code>--show-build-info</code> Print detailed information on the Appium server version <code>--show-config</code> Print the current Appium server configuration details <code>--show-debug-info</code> Print information on the current environment: details about the operating system, Node.js, and Appium itself <code>--version</code> Print the Appium server version <code>-v</code>"},{"location":"cli/env-vars/","title":"Server Environment Variables","text":"<p>The primary way of configuring the Appium server is via Command-Line Arguments. However, some more advanced features are toggled or configured via environment variables. To set environment variables, refer to the documentation for your operating system and terminal. These are the environment variables that the Appium server understands:</p> Variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>APPIUM_HOME</code> By default, Appium creates a directory called <code>.appium</code> in the home directory for your system user. You can adjust the directory with this variable, as detailed in the Managing Extensions guide. <code>APPIUM_TMP_DIR</code> By default, Appium uses a random temporary directory for many of its operations. If you wish to use a specific directory, you may do so by including an absolute path as the value of this variable. The behaviour is equivalent to using the <code>--tmp</code> CLI arg. <code>APPIUM_PREFER_SYSTEM_UNZIP</code> Set to <code>0</code> or <code>false</code> to request that Appium not use the <code>unzip</code> binary included on your system for unzipping downloaded apps or other artifacts. Instead it will use a JS-based unzip library. This could help on some systems with non-existent or non-standard <code>unzip</code> commands. Note that if unzipping fails using the system library, the fallback library will be attempted in any case, so setting this env var merely saves time in the event you know the system unzip will fail. <code>APPIUM_HOST</code> Same as the <code>--address</code> CLI arg <code>APPIUM_PORT</code> Same as the <code>--port</code> CLI arg <code>APPIUM_RELOAD_EXTENSIONS</code> Set to <code>1</code> to cause Appium to re-require extensions when new sessions are created. This is mostly useful for building extensions <code>APPIUM_OMIT_PEER_DEPS</code> Adds <code>--omit=peer</code> to all the NPM commands run internally by Appium. Mostly an internal feature. <code>APPIUM_APPS_CACHE_MAX_AGE</code> Allows to set the maximum age (in minutes) for cached applications. The default value is <code>60 * 24</code> (24 hours). Do not set it to a lower number than the duration of a single session startup. <code>APPIUM_APPS_CACHE_MAX_ITEMS</code> Allows to set the maximum amount of cached applications. The default value is <code>1024</code>. Do not set it to a lower number than the amount of apps in all parallel sessions per process. <code>APPIUM_APPS_CACHE_IGNORE_URL_QUERY</code> If the above option is enabled then the 'search' part of the app URL will be cut off from cache keys. See the corresponding feature request for more details. Disabled by default."},{"location":"cli/extensions/","title":"Extension Command-Line Usage","text":"<p>Appium allows for the flexible installation and management of various extensions, such as drivers (which provide Appium with the capability to automate a given platform) and plugins (which can augment or alter the way individual Appium commands work). For a conceptual understanding of these entities, please review the Introduction.</p> <p>Management of drivers and plugins is handled by Appium's Extension CLI (command-line interface).</p> <p>Note</p> <p>This reference uses placeholders to refer to various options. Anywhere you see one of these placeholders in the reference, ensure you replace it with the correct type of actual content.</p> Placeholder Meaning <code>&lt;ext-type&gt;</code> \"Extension type\". It should be either <code>driver</code> or <code>plugin</code>. All the Extension CLI commands can be used with either drivers or plugins, so you must specify which type of extension will be used <code>&lt;ext-name&gt;</code> \"Extension name\". This is the short name of the extension found in a call to <code>appium &lt;ext-type&gt; list</code>. This is distinct from the NPM package name of the extension or, in general, the \"install spec\" of the extension. <code>&lt;install-spec&gt;</code> \"Install specification\". This refers to the string used to indicate what extension Appium should install. <code>&lt;install-source&gt;</code> This refers to the method that Appium should use to install an extension."},{"location":"cli/extensions/#commands","title":"Commands","text":"<p>All Extension CLI commands begin with <code>appium &lt;ext-type&gt;</code>, i.e., either <code>appium driver</code> or <code>appium plugin</code>.</p> <p>All Extension CLI commands can take an optional <code>--json</code> argument, which will return the result of the command as a machine-readable JSON string rather than the standard output, which is colourized and tuned for human consumption.</p>"},{"location":"cli/extensions/#doctor","title":"<code>doctor</code>","text":"<p>Run doctor checks for the given extension, which validate whether the extension has its prerequisites configured correctly. Note that not all extensions include doctor checks. See the Building Doctor Checks tutorial for more details on how to create them.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; doctor &lt;ext-name&gt;\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension whose doctor checks you want to run</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--json</code>: return the result in JSON format</li> </ul> <p>Example (run doctor checks for the UiAutomator2 driver):</p> <pre><code>appium driver doctor uiautomator2\n</code></pre>"},{"location":"cli/extensions/#install","title":"<code>install</code>","text":"<p>Install an extension. If successful, respond with the short name of the extension which can be used in other invocations of the Extension CLI. If the extension is a driver, also note which platforms may be used with the driver.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; install &lt;install-spec&gt; [--source=&lt;install-source&gt;] [--package=&lt;package-name&gt;] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;install-spec&gt;</code>: this is the name, location, and/or version of the extension you want to   install. Its possible values are dependent on the <code>&lt;install-source&gt;</code> (see below).</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--source</code>: this directs Appium where to find your extension. See below for a table of possible   source types and corresponding install specification.</li> <li><code>--package</code>: when <code>&lt;install-source&gt;</code> is <code>git</code> or <code>github</code>, <code>--package</code> is required. It should be   the Node.js package name of the extension. Without this information, Appium will not be able to   find the installed package.</li> <li><code>--json</code>: return the result in JSON format</li> </ul> Install source type Behaviour None This is the default behaviour when no <code>--source</code> is used. In this case, Appium will look at <code>&lt;install-spec&gt;</code> and match it against the name of extensions available when running <code>appium &lt;ext-type&gt; list</code>, i.e., against the officially recognized extension names. If found, it will install that extension at the latest version via NPM <code>npm</code> Install an extension based on its NPM package name. Here, <code>&lt;install-spec&gt;</code> must be the NPM package name with any additional NPM installation modifiers, like version (see below) <code>github</code> Install an extension via a GitHub spec of the form <code>&lt;org&gt;/&lt;repo&gt;</code> <code>git</code> Install an extension via a Git URL (e.g., <code>git+ssh://git-host.com/repo.git</code>) <code>local</code> Install an extension via a local path. This must be a path to the directory where the Node.js package information for the driver is located."},{"location":"cli/extensions/#npm-based-install-spec","title":"NPM-based <code>&lt;install-spec&gt;</code>","text":"<p>When Appium is installing an extension via NPM (as is the case when <code>--source</code> is either omitted or set to <code>npm</code>), the <code>&lt;install-spec&gt;</code> can be complex, and can include any kind of information allowed by <code>npm install</code>:</p> <ul> <li><code>[@scope]/&lt;name&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;tag&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version range&gt;</code></li> </ul>"},{"location":"cli/extensions/#examples","title":"Examples","text":"<ul> <li> <p>Install the latest XCUITest driver:</p> <pre><code>appium driver install xcuitest\n</code></pre> </li> <li> <p>Install the XCUITest driver at version 4.11.1:</p> <pre><code>appium driver install xcuitest@4.11.1\n</code></pre> </li> <li> <p>Install the <code>beta</code> version of the <code>@appium/fake-driver</code> from NPM:</p> <pre><code>appium driver install --source=npm @appium/fake-driver@beta\n</code></pre> </li> <li> <p>Install a locally-developed plugin:</p> <pre><code>appium plugin install --source=local /path/to/my/plugin\n</code></pre> </li> </ul>"},{"location":"cli/extensions/#list","title":"<code>list</code>","text":"<p>List installed and available extensions. \"Available\" extensions include those which are officially recognized by the Appium team, but you are not limited to installing only the extensions displayed in this list.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; list [--installed] [--updates] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> </ul> <p>Optional arguments:</p> <ul> <li><code>--installed</code>: show only installed extensions, not installed plus available extensions</li> <li><code>--updates</code>: for extensions installed via NPM, display a message if there are any updates</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#run","title":"<code>run</code>","text":"<p>Run a script included in an extension package. Extension authors can include runnable scripts that assist with setup or perform other tasks. These scripts are given names (called the <code>&lt;script-name&gt;</code> in this reference) by extension authors and will generally be documented in extension documentation.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; run &lt;ext-name&gt; [--json] &lt;script-name&gt; [script-args]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension whose script you want to run</li> <li><code>&lt;script-name&gt;</code>: the name of the script the extension has published</li> </ul> <p>Optional arguments:</p> <ul> <li><code>script-args</code>: any arguments that Appium does not interpret as belonging to its own set of   arguments will be passed along to the extension script</li> <li><code>--json</code>: return the result in JSON format</li> </ul> <p>Example (run the <code>reset</code> script included with the UiAutomator2 driver):</p> <pre><code>appium driver run uiautomator2 reset\n</code></pre>"},{"location":"cli/extensions/#update","title":"<code>update</code>","text":"<p>Update one or more extensions that have been installed via NPM. By default, Appium will not automatically update any extension past a major version boundary, so as to prevent unintended breaking changes.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; update &lt;ext-name&gt; [--unsafe] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to update, or the string <code>installed</code> (which will update   all installed extensions)</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--unsafe</code>: direct Appium to go ahead and update past a major version boundary</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#uninstall","title":"<code>uninstall</code>","text":"<p>Remove an installed extension.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; uninstall &lt;ext-name&gt; [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to uninstall</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/setup/","title":"Setup Command-Line Usage","text":"<p>The <code>setup</code> command aims to simplify the initial procedure of setting up Appium. It allows to install multiple extensions (drivers/plugins) in one go, without the need to run <code>appium &lt;ext-name&gt; install &lt;ext-name&gt;</code> multiple times.</p> <p>The command has several presets that can be used to install different sets of extensions. The presets are as follows:</p> Preset Installation Command Included Drivers Included Plugins Mobile <code>appium setup mobile</code> or <code>appium setup</code> <code>uiautomator2</code>, <code>xcuitest</code><sup>1</sup>, <code>espresso</code> <code>images</code> Desktop application <code>appium setup desktop</code> <code>mac2</code><sup>1</sup>, <code>windows</code><sup>2</sup> <code>images</code> Desktop browser <code>appium setup browser</code> <code>safari</code><sup>1</sup>, <code>gecko</code>, <code>chromium</code> <code>images</code> <p>Attempting to install a preset while already having one or more of its included extensions installed will only install the missing extensions.</p> <p>Refer to the Ecosystem documentation to learn more about the extensions listed above.</p> <ol> <li> <p>Only installed if the host machine is running macOS.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Only installed if the host machine is running Windows.\u00a0\u21a9</p> </li> </ol>"},{"location":"commands/","title":"Intro to Commands","text":"<p>Here you can find various commands exposed by the main Appium module through its base driver, as well as the commands available in several plugins.</p> <p>Note</p> <p>The Appium base driver only exposes a few commands, as it is not meant to be used on its own. Please refer to the documentation of your Appium driver to learn about the commands it exposes, and then check your Appium client documentation for the exact syntax of that command.</p> <p>The command listings can be found here:</p> <ul> <li>Base Driver</li> <li>Execute Driver Plugin</li> <li>Images Plugin</li> <li>Relaxed Caps Plugin</li> <li>Universal XML Plugin</li> </ul>"},{"location":"commands/base-driver/","title":"Driver: base-driver","text":""},{"location":"commands/base-driver/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Historically the first two arguments were reserved for JSONWP capabilities. Appium 2 has dropped the support of these, so now we only accept capability objects in W3C format and thus allow any of the three arguments to represent the latter.</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"commands/base-driver/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>requiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined)"},{"location":"commands/base-driver/#response","title":"Response","text":"<p><code>CreateResult</code></p> <p>The capabilities object representing the created session</p>"},{"location":"commands/base-driver/#deletesession","title":"<code>deleteSession</code>","text":"<p><code>DELETE</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"commands/base-driver/#response_1","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"commands/base-driver/#getsession","title":"<code>getSession</code>","text":"<p><code>GET</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"commands/base-driver/#response_2","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"commands/base-driver/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/base-driver/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/base-driver/#response_3","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/base-driver/#findelementfromelement","title":"<code>findElementFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"commands/base-driver/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/base-driver/#response_4","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/base-driver/#findelementfromshadowroot","title":"<code>findElementFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/element</code></p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"commands/base-driver/#parameters_3","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_5","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"commands/base-driver/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/base-driver/#parameters_4","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_6","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/base-driver/#findelementsfromelement","title":"<code>findElementsFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"commands/base-driver/#parameters_5","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_7","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/base-driver/#findelementsfromshadowroot","title":"<code>findElementsFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/elements</code></p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"commands/base-driver/#parameters_6","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/base-driver/#response_8","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"commands/base-driver/#getlog","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/log</code></p> <p>Get the log for a given log type.</p> <p>Deprecated</p> <p>Please use the <code>/session/:sessionId/se/log</code> endpoint instead</p>"},{"location":"commands/base-driver/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"commands/base-driver/#response_9","title":"Response","text":"<p><code>any</code></p>"},{"location":"commands/base-driver/#getlog_1","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/se/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"commands/base-driver/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"commands/base-driver/#response_10","title":"Response","text":"<p><code>any</code></p>"},{"location":"commands/base-driver/#getlogevents","title":"<code>getLogEvents</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/events</code></p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"commands/base-driver/#parameters_9","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"commands/base-driver/#response_11","title":"Response","text":"<p><code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;</p> <p>The event history for the session</p>"},{"location":"commands/base-driver/#getlogtypes","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/log/types</code></p> <p>Get available log types as a list of strings</p> <p>Deprecated</p> <p>Please use the <code>/session/:sessionId/se/log/types</code> endpoint instead</p>"},{"location":"commands/base-driver/#response_12","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"commands/base-driver/#getlogtypes_1","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/se/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"commands/base-driver/#response_13","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"commands/base-driver/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"commands/base-driver/#response_14","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"commands/base-driver/#getsessions","title":"<code>getSessions</code>","text":"<p><code>GET</code> <code>/sessions</code></p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"commands/base-driver/#response_15","title":"Response","text":"<p>A list of session data objects. Each session data object will be returned with <code>id</code> and the session's capabilities as <code>capabilities</code> keys like an example below:</p> <pre><code>[\n  {\n    \"id\":\"ba30c6da-c266-4734-8ddb-c16f5bb53e16\",\n    \"capabilities\":{ \"platformName\":\"ios\",\"browserName\":\"safari\",\"automationName\":\"xcuitest\",\"platformVersion\":\"17.2\",\"deviceName\":\"iPhone 15\" }\n  },\n  {\n    \"id\":\"1441110c-1ece-4e45-abbf-ebf404f45f0a\",\n    \"capabilities\":{ \"platformName\":\"ios\",\"browserName\":\"safari\",\"automationName\":\"xcuitest\",\"platformVersion\":\"17.0\",\"deviceName\":\"iPhone 14\" }\n  },\n  ...\n]\n</code></pre>"},{"location":"commands/base-driver/#getsettings","title":"<code>getSettings</code>","text":"<p><code>GET</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"commands/base-driver/#response_16","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#updatesettings","title":"<code>updateSettings</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"commands/base-driver/#parameters_10","title":"Parameters","text":"Name Type Description <code>settings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"commands/base-driver/#response_17","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#getstatus","title":"<code>getStatus</code>","text":"<p><code>GET</code> <code>/status</code></p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p>"},{"location":"commands/base-driver/#examples","title":"Examples","text":""},{"location":"commands/base-driver/#javascript","title":"JavaScript","text":"<pre><code>// webdriver.io example\nawait driver.status();\n</code></pre>"},{"location":"commands/base-driver/#python","title":"Python","text":"<pre><code>driver.get_status()\n</code></pre>"},{"location":"commands/base-driver/#java","title":"Java","text":"<pre><code>driver.getStatus();\n</code></pre>"},{"location":"commands/base-driver/#ruby","title":"Ruby","text":"<pre><code># ruby_lib example\nremote_status\n\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"commands/base-driver/#response_18","title":"Response","text":"<p><code>Object</code></p>"},{"location":"commands/base-driver/#gettimeouts","title":"<code>getTimeouts</code>","text":"<p><code>GET</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"commands/base-driver/#response_19","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#timeouts","title":"<code>timeouts</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"commands/base-driver/#parameters_11","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms?</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"commands/base-driver/#response_20","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#implicitwait","title":"<code>implicitWait</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts/implicit_wait</code></p> <p>Set the implicit wait timeout</p> <p>Deprecated</p> <p>Please use the <code>/session/:sessionId/timeouts</code> endpoint instead</p> <p>Use <code>timeouts</code> instead</p>"},{"location":"commands/base-driver/#parameters_12","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"commands/base-driver/#response_21","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#logcustomevent","title":"<code>logCustomEvent</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/log_event</code></p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"commands/base-driver/#parameters_13","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"commands/base-driver/#response_22","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/base-driver/#reset","title":"<code>reset</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/app/reset</code></p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p>Deprecated</p> <p>Please use each driver's launch, activate, terminate or cleanup method.</p> <p>Use explicit session management commands instead</p>"},{"location":"commands/base-driver/#response_23","title":"Response","text":"<p><code>null</code></p>"},{"location":"commands/execute-driver-plugin/","title":"Plugin: execute-driver","text":""},{"location":"commands/execute-driver-plugin/#executedriverscript","title":"<code>executeDriverScript</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/execute_driver</code></p> <p>Implementation of a command within a plugin</p> <p>At minimum, <code>D</code> must be <code>ExternalDriver</code>, but a plugin can be more narrow about which drivers it supports.</p>"},{"location":"commands/execute-driver-plugin/#parameters","title":"Parameters","text":"Name Type <code>script</code> [script: string, scriptType: string, timeoutMs: number] <code>type?</code> [script: string, scriptType: string, timeoutMs: number]"},{"location":"commands/execute-driver-plugin/#response","title":"Response","text":"<p><code>unknown</code></p>"},{"location":"commands/images-plugin/","title":"Plugin: images","text":""},{"location":"commands/images-plugin/#compareimages","title":"<code>compareImages</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/compare_images</code></p>"},{"location":"commands/images-plugin/#parameters","title":"Parameters","text":"Name Type <code>mode</code> <code>any</code>[] <code>options?</code> <code>any</code>[]"},{"location":"commands/images-plugin/#response","title":"Response","text":"<p><code>ComparisonResult</code></p>"},{"location":"commands/images-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/images-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific element"},{"location":"commands/images-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/images-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/images-plugin/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific elements"},{"location":"commands/images-plugin/#response_2","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/relaxed-caps-plugin/","title":"Plugin: relaxed-caps","text":""},{"location":"commands/relaxed-caps-plugin/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"commands/relaxed-caps-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>any</code> the new session capabilities <code>requiredCapabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined)"},{"location":"commands/relaxed-caps-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The capabilities object representing the created session</p>"},{"location":"commands/universal-xml-plugin/","title":"Plugin: universal-xml","text":""},{"location":"commands/universal-xml-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"commands/universal-xml-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"commands/universal-xml-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"commands/universal-xml-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"commands/universal-xml-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"commands/universal-xml-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"commands/universal-xml-plugin/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"commands/universal-xml-plugin/#response_2","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"contributing/","title":"Contributing to Appium","text":"<p>Appium is open source, available under an Apache 2.0 license. Appium's copyright is held by the OpenJS Foundation, and Appium receives contributions from many companies across several software industries, regardless of their competitive status. (3rd-party drivers and plugins are available under the licenses provided by their authors.)</p> <p>As such, we welcome contributions! The project moves forward in relation to the investment of contributions of code, documentation, maintenance, and support from companies and volunteers.</p> <p>This section of Appium's documentation is for those who are interested in contributing to Appium's development. It contains developer overviews, guides, and notes. Use the navigation menu to find a specific topic. All the information in these guides assumes in-depth familiarity with Appium already.</p> <p>Warning</p> <p>Developer information may not be kept up to date as frequently as user-facing information, or it may be most relevant in its current form on the online repository, not in this published version. Always be sure to check the repo or discuss with maintainers. We're always happy to help new contributors get started!</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>The project offers a variety of ways to contribute, e.g.:</p> <ul> <li>contributing code</li> <li>improving documentation</li> <li>creating educational content (blog posts, tutorials, videos, etc.)</li> <li>spreading the good word about the project (e.g. via Twitter)</li> <li>filing bugs if you discover them while using Appium</li> <li>making feature requests if you are missing something in the project or help triaging bugs</li> <li>supporting users in the Appium forum</li> </ul>"},{"location":"contributing/config-system/","title":"Appium's Config System","text":"<p>Appium 2 supports configuration files. A configuration file is intended to have (nearly) 1:1 parity with command-line arguments. An end user can supply Appium 2 with a configuration file, CLI args, or both (the args have precedence over the config file).</p> <p>This document will be a technical overview of how the configuration system works. It is intended for Appium contributors, but will also explain the system's fundamental features.</p>"},{"location":"contributing/config-system/#reading-a-config-file","title":"Reading a Config File","text":"<p>A config file is a JSON, JavaScript, or YAML file which can be validated against a schema. By default, this file will be named <code>.appiumrc.{json,js,yaml,yml}</code> and should be in the root of the project which depends upon <code>appium</code>. Other filenames and locations are supported via the <code>--config &lt;file&gt;</code> flag. For obvious reasons, the <code>config</code> argument is disallowed within config files.</p> <p>In lieu of a separate file, configuration can be embedded in a project's <code>package.json</code> using the <code>appiumConfig</code> property, e.g.,:</p> <pre><code>{\n  \"appiumConfig\": {\n    \"server\": {\n      \"port\": 12345\n    }\n  }\n}\n</code></pre> <p>When an Appium server is started via the <code>appium</code> executable, the <code>init</code> function in <code>lib/main.js</code> will call into <code>lib/config-file.js</code> to load and/or search for a configuration file and in <code>package.json</code>.</p> <p>Note</p> <p>It is not an error if configuration isn't found!</p> <p>The <code>lilconfig</code> package provides the search &amp; load functionality; refer to its documentation for more information about the search paths. Additionally, Appium provides support for config files written in YAML via the package <code>yaml</code>.</p> <p>If a config file is found and successfully validated, the result will be merged with a set of defaults and any additionall CLI arguments. CLI arguments have precedence over config files, and config files have precedence over defaults.</p>"},{"location":"contributing/config-system/#validation","title":"Validation","text":"<p>The same system is used for both validation of config files and command-line arguments.</p> <p>The package <code>ajv</code> provides validation. Of course, to make <code>ajv</code> validate anything, it must be provided a schema.</p> <p>The base schema is a JSON Schema Draft-7-compliant object exported by <code>lib/schema/appium-config-schema.js</code>. This schema defines configuration native to Appium, and only concerns its behavior as a server; it does not define configuration for any other functionality (e.g., the <code>plugin</code> or <code>driver</code> subcommands).</p> <p>Warning</p> <p>Note that this file is the base schema; this will become painfully relevant.</p> <p>This file is is not a JSON file, because a) JSON is painful to work with for humans, b) is especially reviled by @jlipps, and c) <code>ajv</code> accepts objects, not JSON files.</p> <p>It is more straightforward to explain how config files are validated, so we'll start there.</p>"},{"location":"contributing/config-system/#validating-config-files","title":"Validating Config Files","text":"<p>When a config file is found (<code>lib/config-file.js</code>), it will call the <code>validate</code> function exported from <code>lib/schema/schema.js</code> with the contents of the config file. In turn, this asks <code>ajv</code> to validate the data against the schema that Appium has provided it.</p> <p>If the config file is invalid, errors will be generated to be displayed to the user. Finally, the <code>init</code> function will detect these errors, display them, and the process will exit.</p> <p>I hope that made sense, because this is the easy part.</p>"},{"location":"contributing/config-system/#validating-cli-arguments","title":"Validating CLI Arguments","text":"<p>As mentioned earlier, the same system is used for validating both config files and CLI arguments.</p> <p>Totally not judging, but Appium uses <code>argparse</code> for its CLI argument parsing. This package, and others like it, provides an API to define the arguments a command-line Node.js script accepts, and will ultimately return an object representation of the user-supplied arguments.</p> <p>Just as the schema defines what's allowed in a config file, it also defines what's allowed on the command-line.</p>"},{"location":"contributing/config-system/#defining-cli-arguments-via-schema","title":"Defining CLI Arguments via Schema","text":"<p>CLI arguments must be defined before their values can be validated.</p> <p>A JSON schema isn't a natural fit for defining CLI args--it needs some grease to make it work--but it's close enough that we can do so with an adapter and some custom metadata.</p> <p>In <code>lib/cli/parser.js</code>, there's a wrapper around <code>argparse</code>'s <code>ArgumentParser</code>; it's called (wait for it)... <code>ArgParser</code>. The wrapper exists because we're doing some custom things with <code>argparse</code>, but is has nothing to do with the schema directly.</p> <p>An <code>ArgParser</code> instance is created and its <code>parseArgs()</code> method is called with the raw CLI arguments. The definition of the accepted arguments comes from <code>lib/cli/args.js</code> in part--here, all of the arguments not intended for use with the <code>server</code> subcommand are hard-coded (e.g., the <code>driver</code> subcommand and its subcommands). <code>args.js</code> also contains a function <code>getServerArgs()</code>, which in turn calls into <code>toParserArgs</code> in <code>lib/schema/cli-args.js</code>. <code>lib/schema/cli-args.js</code> can be considered the \"adapter\" layer between <code>argparse</code> and the schema.</p> <p><code>toParserArgs</code> uses the <code>flattenSchema</code> function exported by <code>lib/schema/schema.js</code>, which \"squashes\" the schema into a key/value representation. Then, <code>toParserArgs</code> iterates over each key/value pair and \"converts\" it into a suitable <code>ArgumentOption</code> object for final handoff to <code>ArgParser</code>.</p> <p>This adapter (<code>cli-args.js</code>) is where most of the mess is hidden; let's explore this rat's nest a bit further.</p>"},{"location":"contributing/config-system/#cli-schema-incongruities","title":"CLI &amp; Schema Incongruities","text":"<p>The conversion algorithm (see function <code>subSchemaToArgDef</code> in <code>lib/schema/cli-args.js</code>) is mostly just hacks and special cases neatly packed into a function. Things that don't cleanly map from <code>argparse</code> to a JSON schema include, but are not limited to:</p> <ul> <li>A schema cannot natively express \"store the value of <code>--foo=&lt;value&gt;</code> in a property called <code>bar</code>\" in a schema (this corresponds to the <code>ArgumentOption['dest']</code> prop).</li> <li>A schema cannot natively express aliases; e.g., <code>--verbose</code> can also be <code>-v</code></li> <li>A schema <code>enum</code> is not restricted to multiple types, but <code>argparse</code>'s equivalent <code>ArgumentOption['choices']</code> prop is</li> <li>A schema does not know about <code>argparse</code>'s concept of \"actions\" (note that Appium is not currently using custom actions--though it did, and it could again).</li> <li><code>argparse</code> has no native type for <code>email</code>, <code>hostname</code>, <code>ipv4</code>, <code>uri</code> etc., and the schema does</li> <li>Schema validation only validates, it does not perform translation, transformation, or coercion (mostly). <code>argparse</code> allows this.</li> <li>Schemas allow the <code>null</code> type, for whatever reason. Ever pass <code>null</code> on the CLI?</li> <li><code>argparse</code> does not understand anything other than primitives; no objects, arrays, etc., and certainly not arrays of a particular type.</li> </ul> <p>All of the above cases and others are handled by the adapter.</p> <p>Warning</p> <p>Some decisions made in the adapter were arrived at via coin toss. If you are curious about why something is the way it is, it's likely that it had to do something.</p> <p>Let's look more closely at handling types.</p>"},{"location":"contributing/config-system/#argument-types-via-ajv","title":"Argument Types via <code>ajv</code>","text":"<p>While <code>argparse</code> allows consumers, via its API, to define the type of various arguments (e.g., a string, number, boolean flag, etc.), Appium mostly avoids these built-in types. Why is that? Well:</p> <ol> <li>We already know the type of an argument, because we've defined it in a schema.</li> <li><code>ajv</code> provides validation against a schema.</li> <li>A schema allows for greater expression of types, allowed values, etc., than <code>argparse</code> can provide natively.</li> <li>The expressiveness of a schema allows for better error messaging.</li> </ol> <p>To that end, the adapter eschews <code>argparse</code>'s built-in types (see allowed string values of <code>ArgumentOption['type']</code>) and instead abuses the ability to provide a function as a <code>type</code>. The exception is boolean flags, which do not have a <code>type</code>, but rather <code>action: 'store_true'</code>. The world may never know why.</p>"},{"location":"contributing/config-system/#types-as-functions","title":"Types as Functions","text":"<p>When a <code>type</code> is a function, the function performs both validation and coercion (if necessary). So what are these functions?</p> <p>Note: <code>type</code> is omitted (and thus not a function) from the <code>ArgumentOption</code> if the property type is <code>boolean</code>, and is instead provided an <code>action</code> property of <code>store_true</code>. Yes, this is weird. No, I don't know why.</p> <p>Well... it depends upon the schema. But generally speaking, we create a pipeline of functions, each corresponding to a keyword in the schema. Let's take the example of the <code>port</code> argument. In lieu of asking the OS which ports the <code>appium</code>-running user can bind to, this argument is expected to be an integer between 1 and 65535. This turns out to be two functions which we combine into a pipeline:</p> <ol> <li>Convert the value to an integer, if possible. Because every value in <code>process.argv</code> is a string, we must coerce if we want a number.</li> <li>Use <code>ajv</code> to validate the integer against the schema for <code>port</code>. A schema lets us define a range via the <code>minimum</code> and <code>maximum</code> keywords. Read more about how this works in</li> </ol> <p>Much like the config file validation, if errors are detected, Appium nicely tells the end-user and the process exits w/ some help text.</p> <p>For other arguments which are naturally of non-primitive types, things are not so straightforward.</p>"},{"location":"contributing/config-system/#transformers","title":"Transformers","text":"<p>Remember how <code>argparse</code> doesn't understand arrays? What if the most ergonomic way to express a value is, in fact, an array?</p> <p>Well, Appium can't accept an array on the CLI, even though it can accept one in the config file. But Appium can accept a comma-delimited string (a CSV \"line\"). Or a string filepath referring to a file which contains a delimited list. Either way: by the time the value gets out of the argument parser, it should be an array.</p> <p>And as mentioned above, the native facilities of a JSON schema cannot express this. However, it's possible to define a custom keyword which Appium can then detect and handle accordingly. So that's what Appium does.</p> <p>In this case, a custom keyword <code>appiumCliTransformer</code> is registered with <code>ajv</code>. The value of <code>appiumCliTransformer</code> (at the time of this writing) can be <code>csv</code> or <code>json</code>. In the base schema file, <code>appium-config-schema.js</code>, Appium uses <code>appiumCliTransformer: 'csv'</code> if this behavior is desired.</p> <p>Note</p> <p>Any property defined in the schema having type <code>array</code> will automatically uses the <code>csv</code> transformer. Likewise, a property having type <code>object</code> will use the <code>json</code> transformer. It's conceivable that <code>array</code> may want to use the <code>json</code> transformer, but otherwise, the presence of the <code>appiumCliTransformer</code> keyword on an <code>array</code>-or-<code>object</code>-typed property is not stricly necessary.</p> <p>The adapter (remember the adapter?) creates a pipeline function including a special \"CSV transformer\" (transformers are defined in <code>lib/schema/cli-transformers.js</code>), and uses this function as the <code>type</code> property of the <code>ArgumentOption</code> passed into <code>argparse</code>. In this case, the <code>type: 'array'</code> in the schema is ignored.</p> <p>Note</p> <p>The config file doesn't need to perform any complex transformation of values, because it naturally allows Appium to define exactly what it expects. So Appium does no post-processing of config file values.</p> <p>Properties that do not need this special treatment use <code>ajv</code> directly for validation. How this works requires some explanation, so that's next.</p>"},{"location":"contributing/config-system/#validation-of-individual-arguments-via-ajv","title":"Validation of Individual Arguments via <code>ajv</code>","text":"<p>When we think of a JSON schema, we tend to think, \"I have this JSON file and I want to validate it against the schema\". That's valid, and in fact Appium does just that with config files! However, Appium does not do this when validating arguments.</p> <p>Note</p> <p>During implementation, I was tempted to mash all of the arguments together into a config-file-like data structure and then validate it all at once. I think that would have been possible, but since an object full of CLI arguments is a flat key/value structure and the schema is not, this seemed like trouble.</p> <p>Instead, Appium validates a value against a specific property within the schema. To do this, it maintains a mapping between a CLI argument definition and its corresponding property. The mapping itself is a <code>Map</code> with a unique identifier for the argument as the key, and an <code>ArgSpec</code> (<code>lib/schema/arg-spec.js</code>) object as the value.</p> <p>An <code>ArgSpec</code> object stores the following metadata:</p> Property Name Description <code>name</code> Canonical name of the argument, corresponding to the property name in the schema. <code>extType?</code> <code>driver</code> or <code>plugin</code>, if appropriate <code>extName?</code> Extension name, if appropriate <code>ref</code> Computed <code>$id</code> of the property in the schema <code>arg</code> Argument as accepted on CLI, without leading dashes <code>dest</code> Property name in parsed arguments object (as returned by <code>argparse</code>'s <code>parse_args()</code>) <code>defaultValue?</code> Value of the <code>default</code> keyword in schema, if appropriate <p>When a schema is finalized, the <code>Map</code> is populated with <code>ArgSpec</code> objects for all known arguments.</p> <p>So when the adapter is creating the pipeline of functions for the argument's <code>type</code>, it already has an <code>ArgSpec</code> for the argument. It creates a function which calls <code>validate(value, ref)</code> (in <code>lib/schema/schema.js</code>) where <code>value</code> is whatever the user provided, and <code>ref</code> is the <code>ref</code> property of the <code>ArgSpec</code>. The concept is that <code>ajv</code> can validate using any <code>ref</code> it knows about; each property in a schema can be referenced by this <code>ref</code> whether it's defined or not. To help visualize, if a schema is:</p> <pre><code>{\n  \"$id\": \"my-schema.json\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"foo\": {\n      \"type\": \"number\"\n    }\n  }\n}\n</code></pre> <p>The <code>ref</code> of <code>foo</code> would be <code>my-schema.json#/properties/foo</code>. Assuming our <code>Ajv</code> instance knows about this <code>my-schema.json</code>, then we can call its <code>getSchema(ref)</code> method (which has a <code>schema</code> property, but is a misnomer nonetheless) to get a validation function; <code>validate(value, ref)</code> in <code>schema.js</code> calls this validation function.</p> <p>Note</p> <p>The schema spec says a schema author can supply an explicit <code>$id</code> keyword to override this; it's unsupported by Appium at this time. If needed, extension authors must carefully use <code>$ref</code> without custom <code>$id</code>s. It's highly unlikely an extension would have a schema so complicated as to need this, however; Appium itself doesn't even use <code>$ref</code> to define its own properties!</p> <p>Next, let's take a look at how Appium loads schemas. This actually happens before any argument validation.</p>"},{"location":"contributing/config-system/#schema-loading","title":"Schema Loading","text":"<p>Let's ignore extensions for a moment, and start with the base schema.</p> <p>When something first imports the <code>lib/schema/schema.js</code> module, an instance of an <code>AppiumSchema</code> is created. This is a singleton, and its methods are exported from the module (all of which are bound to the instance).</p> <p>The constructor does very little; it instantiates an <code>Ajv</code> instance and configures it with Appium's custom keywords and adds support for the <code>format</code> keyword via the ajv-formats module.</p> <p>Otherwise, the <code>AppiumSchema</code> instance does not interact with the <code>Ajv</code> instance until its <code>finalize()</code> method (exported as <code>finalizeSchema()</code>) is called. When this method is called, we're saying \"we are not going to add any more schemas; go ahead and create <code>ArgSpec</code> objects and register schemas with <code>ajv</code>\".</p> <p>When does finalization happen? Well:</p> <ol> <li>When the <code>appium</code> executable begins, it checks for and configures extensions (hand-wave) in <code>APPIUM_HOME</code>.</li> <li>Only then does it start to think about arguments--it instantiates an <code>ArgParser</code>, which (as you'll recall) runs the adapter to convert the schema to arguments.</li> <li>Finalization happens here--when creating the parser. Appium need the schema(s) to be registered with <code>ajv</code> in order to create validation functions for arguments.</li> <li>Thereafter, Appium parses the arguments with the <code>ArgParser</code>.</li> <li>Finally, decides what to do with the returned object.</li> </ol> <p>Without extensions, <code>finalize()</code> still knows about the Appium base schema (<code>appium-config-schema.js</code>), and just registers that. However, step 1. above is doing a lot of work, so let's look at how extensions come into play.</p>"},{"location":"contributing/config-system/#extension-support","title":"Extension Support","text":"<p>One of the design goals of this system is the following:</p> <p>An extension should be able to register custom CLI arguments with the Appium, and a user should be able to use them like any other argument.</p> <p>Previously, Appium 2 accepted arguments in this manner (via <code>--driverArgs</code>), but validation was hand-rolled and required extension implementors to use a custom API. It also required the user to awkwardly pass a JSON string as the configuration on the command-line. Further, no contextual help (via <code>--help</code>) existed for these arguments.</p> <p>Now, by providing a schema for its options, a driver or plugin can register CLI arguments and config file schemas with Appium.</p> <p>To register a schema, an extension must provide the <code>appium.schema</code> property in its <code>package.json</code>. The value may be a schema or a path to a schema. If the latter, the schema should be JSON or a CommonJS module (ESM not supported at this time, nor is YAML).</p> <p>For any property in this schema, the property will appear as a CLI argument of the form <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-&lt;property-name&gt;</code>. For example, if the <code>fake</code> driver provides a property <code>foo</code>, the argument will be <code>--driver-fake-foo</code>, and will show in <code>appium server --help</code> like any other CLI argument.</p> <p>The corresponding property in a config file would be <code>server.&lt;extension-type&gt;.&lt;extension-name&gt;.&lt;property-name&gt;</code>, e.g.:</p> <pre><code>{\n  \"server\": {\n    \"driver\": {\n      \"fake\": {\n        \"foo\": \"bar\"\n      }\n    }\n  }\n}\n</code></pre> <p>The naming convention described above avoids problems of one extension type having a name conflict with a different extension type.</p> <p>Note</p> <p>While an extension can provide aliases via <code>appiumCliAliases</code>, \"short\" flags are disallowed, since all arguments from extensions are prefixed with <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-</code>. The extension name and argument name will be kebab-cased for the CLI, according to Lodash's rules around kebab-casing.</p> <p>The schema object will look much like Appium's base schema, but it will only have top-level properties (nested properties are currently unsupported). Example:</p> <pre><code>{\n  \"title\": \"my rad schema for the cowabunga driver\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"fizz\": {\n      \"type\": \"string\",\n      \"default\": \"buzz\",\n      \"$comment\": \"corresponds to CLI --driver-cowabunga-fizz\"\n    }\n  }\n}\n</code></pre> <p>As written in a user's config file, this would be the <code>server.driver.cowabunga.fizz</code> property.</p> <p>When extensions are loaded, the <code>schema</code> property is verified and the schema is registered with the <code>AppiumSchema</code> (it is not registered with <code>Ajv</code> until <code>finalize()</code> is called).</p> <p>During finalization, each registered schema is added to the <code>Ajv</code> instance. The schema is assigned an <code>$id</code> based on the extension type and name (which overrides whatever the extension provides, if anything). Schemas are also forced to disallowed unknown arguments via the <code>additionalProperties: false</code> keyword.</p> <p>Behind the scenes, the base schema has <code>driver</code> and <code>plugin</code> properties which are objects. When finalized, a property is added to each--corresponding to an extension name--and the value of this property is a reference to the <code>$id</code> of a property in the extension schema. For example, the <code>server.driver</code> property will look like this:</p> <pre><code>{\n  \"driver\": {\n    \"cowabunga\": {\n      \"$ref\": \"driver-cowabunga.json\"\n    }\n  }\n}\n</code></pre> <p>This is why we call it the \"base\" schema--it is mutated when extensions provide schemas. The extension schemas are kept separately, but the references are added to the schema before it's ultimately added to <code>ajv</code>. This works because an <code>Ajv</code> instance understands references from any schema it knows about to any schema it knows about.</p> <p>Note</p> <p>This makes it impossible to provide a complete static schema for Appium and the installed extensions (as of Nov 5 2021). A static <code>.json</code> schema is generated from the base (via a Gulp task), but it does not contain any extension schemas. The static schema also has uses beyond Appium; e.g., IDEs can provide contextual error-checking of config files this way. Let's solve this?</p> <p>Just like how we look up the reference ID of a particular argument in the base schema, validation of arguments from extensions happens the exact same way. If the <code>cowabunga</code> driver has the schema ID <code>driver-cowabunga.json</code>, then the <code>fizz</code> property can be referenced from any schema registered with <code>ajv</code> via <code>driver-cowabunga.json#/properties/fizz</code>. \"Base\" schema arguments begin with <code>appium.json#properties/</code> instead.</p>"},{"location":"contributing/config-system/#development-environment-support","title":"Development Environment Support","text":"<p>During the flow of development, a couple extra tasks have been automated to maintain the base schema:</p> <ul> <li>As a post-transpilation step, a <code>lib/appium-config.schema.json</code> gets generated from</li> <li><code>lib/schema/appium-config-schema.js</code> (in addition to its CJS counterpart generated by Babel).</li> <li>This file is under version control. It ends up being copied to</li> <li><code>build/lib/appium-config.schema.json</code> in this step. A pre-commit hook (see</li> <li><code>scripts/generate-schema-declarations.js</code> in the root monorepo) generates</li> <li>a <code>types/appium-config-schema.d.ts</code> from the above JSON file. The types in <code>types/types.d.ts</code></li> <li>depend upon this file. This file is under version control.</li> </ul>"},{"location":"contributing/config-system/#custom-keyword-reference","title":"Custom Keyword Reference","text":"<p>Keywords are defined in <code>lib/schema/keywords.js</code>.</p> <ul> <li><code>appiumCliAliases</code>: allows a schema to express aliases (e.g., a CLI argument can be <code>--verbose</code> or <code>-v</code>). This is an array of strings. Strings shorter than three (3) characters will begin with a single dash (<code>-</code>) instead of a double-dash (<code>--</code>). Note that any argument provided by an extension will begin with a double-dash, because these are required to have the <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-</code> prefix.</li> <li><code>appiumCliDest</code>: allows a schema to specify a custom property name in the post-<code>argprase</code> arguments objects. If not set, this becomes a camelCased string.</li> <li><code>appiumCliDescription</code>: allows a schema to override the description of the argument when displayed on the command-line. This is useful paired with <code>appiumCliTransformer</code> (or <code>array</code>/<code>object</code>-typed properties), since there's a substantial difference between what a CLI-using user can provide vs. what a config-file-using user can provide.</li> <li><code>appiumCliTransformer</code>: currently a choice between <code>csv</code> and <code>json</code>. These are custom functions which post-process a value. They are not used when loading &amp; validating config files, but the idea should be that they result in the same object you'd get if you used whatever the config file wanted (e.g., an array of strings). <code>csv</code> is for comma-delimited strings and CSV files; <code>json</code> is for raw JSON strings and <code>.json</code> files.</li> <li><code>appiumCliIgnore</code>: If <code>true</code>, do not support this property on the CLI.</li> <li><code>appiumDeprecated</code>: If <code>true</code>, the property is considered \"deprecated\", and will be displayed as such to the user (e.g., in the <code>--help</code> output). Note the JSON Schema draft-2019-09 introduces a new keyword <code>deprecated</code> which we should use instead if upgrading to this metaschema. When doing so, <code>appiumDeprecated</code> should itself be marked as <code>deprecated</code>.</li> </ul>"},{"location":"contributing/develop/","title":"Contributing Code","text":"<p>To contribute to the Appium code base make sure to check out the Git repository.</p> <p>Info</p> <p>If you are VS Code user you can easily check out the project using Runme.</p> <p>It is advised to fork before cloning it to your system.</p> <pre><code>export GITHUB_USERNAME=&lt;your-username&gt;\ngit clone git@github.com:$GITHUB_USERNAME/appium.git\n</code></pre> <p>After cloning you can go ahead and install the project dependencies:</p> <pre><code>npm install\n</code></pre> <p>From here on there are several things you can do.</p>"},{"location":"contributing/develop/#watch-files","title":"Watch Files","text":"<p>When developing Appium code we have to watch all JavaScript and TypeScript files to re-compile them after every change. You can run this watch process via:</p> <pre><code>npm run dev\n</code></pre>"},{"location":"contributing/develop/#start-appium-in-dev-mode","title":"Start Appium in Dev-Mode","text":"<p>To test your changes you can run Appium in dev mode via:</p> <pre><code>npm start\n</code></pre>"},{"location":"contributing/develop/#run-tests","title":"Run Tests","text":"<p>The project maintains a set of different test variations you can run to verify the quality of the code.</p>"},{"location":"contributing/develop/#linting","title":"Linting","text":"<p>Appium uses <code>eslint</code> for static code analysis and linting. You can run these checks via:</p> <pre><code>npm run lint\n</code></pre>"},{"location":"contributing/develop/#unit","title":"Unit","text":"<pre><code>npm run test:unit\n</code></pre> <p>You can also run tests for specific workspaces, e.g.:</p> <pre><code>export APPIUM_WORKSPACE=@appium/doctor\nnpm run test:unit -w $APPIUM_WORKSPACE\n</code></pre>"},{"location":"contributing/develop/#smoke-and-e2e","title":"Smoke and E2E","text":"<pre><code>npm run test:slow\n</code></pre>"},{"location":"contributing/develop/#deploy-docs-locally","title":"Deploy Docs Locally","text":"<p>Our documentation system uses MKDocs and therefore requires Python to be installed on your system. You can run the docs by:</p> <pre><code># installing needed Python dependencies\npip install -r packages/docutils/requirements.txt\n# build the project\nnpm run build\n# run dev server\nnpm run dev:docs\n</code></pre> <p>You should be able to view the page at <code>http://127.0.0.1:8000/docs/en</code>:</p> <pre><code>open http://127.0.0.1:8000/docs/en\n</code></pre>"},{"location":"developing/","title":"Intro to Development","text":"<p>Appium 2 is built with a modular structure, which means that Appium extensions (drivers and plugins) are decoupled from the main Appium module, and you only need to install the extensions that you want to use. This modular structure also unlocks the ability to develop entirely new extensions!</p> <p>This section of the Appium documentation is intended to help aspiring developers with creating their own Appium extension:</p> <ul> <li>For creating a driver, see the Build Drivers page</li> <li>For creating a plugin, take a look at the Build Plugins page</li> <li>Drivers and plugins both need documentation, so check out the Build Documentation page</li> <li>For creating a doctor check, see the Building Doctor Checks page</li> </ul>"},{"location":"developing/build-docs/","title":"Building Documentation","text":"<p>Once you've built a driver or built a plugin for Appium, you will hopefully want to document how that extension works for your users. The most basic way of doing this is to write up a quick <code>README.md</code> and keep it in the root of your project's repository. However, this can involve a lot of effort.</p> <p>The Appium project has built tools to help with this, and we've packaged up these tools so our ecosystem developers building drivers and plugins can also use them. The best way to get going with these tools is probably to look at an existing Appium driver repo to see how it's done, for example the XCUITest driver repo. But this guide will outline the basic approach.</p>"},{"location":"developing/build-docs/#conceptual-architecture","title":"Conceptual architecture","text":"<p>Appium settled on MkDocs as a Markdown-based documentation site generator. It uses a Python toolchain (and not Node.js), but it turned out to be the best option for our purposes. You can adjust this, but by default Appium's utilities also assume that you'll be using the mkdocs-material theme/extension for MkDocs.</p> <p>In order to make different versions of your docs available (one for each minor release of your extension, typically), we also bundle Mike.</p> <p>From here, building a basic docs site is as easy as collecting your Markdown files together and defining how you want them to be organized.</p>"},{"location":"developing/build-docs/#prerequisites","title":"Prerequisites","text":"<p>To take advantage of Appium's documentation utilities, you'll need to install:</p> <ul> <li>Python v3+</li> <li>pip (this may be installed automatically with Python)</li> <li> <p>The <code>@appium/docutils</code> package:</p> <pre><code>npm install --save-dev @appium/docutils\n</code></pre> </li> </ul>"},{"location":"developing/build-docs/#initializing-an-extension-for-building-docs","title":"Initializing an Extension for Building Docs","text":"<p>To prepare your extension for generating documentation, run the following command:</p> <pre><code>npx appium-docs init\n</code></pre> <p>This will:</p> <ol> <li>Create a <code>tsconfig.json</code> if one does not already exist. This is necessary even if your extension is not written in TypeScript.</li> <li>Create a <code>mkdocs.yml</code> with the necessary configuration for MkDocs.</li> </ol>"},{"location":"developing/build-docs/#documenting-your-extension","title":"Documenting Your Extension","text":"<p>At this point, you can begin documenting your extension. By default, MkDocs will look for Markdown files in the <code>docs</code> directory. You can therefore create your Markdown documentation files, place them in <code>docs</code>, and add links to these files in <code>mkdocs.yml</code>.</p> <p>Refer to the MkDocs documentation for information on how to organize and structure your documentation. </p>"},{"location":"developing/build-docs/#building-the-docs","title":"Building the Docs","text":"<p>At this point, you can use the <code>appium-docs</code> CLI tool. Run this tool with no arguments to get the full help output and see all the available subcommands and parameters. Here are a few usage examples:</p> <pre><code># Generate reference and build the mkdocs site into the site dir\nnpx appium-docs build\n\n# Same as build, but host the docs on a local dev server\n# and watch for changes and rebuild when files change\nnpx appium-docs build --serve\n\n# Build the docs and deploy them with mike versioning to the docs-site branch\n# using the included commit message.\n# This is particularly useful for pushing content to a GitHub pages branch!\nnpx appium-docs build \\\n  --deploy \\\n  -b docs-site \\\n  -m 'docs: auto-build docs for appium-xcuitest-driver@%s'\n</code></pre>"},{"location":"developing/build-doctor-checks/","title":"Building Doctor Checks","text":"<p>The idea of Appium Doctor is to assist users with driver or plugin preconditions setup. Sometimes such preconditions might be quite complicated and require non-trivial technical knowledge. Doctor checks, which are vanilla Node.js class instances written by extension authors, simplify the setup process by automating diagnostics and possible fixes for the found issues. These checks might also be interactive to ensure better usage experience.</p> <p>This tutorial is supposed to be used by plugin or driver authors that would like to help their users to deal with complicated setup or configuration steps.</p>"},{"location":"developing/build-doctor-checks/#adding-doctor-checks","title":"Adding Doctor Checks","text":""},{"location":"developing/build-doctor-checks/#typing-requirements","title":"Typing Requirements","text":"<p>The term <code>Doctor Check</code> literally describes a single javascript class instance that implements the IDoctorCheck interface. The interface defines the following methods and properties:</p> <ul> <li><code>diagnose(): Promise&lt;DoctorCheckResult&gt;</code>: Contains the code to diagnose a possible issue</li> <li><code>fix(): Promise&lt;string|null&gt;</code>: Either fixes the actual problem if <code>hasAutofix()</code> returns true or   returns a string description for possible manual fixes. If this method throws an exception named   <code>FixSkippedError</code> and <code>hasAutofix()</code> returns true then the result of the method invocation   is going to be ignored.</li> <li><code>hasAutofix(): boolean</code>: Whether calling <code>fix()</code> would resolve the found issue</li> <li><code>isOptional(): boolean</code>: Whether the found issue can be ignored and is not a showstopper</li> <li><code>log: AppiumLogger</code>: May be used for logging. This property may be assigned   by the instance itself or by the Appium server if it is left unassigned.</li> </ul> <p>The <code>DoctorCheckResult</code> object returned by the <code>diagnose()</code> method must contain the following properties:</p> <ul> <li><code>ok: boolean</code>: Whether the diagnosis found no issues</li> <li><code>optional: boolean</code>: Whether the diagnosed issue is safe to ignore</li> <li><code>message: string</code>: The text message describing the diagnostic result</li> </ul>"},{"location":"developing/build-doctor-checks/#manifest-requirements","title":"Manifest Requirements","text":"<p>A single extension may export multiple Doctor checks to Appium. In order for these checks to be properly picked up by the server CLI after the corresponding extension is installed they might be listed in the package .json manifest under the <code>appium.doctor.checks</code> section similar to the definition below:</p> <pre><code>  // ...\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\",\n    \"schema\": \"./build/lib/fake-driver-schema.js\",\n    \"scripts\": {\n      \"fake-error\": \"./build/lib/scripts/fake-error.js\",\n      \"fake-success\": \"./build/lib/scripts/fake-success.js\",\n      \"fake-stdin\": \"./build/lib/scripts/fake-stdin.js\"\n    },\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/fake1.js\",\n        \"./doctor/fake2.js\"\n        // ...\n      ]\n    }\n  },\n  // ...\n</code></pre> <p>Also, it makes sense to include the @appium/types import to the package dev dependencies.</p>"},{"location":"developing/build-doctor-checks/#implementation-example","title":"Implementation Example","text":"<p>The below example is a \"raw\" Node.JS implementation that does not use any transpilation:</p> <pre><code>const {fs, doctor} = require('@appium/support');\n\n/** @satisfies {import('@appium/types').IDoctorCheck} */\nclass EnvVarAndPathCheck {\n  /**\n   * @param {string} varName\n   */\n  constructor(varName) {\n    this.varName = varName;\n  }\n\n  async diagnose() {\n    const varValue = process.env[this.varName];\n    if (typeof varValue === 'undefined') {\n      return doctor.nok(`${this.varName} environment variable is NOT set!`);\n    }\n\n    if (await fs.exists(varValue)) {\n      return doctor.ok(`${this.varName} is set to: ${varValue}`);\n    }\n\n    return doctor.nok(`${this.varName} is set to '${varValue}' but this is NOT a valid path!`);\n  }\n\n  async fix() {\n    return (\n      `Make sure the environment variable ${this.varName} is properly configured for the Appium server process`\n    );\n  }\n\n  hasAutofix() {\n    return false;\n  }\n\n  isOptional() {\n    return false;\n  }\n}\n\nconst androidHomeCheck = new EnvVarAndPathCheck('ANDROID_HOME');\n\nmodule.exports = {androidHomeCheck};\n\n/**\n * @typedef {import('@appium/types').DoctorCheckResult} CheckResult\n */\n</code></pre> <p>This file could be saved as <code>doctor/android-home-check.js</code> and then added to the package.json manifest as</p> <pre><code>  // ...\n  \"appium\": {\n    // ...\n    \"doctor\": {\n      \"checks\": [\n        \"./doctor/android-home-check.js\",\n      ]\n    }\n    // ...\n  },\n  // ...\n</code></pre>"},{"location":"developing/build-drivers/","title":"\u6784\u5efa\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f","text":"<p>Appium \u200b\u5e0c\u671b\u200b\u8ba9\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5f00\u53d1\u200b\u81ea\u5df1\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b,  \u200b\u4f5c\u4e3a\u200bAppium\u200b\u751f\u6001\u7cfb\u7edf\u200b\u4e00\u90e8\u5206\u200b.  \u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u89e3\u91ca\u200b\u6240\u200b\u6d89\u53ca\u200b\u7684\u200b\u5185\u5bb9\u200b\u4ee5\u53ca\u200b \u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b Appium \u200b\u63d0\u4f9b\u200b\u7684\u200b\u5de5\u5177\u200b\u5b8c\u6210\u200b\u5404\u79cd\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5f00\u53d1\u200b\u4efb\u52a1\u200b.  \u200b\u672c\u200b\u6307\u5357\u200b\u5047\u5b9a\u200b\u60a8\u200b (1) \u200b\u7cbe\u901a\u200bAppium, (2) \u200b\u662f\u200b\u4e00\u4e2a\u200b\u79f0\u804c\u200b\u7684\u200bNode.js\u200b\u5f00\u53d1\u4eba\u5458\u200b,  \u200b\u5e76\u4e14\u200b(3)\u200b\u60a8\u200b\u5df2\u200b\u9605\u8bfb\u200b\u5e76\u200b\u7406\u89e3\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4ecb\u7ecd\u200b.</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u662f\u200b\u8fd9\u6837\u200b\u7684\u200b, \u200b\u597d\u68d2\u200b!\u200b\u672c\u200b\u6307\u5357\u200b\u5c06\u200b\u52a9\u60a8\u200b\u8d77\u6b65\u200b.</p>"},{"location":"developing/build-drivers/#_1","title":"\u521b\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e4b\u524d","text":"<p>\u200b\u5728\u200b\u60a8\u200b\u5f00\u59cb\u200b\u5b9e\u73b0\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e4b\u524d\u200b, \u200b\u8bf7\u200b\u52a1\u5fc5\u200b\u89e3\u51b3\u200b\u4e00\u4e9b\u200b\u95ee\u9898\u200b.  \u200b\u4f8b\u5982\u200b, \u200b\u60a8\u200b\u9700\u8981\u200b\u77e5\u9053\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5c06\u200b\u6267\u884c\u200b\u7684\u200b\u64cd\u4f5c\u200b.  \u200b\u5176\u200b\u8bd5\u56fe\u200b\u66b4\u9732\u200b\u4e8e\u200b\u54ea\u4e2a\u200b\u5e73\u53f0\u200bWebDriver\u200b\u81ea\u52a8\u5316\u200b?</p> <p>Appium \u200b\u4e0d\u4f1a\u200b\u795e\u5947\u200b\u5730\u200b\u8d4b\u4e88\u200b\u60a8\u200b\u81ea\u52a8\u5316\u200b\u4efb\u4f55\u200b\u5e73\u53f0\u200b\u7684\u200b\u80fd\u529b\u200b.  \u200b\u5b83\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u53ea\u662f\u200b\u7ed9\u200b\u4f60\u200b\u4e00\u5957\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b WebDriver \u200b\u534f\u8bae\u200b\u7684\u200b\u4fbf\u6377\u200b\u5de5\u5177\u200b.  \u200b\u56e0\u6b64\u200b, \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u521b\u5efa\u200b, \u200b\u4f8b\u5982\u200b,  \u200b\u4f5c\u4e3a\u200b\u65b0\u200b\u5e94\u7528\u200b\u5e73\u53f0\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b,  \u200b\u60a8\u200b\u9700\u8981\u200b\u77e5\u9053\u200b, \u200b\u6ca1\u6709\u200b Appium\u200b\u7684\u200b\u524d\u63d0\u200b\u4e0b\u200b\u5982\u4f55\u200b\u5728\u200b\u8be5\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u81ea\u52a8\u5316\u200b\u5e94\u7528\u200b.</p> <p>\u200b\u8fd9\u200b\u901a\u5e38\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u9700\u8981\u200b\u975e\u5e38\u200b\u719f\u6089\u200b\u7ed9\u5b9a\u200b\u5e73\u53f0\u200b\u7684\u200b\u5e94\u7528\u200b\u7a0b\u5e8f\u5f00\u53d1\u200b. \u200b\u5e76\u4e14\u200b \u200b\u8fd9\u200b\u901a\u5e38\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u5c06\u200b\u4f9d\u8d56\u200b\u5e73\u53f0\u200b\u4f9b\u5e94\u5546\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5de5\u5177\u200b\u6216\u200bSDK.</p> <p>\u200b\u57fa\u672c\u4e0a\u200b, \u200b\u5982\u679c\u200b\u60a8\u200b\u65e0\u6cd5\u56de\u7b54\u200b\u95ee\u9898\u200b \"\u200b\u6211\u200b\u5c06\u200b\u5982\u4f55\u200b\u542f\u52a8\u200b, \u200b\u8fdc\u7a0b\u200b\u89e6\u53d1\u200b\u884c\u4e3a\u200b, \u200b\u4ee5\u53ca\u200b \u200b\u4ece\u200b\u57fa\u4e8e\u200b\u6b64\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u4ece\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8bfb\u53d6\u200b\u72b6\u6001\u200b?\" \u200b\u90a3\u4e48\u200b\u60a8\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u51c6\u5907\u200b\u597d\u200b\u7f16\u5199\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b. \u200b\u786e\u4fdd\u200b\u505a\u8fc7\u200b\u8c03\u7814\u200b\u80fd\u591f\u200b\u56de\u7b54\u200b\u4e0a\u8ff0\u200b\u95ee\u9898\u200b, \u200b\u8fd9\u6837\u200b\u60a8\u200b\u5c31\u200b \u200b\u6709\u200b \u200b\u4e86\u200b\u7ee7\u7eed\u200b\u7684\u200b\u65b9\u5411\u200b. \u200b\u4e00\u65e6\u200b\u5982\u6b64\u200b,  \u200b\u7f16\u7801\u200b\u5e76\u200b\u4f7f\u200b\u505a\u51fa\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53d8\u6210\u200b\u53ef\u80fd\u200b, \u200b\u5c31\u200b\u5e94\u8be5\u200b\u662f\u200b\u7b80\u5355\u200b\u7684\u200b\u90e8\u5206\u200b\u4e86\u200b!</p>"},{"location":"developing/build-drivers/#_2","title":"\u8981\u200b\u53c2\u8003\u200b\u7684\u200b\u5176\u4ed6\u200b\u9a71\u52a8\u7a0b\u5e8f","text":"<p>\u200b\u6784\u5efa\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6700\u68d2\u200b\u7684\u200b\u4e8b\u60c5\u200b\u4e4b\u4e00\u200b\u662f\u200b,  \u200b\u5df2\u7ecf\u200b\u6709\u200b\u8bb8\u591a\u200b\u5f00\u6e90\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u4ee5\u200b\u4f9b\u53c2\u8003\u200b.  \u200b\u6709\u200b\u4e00\u4e2a\u200b \u200b\u5047\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b \u200b\u793a\u4f8b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b,  \u200b\u5176\u4e2d\u200b\u9664\u4e86\u200b\u5c55\u793a\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\u63cf\u8ff0\u200b\u7684\u200b\u4e00\u4e9b\u200b\u5185\u5bb9\u200b\u5916\u200b, \u200b\u57fa\u672c\u4e0a\u200b\u4ec0\u4e48\u200b\u90fd\u200b\u4e0d\u200b\u505a\u200b.</p> <p>\u200b\u5f53\u7136\u200b, Appium \u200b\u7684\u200b\u6240\u6709\u200b\u5b98\u65b9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u90fd\u200b\u662f\u200b\u5f00\u6e90\u200b\u7684\u200b,  \u200b\u53ef\u200b\u5728\u200b\u8be5\u9879\u200b\u76ee\u7684\u200b GitHub \u200b\u7ec4\u7ec7\u200b\u7684\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u627e\u5230\u200b.  \u200b\u56e0\u6b64\u200b, \u200b\u5982\u679c\u200b\u4f60\u200b\u53d1\u73b0\u81ea\u5df1\u200b\u95ee\u200b, \"\u200b\u53f8\u673a\u200b\u5982\u4f55\u200b\u505a\u200bX?\", \u200b\u9605\u8bfb\u200b\u8fd9\u4e9b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u4ee3\u7801\u200b! \u200b\u5982\u679c\u200b\u4f60\u200b\u88ab\u200b\u5361\u4f4f\u200b\u4e86\u200b, \u200b\u4e5f\u200b\u4e0d\u8981\u200b\u5bb3\u6015\u200b\u5411\u200bAppium\u200b\u5f00\u53d1\u4eba\u5458\u200b\u63d0\u95ee\u200b; \u200b\u6211\u4eec\u200b\u603b\u662f\u200b\u5f88\u200b\u4e50\u610f\u200b\u5e2e\u52a9\u200b\u786e\u4fdd\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5f00\u53d1\u200b\u4f53\u9a8c\u200b\u826f\u597d\u200b!</p>"},{"location":"developing/build-drivers/#appium","title":"Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u57fa\u672c\u200b\u8981\u6c42","text":"<p>\u200b\u8fd9\u4e9b\u200b\u662f\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5fc5\u987b\u200b\u6267\u884c\u200b (\u200b\u6216\u200b\u6210\u4e3a\u200b) \u200b\u7684\u200b\u64cd\u4f5c\u200b, \u200b\u5982\u679c\u200b\u60a8\u200b\u5e0c\u671b\u200b\u5b83\u200b\u6210\u4e3a\u200b\u6709\u6548\u200b\u7684\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.</p>"},{"location":"developing/build-drivers/#appium-nodejs","title":"\u5e26\u6709\u200b Appium \u200b\u6269\u5c55\u200b\u5143\u200b\u6570\u636e\u200b\u7684\u200b Node.js \u200b\u5305","text":"<p>\u200b\u6240\u6709\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u57fa\u672c\u4e0a\u200b\u90fd\u200b\u662f\u200b Node.js \u200b\u8f6f\u4ef6\u5305\u200b,  \u200b\u56e0\u6b64\u200b\u5fc5\u987b\u200b\u5177\u6709\u200b\u6709\u6548\u200b\u7684\u200b<code>package.json</code>.  \u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0d\u200b \u200b\u9650\u4e8e\u200b  Node.js,  \u200b\u4f46\u200b\u5b83\u200b\u5fc5\u987b\u200b\u63d0\u4f9b\u200b\u7528\u200b Node.js \u200b\u7f16\u5199\u200b\u7684\u200b\u9002\u914d\u5668\u200b\u4ee5\u4fbf\u200b Appium \u200b\u53ef\u4ee5\u200b\u52a0\u8f7d\u200b\u5b83\u200b. </p> <p>\u200b\u60a8\u200b\u7684\u200b <code>package.json</code> \u200b\u5fc5\u987b\u200b\u5305\u542b\u200b <code>appium</code> \u200b\u4f5c\u4e3a\u200b <code>peerDependency</code>.  \u200b\u5bf9\u200b\u4f9d\u8d56\u200b\u9879\u200b\u7248\u672c\u200b\u5e94\u200b\u5c3d\u53ef\u80fd\u200b\u5bbd\u677e\u200b (\u200b\u9664\u975e\u200b\u60a8\u200b\u78b0\u5de7\u200b\u77e5\u9053\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ea\u4f1a\u200b \u200b\u9002\u7528\u200b\u4e8e\u200b\u67d0\u4e9b\u200b\u7248\u672c\u200b\u7684\u200b Appium). \u200b\u4f8b\u5982\u200b, \u200b\u9488\u5bf9\u200bAppium 2.0, \u200b\u5927\u81f4\u200b\u4e0a\u200b\u662f\u200b <code>^2.0.0</code>, \u200b\u58f0\u660e\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u9002\u7528\u200b\u4e8e\u200b\u4ee5\u200b 2.x \u200b\u5f00\u5934\u200b\u7684\u200b\u4efb\u4f55\u200b\u7248\u672c\u200b\u7684\u200b Appium.</p> <p>\u200b\u60a8\u200b\u7684\u200b <code>package.json</code> \u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b <code>appium</code> \u200b\u5b57\u200b\u6bb5\u200b,  \u200b\u5982\u4e0b\u200b\u6240\u793a\u200b(\u200b\u6211\u4eec\u200b\u79f0\u4e4b\u4e3a\u200b 'Appium\u200b\u6269\u5c55\u200b\u5143\u200b\u6570\u636e\u200b'):</p> <pre><code>```json\n{\n  ...,\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\"\n  },\n  ...\n}\n```\n</code></pre> <p>\u200b\u5fc5\u586b\u200b\u5b50\u5b57\u200b\u6bb5\u200b\u4e3a\u200b:</p> <ul> <li><code>driverName</code>: \u200b\u8fd9\u200b\u5e94\u8be5\u200b\u662f\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u77ed\u200b\u540d\u79f0\u200b.</li> <li><code>automationName</code>: \u200b\u8fd9\u200b\u5e94\u8be5\u200b\u662f\u200b\u7528\u6237\u200b\u544a\u8bc9\u200b Appium \u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7528\u4e8e\u200b\u5176\u200b <code>appium:automationName</code>\u200b\u529f\u80fd\u200b\u7684\u200b\u5b57\u7b26\u4e32\u200b.</li> <li><code>platformNames</code>: \u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u5e73\u53f0\u200b\u540d\u79f0\u200b\u7684\u200b\u6570\u7ec4\u200b, \u200b\u8fd9\u4e9b\u200b\u540d\u79f0\u200b\u88ab\u200b\u8ba4\u4e3a\u200b\u5bf9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6709\u6548\u200b.    \u200b\u5f53\u200b\u7528\u6237\u200b\u53d1\u9001\u200b <code>platformName</code> \u200b\u529f\u80fd\u200b\u4ee5\u200b\u542f\u52a8\u200b\u4f1a\u8bdd\u200b\u65f6\u200b, \u200b\u5b83\u200b\u5fc5\u987b\u200b\u5305\u542b\u200b\u5728\u200b   \u200b\u6b64\u200b\u5217\u8868\u200b\u4f9b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5904\u7406\u200b\u4f1a\u8bdd\u200b. \u200b\u5df2\u77e5\u200b\u7684\u200b\u5e73\u53f0\u200b\u540d\u79f0\u200b\u5b57\u7b26\u4e32\u200b\u5305\u62ec\u200b:<code>iOS</code>,   <code>tvOS</code>, <code>macOS</code>, <code>Windows</code>, <code>Android</code>.</li> <li><code>mainClass</code>: \u200b\u8fd9\u662f\u200b\u6765\u81ea\u200b <code>main</code> \u200b\u5b57\u6bb5\u200b\u7684\u200b\u547d\u540d\u200b\u5bfc\u51fa\u200b(\u200b\u91c7\u7528\u200b CommonJS \u200b\u6837\u5f0f\u200b). \u200b\u5b83\u200b\u5fc5\u987b\u200b\u662f\u200b   \u200b\u6269\u5c55\u200b Appium \u200b\u7684\u200b <code>BaseDriver</code> \u200b\u7684\u200b\u7c7b\u200b (\u200b\u89c1\u4e0b\u6587\u200b).</li> </ul>"},{"location":"developing/build-drivers/#appium-basedriver","title":"\u6269\u5c55\u200b Appium \u200b\u7684\u200b <code>BaseDriver</code> \u200b\u7c7b","text":"<p>\u200b\u6700\u7ec8\u200b, \u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4f1a\u200b\u66f4\u200b\u5bb9\u6613\u200b\u7f16\u5199\u200b,  \u200b\u56e0\u4e3a\u200b\u5b9e\u73b0\u200bWebDriver \u200b\u534f\u8bae\u200b\u548c\u200b\u5904\u7406\u200b\u67d0\u4e9b\u200b\u5e38\u89c1\u200b\u903b\u8f91\u200b\u5df2\u7ecf\u200b\u7531\u200b Appium \u200b\u8d1f\u8d23\u200b.  \u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u88ab\u200b\u7f16\u7801\u200b\u4e3a\u200b Appium \u200b\u5bfc\u51fa\u200b\u7c7b\u4ee5\u200b\u4f9b\u200b\u60a8\u200b\u4f7f\u7528\u200b, \u200b\u79f0\u4e3a\u200b <code>BaseDriver</code>.  \u200b\u5176\u200b\u88ab\u200b\u4ece\u200b <code>appium/driver</code>\u200b\u4e2d\u200b\u5bfc\u51fa\u200b,  \u200b\u56e0\u6b64\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u4e9b\u200b\u6837\u5f0f\u200b\u4e4b\u4e00\u200b\u6765\u200b\u5bfc\u5165\u200b\u5b83\u200b\u5e76\u200b\u521b\u5efa\u200b \u200b\u81ea\u5df1\u200b\u7684\u200b \u200b\u7c7b\u4ee5\u200b\u6269\u5c55\u200b:</p> <pre><code>import {BaseDriver} from 'appium/driver';\n// or: const {BaseDriver} = require('appium/driver');\n\nexport class MyDriver extends BaseDriver {\n}\n</code></pre>"},{"location":"developing/build-drivers/#_3","title":"\u4f7f\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u7528","text":"<p>\u200b\u57fa\u672c\u4e0a\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b!\u200b\u4f7f\u7528\u200b Node.js \u200b\u5305\u200b\u5bfc\u51fa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7c7b\u200b\u5e76\u200b\u4f7f\u7528\u200b\u6b63\u786e\u200b\u7684\u200b Appium \u200b\u6269\u5c55\u200b\u5143\u200b\u6570\u636e\u200b, \u200b\u60a8\u200b\u5df2\u7ecf\u200b\u6709\u200b\u4e86\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b! \u200b\u73b0\u5728\u200b\u5b83\u200b\u4e0d\u200b \u200b\u505a\u200b \u200b\u4efb\u4f55\u200b\u4e8b\u60c5\u200b, \u200b\u4f46\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b Appium \u200b\u4e2d\u200b\u52a0\u8f7d\u200b\u5b83\u200b,  \u200b\u4f7f\u7528\u200b\u5b83\u200b\u542f\u52a8\u200b\u548c\u200b\u505c\u6b62\u200b\u4f1a\u8bdd\u200b, \u200b\u7b49\u7b49\u200b...</p> <p>\u200b\u8981\u200b\u4f7f\u200b\u5176\u200b\u53ef\u4f9b\u200b\u7528\u6237\u200b\u4f7f\u7528\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b NPM \u200b\u53d1\u5e03\u200b\u5b83\u200b.  \u200b\u5f53\u200b\u60a8\u200b\u8fd9\u6837\u200b\u505a\u65f6\u200b, \u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5c06\u200b\u53ef\u200b\u901a\u8fc7\u200b Appium CLI \u200b\u5b89\u88c5\u200b:</p> <pre><code>appium driver install --source=npm &lt;driver-package-on-npm&gt;\n</code></pre> <p>\u200b\u5f53\u7136\u200b, \u200b\u6700\u597d\u200b\u5148\u200b\u6d4b\u8bd5\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.  \u200b\u4e86\u89e3\u200b\u5176\u200b\u5728\u200b Appium \u200b\u4e2d\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5148\u200b\u5728\u200b\u672c\u5730\u200b\u5b89\u88c5\u200b:</p> <pre><code>appium driver install --source=local /path/to/your/driver\n</code></pre>"},{"location":"developing/build-drivers/#_4","title":"\u5f00\u53d1\u200b\u9a71\u52a8\u7a0b\u5e8f","text":"<p>\u200b\u5982\u4f55\u200b\u5f00\u53d1\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b.  \u200b\u4f46\u662f\u200b, \u200b\u4ece\u200bAppium\u200b\u5185\u90e8\u200b\u8fd0\u884c\u200b\u5f88\u200b\u65b9\u4fbf\u200b, \u200b\u65e0\u9700\u200b\u8fdb\u884c\u200b\u5927\u91cf\u200b\u53d1\u5e03\u200b\u548c\u200b\u5b89\u88c5\u200b.  \u200b\u6700\u200b\u76f4\u63a5\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u200b\u5c06\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b Appium \u200b\u4f5c\u4e3a\u200b <code>devDependency</code>\u200b\u5305\u542b\u200b\u5728\u5185\u200b,  \u200b\u7136\u540e\u200b\u518d\u200b\u5305\u62ec\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b, \u200b\u4f8b\u5982\u200b\u8fd9\u6837\u200b:</p> <pre><code>{\n    \"devDependencies\": {\n        ...,\n        \"appium\": \"^2.0.0\",\n        \"your-driver\": \"file:.\",\n        ...\n    }\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u672c\u5730\u200b\u8fd0\u884c\u200b Appium (<code>npm exec appium</code> \u200b\u6216\u200b <code>npx appium</code>), \u200b\u5e76\u4e14\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u662f\u200b\u4f5c\u4e3a\u200b\u4f9d\u8d56\u200b\u9879\u200b\u4e0e\u200b\u5b83\u200b\u4e00\u8d77\u200b\u5217\u51fa\u200b, \u200b\u5b83\u200b\u5c06\u200b\u81ea\u52a8\u200b \"\u200b\u5b89\u88c5\u200b\" \u200b\u5e76\u200b\u53ef\u7528\u200b.  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u8bbe\u8ba1\u200b\u60a8\u200b\u7684\u200b E2E \u200b\u6d4b\u8bd5\u200b, \u200b\u6216\u8005\u200b\u82e5\u200b\u60a8\u200b\u5728\u200b Node.js \u200b\u4e2d\u200b\u7f16\u5199\u200b\u5b83\u4eec\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7b80\u5355\u200b\u5730\u200b\u5bfc\u5165\u200bAppium \u200b\u7684\u200b\u542f\u52a8\u200b\u670d\u52a1\u5668\u200b\u65b9\u6cd5\u200b, \u200b\u7528\u4e8e\u200b\u5904\u7406\u200b Node \u200b\u4e2d\u200b Appium \u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u542f\u52a8\u200b\u548c\u200b\u505c\u6b62\u200b.  (TODO: \u200b\u51c6\u5907\u200b\u597d\u540e\u200b, \u200b\u5728\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e2d\u200b\u5f15\u7528\u200b\u6b64\u200b\u5b9e\u73b0\u200b).</p> <p>\u200b\u4f7f\u7528\u200b\u73b0\u6709\u200b Appium \u200b\u670d\u52a1\u5668\u8fdb\u884c\u200b\u672c\u5730\u200b\u5f00\u53d1\u200b\u7684\u200b\u53e6\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u662f\u200b,  \u200b\u7b80\u5316\u200b\u5b89\u88c5\u200b\u60a8\u200b\u7684\u200b\u672c\u5730\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b:</p> <pre><code>appium driver install --source=local /path/to/your/driver/dev/dir\n</code></pre>"},{"location":"developing/build-drivers/#_5","title":"\u6807\u51c6\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5b9e\u73b0\u200b\u7406\u5ff5","text":"<p>\u200b\u8fd9\u4e9b\u200b\u662f\u200b\u521b\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u65f6\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u81ea\u5df1\u200b\u60f3\u8981\u200b\u505a\u200b\u7684\u200b\u4e8b\u60c5\u200b.</p>"},{"location":"developing/build-drivers/#_6","title":"\u5728\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u72b6\u6001","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u81ea\u5df1\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b,  \u200b\u4f60\u200b\u9700\u8981\u200b\u8c03\u7528\u200b <code>super</code> \u200b\u6765\u200b\u786e\u4fdd\u200b\u6240\u6709\u200b\u6807\u51c6\u72b6\u6001\u200b\u8bbe\u7f6e\u200b\u6b63\u786e\u200b:</p> <pre><code>constructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u7684\u200b <code>args</code> \u200b\u53c2\u6570\u200b\u662f\u200b\u5305\u542b\u200b\u7528\u4e8e\u200b\u542f\u52a8\u200b Appium \u200b\u7684\u200b\u6240\u6709\u200b CLI \u200b\u53c2\u6570\u200b\u7684\u200b\u5bf9\u8c61\u200b\u670d\u52a1\u5668\u200b.</p>"},{"location":"developing/build-drivers/#_7","title":"\u5b9a\u4e49\u200b\u548c\u200b\u9a8c\u8bc1\u200b\u63a5\u53d7\u200b\u7684\u200b\u529f\u80fd","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5b9a\u4e49\u200b\u81ea\u5df1\u200b\u7684\u200b\u529f\u80fd\u200b\u4ee5\u53ca\u200b\u5bf9\u200b\u5b83\u4eec\u200b\u7684\u200b\u57fa\u672c\u200b\u9a8c\u8bc1\u200b.  \u200b\u7528\u6237\u200b\u5c06\u200b\u59cb\u7ec8\u200b\u80fd\u591f\u200b\u53d1\u9001\u200b\u60a8\u200b\u672a\u5b9a\u4e49\u200b\u7684\u200b\u529f\u80fd\u200b, \u200b\u4f46\u200b\u5982\u679c\u200b\u5b83\u4eec\u200b\u53d1\u9001\u200b\u60a8\u200b\u660e\u786e\u200b\u62e5\u6709\u200b\u7684\u200b\u529f\u80fd\u200b\u5b9a\u4e49\u200b,  \u200b\u7136\u540e\u200b Appium \u200b\u5c06\u200b\u9a8c\u8bc1\u200b\u5b83\u4eec\u200b\u662f\u5426\u200b\u5c5e\u4e8e\u200b\u6b63\u786e\u200b\u7684\u200b\u7c7b\u578b\u200b (\u200b\u5e76\u200b\u5c06\u200b\u68c0\u67e5\u200b\u5b58\u5728\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u529f\u80fd\u200b).</p> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u5b8c\u5168\u200b\u5173\u95ed\u200b\u529f\u80fd\u200b\u9a8c\u8bc1\u200b,  \u200b\u8bf7\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u8bbe\u7f6e\u200b<code>this.shouldValidateCaps</code>\u200b\u4e3a\u200b <code>false</code>.</p> <p>\u200b\u8981\u200b\u4e3a\u200b Appium \u200b\u63d0\u4f9b\u200b\u9a8c\u8bc1\u200b\u7ea6\u675f\u200b, \u200b\u8bf7\u200b\u5c06\u200b <code>this.desiredCapConstraints</code>\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b\u9a8c\u8bc1\u200b\u5bf9\u8c61\u200b \u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b.  \u200b\u9a8c\u8bc1\u200b\u5bf9\u8c61\u200b\u53ef\u80fd\u200b\u6709\u4e9b\u200b\u590d\u6742\u200b.  \u200b\u4e0b\u9762\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6765\u81ea\u200bUiAutomator2 \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b:</p> <pre><code>{\n  app: {\n    presence: true,\n    isString: true\n  },\n  automationName: {\n    isString: true\n  },\n  browserName: {\n    isString: true\n  },\n  launchTimeout: {\n    isNumber: true\n  },\n}\n</code></pre>"},{"location":"developing/build-drivers/#_8","title":"\u542f\u52a8\u200b\u4f1a\u8bdd\u200b\u548c\u200b\u8bfb\u53d6\u200b\u529f\u80fd","text":"<p>Appium \u200b\u7684\u200b<code>BaseDriver</code> \u200b\u5df2\u7ecf\u200b\u5b9e\u73b0\u200b\u4e86\u200b<code>createSession</code>\u200b\u547d\u4ee4\u200b, \u200b\u6240\u4ee5\u200b\u4f60\u200b\u4e0d\u5fc5\u200b\u8fd9\u6837\u200b\u505a\u200b.  \u200b\u7136\u800c\u200b\u9700\u8981\u200b\u6267\u884c\u200b\u81ea\u5df1\u200b\u7684\u200b\u542f\u52a8\u200b\u64cd\u4f5c\u200b\u662f\u200b\u5e38\u89c1\u200b\u64cd\u4f5c\u200b (\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b, \u200b\u8fd0\u884c\u200b\u4e00\u4e9b\u200b\u5e73\u53f0\u200b\u4ee3\u7801\u200b,  \u200b\u6216\u200b\u6839\u636e\u200b\u4e3a\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5b9a\u4e49\u200b\u7684\u200b\u529f\u80fd\u200b\u6267\u884c\u200b\u4e0d\u540c\u200b\u7684\u200b\u64cd\u4f5c\u200b). \u200b\u56e0\u6b64\u200b, \u200b\u60a8\u200b\u6700\u7ec8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u8986\u76d6\u200b <code>createSession</code>. \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5b9a\u4e49\u200b\u5982\u4e0b\u200b\u65b9\u6cd5\u200b:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, otherDriverData) {\n    const [sessionId, caps] = super.createSession(w3cCaps);\n    // do your own stuff here\n    return [sessionId, caps];\n}\n</code></pre> <p>\u200b\u51fa\u4e8e\u200b\u9057\u7559\u200b\u539f\u56e0\u200b, \u200b\u60a8\u200b\u7684\u200b\u51fd\u6570\u200b\u5c06\u200b\u6536\u5230\u200b\u65e7\u5f0f\u200bJSON Wire Protocol\u200b\u7684\u200bdesired\u200b\u4ee5\u53ca\u200b \u200b\u9700\u8981\u200b\u7684\u200bcaps\u200b\u4f5c\u4e3a\u200b\u524d\u200b\u4e24\u4e2a\u200b\u53c2\u6570\u200b.  \u200b\u9274\u4e8e\u200b\u4e0d\u518d\u200b\u652f\u6301\u200b\u65e7\u200b\u534f\u8bae\u200b\u548c\u200b\u5ba2\u6237\u7aef\u200b\u90fd\u200b\u5df2\u200b\u66f4\u65b0\u200b,  \u200b\u60a8\u200b\u53ea\u80fd\u200b\u4f9d\u8d56\u200b <code>w3cCaps</code> \u200b\u53c2\u6570\u200b.  (\u200b\u5173\u4e8e\u200b\u8ba8\u8bba\u200b <code>otherDriverData</code> \u200b\u7684\u200b\u5185\u5bb9\u200b, \u200b\u8bf7\u53c2\u9605\u200b\u4e0b\u9762\u200b\u6709\u5173\u200b\u5e76\u53d1\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u90e8\u5206\u200b).</p> <p>\u200b\u60a8\u200b\u9700\u8981\u200b\u786e\u4fdd\u200b\u8c03\u7528\u200b <code>super.createSession</code> \u200b\u4ee5\u200b\u83b7\u53d6\u200b\u4f1a\u8bdd\u200bID\u200b\u4ee5\u53ca\u200b \u200b\u5df2\u200b\u5904\u7406\u200b\u7684\u200b\u529f\u80fd\u200b(\u200b\u8bf7\u200b\u6ce8\u610f\u200b, \u200b\u529f\u80fd\u200b\u4e5f\u200b\u5728\u200b <code>this.caps</code>\u200b\u4e0a\u200b\u8bbe\u7f6e\u200b; \u200b\u672c\u5730\u200b\u4fee\u6539\u200b <code>caps</code>\u200b\u9664\u4e86\u200b\u66f4\u6539\u200b\u7528\u6237\u200b\u5728\u200b\u521b\u5efa\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u770b\u5230\u200b\u7684\u200b\u5185\u5bb9\u200b\u5916\u200b, \u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u6548\u679c\u200b). </p> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b!\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4efb\u4f55\u200b\u542f\u52a8\u200b\u903b\u8f91\u200b\u586b\u5145\u200b\u4e2d\u95f4\u200b\u90e8\u5206\u200b.</p>"},{"location":"developing/build-drivers/#_9","title":"\u7ed3\u675f\u200b\u4f1a\u8bdd","text":"<p>\u200b\u5982\u679c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u9700\u8981\u200b\u4efb\u4f55\u200b\u6e05\u7406\u200b\u6216\u200b\u5173\u95ed\u200b\u903b\u8f91\u200b,  \u200b\u6700\u597d\u200b\u5c06\u200b\u5176\u200b\u4f5c\u4e3a\u200b\u91cd\u5199\u200b <code>deleteSession</code>\u200b\u7684\u200b\u5b9e\u73b0\u200b:</p> <pre><code>async deleteSession() {\n    // do your own cleanup here\n    // don't forget to call super!\n    await super.deleteSession();\n}\n</code></pre> <p>\u200b\u5982\u679c\u200b\u53ef\u80fd\u200b\u7684\u8bdd\u200b, \u200b\u4e0d\u8981\u200b\u5728\u200b\u8fd9\u91cc\u200b\u629b\u51fa\u200b\u4efb\u4f55\u200b\u9519\u8bef\u200b,  \u200b\u8fd9\u200b\u4e00\u70b9\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b, \u200b\u4ee5\u4fbf\u200b\u4f1a\u8bdd\u200b\u6e05\u7406\u200b\u7684\u200b\u6240\u6709\u200b\u90e8\u5206\u200b\u80fd\u200b\u6210\u529f\u200b!</p>"},{"location":"developing/build-drivers/#cli","title":"\u8bbf\u95ee\u200b\u529f\u80fd\u200b\u548c\u200b CLI \u200b\u53c2\u6570","text":"<p>\u200b\u60a8\u200b\u901a\u5e38\u200b\u9700\u8981\u200b\u8bfb\u53d6\u200b\u7528\u6237\u200b\u4e3a\u4f1a\u8bdd\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u53c2\u6570\u200b, \u200b\u65e0\u8bba\u662f\u200b CLI \u200b\u53c2\u6570\u200b\u8fd8\u662f\u200b\u529f\u80fd\u200b.  \u200b\u6700\u200b\u7b80\u5355\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u4ece\u200b CLI \u200b\u6216\u200b\u529f\u80fd\u200b\u8bbf\u95ee\u200b <code>this.opts</code>, \u200b\u5176\u200b\u5408\u5e76\u200b\u4e86\u200b\u6240\u6709\u200b\u7684\u200b\u9009\u9879\u200b.  \u200b\u56e0\u6b64\u200b, \u200b\u4f8b\u5982\u200b, \u200b\u8981\u200b\u8bbf\u95ee\u200b<code>appium:app</code>\u200b\u529f\u80fd\u200b, \u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u83b7\u53d6\u200b<code>this.opts.app</code>\u200b\u7684\u200b\u503c\u200b.</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u4e86\u89e3\u200b\u67d0\u4e9b\u200b\u5185\u5bb9\u200b\u662f\u200b\u4f5c\u4e3a\u200b CLI \u200b\u53c2\u6570\u200b \u200b\u8fd8\u662f\u200b \u200b\u529f\u80fd\u200b\u53d1\u9001\u200b\u7684\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u663e\u5f0f\u200b\u8bbf\u95ee\u200b  <code>this.cliArgs</code>  \u200b\u548c\u200b <code>this.caps</code> \u200b\u5bf9\u8c61\u200b.</p> <p>\u200b\u5728\u200b\u6240\u6709\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4e3a\u200b\u65b9\u4fbf\u200b\u8d77\u200b\u89c1\u200b,  <code>appium:</code> \u200b\u529f\u80fd\u200b\u524d\u7f00\u200b\u5728\u200b\u8bbf\u95ee\u200b\u503c\u65f6\u200b\u88ab\u200b\u5220\u9664\u200b.</p>"},{"location":"developing/build-drivers/#webdriver","title":"\u5b9e\u73b0\u200bWebDriver\u200b\u547d\u4ee4","text":"<p>\u200b\u901a\u8fc7\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7c7b\u4e2d\u200b\u5b9e\u73b0\u200b\u51fd\u6570\u200b\u6765\u200b\u5904\u7406\u200bWebDriver\u200b\u547d\u4ee4\u200b.  \u200b\u5982\u679c\u200b\u5e0c\u671b\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e2d\u200b\u652f\u6301\u200b\u8be5\u200b\u547d\u4ee4\u200b,  WebDriver\u200b\u534f\u8bae\u200b, \u200b\u52a0\u4e0a\u200b\u5404\u79cd\u200bAppium\u200b\u6269\u5c55\u200b, \u200b\u5177\u6709\u200b\u60a8\u200b\u5b9e\u73b0\u200b\u7684\u200b\u76f8\u5e94\u200b\u529f\u80fd\u200b.  \u200b\u67e5\u770b\u200bAppium\u200b\u652f\u6301\u200b\u54ea\u4e9b\u200b\u547d\u4ee4\u200b\u7684\u200b\u6700\u4f73\u200b\u65b9\u5f0f\u200b,  \u200b\u4ee5\u53ca\u200b\u9700\u8981\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u547d\u4ee4\u200b\u5b9e\u73b0\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u200b, \u200b\u67e5\u770b\u200bAppium\u200b\u7684\u200b routes.js. \u200b\u6b64\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u4e2a\u200b\u8def\u7531\u200b\u5bf9\u8c61\u200b\u90fd\u200b\u4f1a\u200b\u544a\u8bc9\u60a8\u200b\u547d\u4ee4\u200b\u540d\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u5e0c\u671b\u200b\u4f7f\u7528\u200b\u7684\u200b\u53c2\u6570\u200b\u63a5\u6536\u200b\u8be5\u200b\u547d\u4ee4\u200b.</p> <p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u4ee5\u200b\u8fd9\u4e2a\u200b\u4ee3\u7801\u200b\u5757\u200b\u4e3a\u4f8b\u200b: <pre><code>'/session/:sessionId/url': {\n    GET: {command: 'getUrl'},\n    POST: {command: 'setUrl', payloadParams: {required: ['url']}},\n}\n</code></pre></p> <p>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u770b\u5230\u200b\u8def\u7531\u200b <code>/session/:sessionId/url</code> \u200b\u6620\u5c04\u200b\u5230\u200b\u4e24\u4e2a\u200b\u547d\u4ee4\u200b,  \u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b<code>GET</code>\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b<code>POST</code>\u200b\u8bf7\u6c42\u200b.  \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u60f3\u200b\u5141\u8bb8\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u66f4\u6539\u200b\"url\"(\u200b\u6216\u200b\u65e0\u8bba\u200b\u8fd9\u200b\u5bf9\u200b\u6211\u4eec\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u610f\u5473\u7740\u200b\u4ec0\u4e48\u200b) \u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5b9e\u73b0\u200b<code>setUrl</code>\u200b\u547d\u4ee4\u200b, \u200b\u5176\u200b\u5c06\u200b\u91c7\u7528\u200b<code>url</code>\u200b\u53c2\u6570\u200b  :</p> <pre><code>async setUrl(url) {\n    // your implementation here\n}\n</code></pre> <p>\u200b\u4e00\u4e9b\u200b\u6ce8\u610f\u4e8b\u9879\u200b: - \u200b\u6240\u6709\u200b\u547d\u4ee4\u200b\u65b9\u6cd5\u200b\u90fd\u200b\u5e94\u8be5\u200b\u662f\u200b<code>async</code>\u200b\u51fd\u6570\u200b\u6216\u200b\u8fd4\u56de\u200b<code>Promise</code> - \u200b\u60a8\u200b\u65e0\u9700\u200b\u62c5\u5fc3\u200b\u534f\u8bae\u200b\u7f16\u7801\u200b/\u200b\u89e3\u7801\u200b. \u200b\u4f60\u200b\u5c06\u200b\u83b7\u5f97\u200bJS\u200b\u5bf9\u8c61\u200b\u4f5c\u4e3a\u200b\u53c2\u6570\u200b, \u200b\u5e76\u4e14\u200b   \u200b\u53ef\u4ee5\u200b\u5728\u200b\u54cd\u5e94\u200b\u4e2d\u200b\u8fd4\u56de\u200b JSON \u200b\u53ef\u200b\u5e8f\u5217\u5316\u200b\u7684\u200b\u5bf9\u8c61\u200b. Appium\u200b\u5c06\u200b\u8d1f\u8d23\u200b\u5c06\u200b\u5176\u200b\u5305\u88f9\u200b\u5728\u200b   WebDriver\u200b\u534f\u8bae\u200b\u54cd\u5e94\u200b\u683c\u5f0f\u200b, \u200b\u5c06\u200b\u5176\u200b\u8f6c\u6362\u200b\u4e3a\u200bJSON\u200b\u7b49\u200b... - \u200b\u6240\u6709\u200b\u57fa\u4e8e\u200b\u4f1a\u8bdd\u200b\u7684\u200b\u547d\u4ee4\u200b\u90fd\u200b\u63a5\u6536\u200b<code>sessionId</code>\u200b\u53c2\u6570\u200b\u4f5c\u4e3a\u200b\u6700\u540e\u200b\u4e00\u4e2a\u200b\u53c2\u6570\u200b - \u200b\u6240\u6709\u200b\u57fa\u4e8e\u200b\u5143\u7d20\u200b\u7684\u200b\u547d\u4ee4\u200b\u90fd\u200b\u63a5\u6536\u200b<code>elementId</code>\u200b\u53c2\u6570\u200b\u4f5c\u4e3a\u200b\u5012\u6570\u200b\u7b2c\u4e8c\u4e2a\u200b\u53c2\u6570\u200b - \u200b\u5982\u679c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u672a\u200b\u5b9e\u73b0\u200b\u547d\u4ee4\u200b, \u200b\u7528\u6237\u200b\u4ecd\u200b\u53ef\u4ee5\u200b\u5c1d\u8bd5\u200b\u8bbf\u95ee\u200b\u8be5\u200b\u547d\u4ee4\u200b, \u200b\u5e76\u200b\u5c06\u200b   \u200b\u6536\u5230\u200b<code>501 501 \u200b\u5c1a\u672a\u200b\u5b9e\u73b0\u200b</code> \u200b\u54cd\u5e94\u200b\u9519\u8bef\u200b</p>"},{"location":"developing/build-drivers/#_10","title":"\u5b9e\u73b0\u200b\u5143\u7d20\u200b\u67e5\u627e","text":"<p>\u200b\u5143\u7d20\u200b\u67e5\u627e\u200b\u662f\u200b\u4e00\u79cd\u200b\u7279\u6b8a\u200b\u7684\u200b\u547d\u4ee4\u200b\u5b9e\u73b0\u200b\u6848\u4f8b\u200b.  \u200b\u60a8\u200b\u5b9e\u9645\u4e0a\u200b\u4e0d\u60f3\u200b\u8986\u76d6\u200b<code>findElement</code>\u200b\u6216\u200b<code>findElements</code>,  \u200b\u5373\u4f7f\u200b\u8fd9\u4e9b\u200b\u662f\u200b<code>routes.js</code>\u200b\u4e2d\u200b\u5217\u51fa\u200b\u7684\u200b\u5185\u5bb9\u200b.  Appium \u200b\u4e3a\u200b\u60a8\u200b\u505a\u200b\u4e86\u200b\u5f88\u591a\u200b\u5de5\u4f5c\u200b, \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u8981\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u51fd\u6570\u200b:</p> <pre><code>async findElOrEls(strategy, selector, mult, context) {\n    // find your element here\n}\n</code></pre> <p>\u200b\u8fd9\u662f\u200b\u4f20\u5165\u200b\u7684\u200b\u5185\u5bb9\u200b:</p> <ul> <li><code>strategy</code> - \u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b, \u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u5b9a\u4f4d\u5668\u200b\u7b56\u7565\u200b</li> <li><code>selector</code> - \u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b, \u200b\u9009\u62e9\u5668\u200b</li> <li><code>mult</code> - \u200b\u5e03\u5c14\u503c\u200b, \u200b\u65e0\u8bba\u200b\u7528\u6237\u200b\u8bf7\u6c42\u200b\u4e86\u200b\u5339\u914d\u200b\u9009\u62e9\u5668\u200b\u7684\u200b\u4e00\u4e2a\u200b\u8fd8\u662f\u200b\u6240\u6709\u200b\u5143\u7d20\u200b</li> <li><code>context</code> - (\u200b\u53ef\u200b\u9009\u200b)\u200b\u5982\u679c\u200b\u5b9a\u4e49\u200b, \u200b\u5c06\u200b\u662f\u200b\u4e00\u4e2a\u200b W3C \u200b\u5143\u7d20\u200b(\u200b\u5373\u200b, \u200b\u5e26\u6709\u200b W3C \u200b\u5143\u7d20\u200b\u7684\u200b JS \u200b\u5bf9\u8c61\u200b   \u200b\u6807\u8bc6\u7b26\u200b\u4f5c\u4e3a\u200b\u952e\u200b, \u200b\u5143\u7d20\u200b ID \u200b\u4f5c\u4e3a\u200b\u503c\u200b)</li> </ul> <p>\u200b\u5e76\u4e14\u200b\u60a8\u200b\u9700\u8981\u200b\u8fd4\u56de\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u4e4b\u4e00\u200b:</p> <ul> <li>\u200b\u5355\u4e2a\u200b W3C \u200b\u5143\u7d20\u200b(\u200b\u5982\u4e0a\u6240\u8ff0\u200b\u7684\u200b\u5bf9\u8c61\u200b)</li> <li>W3C \u200b\u5143\u7d20\u200b\u6570\u7ec4\u200b</li> </ul> <p>\u200b\u8bf7\u200b\u6ce8\u610f\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b<code>appium/support</code>\u200b\u5bfc\u5165\u200bW3C\u200b\u7f51\u7edc\u200b\u5143\u7d20\u200b\u6807\u8bc6\u7b26\u200b:</p> <pre><code>import {util} from 'appium/support';\nconst { W3C_WEB_ELEMENT_IDENTIFIER } = util;\n</code></pre> <p>\u200b\u4f60\u200b\u7528\u200b\u5143\u7d20\u200b\u505a\u200b\u4ec0\u4e48\u200b\u53d6\u51b3\u4e8e\u200b\u4f60\u200b! \u200b\u901a\u5e38\u200b, \u200b\u60a8\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u4fdd\u7559\u200bID\u200b\u7684\u200b\u7f13\u5b58\u200b\u6620\u5c04\u200b\u5230\u200b\u5b9e\u9645\u200b\u5143\u7d20\u200b\"\u200b\u5bf9\u8c61\u200b\" \u200b\u6216\u200b\u4efb\u4f55\u200b\u7b49\u6548\u200b\u7269\u200b\u9002\u7528\u200b\u4e8e\u200b\u60a8\u200b\u7684\u200b\u5e73\u53f0\u200b.</p>"},{"location":"developing/build-drivers/#_11","title":"\u5b9a\u4e49\u200b\u6709\u6548\u200b\u7684\u200b\u5b9a\u4f4d\u5668\u200b\u7b56\u7565","text":"<p>\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u80fd\u200b\u4ec5\u200b\u652f\u6301\u200b\u6807\u51c6\u200b WebDriver \u200b\u5b9a\u4f4d\u5668\u200b\u7b56\u7565\u200b\u7684\u200b\u5b50\u96c6\u200b,  \u200b\u6216\u8005\u200b\u53ef\u80fd\u200b\u6dfb\u52a0\u200b\u81ea\u5df1\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u5b9a\u4f4d\u5668\u200b\u7b56\u7565\u200b.  \u200b\u544a\u8bc9\u200bAppium\u200b\u54ea\u4e9b\u200b\u7b56\u7565\u200b\u88ab\u200b\u8ba4\u4e3a\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6709\u6548\u200b,  \u200b\u521b\u5efa\u200b\u4e00\u7cfb\u5217\u200b\u7b56\u7565\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u5206\u914d\u200b\u7ed9\u200b<code>this.locatorStrategies</code>:</p> <pre><code>this.locatorStrategies = ['xpath', 'custom-strategy'];\n</code></pre> <p>\u200b\u5982\u679c\u200b\u7528\u6237\u200b\u5c1d\u8bd5\u200b\u4f7f\u7528\u200b\u5141\u8bb8\u200b\u7684\u200b\u7b56\u7565\u200b\u4ee5\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u7b56\u7565\u200b,  Appium \u200b\u5c06\u200b\u629b\u51fa\u200b\u9519\u8bef\u200b,  \u200b\u8fd9\u4f7f\u200b\u60a8\u200b\u80fd\u591f\u200b\u4fdd\u6301\u200b\u5143\u7d20\u200b\u67e5\u627e\u200b\u4ee3\u7801\u200b\u5e72\u51c0\u200b,  \u200b\u5e76\u4e14\u200b\u53ea\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u7b56\u7565\u200b.</p> <p>\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u6709\u6548\u200b\u7b56\u7565\u200b\u5217\u8868\u200b\u4e3a\u7a7a\u200b,  \u200b\u56e0\u6b64\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0d\u662f\u200b\u7b80\u5355\u200b\u5730\u200b\u4ee3\u7406\u200b\u53e6\u200b\u4e00\u4e2a\u200bWebDriver\u200b\u7aef\u70b9\u200b,  \u200b\u60a8\u200b\u9700\u8981\u200b\u5b9a\u4e49\u200b\u4e00\u4e9b\u200b. \u200b\u534f\u8bae\u200b\u6807\u51c6\u200b\u5b9a\u4f4d\u5668\u200b\u7b56\u7565\u200b\u5b9a\u4e49\u200b \u200b\u6b64\u5904\u200b.</p>"},{"location":"developing/build-drivers/#webdriver_1","title":"\u5f15\u53d1\u200b\u7279\u5b9a\u200b\u4e8e\u200bWebDriver\u200b\u7684\u200b\u9519\u8bef","text":"<p>WebDriver\u200b\u89c4\u8303\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u53d1\u751f\u200b\u9519\u8bef\u200b\u65f6\u200b\u54cd\u5e94\u200b\u7684\u200b \u200b\u4e00\u7ec4\u200b\u9519\u8bef\u4ee3\u7801\u200b.  Appium\u200b\u4e3a\u200b\u8fd9\u4e9b\u200b\u4ee3\u7801\u200b\u4e2d\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u521b\u5efa\u200b\u4e86\u200b\u9519\u8bef\u200b\u7c7b\u200b, \u200b\u56e0\u6b64\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u547d\u4ee4\u200b\u5185\u90e8\u200b\u53d1\u51fa\u200b\u9002\u5f53\u200b\u7684\u200b\u9519\u8bef\u200b,  \u200b\u5b83\u200b\u5c06\u200b\u6309\u7167\u200b\u534f\u8bae\u200b\u6267\u884c\u200b\u6b63\u786e\u200b\u7684\u200b\u64cd\u4f5c\u200b\u54cd\u5e94\u200b\u7528\u6237\u200b.  \u200b\u8981\u200b\u8bbf\u95ee\u200b\u8fd9\u4e9b\u200b\u9519\u8bef\u200b\u7c7b\u200b, \u200b\u8bf7\u200b\u4ece\u200b <code>appium/driver</code>\u200b\u5bfc\u5165\u200b\u5b83\u4eec\u200b:</p> <pre><code>import {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"developing/build-drivers/#appium_1","title":"\u5c06\u200b\u6d88\u606f\u200b\u8bb0\u5f55\u200b\u5230\u200bAppium\u200b\u65e5\u5fd7","text":"<p>\u200b\u5f53\u7136\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u59cb\u7ec8\u200b\u4f7f\u7528\u200b <code>console.log</code>, \u200b\u4f46\u200bAppium\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u8bb0\u5f55\u5668\u200b <code>this.log</code> (\u200b\u5bf9\u4e8e\u200b\u4e0d\u540c\u200b\u7684\u200b\u65e5\u5fd7\u200b, \u200b\u5b83\u200b\u6709\u200b <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> \u200b\u65b9\u6cd5\u200b\u7ea7\u522b\u200b).  \u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0a\u4e0b\u6587\u200b\u4e4b\u5916\u200b\u521b\u5efa\u200bAppium\u200b\u8bb0\u5f55\u5668\u200b(\u200b\u4f8b\u5982\u200b\u5728\u200b\u811a\u672c\u200b\u6216\u200bhelper\u200b\u6587\u4ef6\u200b), \u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u6784\u5efa\u200b\u81ea\u5df1\u200b\u7684\u200b:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyDriver');\n</code></pre>"},{"location":"developing/build-drivers/#appium_2","title":"Appium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u53ef\u80fd\u6027","text":"<p>\u200b\u8fd9\u4e9b\u200b\u662f\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u989d\u5916\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u529f\u80fd\u200b \u200b\u6216\u200b\u66f4\u200b\u65b9\u4fbf\u200b\u5730\u200b\u5b8c\u6210\u200b\u5176\u200b\u5de5\u4f5c\u200b\u7684\u200b\u4e8b\u60c5\u200b.</p>"},{"location":"developing/build-drivers/#_12","title":"\u4e3a\u200b\u81ea\u5b9a\u4e49\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u6dfb\u52a0\u200b\u6a21\u5f0f","text":"<p>\u200b\u5982\u679c\u200b\u5e0c\u671b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5728\u200bAppium\u200b\u670d\u52a1\u5668\u200b\u5728\u200b\u542f\u52a8\u200b\u540e\u200b\u4ece\u200b\u547d\u4ee4\u884c\u200b\u63a5\u6536\u6570\u636e\u200b (\u200b\u4e3e\u4f8b\u200b, \u200b\u670d\u52a1\u5668\u200b\u7ba1\u7406\u5458\u200b\u5e94\u200b\u8bbe\u7f6e\u200b\u7684\u200b\u7aef\u53e3\u200b\u4e0d\u200b\u4f5c\u4e3a\u200b\u529f\u80fd\u200b\u4f20\u9012\u200b).</p> <p>\u200b\u8981\u200b\u4e3a\u200bAppium\u200b\u670d\u52a1\u5668\u200b\u5b9a\u4e49\u200bCLI\u200b\u53c2\u6570\u200b(\u200b\u6216\u200b\u914d\u7f6e\u200b\u5c5e\u6027\u200b), \u200b\u6269\u5c55\u200b\u5fc5\u987b\u200b\u63d0\u4f9b\u200b schema .  \u200b\u5728\u200b\u91cc\u9762\u200b\u6269\u5c55\u200b\u7684\u200b<code>package.json</code>\u200b\u7684\u200b<code>appium</code> \u200b\u5c5e\u6027\u200b, \u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b<code>schema</code> \u200b\u5c5e\u6027\u200b.  \u200b\u8fd9\u200b\u5c06\u200b\u662f\u200ba) \u200b\u6a21\u5f0f\u200b\u672c\u8eab\u200b, \u200b\u6216\u200bb)\u200b\u6a21\u5f0f\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b.</p> <p>\u200b\u8fd9\u4e9b\u200b\u6a21\u5f0f\u200b\u7684\u200b\u89c4\u5219\u200b:</p> <ul> <li>\u200b\u6a21\u5f0f\u200b\u5fc5\u987b\u200b\u7b26\u5408\u200b JSON Schema Draft-07.</li> <li>\u200b\u5982\u679c\u200b<code>schema</code>\u200b\u5c5e\u6027\u200b\u662f\u200b\u6a21\u5f0f\u200b\u6587\u4ef6\u200b\u7684\u200b\u8def\u5f84\u200b, \u200b\u5219\u200b\u8be5\u200b\u6587\u4ef6\u200b\u5fc5\u987b\u200b\u4e3a\u200bJSON\u200b\u6216\u200bJS(CommonJS)\u200b\u683c\u5f0f\u200b. </li> <li>\u200b\u4e0d\u200b\u652f\u6301\u200b\u81ea\u5b9a\u4e49\u200b<code>$id</code> \u200b\u503c\u200b. \u200b\u8981\u200b\u4f7f\u7528\u200b <code>$ref</code>, \u200b\u8bf7\u200b\u63d0\u4f9b\u200b\u4e0e\u200b\u6a21\u5f0f\u200b\u6839\u200b\u76f8\u5173\u200b\u7684\u200b\u503c\u200b, \u200b\u4f8b\u5982\u200b<code>/properties/foo</code>.</li> <li>\u200b\u53ef\u200b\u652f\u6301\u200b <code>format</code> \u200b\u5173\u952e\u5b57\u200b\u7684\u200b\u5df2\u77e5\u200b\u503c\u200b, \u200b\u4f46\u200b\u53ef\u80fd\u200b\u4e0d\u200b\u652f\u6301\u200b\u5176\u4ed6\u200b\u5404\u79cd\u200b\u5173\u952e\u5b57\u200b. \u200b\u5982\u679c\u200b\u60a8\u200b\u53d1\u73b0\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u5173\u952e\u5b57\u200b\u4e0d\u200b\u53d7\u200b\u652f\u6301\u200b, \u200b\u8bf7\u200b\u5bfb\u6c42\u200b\u652f\u6301\u200b\u6216\u200b\u53d1\u9001\u200bPR!</li> <li>\u200b\u6a21\u5f0f\u200b\u7684\u200b\u7c7b\u578b\u200b\u5fc5\u987b\u200b\u4e3a\u200b <code>object</code> (<code>{\"type\": \"object\"}</code>), \u200b\u5305\u542b\u200b<code>properties</code>\u200b\u5173\u952e\u5b57\u200b\u4e2d\u200b\u7684\u200b\u53c2\u6570\u200b. \u200b\u4e0d\u200b\u652f\u6301\u200b\u5d4c\u5957\u200b\u5c5e\u6027\u200b. </li> </ul> <p>\u200b\u4f8b\u200b:</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"test-web-server-port\": {\n      \"type\": \"integer\",\n      \"minimum\": 1,\n      \"maximum\": 65535,\n      \"description\": \"The port to use for the test web server\"\n    },\n    \"test-web-server-host\": {\n      \"type\": \"string\",\n      \"description\": \"The host to use for the test web server\",\n      \"default\": \"sillyhost\"\n    }\n  }\n}\n</code></pre> <p>\u200b\u4e0a\u8ff0\u200b\u6a21\u5f0f\u5b9a\u4e49\u200b\u4e86\u200b\u4e24\u4e2a\u200b\u5c5e\u6027\u200b, \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bCLI\u200b\u53c2\u6570\u200b\u6216\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u8fdb\u884c\u200b\u8bbe\u7f6e\u200b.  \u200b\u5982\u679c\u200b\u6b64\u200b\u6269\u5c55\u200b\u540d\u4e3a\u200b driver , \u200b\u5176\u200b\u540d\u79f0\u200b\u4e3a\u200b \"horace\", CLI\u200b\u53c2\u6570\u200b\u5c06\u200b\u5206\u522b\u200b\u4e3a\u200b <code>--driver-horace-test-web-server-port</code> \u200b\u548c\u200b <code>--driver-horace-test-web-server-host</code>.  \u200b\u6216\u8005\u200b, \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b:</p> <pre><code>{\n  \"server\": {\n\n    \"driver\": {\n      \"horace\": {\n        \"test-web-server-port\": 1234,\n        \"test-web-server-host\": \"localhorse\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developing/build-drivers/#_13","title":"\u6dfb\u52a0\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u811a\u672c","text":"<p>\u200b\u6709\u65f6\u200b, \u200b\u4f60\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u7528\u6237\u200b\u80fd\u591f\u200b\u5728\u200b\u4f1a\u200b\u8bdd\u200b\u4e0a\u4e0b\u6587\u200b\u4e4b\u5916\u200b\u8fd0\u884c\u200b\u811a\u672c\u200b (\u200b\u4f8b\u5982\u200b, \u200b\u8fd0\u884c\u200b\u9884\u200b\u751f\u6210\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u65b9\u9762\u200b\u7684\u200b\u811a\u672c\u200b). \u200b\u4e3a\u4e86\u200b\u652f\u6301\u200b\u8fd9\u200b\u4e00\u70b9\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u811a\u672c\u200b\u540d\u79f0\u200b\u548c\u200b JS \u200b\u6587\u4ef6\u200b\u7684\u200b\u6620\u5c04\u200b\u6dfb\u52a0\u200b\u5230\u200b Appium \u200b\u6269\u5c55\u200b\u4e2d\u200b\u7684\u200b<code>scripts</code>\u200b\u5b57\u6bb5\u200b\u4e2d\u5143\u200b\u6570\u636e\u200b.  \u200b\u56e0\u6b64\u200b, \u200b\u5047\u8bbe\u200b\u60a8\u200b\u5728\u200b\u9879\u76ee\u200b\u4e2d\u200b\u521b\u5efa\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u4f4d\u4e8e\u200b<code>scripts</code>\u200b\u76ee\u5f55\u200b\u4e2d\u200b\u7684\u200b\u811a\u672c\u200b.  \u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u9879\u76ee\u200b\u4e2d\u200b, \u200b\u540d\u4e3a\u200b<code>driver-prebuild.js</code>.  \u200b\u7136\u540e\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u5982\u4e0b\u200b\u6240\u793a\u200b\u7684\u200b<code>scripts</code>\u200b\u5b57\u200b\u6bb5\u200b:</p> <pre><code>{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/driver-prebuild.js\"\n    }\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b, \u200b\u5047\u8bbe\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u540d\u4e3a\u200b <code>mydriver</code>,\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b <code>appium driver run mydriver prebuild</code>,\u200b\u60a8\u200b\u7684\u200b\u811a\u672c\u200b\u5c06\u200b\u6267\u884c\u200b.</p>"},{"location":"developing/build-drivers/#web","title":"\u5c06\u200b\u547d\u4ee4\u200b\u4ee3\u7406\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b Web \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5b9e\u73b0","text":"<p>Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u4e00\u4e2a\u200b\u975e\u5e38\u200b\u5e38\u89c1\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u67b6\u6784\u200b\u662f\u200b\u5177\u6709\u200b\u67d0\u79cd\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5e73\u53f0\u200b\u7684\u200b\u4f53\u7cfb\u7ed3\u6784\u200b,  \u200b\u662f\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u63a5\u53e3\u200b\u7684\u200bWebDriver\u200b\u5b9e\u73b0\u200b.  \u200b\u4f8b\u5982\u200b, Appium UiAutomator2\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0e\u200bAndroid\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u7684\u200b\u7279\u6b8a\u200b(\u200b\u57fa\u4e8e\u200bJava)\u200b\u670d\u52a1\u5668\u200b\u63a5\u53e3\u200b\u6709\u5173\u200b.  \u200b\u5728\u200bWebView\u200b\u6a21\u5f0f\u200b, \u200b\u5b83\u200b\u8fd8\u200b\u4e0e\u200bChromedriver\u200b\u63a5\u53e3\u200b\u6709\u5173\u200b.</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u53d1\u73b0\u81ea\u5df1\u200b\u5904\u4e8e\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b,  \u200b\u5f88\u200b\u5bb9\u6613\u200b\u544a\u8bc9\u200b Appium \u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u662f\u200b\u53ea\u662f\u200b\u5c06\u200b WebDriver \u200b\u547d\u4ee4\u200b\u76f4\u63a5\u200b\u4ee3\u7406\u200b\u5230\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7aef\u70b9\u200b.</p> <p>\u200b\u9996\u5148\u200b, \u200b\u901a\u8fc7\u200b\u5b9e\u73b0\u200b <code>canProxy</code> \u200b\u65b9\u6cd5\u200b\u8ba9\u200b Appium \u200b\u77e5\u9053\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b can \u200b\u4ee3\u7406\u200b:</p> <pre><code>canProxy() {\n    return true;\n}\n</code></pre> <p>\u200b\u63a5\u4e0b\u6765\u200b, \u200b\u544a\u8bc9\u200b Appium \u200b\u5b83\u200b\u5e94\u8be5\u200b \u200b\u4e0d\u200b \u200b\u5c1d\u8bd5\u200b\u4ee3\u7406\u200b\u54ea\u4e9b\u200b WebDriver \u200b\u8def\u7531\u200b (\u200b\u901a\u5e38\u200b\u6700\u7ec8\u200b\u4f1a\u200b\u662f\u200b\u60a8\u200b\u4e0d\u60f3\u200b\u8f6c\u53d1\u200b\u7684\u200b\u67d0\u4e9b\u200b\u8def\u7ebf\u200b):</p> <pre><code>getProxyAvoidList() {\n    return [\n        ['POST', new RegExp('^/session/[^/]+/appium')]\n    ];\n}\n</code></pre> <p>\u200b\u4ee3\u7406\u200b\u907f\u514d\u200b\u5217\u8868\u200b\u5e94\u8be5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u6570\u7ec4\u200b\u6570\u7ec4\u200b,  \u200b\u5176\u4e2d\u200b\u6bcf\u4e2a\u200b\u5185\u90e8\u200b\u6570\u7ec4\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b HTTP \u200b\u65b9\u6cd5\u200b\u4f5c\u4e3a\u200b\u5b83\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6210\u5458\u200b,  \u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u4f5c\u4e3a\u200b\u5b83\u200b\u7684\u200b\u7b2c\u4e8c\u4e2a\u200b\u6210\u5458\u200b.  \u200b\u5982\u679c\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u5339\u914d\u200b\u8def\u7531\u200b, \u200b\u5219\u200b\u8def\u7531\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u88ab\u200b\u4ee3\u7406\u200b, \u200b\u5e76\u200b\u5c06\u200b\u7531\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5904\u7406\u200b.  \u200b\u6b64\u4f8b\u200b\u4e2d\u200b, \u200b\u6211\u4eec\u200b\u907f\u514d\u200b\u4ee3\u7406\u200b\u6240\u6709\u200b\u5177\u6709\u200b <code>appium</code> \u200b\u524d\u7f00\u200b\u7684\u200b <code>POST</code> \u200b\u8def\u7531\u200b.</p> <p>\u200b\u63a5\u4e0b\u6765\u200b, \u200b\u6211\u4eec\u200b\u5fc5\u987b\u200b\u8bbe\u7f6e\u200b\u4ee3\u7406\u200b\u672c\u8eab\u200b.  \u200b\u6267\u884c\u200b\u6b64\u200b\u64cd\u4f5c\u200b\u7684\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4f7f\u7528\u200b\u6765\u81ea\u200bAppium\u200b\u79f0\u4e3a\u200b<code>JWProxy</code>\u200b\u7684\u200b\u7279\u6b8a\u200b\u7c7b\u200b.  (\u200b\u8be5\u200b\u540d\u79f0\u200b\u7684\u200b\u610f\u601d\u200b\u662f\u200b\"JSON Wire Proxy\" , \u200b\u4e0e\u200b\u9057\u7559\u200b\u534f\u8bae\u200b\u7684\u200b\u5b9e\u73b0\u200b\u6709\u5173\u200b).  \u200b\u60a8\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5fc5\u8981\u200b\u7684\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b<code>JWProxy</code>\u200b\u5bf9\u8c61\u8fde\u63a5\u200b\u5230\u200b\u8fdc\u7a0b\u200b\u670d\u52a1\u5668\u200b:</p> <pre><code>// import {JWProxy} from 'appium/driver';\n\nconst proxy = new JWProxy({\n    server: 'remote.server',\n    port: 1234,\n    base: '/',\n});\n\nthis.proxyReqRes = proxy.proxyReqRes.bind(proxy);\nthis.proxyCommand = proxy.command.bind(proxy);\n</code></pre> <p>\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u4ee3\u7406\u200b\u5bf9\u8c61\u200b, \u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e00\u4e9b\u200b\u65b9\u6cd5\u200b\u5206\u914d\u200b\u7ed9\u200b <code>this</code>\u200b\u540d\u4e0b\u200b\u7684\u200b <code>proxyReqRes</code> \u200b\u548c\u200b  <code>proxyCommand</code>.  \u200b\u8fd9\u662f\u200b Appium \u200b\u4f7f\u7528\u200b\u4ee3\u7406\u200b\u6240\u200b\u5fc5\u9700\u200b\u7684\u200b, \u200b\u6240\u4ee5\u200b\u4e0d\u8981\u200b\u5fd8\u8bb0\u200b\u8fd9\u200b\u4e00\u6b65\u200b! <code>JWProxy</code>\u200b\u8fd8\u6709\u200b\u8bb8\u591a\u200b\u5176\u4ed6\u200b\u9009\u9879\u200b, \u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6e90\u4ee3\u7801\u200b\u4e2d\u200b\u67e5\u770b\u200b. (TODO: \u200b\u5c06\u200b\u9009\u9879\u200b\u53d1\u5e03\u200b\u4e3a\u200b API \u200b\u6587\u6863\u200b\u5e76\u200b\u5728\u200b\u6b64\u5904\u200b\u94fe\u63a5\u200b)</p> <p>\u200b\u6700\u540e\u200b, \u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u6765\u200b\u544a\u8bc9\u200b Appium \u200b\u4ee3\u7406\u200b\u4f55\u65f6\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b.  \u200b\u5bf9\u4e8e\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6765\u8bf4\u200b, \u200b\u5b83\u200b\u53ef\u80fd\u200b\u603b\u662f\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b,  \u200b\u6216\u8005\u200b\u5b83\u200b\u53ef\u80fd\u200b\u4ec5\u200b\u5728\u200b\u7279\u5b9a\u200b\u4e0a\u4e0b\u6587\u200b\u4e2d\u200b\u5904\u4e8e\u200b\u6d3b\u52a8\u72b6\u6001\u200b. \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u903b\u8f91\u200b\u5b9a\u4e49\u200b\u4e3a\u200b <code>proxyActive</code>\u200b\u7684\u200b\u5b9e\u73b0\u200b:</p> <pre><code>proxyActive() {\n    return true; // or use custom logic\n}\n</code></pre> <p>\u200b\u6709\u200b\u4e86\u200b\u8fd9\u4e9b\u200b\u90e8\u5206\u200b, \u200b\u60a8\u200b\u5c31\u200b\u4e0d\u5fc5\u200b\u91cd\u65b0\u200b\u5b9e\u73b0\u200b\u4efb\u4f55\u200b\u5df2\u7ecf\u200b\u7531\u200b\u8fdc\u7a0b\u200b\u7aef\u70b9\u200b\u4ee3\u7406\u200b\u7684\u200b\u5b9e\u73b0\u200b.  Appium \u200b\u5c06\u200b\u4e3a\u200b\u60a8\u200b\u5904\u7406\u200b\u6240\u6709\u200b\u4ee3\u7406\u200b.</p>"},{"location":"developing/build-drivers/#_14","title":"\u4f7f\u7528\u200b\u65b0\u200b\u547d\u4ee4\u200b\u6269\u5c55\u200b\u73b0\u6709\u200b\u534f\u8bae","text":"<p>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u73b0\u6709\u200b\u547d\u4ee4\u200b\u4e0d\u200b\u9002\u5408\u200b\u4f60\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.  \u200b\u5982\u679c\u200b\u8981\u200b\u516c\u5f00\u200b\u672a\u200b\u6620\u5c04\u200b\u5230\u200b\u4efb\u4f55\u200b\u73b0\u6709\u200b\u547d\u4ee4\u200b\u7684\u200b\u884c\u4e3a\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u4e24\u79cd\u200b\u547d\u4ee4\u200b\u7684\u200b\u4efb\u200b\u4e00\u79cd\u200b\u521b\u5efa\u200b\u65b0\u200b\u547d\u4ee4\u200b:</p> <ol> <li>\u200b\u6269\u5c55\u200b WebDriver \u200b\u534f\u8bae\u200b\u5e76\u200b\u521b\u5efa\u200b\u5ba2\u6237\u7aef\u200b\u63d2\u4ef6\u200b\u4ee5\u200b\u8bbf\u95ee\u200b\u6269\u5c55\u200b</li> <li>\u200b\u901a\u8fc7\u200b\u5b9a\u4e49\u200b Execute Methods\u200b\u91cd\u8f7d\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u547d\u4ee4\u200b</li> </ol> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u91c7\u7528\u200b\u7b2c\u4e00\u79cd\u200b\u65b9\u5f0f\u200b, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6307\u793a\u200b Appium \u200b\u8bc6\u522b\u200b\u65b0\u200b\u65b9\u6cd5\u200b\u5e76\u200b\u6dfb\u52a0\u200b\u5b83\u4eec\u200b\u5230\u200b\u5176\u200b\u5141\u8bb8\u200b\u7684\u200b HTTP \u200b\u8def\u7531\u200b\u548c\u200b\u547d\u4ee4\u200b\u540d\u79f0\u200b\u96c6\u200b.  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u6267\u884c\u200b\u6b64\u200b\u64cd\u4f5c\u200b, \u200b\u901a\u8fc7\u200b\u5206\u914d\u200b\u4e0e\u200b Appium \u200b\u7684\u200b <code>routes.js</code> \u200b\u5bf9\u8c61\u200b\u5f62\u5f0f\u200b\u76f8\u540c\u200b\u7684\u200b\u5bf9\u8c61\u200b,  \u200b\u7ed9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7c7b\u4e2d\u200b\u7684\u200b <code>newMethodMap</code>\u200b\u9759\u6001\u200b\u53d8\u91cf\u200b.  \u200b\u4f8b\u5982\u200b, \u200b\u4e0b\u9762\u200b\u662f\u200b<code>FakeDriver</code>\u200b\u793a\u4f8b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b <code>newMethodMap</code>:</p> <pre><code>static newMethodMap = {\n  '/session/:sessionId/fakedriver': {\n    GET: {command: 'getFakeThing'},\n    POST: {command: 'setFakeThing', payloadParams: {required: ['thing']}},\n  },\n  '/session/:sessionId/fakedriverargs': {\n    GET: {command: 'getFakeDriverArgs'},\n  },\n};\n</code></pre> <p>\u200b\u5728\u200b\u6b64\u200b\u793a\u4f8b\u200b\u4e2d\u200b, \u200b\u6211\u4eec\u200b\u5c06\u200b\u6dfb\u52a0\u200b\u4e00\u4e9b\u200b\u65b0\u8def\u200b\u7531\u200b\u548c\u200b\u603b\u5171\u200b 3 \u200b\u4e2a\u200b\u65b0\u200b\u547d\u4ee4\u200b.  \u200b\u6709\u5173\u200b\u5982\u4f55\u200b\u4ee5\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\u5b9a\u4e49\u200b\u547d\u4ee4\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u793a\u4f8b\u200b, \u200b\u6700\u597d\u200b\u6d4f\u89c8\u200b\u4e00\u4e0b\u200b <code>routes.js</code>.  \u200b\u73b0\u5728\u200b\u4f60\u200b\u6240\u200b\u9700\u8981\u200b\u7684\u200b\u4e00\u5207\u200b\u8981\u200b\u505a\u200b\u7684\u200b\u662f\u200b\u50cf\u200b\u5b9e\u73b0\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200bAppium\u200b\u547d\u4ee4\u200b\u4e00\u6837\u200b\u5b9e\u73b0\u200b\u547d\u4ee4\u200b.</p> <p>\u200b\u8fd9\u79cd\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u547d\u4ee4\u200b\u65b9\u5f0f\u200b\u7684\u200b\u7f3a\u70b9\u200b\u662f\u200b\u4eba\u4eec\u200b\u4f7f\u7528\u200b\u6807\u51c6\u200b Appium \u200b\u5ba2\u6237\u7aef\u200b,  \u200b\u4e0d\u4f1a\u200b\u6709\u200b\u826f\u597d\u200b\u5ba2\u6237\u7aef\u200b\u51fd\u6570\u200b\u8bbe\u8ba1\u200b\u4e8e\u200b\u8fd9\u4e9b\u200b\u7aef\u70b9\u200b.  \u200b\u6240\u4ee5\u200b\u4f60\u200b\u9700\u8981\u200b\u4e3a\u200b\u53d7\u200b\u652f\u6301\u200b\u7684\u200b\u6bcf\u79cd\u200b\u8bed\u8a00\u200b\u521b\u5efa\u200b\u548c\u200b\u53d1\u5e03\u200b\u5ba2\u6237\u7aef\u200b\u63d2\u4ef6\u200b (\u200b\u8bf4\u660e\u200b\u6216\u200b\u793a\u4f8b\u200b\u53ef\u200b\u5728\u200b\u76f8\u5173\u200b\u5ba2\u6237\u7aef\u200b\u6587\u6863\u200b\u4e2d\u200b\u627e\u5230\u200b).</p> <p>\u200b\u8fd9\u79cd\u200b\u64cd\u4f5c\u200b\u65b9\u5f0f\u200b\u7684\u200b\u66ff\u4ee3\u200b\u65b9\u6cd5\u200b\u662f\u200b\u91cd\u8f7d\u200b\u6240\u6709\u200b\u5df2\u200b\u8bbf\u95ee\u200b\u7684\u200bWebDriver\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u547d\u4ee4\u200b: \u200b\u6267\u884c\u200b\u811a\u672c\u200b. Appium \u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u4fbf\u6377\u200b\u5de5\u5177\u200b\u6765\u200b\u7b80\u5316\u200b\u5b9e\u73b0\u200b.  \u200b\u5047\u8bbe\u200b\u60a8\u200b\u6b63\u5728\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b<code>soundz</code>\u200b\u7684\u200b\u7acb\u4f53\u58f0\u200b\u7cfb\u7edf\u200b\u6784\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b,  \u200b\u5e76\u4e14\u200b\u60a8\u200b\u5e0c\u671b\u200b\u521b\u5efa\u200b\u7528\u4e8e\u200b\u6309\u200b\u540d\u79f0\u200b\u64ad\u653e\u6b4c\u66f2\u200b\u7684\u200b\u547d\u4ee4\u200b.  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4ee5\u4e0b\u200b\u65b9\u5f0f\u200b\u5411\u200b\u7528\u6237\u200b\u516c\u5f00\u200b\u6b64\u200b\u5185\u5bb9\u200b:</p> <pre><code>// webdriverio example. Calling webdriverio's `executeScript` command is what trigger's Appium's\n// Execute Script command handler\ndriver.executeScript('soundz: playSong', [{song: 'Stairway to Heaven', artist: 'Led Zeppelin'}]);\n</code></pre> <p>\u200b\u7136\u540e\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4ee3\u7801\u200b\u4e2d\u200b, \u200b\u53ef\u4ee5\u200b\u5c06\u200b\u9759\u6001\u200b\u5c5e\u6027\u200b <code>executeMethodMap</code> \u200b\u4f5c\u4e3a\u200b \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0a\u200b\u811a\u672c\u200b\u65b9\u6cd5\u200b\u540d\u79f0\u200b\u7684\u200b\u6620\u5c04\u200b. \u200b\u5b83\u200b\u5177\u6709\u200b\u4e0e\u200b <code>newMethodMap</code>\u200b\u76f8\u540c\u200b\u7684\u200b\u57fa\u672c\u200b\u5f62\u5f0f\u200b,  \u200b\u5982\u4e0b\u200b\u6240\u8ff0\u200b\u5728\u200b\u4e0a\u9762\u200b\u4e00\u65e6\u200b\u5b9a\u4e49\u200b\u4e86\u200b <code>executeMethodMap</code> ,  \u200b\u60a8\u200b\u8fd8\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200bExecute Script\u200b\u547d\u4ee4\u200b\u5904\u7406\u7a0b\u5e8f\u200b,  \u200b\u6839\u636e\u200bAppium\u200b\u7684\u200b\u8def\u7531\u200b\u6620\u5c04\u200b\u79f0\u4e3a\u200b<code>execute</code>.  \u200b\u5b9e\u65bd\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b\u4e00\u4e2a\u200b\u52a9\u624b\u200b\u51fd\u6570\u200b<code>this.executeMethod</code>,  \u200b\u5b83\u200b\u8d1f\u8d23\u200b\u67e5\u770b\u200b\u811a\u672c\u200b\u548c\u200b\u53c2\u6570\u200b, \u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u8def\u7531\u200b\u5230\u200b\u60a8\u200b\u5b9a\u4e49\u200b\u7684\u200b\u6b63\u786e\u200b\u81ea\u5b9a\u4e49\u200b\u5904\u7406\u7a0b\u5e8f\u200b.  \u200b\u793a\u4f8b\u200b\u5982\u4e0b\u200b:</p> <pre><code>static executeMethodMap = {\n  'soundz: playSong', {\n    command: 'soundzPlaySong',\n    params: {required: ['song', 'artist'], optional: []},\n  }\n}\n\nasync soundzPlaySong(song, artist) {\n  // play the song based on song and artist details\n}\n\nasync execute(script, args) {\n  return await this.executeMethod(script, args);\n}\n</code></pre> <p>\u200b\u5173\u4e8e\u200b\u8fd9\u4e2a\u200b\u7cfb\u7edf\u200b\u7684\u200b\u4e00\u4e9b\u200b\u6ce8\u610f\u4e8b\u9879\u200b: 1. \u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u53d1\u9001\u200b\u7684\u200b\u53c2\u6570\u200b\u6570\u7ec4\u200b\u5fc5\u987b\u200b\u4ec5\u200b\u5305\u542b\u200b\u96f6\u4e2a\u200b\u6216\u200b\u4e00\u4e2a\u200b\u5143\u7d20\u200b. \u200b\u8fd9\u200b    \u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u7b2c\u4e00\u9879\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u65b9\u6cd5\u200b\u7684\u200b\u53c2\u6570\u200b\u5bf9\u8c61\u200b. \u200b\u8fd9\u4e9b\u200b\u53c2\u6570\u200b    \u200b\u5c06\u200b\u6309\u7167\u200b<code>executeMethodMap</code>\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7684\u200b\u987a\u5e8f\u200b\u8fdb\u884c\u200b\u8f6c\u6362\u200b\u3001\u200b\u9a8c\u8bc1\u200b,     \u200b\u7136\u540e\u200b\u5e94\u7528\u200b\u4e8e\u200b\u91cd\u8f7d\u200b\u65b9\u6cd5\u200b (\u200b\u5728\u200b<code>required</code>\u200b\u53c2\u6570\u200b\u5217\u8868\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7684\u200b\u987a\u5e8f\u200b, \u200b\u540e\u200b\u8ddf\u200b    <code>optional</code>\u200b\u53c2\u6570\u200b\u5217\u8868\u200b). \u200b\u65e2\u200b\u8fd9\u4e2a\u200b\u6846\u67b6\u200b\u901a\u8fc7\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u53ea\u200b\u5047\u8bbe\u200b\u4e00\u4e2a\u200b\u5b9e\u9645\u200b\u7684\u200b\u53c2\u6570\u200b    (\u200b\u6b64\u53c2\u6570\u200b\u5e94\u662f\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b, \u200b\u5176\u952e\u200b/\u200b\u503c\u200b\u8868\u793a\u200b\u6267\u884c\u200b\u65b9\u6cd5\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u53c2\u6570\u200b) 1. Appium \u200b\u4e0d\u4f1a\u200b\u81ea\u52a8\u200b\u4e3a\u200b\u60a8\u200b\u5b9e\u73b0\u200b <code>execute</code>(\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u5904\u7406\u7a0b\u5e8f\u200b). \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5e0c\u671b\u200b,     \u200b\u4f8b\u5982\u200b, \u200b\u4ec5\u200b\u5728\u200b\u4e0d\u200b\u5728\u200b\u4ee3\u7406\u200b\u4e2d\u65f6\u200b\u624d\u200b\u8c03\u7528\u200b<code>executeMethod</code>\u200b\u5e2e\u52a9\u200b\u7a0b\u5e8f\u200b\u51fd\u6570\u200b! 1. \u200b\u5982\u679c\u200b\u811a\u672c\u200b\u540d\u79f0\u200b\u4e0e\u200b\u5176\u4e2d\u200b\u4e00\u4e2a\u200b\u4e0d\u200b\u5339\u914d\u200b, <code>executeMethod</code>\u200b\u52a9\u624b\u200b\u5c06\u200b\u6839\u636e\u200b<code>executeMethodMap</code>    \u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u547d\u4ee4\u200b\u7684\u200b\u811a\u672c\u200b\u540d\u79f0\u200b\u62d2\u7edd\u200b\u5e76\u200b\u663e\u793a\u200b\u9519\u8bef\u200b, \u200b\u6216\u8005\u200b\u663e\u793a\u200b\u7f3a\u5c11\u200b\u53c2\u6570\u200b.</p>"},{"location":"developing/build-drivers/#appium_3","title":"\u5b9e\u73b0\u200b\u5bf9\u200b Appium \u200b\u8bbe\u7f6e\u200b\u7684\u200b\u5904\u7406","text":"<p>Appium \u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b CLI \u200b\u53c2\u6570\u200b\u4ee5\u53ca\u200b\u529f\u80fd\u200b\u5c06\u200b\u53c2\u6570\u200b\u53d1\u9001\u5230\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.  \u200b\u4f46\u200b\u8fd9\u4e9b\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u65e0\u6cd5\u200b\u66f4\u6539\u200b, \u200b\u6709\u65f6\u200b\u7528\u6237\u200b\u5e0c\u671b\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u8c03\u6574\u200b\u53c2\u6570\u200b.  Appium \u200b\u6709\u200b\u4e00\u4e2a\u200b \u200b\u8bbe\u7f6e\u200b API\u200b\u7528\u4e8e\u200b\u6b64\u200b\u76ee\u7684\u200b.</p> <p>\u200b\u82e5\u200b\u8981\u200b\u652f\u6301\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u8bbe\u7f6e\u200b,  \u200b\u9996\u5148\u200b\u5c06\u200b<code>this.settings</code>\u200b\u5b9a\u4e49\u200b\u4e3a\u200b\u6784\u9020\u51fd\u6570\u200b\u4e2d\u200b\u7684\u200b\u76f8\u5e94\u200b\u7c7b\u200b:</p> <pre><code>// import {DeviceSettings} from 'appium/driver';\n\nthis.settings = new DeviceSettings();\n</code></pre> <p>\u200b\u73b0\u5728\u200b, \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u968f\u65f6\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b<code>this.settings.getSettings()</code>\u200b\u6765\u200b\u8bfb\u53d6\u200b\u7528\u6237\u200b\u8bbe\u7f6e\u200b.  \u200b\u8fd9\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b JS \u200b\u5bf9\u8c61\u200b, \u200b\u5176\u4e2d\u200b\u8bbe\u7f6e\u200b\u540d\u79f0\u200b\u662f\u200b\u952e\u200b\u5e76\u200b\u5177\u6709\u200b\u76f8\u5e94\u200b\u7684\u200b\u503c\u200b.</p> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u6307\u5b9a\u200b\u4e00\u4e9b\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b, \u200b\u6216\u8005\u200b\u5728\u200b\u66f4\u65b0\u200b\u540e\u200b\u8fd0\u884c\u200b\u4e00\u4e9b\u200b\u4ee3\u7801\u200b,  \u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u6267\u884c\u200b\u8fd9\u4e24\u9879\u200b\u64cd\u4f5c\u200b.</p> <pre><code>constructor() {\n  const defaults = {setting1: 'value1'};\n  this.settings = new DeviceSettings(defaults, this.onSettingsUpdate.bind(this));\n}\n\nasync onSettingsUpdate(key, value) {\n  // do anything you want here with key and value\n}\n</code></pre>"},{"location":"developing/build-drivers/#_15","title":"\u4e86\u89e3\u200b\u5176\u4ed6\u200b\u5e76\u53d1\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u8d44\u6e90","text":"<p>\u200b\u5047\u8bbe\u200b\u4f60\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u8017\u5c3d\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u7cfb\u7edf\u8d44\u6e90\u200b, \u200b\u5982\u200b\u7aef\u53e3\u200b.  \u200b\u6709\u200b\u51e0\u79cd\u200b\u65b9\u6cd5\u200b\u53ef\u4ee5\u200b\u786e\u4fdd\u200b\u591a\u4e2a\u200b\u540c\u65f6\u200b\u8fdb\u884c\u200b\u7684\u200b\u4f1a\u200b\u8bdd\u200b\u4e0d\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u7684\u200b\u8d44\u6e90\u200b:</p> <ol> <li>\u200b\u8ba9\u200b\u7528\u6237\u200b\u901a\u8fc7\u200b\u529f\u80fd\u200b(<code>appium:driverPort</code> \u200b\u7b49\u200b)\u200b\u6307\u5b9a\u200b\u8d44\u6e90\u200b ID</li> <li>\u200b\u53ea\u200b\u9700\u200b\u59cb\u7ec8\u200b\u4f7f\u7528\u200b\u81ea\u7531\u200b\u8d44\u6e90\u200b(\u200b\u4e3a\u200b\u6bcf\u4e2a\u200b\u4f1a\u8bdd\u200b\u627e\u5230\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u968f\u673a\u200b\u7aef\u53e3\u200b)</li> <li>\u200b\u8ba9\u200b\u6bcf\u4e2a\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u8868\u8fbe\u200b\u5b83\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u8d44\u6e90\u200b, \u200b\u7136\u540e\u200b\u68c0\u67e5\u200b\u5f53\u524d\u200b\u4f7f\u7528\u200b\u7684\u200b\u8d44\u6e90\u200b    \u200b\u65b0\u4f1a\u8bdd\u200b\u5f00\u59cb\u200b\u65f6\u200b\u7684\u200b\u5176\u4ed6\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.</li> </ol> <p>\u200b\u82e5\u200b\u8981\u200b\u652f\u6301\u200b\u8fd9\u200b\u7b2c\u4e09\u79cd\u200b\u7b56\u7565\u200b, \u200b\u53ef\u4ee5\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e2d\u200b\u5b9e\u73b0\u200b<code>get driverData</code>\u200b\u4ee5\u200b\u8fd4\u56de\u200b \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5f53\u524d\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u7684\u200b\u5404\u79cd\u200b\u8d44\u6e90\u200b, \u200b\u4f8b\u5982\u200b:</p> <pre><code>get driverData() {\n  return {specialPort: 1234, specialFile: /path/to/file}\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b, \u200b\u5f53\u200b\u5728\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0a\u200b\u542f\u52a8\u200b\u65b0\u4f1a\u200b\u8bdd\u200b\u65f6\u200b, \u200b\u6765\u81ea\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u4f1a\u8bdd\u200b\u7684\u200b<code>driverData</code>\u200b\u54cd\u5e94\u200b \u200b\u4e5f\u200b\u5c06\u200b\u5305\u62ec\u200b\u540c\u65f6\u200b\u8fd0\u884c\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b(\u200b\u76f8\u540c\u200b\u7c7b\u578b\u200b)\u200b\u5728\u5185\u200b, \u200b\u4f5c\u4e3a\u200b<code>createSession</code>\u200b\u65b9\u6cd5\u200b\u6700\u540e\u200b\u7684\u200b\u53c2\u6570\u200b:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, driverData)\n</code></pre> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6df1\u5165\u7814\u7a76\u200b\u6b64\u200b<code>driverData</code>\u200b\u6570\u7ec4\u200b,  \u200b\u4ee5\u200b\u67e5\u770b\u200b\u5176\u4ed6\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6b63\u5728\u200b\u4f7f\u7528\u200b\u54ea\u4e9b\u200b\u8d44\u6e90\u200b, \u200b\u6765\u200b\u63d0\u4f9b\u200b\u4ee5\u200b\u5e2e\u52a9\u200b\u786e\u5b9a\u200b\u54ea\u4e9b\u200b\u7528\u4e8e\u200b\u6b64\u4f1a\u8bdd\u200b.</p> <p>\u200b\u8b66\u544a\u200b</p> <p>\u200b\u8fd9\u91cc\u200b\u8981\u200b\u5c0f\u5fc3\u200b, \u200b\u56e0\u4e3a\u200b<code>driverData</code>\u200b\u53ea\u200b\u5728\u200b\u5355\u4e2a\u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200bAppium\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u4f1a\u200b\u8bdd\u200b\u4e4b\u95f4\u200b\u4f20\u9012\u200b.  \u200b\u6ca1\u6709\u200b\u4ec0\u4e48\u200b\u53ef\u4ee5\u200b\u963b\u6b62\u200b\u7528\u6237\u200b\u8fd0\u884c\u200b\u591a\u4e2a\u200b Appium \u200b\u670d\u52a1\u5668\u200b\u5e76\u200b\u8bf7\u6c42\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.  \u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u60a8\u200b\u5c06\u200b\u65e0\u6cd5\u200b\u901a\u8fc7\u200b<code>driverData</code>\u200b\u786e\u4fdd\u200b\u8d44\u6e90\u200b\u72ec\u7acb\u6027\u200b,  \u200b\u56e0\u6b64\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8003\u8651\u200b\u4f7f\u7528\u200b\u57fa\u4e8e\u200b\u6587\u4ef6\u200b\u7684\u200b\u9501\u5b9a\u200b\u673a\u5236\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u4e1c\u897f\u200b.</p> <p>\u200b\u8b66\u544a\u200b</p> <p>\u200b\u540c\u6837\u200b\u91cd\u8981\u200b\u7684\u200b\u662f\u200b\u8981\u200b\u6ce8\u610f\u200b, \u200b\u60a8\u200b\u53ea\u4f1a\u200b\u6536\u5230\u200b\u60a8\u200b\u7684\u200b\u5176\u4ed6\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5b9e\u4f8b\u200b\u7684\u200b<code>driverData</code>.  \u200b\u56e0\u6b64\u200b, \u200b\u6b63\u5728\u200b\u8fd0\u884c\u200b\u7684\u200b\u4e0d\u200b\u76f8\u5173\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u80fd\u200b\u4ecd\u200b\u5728\u200b\u4f7f\u7528\u200b\u67d0\u4e9b\u200b\u7cfb\u7edf\u8d44\u6e90\u200b.  \u200b\u901a\u5e38\u200bAppium \u200b\u4e0d\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u529f\u80fd\u200b\u6765\u200b\u786e\u4fdd\u200b\u4e0d\u200b\u76f8\u5173\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0d\u4f1a\u200b\u4e92\u76f8\u200b\u5e72\u6270\u200b,  \u200b\u56e0\u6b64\u200b\u7531\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u6307\u5b9a\u200b\u8d44\u6e90\u200b\u4f4d\u7f6e\u200b\u6216\u200b\u5730\u5740\u200b\u4ee5\u200b\u907f\u514d\u200b\u51b2\u7a81\u200b</p>"},{"location":"developing/build-drivers/#appium_4","title":"\u5c06\u200b\u4e8b\u4ef6\u200b\u8bb0\u5f55\u200b\u5230\u200b Appium \u200b\u4e8b\u4ef6\u200b\u65f6\u95f4\u200b\u7ebf","text":"<p>Appium \u200b\u6709\u200b\u4e00\u4e2a\u200b Event Timing API,  \u200b\u5141\u8bb8\u200b\u7528\u6237\u200b\u83b7\u53d6\u200b\u5bf9\u200b\u67d0\u4e9b\u200b\u670d\u52a1\u5668\u7aef\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u65f6\u95f4\u200b\u6233\u200b(\u200b\u5982\u200b\u547d\u4ee4\u200b\u3001\u200b\u542f\u52a8\u200b\u91cc\u7a0b\u7891\u200b\u7b49\u200b),  \u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u663e\u793a\u200b\u5728\u200b\u65f6\u95f4\u200b\u7ebf\u200b.  \u200b\u8be5\u200b\u529f\u80fd\u200b\u57fa\u672c\u4e0a\u200b\u5b58\u5728\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5141\u8bb8\u200b\u5185\u7701\u200b\u5185\u90e8\u200b\u4e8b\u4ef6\u200b\u7684\u200b\u65f6\u95f4\u200b,  \u200b\u4ee5\u200b\u5e2e\u52a9\u200b\u8c03\u8bd5\u200b\u6216\u200b\u8fd0\u884c\u200b\u5bf9\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5185\u90e8\u200b\u7684\u200b\u5206\u6790\u200b.  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e8b\u4ef6\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4e8b\u4ef6\u200b\u65e5\u5fd7\u200b:</p> <pre><code>this.logEvent(name);\n</code></pre> <p>\u200b\u53ea\u200b\u9700\u4e3a\u200b\u4e8b\u4ef6\u200b\u63d0\u4f9b\u200b\u4e00\u4e2a\u200b\u540d\u79f0\u200b, \u200b\u5b83\u200b\u5c31\u200b\u4f1a\u200b\u5728\u200b\u5f53\u524d\u200b\u65f6\u95f4\u200b\u6dfb\u52a0\u200b,  \u200b\u5e76\u200b\u4f5c\u4e3a\u200b\u7528\u6237\u200b\u4e8b\u4ef6\u200b\u65e5\u5fd7\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u4f9b\u200b\u8bbf\u95ee\u200b.</p>"},{"location":"developing/build-drivers/#_16","title":"\u5c06\u200b\u884c\u4e3a\u200b\u9690\u85cf\u200b\u5728\u200b\u5b89\u5168\u6807\u5fd7\u200b\u540e\u9762","text":"<p>Appium \u200b\u6709\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200b\u529f\u80fd\u200b\u6807\u5fd7\u200b\u7684\u200b \u200b\u5b89\u5168\u200b\u6a21\u578b\u200b,  \u200b\u5141\u8bb8\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4f5c\u8005\u200b\u5c06\u200b\u67d0\u4e9b\u200b\u529f\u80fd\u200b\u9690\u85cf\u200b\u5728\u200b\u5b89\u5168\u6807\u5fd7\u200b\u540e\u9762\u200b.  \u200b\u8fd9\u200b\u610f\u5473\u7740\u200b, \u200b\u5982\u679c\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200b\u529f\u80fd\u200b, \u200b\u4f60\u200b\u8ba4\u4e3a\u200b\u4e0d\u200b\u5b89\u5168\u200b\u5e76\u200b\u5e0c\u671b\u200b\u8981\u6c42\u200b\u670d\u52a1\u5668\u200b\u7ba1\u7406\u5458\u200b\u9009\u62e9\u6027\u200b\u5730\u200b\u5f15\u5165\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8981\u6c42\u200b\u4ed6\u4eec\u200b\u542f\u7528\u200b\u8be5\u200b\u529f\u80fd\u200b\u901a\u8fc7\u200b\u5c06\u200b\u5176\u200b\u6dfb\u52a0\u200b\u5230\u200b <code>--allow-insecure</code>\u200b\u5217\u8868\u200b\u6216\u200b\u5b8c\u5168\u200b\u5173\u95ed\u200b\u670d\u52a1\u5668\u200b\u5b89\u5168\u6027\u200b.</p> <p>\u200b\u82e5\u200b\u8981\u200b\u652f\u6301\u200b\u5728\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u68c0\u67e5\u200b,  \u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b<code>this.isFeatureEnabled(featureName)</code>\u200b\u6765\u200b\u786e\u5b9a\u200b\u662f\u5426\u200b\u5df2\u200b\u542f\u7528\u200b\u7ed9\u5b9a\u200b\u540d\u79f0\u200b\u7684\u200b\u529f\u80fd\u200b.  \u200b\u6216\u8005\u200b, \u200b\u82e5\u200b\u5728\u200b\u60a8\u200b\u672a\u200b\u542f\u7528\u200b\u8be5\u200b\u529f\u80fd\u200b\u7684\u200b\u524d\u63d0\u200b\u4e0b\u200b\u53ea\u200b\u60f3\u200b\u77ed\u8def\u200b\u5e76\u200b\u629b\u51fa\u200b\u9519\u8bef\u200b,  \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b`this.assertFeatureEnabled(featureName)``.</p>"},{"location":"developing/build-drivers/#_17","title":"\u5bf9\u200b\u6587\u4ef6\u200b\u4f7f\u7528\u200b\u4e34\u65f6\u200b\u76ee\u5f55","text":"<p>\u200b\u5982\u679c\u200b\u8981\u200b\u5bf9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u521b\u5efa\u200b\u7684\u200b\u4e0d\u200b\u91cd\u8981\u200b\u7684\u200b\u6587\u4ef6\u200b\u4f7f\u7528\u200b\u4e34\u65f6\u200b\u76ee\u5f55\u200b,  \u200b\u5e76\u200b\u4e0d\u53d7\u200b\u8ba1\u7b97\u673a\u200b\u6216\u200b\u670d\u52a1\u5668\u200b\u91cd\u65b0\u542f\u52a8\u200b\u7684\u200b\u5f71\u54cd\u200b, \u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u4ece\u200b<code>this.opts.tmpDir</code>\u200b\u8bfb\u53d6\u200b\u5373\u53ef\u200b.  \u200b\u8fd9\u200b\u4ece\u200b<code>@appium/support</code>\u200b\u8bfb\u53d6\u200b\u4e34\u65f6\u200b\u76ee\u5f55\u200b\u4f4d\u7f6e\u200b, \u200b\u53ef\u80fd\u200b\u88ab\u200b CLI \u200b\u8986\u76d6\u200b\u6807\u8bb0\u200b.  \u200b\u4e5f\u5c31\u662f\u8bf4\u200b, \u200b\u5b83\u200b\u6bd4\u200b\u5199\u5165\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u4e34\u65f6\u200b\u76ee\u5f55\u200b\u66f4\u200b\u5b89\u5168\u200b, \u200b\u56e0\u4e3a\u200b\u8fd9\u91cc\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u8fd0\u884c\u200b\u4e0e\u200b\u6f5c\u5728\u200b\u7684\u200b\u7528\u6237\u200b\u914d\u7f6e\u200b\u5951\u5408\u200b.  <code>this.opts.tmpDir</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b, \u200b\u662f\u200b\u76ee\u5f55\u200b\u7684\u200b\u8def\u5f84\u200b.</p>"},{"location":"developing/build-drivers/#_18","title":"\u5904\u7406\u200b\u610f\u5916\u200b\u5173\u673a\u200b\u6216\u200b\u5d29\u6e83","text":"<p>\u200b\u60a8\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u9047\u5230\u200b\u65e0\u6cd5\u200b\u7ee7\u7eed\u200b\u6b63\u5e38\u200b\u8fd0\u884c\u200b\u7684\u200b\u60c5\u51b5\u200b.  \u200b\u4f8b\u5982\u200b, \u200b\u5b83\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u68c0\u6d4b\u200b\u5230\u200b\u67d0\u4e9b\u200b\u5916\u90e8\u200b\u670d\u52a1\u200b\u5df2\u200b\u5d29\u6e83\u200b, \u200b\u5e76\u4e14\u200b\u4e0d\u518d\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b.  \u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u5b83\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b<code>this.startUnexpectedShutdown(err)</code>,  \u200b\u5176\u4e2d\u200b\u5305\u542b\u200b\u5305\u542b\u200b\u4efb\u4f55\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u7684\u200b\u9519\u8bef\u200b\u5bf9\u8c61\u200b,  \u200b\u4ee5\u53ca\u200bAppium\u200b\u5c06\u200b\u5c1d\u8bd5\u200b\u5728\u200b\u5173\u95ed\u200b\u4f1a\u8bdd\u200b\u4e4b\u524d\u200b\u6b63\u5e38\u200b\u5904\u7406\u200b\u4efb\u4f55\u200b\u5269\u4f59\u200b\u7684\u200b\u8bf7\u6c42\u200b.</p> <p>\u200b\u5982\u679c\u200b\u8981\u200b\u5728\u200b\u9047\u5230\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u65f6\u200b\u6267\u884c\u200b\u4e00\u4e9b\u200b\u81ea\u5df1\u200b\u7684\u200b\u6e05\u7406\u200b\u903b\u8f91\u200b,  \u200b\u5219\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8c03\u7528\u200b<code>this.startUnexpectedShutdown</code>\u200b\u4e4b\u524d\u200b\u7acb\u5373\u200b\u6267\u884c\u200b\u6b64\u200b\u64cd\u4f5c\u200b,  \u200b\u6216\u8005\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9644\u52a0\u200b\u5904\u7406\u7a0b\u5e8f\u200b\u5230\u200b\u610f\u5916\u200b\u7684\u200b\u5173\u673a\u200b\u4e8b\u4ef6\u200b\u5e76\u200b\u8fd0\u884c\u200b\u6e05\u7406\u200b\u903b\u8f91\u200b\"\u200b\u5e26\u5916\u200b\u6570\u636e\u200b\":</p> <pre><code>this.onUnexpectedShutdown(handler)\n</code></pre> <p><code>handler</code>  \u200b\u5e94\u8be5\u200b\u662f\u200b\u4e00\u4e2a\u200b\u63a5\u6536\u200b\u9519\u8bef\u200b\u5bf9\u8c61\u200b\u7684\u200b\u51fd\u6570\u200b(\u200b\u8868\u793a\u200b\u610f\u5916\u200b\u5173\u673a\u200b). </p>"},{"location":"developing/build-plugins/","title":"Building Plugins","text":"<p>This is a high-level guide for developing Appium plugins, which is not something most Appium users need to know or care about. If you are not familiar with Appium plugins yet from a user perspective, check out the list of plugins to play around with some and get an idea of the sorts of things that plugins can do. Plugins are a powerful system for augmenting Appium's functionality or changing the way Appium works. They can be distributed to other Appium users and can extend Appium's ecosystem in all kinds of interesting ways! (There is also a significant amount of overlap here with developing Appium drivers, so you may also want to check out the building drivers guide for further inspiration.)</p>"},{"location":"developing/build-plugins/#before-you-create-your-plugin","title":"Before you create your plugin","text":"<p>Before creating your plugin, it's good to have a general idea of what you want your plugin to accomplish and whether it will be possible to implement it given the restrictions of the Appium platform. Reading through this guide will help you understand what's possible. In general, Appium's plugin system is extremely powerful and no attempts have been made to artificially limit what's possible with them (which is a main reason that all plugins are opt-in by the system administrator responsible for starting the Appium server---plugins are powerful and should only be used when explicitly trusted!).</p>"},{"location":"developing/build-plugins/#other-plugins-to-reference","title":"Other plugins to reference","text":"<p>There are a wide variety of open source Appium plugins available for perusal. It's definitely recommended to explore the code for some other plugins before embarking on writing your own. The Appium team maintains a set of official plugins in the Appium GitHub repo. Links to other open source plugins can be found in the Plugin list</p>"},{"location":"developing/build-plugins/#basic-requirements-for-plugins","title":"Basic requirements for plugins","text":"<p>These are the things your plugin must do (or be), if you want it to be a valid Appium plugin.</p>"},{"location":"developing/build-plugins/#nodejs-package-with-appium-extension-metadata","title":"Node.js package with Appium extension metadata","text":"<p>All Appium plugins are fundamentally Node.js packages, and therefore must have a valid <code>package.json</code>. Your driver is not limited to Node.js, but it must provide an adapter written in Node.js so it can be loaded by Appium.</p> <p>Your <code>package.json</code> must include <code>appium</code> as a <code>peerDependency</code>. The requirements for the dependency versions should be as loose as possible (unless you happen to know your plugin will only work with certain versions of Appium). For Appium 2, for example, this would look something like <code>^2.0.0</code>, declaring that your plugin works with any version of Appium that starts with 2.x.</p> <p>Your <code>package.json</code> must contain an <code>appium</code> field, like this (we call this the 'Appium extension metadata'):</p> <pre><code>```json\n{\n  ...,\n  \"appium\": {\n    \"pluginName\": \"fake\",\n    \"mainClass\": \"FakePlugin\"\n  },\n  ...\n}\n```\n</code></pre> <p>The required subfields are:</p> <ul> <li><code>pluginName</code>: this should be a short name for your plugin.</li> <li><code>mainClass</code>: this is a named export (in CommonJS style) from your <code>main</code> field. It must be a   class which extends Appium's <code>BasePlugin</code> (see below).</li> </ul>"},{"location":"developing/build-plugins/#extend-appiums-baseplugin-class","title":"Extend Appium's <code>BasePlugin</code> class","text":"<p>Ultimately, your plugin is much easier to write because most of the hard work of defining patterns for overriding commands is done for you. This is all encoded up as a class which Appium exports for you to use, called <code>BasePlugin</code>. It is exported from <code>appium/plugin</code>, so you can use one of these styles to import it and create your own class that extends it:</p> <pre><code>import {BasePlugin} from 'appium/plugin';\n// or: const {BasePlugin} = require('appium/plugin');\n\nexport class MyPlugin extends BasePlugin {\n  // class methods here\n}\n</code></pre> <p>Note</p> <p>In all the code samples below, whenever we reference an example method, it is assumed that it is defined within the class, though this is not explicitly written, for the sake of clarity and space.</p>"},{"location":"developing/build-plugins/#make-your-plugin-available","title":"Make your plugin available","text":"<p>That's basically it! With a Node.js package exporting a plugin class and with correct Appium extension metadata, you've got yourself an Appium plugin! Now it doesn't do anything, but you can load it up in Appium, activate it, etc...</p> <p>To make it available to users, you could publish it via NPM. When you do so, your plugin will be installable via the Appium CLI:</p> <pre><code>appium plugin install --source=npm &lt;plugin-package-on-npm&gt;\n</code></pre> <p>It's a good idea to test your plugin first, of course. One way to see how it works within Appium is to install it locally first:</p> <pre><code>appium plugin install --source=local /path/to/your/plugin\n</code></pre> <p>And of course, plugins must be \"activated\" during Appium server start, so make sure you direct your users to do so:</p> <pre><code>appium --use-plugins=plugin-name\n</code></pre>"},{"location":"developing/build-plugins/#developing-your-plugin","title":"Developing your plugin","text":"<p>How you develop your plugin is up to you. It is convenient, however, to run it from within Appium without having to do lots of publishing and installing. The most straightforward way to do this is to include the most recent version of Appium as a <code>devDependency</code> (although its being already included as a <code>peerDependency</code> is sufficient in newer versions of NPM), and then also your own plugin, like this:</p> <pre><code>{\n    \"devDependencies\": {\n        ...,\n        \"appium\": \"^2.0.0\",\n        \"your-plugin\": \"file:.\",\n        ...\n    }\n}\n</code></pre> <p>Now, you can run Appium locally (<code>npm exec appium</code> or <code>npx appium</code>), and because your plugin is listed as a dependency alongside it, it will be automatically \"installed\" and available. You can design your e2e tests this way, or if you're writing them in Node.js, you can simply import Appium's start server methods to handle starting and stopping the Appium server in Node.</p> <p>Of course, you can always install it locally as described above as well.</p> <p>Anytime you make changes to your plugin code, you'll need to restart the Appium server to make sure it picks up the latest code. As with drivers, you can set the <code>APPIUM_RELOAD_EXTENSIONS</code> environment variable if you wish Appium to try to re-require your plugin module when a new session starts.</p>"},{"location":"developing/build-plugins/#standard-plugin-implementation-ideas","title":"Standard plugin implementation ideas","text":"<p>These are things you will probably find yourself wanting to do when creating a plugin.</p>"},{"location":"developing/build-plugins/#set-up-state-in-a-constructor","title":"Set up state in a constructor","text":"<p>If you define your own constructor, you'll need to call <code>super</code> to make sure all the standard state is set up correctly:</p> <pre><code>constructor(...args) {\n    super(...args);\n    // now do your own thing\n}\n</code></pre> <p>The <code>args</code> parameter here is the object containing all the CLI args used to start the Appium server.</p>"},{"location":"developing/build-plugins/#intercept-and-handle-specific-appium-commands","title":"Intercept and handle specific Appium commands","text":"<p>This is the most normal behavior for Appium plugins -- to modify or replace the execution of one or more commands that would normally be handled by the active driver. To override the default command handling, you need to implement <code>async</code> methods in your class with the same name as the Appium commands to be handled (just exactly how drivers themselves are implemented). Curious what command names there are? They are defined in the Appium base driver's routes.js file, and of course you can add more as defined in the next section.</p> <p>Each command method is sent the following arguments:</p> <ol> <li><code>next</code>: This is a reference to an <code>async</code> function which encapsulates the chain of behaviors which would take place if this plugin were not handling the command. You can choose to call the next behavior in the chain at any point in your logic (by making sure to include <code>await next()</code> somewhere), or not. If you don't, it means the default behavior (or any plugins registered after this one) won't be run.</li> <li><code>driver</code>: This is the object representing the driver handling the current session. You have access to it for any work you need to do, for example calling other driver methods, checking capabilities or settings, etc...</li> <li><code>...args</code>: A spread array with any arguments that have been applied to the command by the user.</li> </ol> <p>For example, if we wanted to override the <code>setUrl</code> command to simply add some extra logging on top, we would implement as follows:</p> <pre><code>async setUrl(next, driver, url) {\n  this.log(`Let's get the page source for some reason before navigating to '${url}'!`);\n  await driver.getPageSource();\n  const result = await next();\n  this.log(`We can also log after the original behaviour`);\n  return result;\n}\n</code></pre>"},{"location":"developing/build-plugins/#intercept-and-handle-all-appium-commands","title":"Intercept and handle all Appium commands","text":"<p>You might find yourself in a position where you want to handle all commands, in order to inspect payloads to determine whether or not to act in some way. If so, you can implement <code>async handle</code>, and any command that is not handled by one of your named methods will be handled by this method instead. It takes the following parameters (with all the same semantics as above):</p> <ol> <li><code>next</code></li> <li><code>driver</code></li> <li><code>cmdName</code> - string representing the command being run</li> <li><code>...args</code></li> </ol> <p>For example, let's say we want to log timing for all Appium commands as part of a plugin. We could do this by implementing <code>handle</code> in our plugin class as follows:</p> <pre><code>async handle(next, driver, cmdName, ...args) {\n  const start = Date.now();\n  try {\n    const result = await next();\n  } finally {\n    const elapsedMs = Date.now() - start;\n    this.log(`Command '${cmdName}' took ${elapsedMs}`);\n  }\n  return result;\n}\n</code></pre>"},{"location":"developing/build-plugins/#work-around-driver-proxies","title":"Work around driver proxies","text":"<p>There is a bit of a gotcha with handling Appium commands. Appium drivers have the ability to turn on a special 'proxy' mode, wherein the Appium server process takes a look at incoming URLs, and decides whether to forward them on to some upstream WebDriver server. It could happen that a command which a plugin wants to handle is designated as a command which is being proxied to an upstream server. In this case, we run into a problem, because the plugin never gets a chance to handle that command! For this reason, plugins can implement a special member function called <code>shouldAvoidProxy</code>, which takes the following parameters:</p> <ol> <li><code>method</code> - string denoting HTTP method (<code>GET</code>, <code>POST</code>, etc...)</li> <li><code>route</code> - string denoting the requested resource, for example <code>/session/8b3d9aa8-a0ca-47b9-9ab7-446e818ec4fc/source</code></li> <li><code>body</code> - optional value of any type representing the WebDriver request body</li> </ol> <p>These parameters define an incoming request. If you want to handle a command in your plugin which would normally be proxied directly through a driver, you could disable or 'avoid' proxying the request, and instead have the request fall into the typical Appium command execution flow (and thereby your own command function). To avoid proxying a request, just return <code>true</code> from <code>shouldAvoidProxy</code>. Some examples of how this method is used are in the Universal XML plugin (where we want to avoid proxying the <code>getPageSource</code> command, or in the Images plugin (where we want to conditionally avoid proxying any command if it looks like it contains an image element).</p>"},{"location":"developing/build-plugins/#throw-webdriver-specific-errors","title":"Throw WebDriver-specific errors","text":"<p>The WebDriver spec defines a set of error codes to accompany command responses if an error occurred. Appium has created error classes for each of these codes, so you can throw the appropriate error from inside a command, and it will do the right thing in terms of the protocol response to the user. To get access to these error classes, import them from <code>appium/driver</code>:</p> <pre><code>import {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"developing/build-plugins/#log-messages-to-the-appium-log","title":"Log messages to the Appium log","text":"<p>You can always use <code>console.log</code>, of course, but Appium provides a nice logger for you as <code>this.logger</code> (it has <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> methods on it for differing log levels). If you want to create an Appium logger outside of a plugin context (say in a script or helper file), you can always construct your own too:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyPlugin');\n</code></pre>"},{"location":"developing/build-plugins/#further-possibilities-for-appium-plugins","title":"Further possibilities for Appium plugins","text":"<p>These are things your plugin can do to take advantage of extra plugin features or do its job more conveniently.</p>"},{"location":"developing/build-plugins/#add-a-schema-for-custom-command-line-arguments","title":"Add a schema for custom command line arguments","text":"<p>You can add custom CLI args if you want your plugin to receive data from the command line when the Appium server is started (for example, ports that a server administrator should set that should not be passed in as capabilities).</p> <p>This works largely the same for plugins as it does for drivers, so for more details have a look at the equivalent section in the building drivers doc.</p> <p>The only difference is that to construct the CLI argument name, you prefix it with <code>--plugin-&lt;name&gt;</code>. So for example, if you have a plugin named <code>pluggo</code> and a CLI arg defined with the name <code>electro-port</code>, you can set it when starting Appium via <code>--plugin-pluggo-electro-port</code>.</p> <p>Setting args via a configuration file is also supported, as it is for drivers, but under the <code>plugin</code> field instead. For example:</p> <pre><code>{\n  \"server\": {\n    \"plugin\": {\n      \"pluggo\": {\n        \"electro-port\": 1234\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"developing/build-plugins/#add-plugin-scripts","title":"Add plugin scripts","text":"<p>Sometimes you might want users of your plugin to be able to run scripts outside the context of a session (for example, to run a script that pre-builds aspects of your plugin). To support this, you can add a map of script names and JS files to the <code>scripts</code> field within your Appium extension metadata. So let's say you've created a script in your project that lives in a <code>scripts</code> directory in your project, named <code>plugin-prebuild.js</code>. Then you could add a <code>scripts</code> field like this:</p> <pre><code>{\n    \"scripts\": {\n        \"prebuild\": \"./scripts/plugin-prebuild.js\"\n    }\n}\n</code></pre> <p>Now, assuming your plugin is named <code>myplugin</code>, users of your plugin can run <code>appium plugin run myplugin prebuild</code>, and your script will execute.</p>"},{"location":"developing/build-plugins/#add-new-appium-commands","title":"Add new Appium commands","text":"<p>If you want to offer functionality that doesn't map to any of the existing commands supported by drivers, you can create new commands in one of two ways, just as is possible for drivers:</p> <ol> <li>Extending the WebDriver protocol and creating client-side plugins to access the extensions</li> <li>Overloading the Execute Script command by defining Execute    Methods</li> </ol> <p>If you want to follow the first path, you can direct Appium to recognize new methods and add them to its set of allowed HTTP routes and command names. You do this by assigning the <code>newMethodMap</code> static variable in your driver class to an object of the same form as Appium's <code>routes.js</code> object. For example, here is part of the <code>newMethodMap</code> for the <code>FakePlugin</code> example driver:</p> <pre><code>static newMethodMap = {\n  '/session/:sessionId/fake_data': {\n    GET: {command: 'getFakeSessionData', neverProxy: true},\n    POST: {\n      command: 'setFakeSessionData',\n      payloadParams: {required: ['data']},\n      neverProxy: true,\n    },\n  },\n  '/session/:sessionId/fakepluginargs': {\n    GET: {command: 'getFakePluginArgs', neverProxy: true},\n  },\n};\n</code></pre> <p>Note</p> <p>If you're using TypeScript, static member objects like these should be defined <code>as const</code>.</p> <p>In this example we're adding a few new routes and a total of 3 new commands. For more examples of how to define commands in this way, it's best to have a look through <code>routes.js</code>. Now all you need to do is implement the command handlers in the same way you'd implement any other Appium command.</p> <p>Note also the special <code>neverProxy</code> key for commands; this is generally a good idea to set to <code>true</code> for plugins, since your plugin might be active for a driver that is put into proxy mode but hasn't bothered to decline proxying for these (new and therefore unknown) commands. Setting <code>neverProxy</code> to <code>true</code> here will cause Appium to never proxy these routes and therefore ensure your plugin handles them, even if a driver is in proxy mode.</p> <p>The downside of adding new commands via <code>newMethodMap</code> is that people using the standard Appium clients won't have nice client-side functions designed to target these endpoints. So you would need to create and release client-side plugins for each language you want to support (directions or examples can be found at the relevant client docs).</p> <p>An alternative to this way of doing things is to overload a command which all WebDriver clients have access to already: Execute Script. Make sure to read the section on adding new commands in the Building Drivers guide to understand the way this works in general. The way it works with plugins is only slightly different. Let's look at an example taken from Appium's <code>fake-plugin</code>:</p> <pre><code>static executeMethodMap = {\n  'fake: plugMeIn': {\n    command: 'plugMeIn',\n    params: {required: ['socket']},\n  },\n};\n\nasync plugMeIn(next, driver, socket) {\n  return `Plugged in to ${socket}`;\n}\n\nasync execute(next, driver, script, args) {\n  return await this.executeMethod(next, driver, script, args);\n}\n</code></pre> <p>We have three important components shown here which make this system work, all of which are defined inside the plugin class:</p> <ol> <li>The <code>executeMethodMap</code>, defined in just the same way as for drivers</li> <li>The implementation of the command method as defined in <code>executeMethodMap</code> (in this case,    <code>plugMeIn</code>)</li> <li>The overriding/handling of the <code>execute</code> command. Just like any plugin command handlers, the first two arguments are <code>next</code> and <code>driver</code>, followed by the script name and args. <code>BasePlugin</code> implements a helper method which we can simply call with all of these arguments.</li> </ol> <p>Overriding Execute Methods from drivers works as you'd expect: if your plugin defines an Execute Method with the same name as that of a driver, your command (in this case <code>plugMeIn</code>) will be called first. You can choose to run the driver's original behaviour via <code>next</code> if you want.</p>"},{"location":"developing/build-plugins/#build-appium-doctor-checks","title":"Build Appium Doctor checks","text":"<p>Your users can run <code>appium plugin doctor &lt;pluginName&gt;</code> to run installation and health checks. Visit the Building Doctor Checks guide for more information on this capability.</p>"},{"location":"developing/build-plugins/#update-the-appium-server-object","title":"Update the Appium server object","text":"<p>You probably don't normally need to update the Appium server object (which is an Express server having already been configured in a variety of ways). But, for example, you could add new Express middleware to the server to support your plugin's requirements. To update the server you must implement the <code>static async updateServer</code> method in your class. This method takes three parameters:</p> <ul> <li><code>expressApp</code>: the Express app object</li> <li><code>httpServer</code>: the Node HTTP server object</li> <li><code>cliArgs</code>: a map of the CLI args used to start the Appium server</li> </ul> <p>You can do whatever you want with them inside the <code>updateServer</code> method. You might want to reference how these objects are created and worked with in the BaseDriver code, so that you know you're not undoing or overriding anything standard and important. But if you insist, you can, with results you'll need to test! Warning: this should be considered an advanced feature and requires knowledge of Express, as well as the care not to do anything that could affect the operation of other parts of the Appium server!</p>"},{"location":"developing/build-plugins/#handle-unexpected-session-shutdown","title":"Handle unexpected session shutdown","text":"<p>When developing a plugin you may want to add some cleanup logic for when a session ends. You would naturally do this by adding a handler for <code>deleteSession</code>. This works in most cases, except when the session does not finish cleanly. Appium sometimes determines that a session has finished unexpectedly, and in these situations, Appium will look for a method called <code>onUnexpectedShutdown</code> in your plugin class, which will be called (passing the current session driver as the first parameter, and the error object representing the cause of the shutdown as the second), giving you an opportunity to take any steps that might be necessary to clean up from the session. For example, keeping in mind that the function is not <code>await</code>ed you could implement something like this:</p> <pre><code>async onUnexpectedShutdown(driver, cause) {\n  try {\n    // do some cleanup\n  } catch (e) {\n    // log any errors; don't allow anything to be thrown as they will be unhandled rejections\n  }\n}\n</code></pre>"},{"location":"ecosystem/","title":"Ecosystem Overview","text":"<p>Appium has a wide ecosystem of related software and tools. This section of the Appium documentation aims to compile a listing of various officially-supported and community-supported Appium projects:</p> <ul> <li> <p> Drivers</p> <p>Link Appium to your test device</p> <p> View all drivers</p> </li> <li> <p> Clients</p> <p>Link Appium to your automation code</p> <p> View all clients</p> </li> <li> <p> Plugins</p> <p>Modify and extend Appium functionality</p> <p> View all plugins</p> </li> <li> <p> Tools</p> <p>Interact with Appium in other ways</p> <p> View all tools</p> </li> </ul>"},{"location":"ecosystem/clients/","title":"Appium Clients","text":"<p>You need a client to write and run Appium scripts. You'll want to become very familiar with your client documentation (as well as the documentation of any Selenium client that the Appium client depends on) since that will be your primary interface to Appium.</p> <p>To learn more about clients, read our Client Intro.</p>"},{"location":"ecosystem/clients/#official-clients","title":"Official Clients","text":"<p>These clients are currently maintained by the Appium team:</p> Client Language Appium Java client Java Appium Python client Python Appium Ruby Core client (Recommended)Appium Ruby client Ruby Appium .NET client C#"},{"location":"ecosystem/clients/#other-clients","title":"Other Clients","text":"<p>These clients are not maintained by the Appium team and can be used with other languages:</p> Client Language WebdriverIO Node.js Nightwatch.js Node.js RobotFramework DSL multicatch's appium-client Rust <p>In general, any W3C WebDriver spec-compatible client will also integrate well with Appium, though some Appium-specific commands may not be implemented in other clients.</p> <p>Note</p> <p>If you maintain an Appium client that you would like to be listed in the Appium docs, feel free to make a PR to add it to this section with a link to the documentation for the client.</p>"},{"location":"ecosystem/drivers/","title":"Appium Drivers","text":"<p>You can't use Appium without at least one driver! Click on the link for each driver to see the specific installation instructions and documentation for that driver.</p> <p>Generally, drivers can be installed using their listed installation key, with the following command: <pre><code>appium driver install &lt;installation key&gt;\n</code></pre></p> <p>To learn more about drivers, check out the Driver Intro.</p>"},{"location":"ecosystem/drivers/#official-drivers","title":"Official Drivers","text":"<p>These drivers are currently maintained by the Appium team:</p> Driver Installation Key Platform(s) Mode(s) Chromium <code>chromium</code> macOS, Windows, Linux Web Espresso <code>espresso</code> Android Native Gecko <code>gecko</code> macOS, Windows, Linux, Android Web Mac2 <code>mac2</code> macOS Native Safari <code>safari</code> macOS, iOS Web UiAutomator2 <code>uiautomator2</code> Android Native, Hybrid, Web Windows <code>windows</code> Windows Native XCUITest <code>xcuitest</code> iOS Native, Hybrid, Web"},{"location":"ecosystem/drivers/#other-drivers","title":"Other Drivers","text":"<p>These drivers are not maintained by the Appium team and can be used to target additional platforms:</p> Driver Installation Key Platform(s) Mode(s) Supported By Flutter <code>--source=npm appium-flutter-driver</code> iOS, Android Native Community Flutter Integration <code>--source=npm appium-flutter-integration-driver</code> iOS, Android Native Community / <code>@AppiumTestDistribution</code> LG WebOS <code>--source=npm appium-lg-webos-driver</code> LG TV Web HeadSpin Linux <code>--source=npm @stdspa/appium-linux-driver</code> Linux Native <code>@fantonglang</code> Roku <code>--source=npm @headspinio/appium-roku-driver</code> Roku Native HeadSpin Tizen <code>--source=npm appium-tizen-driver</code> Android Native Community / Samsung TizenTV <code>--source=npm appium-tizen-tv-driver</code> Samsung TV Web HeadSpin Youi <code>--source=npm appium-youiengine-driver</code> iOS, Android, macOS, Linux, tvOS Native Community / You.i <p>Note</p> <p>If you maintain an Appium driver that you would like to be listed in the Appium docs, feel free to make a PR to add it to this section with a link to the driver documentation.</p>"},{"location":"ecosystem/plugins/","title":"Appium Plugins","text":"<p>Plugins offer various ways to extend or modify Appium's behaviour. They are completely optional and are not needed for standard automation functionality, but you may find them to be useful for more specialised automation workflows.</p> <p>Generally, plugins can be installed using their listed installation key, with the following command: <pre><code>appium plugin install &lt;installation key&gt;\n</code></pre></p>"},{"location":"ecosystem/plugins/#official-plugins","title":"Official Plugins","text":"<p>These plugins are are currently maintained by the Appium team:</p> Plugin Installation Key Description Execute Driver <code>execute-driver</code> Run entire batches of commands in a single call to the Appium server Images <code>images</code> Image matching and comparison features Relaxed Caps <code>relaxed-caps</code> Relax Appium's requirement for vendor prefixes on capabilities Universal XML <code>universal-xml</code> Instead of the standard XML format for iOS and Android, use an XML definition that is the same across both platforms"},{"location":"ecosystem/plugins/#other-plugins","title":"Other Plugins","text":"<p>These plugins are not maintained by the Appium team and can provide additional functionality:</p> Plugin Installation Key Description Supported By AltUnity <code>--source=npm appium-altunity-plugin</code> Target Unity games and apps for automation with a new context, via the AltUnityTester framework HeadSpin Device Farm <code>--source=npm appium-device-farm</code> Manage and create driver sessions on connected Android devices and iOS simulators <code>@AppiumTestDistribution</code> Gestures <code>--source=npm appium-gestures-plugin</code> Perform basic gestures using W3C Actions <code>@AppiumTestDistribution</code> Interceptor <code>--source=npm appium-interceptor</code> Intercept and mock API requests and responses <code>@AppiumTestDistribution</code> OCR <code>--source=npm appium-ocr-plugin</code> Find elements via OCR text <code>@jlipps</code> Reporter <code>--source=npm appium-reporter-plugin</code> Generate standalone consolidated HTML reports with screenshots <code>@AppiumTestDistribution</code> Wait <code>--source=npm appium-wait-plugin</code> Manage global element wait timeouts <code>@AppiumTestDistribution</code> <p>Note</p> <p>If you maintain an Appium plugin that you would like to be listed in the Appium docs, feel free to make a PR to add it to this section with a link to the documentation for the plugin.</p>"},{"location":"ecosystem/tools/","title":"Appium-Related Tools","text":"<p>There are several Appium tools that have been created to to assist with things not directly related to testing, such as Appium installation, test development, and more.</p>"},{"location":"ecosystem/tools/#appium-inspector","title":"Appium Inspector","text":"<p>Appium has a graphical client which can be used to inspect application screenshots, view the application hierarchy, run Appium commands, record app interactions, and more. It is very useful for Appium test development.</p> <p>Find downloads and more information on its GitHub page: Appium Inspector</p>"},{"location":"ecosystem/tools/#appium-doctor","title":"Appium Doctor","text":"<p>Appium Doctor is a command-line tool built into Appium drivers and plugins. The command is expected to be used to validate whether a driver or plugin has all of its prerequisites and other environment details set up correctly if the driver/plugin author implemented the <code>doctor</code> command.</p> <p>For example, <code>uiautomator2</code> driver provides the <code>doctor</code> command below.</p> <pre><code>appium driver doctor uiautomator2\n</code></pre> <p>It shows no result if the driver/plugin author did not implement them.</p> <p>More information on this command can be found in the Command-Line Usage documentation. For driver/plugin developers, please read Building Doctor Checks.</p>"},{"location":"ecosystem/tools/#other-tools","title":"Other Tools","text":"<p>These tools are not maintained by the Appium team and can be used to assist with other problems:</p> Name Description Supported By appium-installer Help set up an Appium environment for Android and iOS <code>@AppiumTestDistribution</code>"},{"location":"guides/branch-testing/","title":"Local Validation Of Extension PRs","text":"<p>Sometimes it might be necessary to validate if a remote driver or a plugin PR works for the particular local environment before it is merged or published. This tutorial describes how to achieve that.</p>"},{"location":"guides/branch-testing/#requirements","title":"Requirements","text":"<ul> <li>Recent LTS version of NodeJS. Check Node.js main page for the download link.</li> <li>Recent version of the Appium server. Use the following commands to ensure you have   the latest version installed: <code>npm uninstall appium</code> and <code>npm install -g appium</code>.</li> <li>Git should be available locally.</li> </ul>"},{"location":"guides/branch-testing/#installation","title":"Installation","text":"<ul> <li>Check out the PR locally.   There is also an option (although it is less flexible, because you won't be able to easily fetch   any changes to this PR later) to simply download and unzip the sources   locally. If you choose the later option then no <code>git</code> tool would be necessary.</li> <li>Navigate to the local driver or plugin folder and run <code>npm i</code> from that folder.</li> <li>Make sure you don't have the given driver or plugin already installed. Use the <code>appium driver uninstall &lt;driver_name&gt;</code>   or <code>appium plugin uninstall &lt;plugin_name&gt;</code> CLI in order to delete any leftovers. The value of   <code>&lt;driver_name&gt;</code>/<code>&lt;plugin_name&gt;</code> depends on the actual driver or plugin name the PR has been prepared for.   If you are not sure which name you need to use then check the content of the <code>package.json</code> manifest,   which must be always located under the root folder of the fetched sources. You should be looking for   the <code>\"appium\" -&gt; \"driverName\"</code> entry value there.</li> <li>Change the current folder to the one, which is NOT the driver/plugin folder root or its subfolder.   Also, make sure your current working folder does not contain any extra <code>package.json</code> file. If   it does then simply navigate to any other folder that does not.</li> <li>Run the following command in order to link the driver/plugin sources to the Appium server:   <code>appium driver install --source=local &lt;full_path_to_driver_folder_with_fetched_sources&gt;</code> or   <code>appium plugin install --source=local &lt;full_path_to_plugin_folder_with_fetched_sources&gt;</code>.</li> <li>Stop the Appium server if it is running and start it again (<code>appium server --use-drivers=&lt;driver_name&gt;</code>)   to check the list of loaded drivers. If the linking succeeded then you must see the driver name and the path to its   parent folder in the server logs. In case of a plugin it is required to explicitly request   this plugin to be loaded upon server startup: <code>appium server --use-plugins=&lt;plugin_name&gt;</code>.</li> </ul>"},{"location":"guides/branch-testing/#update","title":"Update","text":"<p>After you have tested the PR and there are issues it might be necessary to update the local branch with the recent changes from Git. Follow the next steps for that:</p> <ul> <li>Navigate to the parent folder of your local driver/plugin and run <code>git pull</code>.</li> <li>Stop Appium server if it is running.</li> <li>Run <code>npm i</code> in the parent folder of your local driver/plugin to rebuild it and update any dependencies if necessary.</li> <li>Start Appium server again similarly to how this is done in the corresponding Installation step above.</li> </ul>"},{"location":"guides/branch-testing/#switching-back-to-a-stable-release","title":"Switching Back To a Stable Release","text":"<p>After the PR is merged there is no need to use the local plugin/driver deployment anymore, and it makes sense to switch back to the package managed by NPM. Follow the next steps for that:</p> <ul> <li>Unlink the installed driver/plugin from the server by running <code>appium driver uninstall &lt;driver_name&gt;</code> or   <code>appium plugin uninstall &lt;driver_name&gt;</code>.</li> <li>Delete the local source folder (<code>rm -rf &lt;full_path_to_plugin_or_driver_folder_with_fetched_sources&gt;</code>).</li> <li>Install the driver or the plugin from NPM. Check the component README in order to find a proper command for that.</li> </ul>"},{"location":"guides/caching/","title":"Caching of Application Bundles","text":"<p>Appium's base driver provides a feature which enables caching of application builds provided, for example, as <code>app</code> capability value or to endpoints similar to the <code>installApp</code> one. This article explains common caching principles, so you could create more performant and efficient test suite execution strategies.</p>"},{"location":"guides/caching/#why-caching-is-necessary","title":"Why Caching Is Necessary","text":"<p>Mobile application bundles could reach hundreds of megabytes is size. This could become a serious performance issue if a test suite is executed, and it is necessary to fetch/extract the same application bundle for each test.</p>"},{"location":"guides/caching/#what-is-cached","title":"What Is Cached","text":"<p>Caching could be applied to application bundles generated by <code>configureApp</code> helper call. Inherited drivers can customize their caching logic by providing own <code>onPostProcess</code> (or both <code>inDownload</code> and <code>onPostProcess</code>) property definition, but the general rule of thumb is that we need to cache locally all application bundles need to be downloaded and/or extracted first before they could be actually installed on the device under test. On iOS, for example, these are <code>.ipa</code> or <code>.zip</code> compressed application bundles, or .<code>aab</code> on Android.</p>"},{"location":"guides/caching/#caching-of-remote-application-bundles","title":"Caching of Remote Application Bundles","text":"<p>In order to validate whether an app bundle downloaded from the given URL could be (re)used from the cache the following steps are applied:</p> <ol> <li>The script checks if the given URL is already present in the cache.    If yes then it tries to fetch previously remembered    Last-Modified    or ETag header values for it.</li> <li>If <code>ETag</code> value is present then it is put into    If-None-Match request header.    Else if <code>Last-Modified</code> header value is present then it is put into    If-Modified-Since request header.    Otherwise, no caching is applied.</li> <li>If the response status is equal to <code>304</code> then the previously cached binary is used,    otherwise the cached entry is reset and refreshed.</li> </ol>"},{"location":"guides/caching/#caching-of-local-application-bundles","title":"Caching of Local Application Bundles","text":"<p>It only makes sense to cache application bundles if they need some preprocessing before being installed on the device under test. For example, on iOS <code>.ipa</code> bundles must be unzipped, because the system installer only works with <code>.app</code> folders.</p> <ol> <li>The script verifies if the given bundle path is already present in the cache. If the bundle was not in the cache yet then it gets preprocessed and added there.</li> <li>The script validates the hashsum of the bundle and compares it to the previously stored one. If hash sums don't match then the cached item gets deleted and the preprocessing of the bundle repeats.</li> </ol>"},{"location":"guides/caching/#how-the-cache-file-system-is-configured","title":"How The Cache File System Is Configured","text":"<p>The cache where the base driver keeps all application bundles is located in the system temp folder. It is configured on per-process basis, so each test session initialized in scope of the same Appium server process takes advantages of it. It is a LRU Cache with the following limitations:</p> <ul> <li>Max items: 1024. You may customize it by providing a new value to   the APPIUM_APPS_CACHE_MAX_ITEMS environment variable.   Do not set it to a lower number than the amount of apps in all parallel sessions per process.</li> <li>Max time to live (TTL) for each entry: 24 hours.   You may customize it by providing a new value to the   APPIUM_APPS_CACHE_MAX_AGE environment variable.   Do not set it to a lower number than the duration of a single session startup.</li> <li>TTL is refreshed for each entry upon access</li> <li>By default the full application URL is used as cache key. You may change this behavior   by enabling the APPIUM_APPS_CACHE_IGNORE_URL_QUERY environment variable.   If the above option is enabled then the 'search' part of the app URL will be cut off from cache keys.   See the corresponding feature request   for more details.</li> </ul> <p>Warning</p> <p>Note: The cache root folder is set up for automatic deletion on Appium process termination. This would only work if Appium server is killed with <code>SIGINT</code> or <code>SIGTERM</code>. If <code>SIGKILL</code> is used then no cache cleanup would be performed.</p>"},{"location":"guides/caps/","title":"Session Capabilities","text":"<p>\"Capabilities\" is the name given to the set of parameters used to start an Appium session. The information in the set describes what sort of \"capabilities\" you want your session to have, for example, a certain mobile operating system or a certain version of a device. Capabilities are represented as key-value pairs, with values allowed to be any valid JSON type, including other objects.</p> <p>The W3C WebDriver spec's section on Capabilities identifies a small set of 10 standard capabilities, including the following:</p> Capability Name Type Description <code>browserName</code> <code>string</code> The name of the browser to launch and automate <code>browserVersion</code> <code>string</code> The specific version of the browser <code>platformName</code> <code>string</code> The type of platform hosting the browser"},{"location":"guides/caps/#common-appium-capabilities","title":"Common Appium Capabilities","text":"<p>Appium understands these browser-focused capabilities, but introduces a number of additional capabilities. According to the WebDriver spec, any non-standard \"extension capabilities\" must include a namespace prefix (signifying the vendor introducing the capability), ending in a <code>:</code>. Appium's vendor prefix is <code>appium:</code>, and so any Appium-specific capabilities must include this prefix. Depending on which client you are using, the prefix may be added automatically or in conjunction with certain interfaces, but it is always a good practice to explicitly include it for clarity.</p> <p>Here is a list of all the globally-recognized Appium capabilities:</p> <p>Info</p> <p>Individual drivers and plugins can support other capabilities, so refer to their documentation for lists ofspecific capability names. Some drivers may also not support all of these capabilities</p> Capability Type Required? Description <code>platformName</code> <code>string</code> yes The type of platform hosting the app or browser <code>appium:automationName</code> <code>string</code> yes The name of the Appium driver to use <code>browserName</code> <code>string</code> no The name of the browser to launch and automate, if the driver supports web browsers as a special case <code>appium:app</code> <code>string</code> no The path to an installable application <code>appium:deviceName</code> <code>string</code> no The name of a particular device to automate, e.g., <code>iPhone 14</code> (currently only actually useful for specifying iOS simulators, since in other situations it's typically recommended to use a specific device id via the <code>appium:udid</code> capability). <code>appium:platformVersion</code> <code>string</code> no The version of a platform, e.g., for iOS, <code>16.0</code> <code>appium:newCommandTimeout</code> <code>number</code> no The number of seconds the Appium server should wait for clients to send commands before deciding that the client has gone away and the session should shut down <code>appium:noReset</code> <code>boolean</code> no If true, instruct an Appium driver to avoid its usual reset logic during session start and cleanup (default <code>false</code>) <code>appium:fullReset</code> <code>boolean</code> no If true, instruct an Appium driver to augment its usual reset logic with additional steps to ensure maximum environmental reproducibility (default <code>false</code>) <code>appium:eventTimings</code> <code>boolean</code> no If true, instruct an Appium driver to collect Event Timings (default <code>false</code>) <code>appium:printPageSourceOnFindFailure</code> <code>boolean</code> no If true, collect the page source and print it to the Appium log whenever a request to find an element fails (default <code>false</code>) <p>Some drivers place more complex constraints on capabilities as a group. For example, while the <code>appium:app</code> and <code>browserName</code> capabilities are listed above as optional, if you want to launch a session with a specific app, the XCUITest driver requires that at least one of <code>appium:app</code>, <code>browserName</code>, or <code>appium:bundleId</code> are included in the capabilities (otherwise it will not know what app to install and/or launch and will simply open a session on the home screen). Each driver will document how it interprets these capabilities and any other platform-specific requirements.</p> <p>Note</p> <p>Capabilities are like parameters used when starting a session. After the capabilities are sent and the session is started, they cannot be changed. If a driver supports updating aspects of its behaviour in the course of a session, it will provide a Setting for this purpose instead of, or in addition to, a capability.</p> <p>Each Appium client has its own way of constructing capabilities and starting a session. For examples of doing this in each client library, head to the Ecosystem page and click through to the appropriate client documentation.</p>"},{"location":"guides/caps/#using-appiumoptions-to-group-capabilities","title":"Using <code>appium:options</code> to Group Capabilities","text":"<p>If you use a lot of <code>appium:</code> capabilities in your tests, it can get a little repetitive. You can combine all capabilities as an object value of a single <code>appium:options</code> capability instead, in which case you don't need to use prefixes on the capabilities inside the object. For example:</p> <pre><code>{\n    \"platformName\": \"iOS\",\n    \"appium:options\": {\n        \"automationName\": \"XCUITest\",\n        \"platformVersion\": \"16.0\",\n        \"app\": \"/path/to/your.app\",\n        \"deviceName\": \"iPhone 12\",\n        \"noReset\": true\n    }\n}\n</code></pre> <p>Note that constructing a capability value which is itself an object differs by language; refer to your client documentation for further examples on how to achieve this.</p> <p>Warning</p> <p>If you include the same capabilities both inside and outside of <code>appium:options</code>, the values inside of <code>appium:options</code> take precedence.</p>"},{"location":"guides/caps/#always-match-and-first-match-capabilities","title":"Always-Match and First-Match Capabilities","text":"<p>The W3C spec allows clients to give the Appium server some flexibility in the kind of session it creates in response to a new session request. This is through the concept of \"always-match\" and \"first-match\" capabilities:</p> <ul> <li>Always-match capabilities consist of a single set of capabilities, every member of which must   be satisfied by the server in order for the new session request to proceed.</li> <li>First-match capabilities consist of an array of capability sets. Each set is merged with the   always-match capabilities, and the first set that the server knows how to handle will be the set   that is used to start the session.</li> </ul> <p>Note</p> <p>Check out the spec itself or a summarized version for a more in-depth description of how capabilities are processed.</p> <p>In practice, use of first-match capabilities is not necessary or recommended for use with Appium. Instead, we recommend that you define the explicit set of capabilities you want the Appium server to handle. These will be encoded as the always-match capabilities, and the array of first-match capabilities will be empty.</p> <p>That being said, Appium does understand always-match and first-match capabilities as defined in the W3C spec, so if you use these features, Appium will work as expected. The process of defining always-match and first-match capabilities is unique to each client library, so refer to the documentation for your client library to see examples of how it works.</p>"},{"location":"guides/caps/#special-notes-for-cloud-providers","title":"Special Notes for Cloud Providers","text":"<p>Warning</p> <p>This section is not intended for end-users of Appium; it is intended for developers building Appium-compatible cloud services.</p> <p>When managing an Appium cloud, your users may wish to target various independent versions of Appium drivers and plugins. It is of course up to each service provider how they wish to implement the discovery, installation, and availability of any official or third party drivers or plugins. But the Appium team does provide several suggestions, for consistency across the industry. These are recommendations only, and not a standard, but adopting it will help users to navigate the increased complexity that working with Appium 2 in a cloud environment may bring.</p>"},{"location":"guides/caps/#suggested-capabilities","title":"Suggested capabilities","text":"<p>In addition to the standard <code>platformName</code>, <code>appium:deviceName</code>, <code>appium:automationName</code>, and <code>appium:platformVersion</code>, we recommend adopting the capability <code>$cloud:appiumOptions</code>, where the label <code>$cloud</code> is not meant to be interpreted literally but instead should be replaced by your vendor prefix (so for HeadSpin it would be <code>headspin</code>, Sauce Labs it would be <code>sauce</code>, and BrowserStack it would be <code>browserstack</code>, to name just a few examples). The <code>$cloud:appiumOptions</code> capability would itself be a JSON object, with the following internal keys:</p> Capability Usage Example <code>version</code> The version of the Appium server that is used to host and manage drivers. If omitted, the behavior is left up to the provider, but the recommendation would be to provide the latest official version. <code>2.0.0</code> <code>automationVersion</code> The version of the driver (as specified by <code>appium:automationName</code>) that should be used. <code>1.55.2</code> <code>automation</code> The name of a custom driver to use (see below for more info). This would override <code>appium:automationName</code> and <code>$cloud:automationVersion</code>. <code>{\"name\": \"@org/custom-driver\", \"source\": \"github\", \"package\": \"custom-driver\"}</code> <code>plugins</code> The list of plugins (and potentially versions of plugins) that should be activated (see below for more info). <code>[\"images\", \"universal-xml\"]</code>"},{"location":"guides/caps/#basic-example","title":"Basic example","text":"<p>Appium extensions (drivers and plugins) have a set of properties that specify where they can be installed from. Cloud providers are obviously under no obligation to provide support for arbitrarily specified extensions, seeing as these may represent untrusted code running in a managed environment. In the case where arbitrary extensions are not supported, the <code>appium:automationName</code>, <code>$cloud:automationVersion</code>, and <code>$cloud:appiumPlugins</code> capabilities should be sufficient. See the following JSON object representing capabilities for a session:</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:platformVersion\": \"14.4\",\n  \"appium:deviceName\": \"iPhone 11\",\n  \"appium:app\": \"Some-App.app.zip\",\n  \"appium:automationName\": \"XCUITest\",\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n</code></pre> <p>This set of capabilities requests an Appium 2+ server supporting the XCUITest driver at version <code>3.52.0</code>, and the <code>images</code> plugin active. This set is easy for a cloud provider to verify. The cloud provider can obviously do anything it wants in response to these capabilities, including downloading Appium and driver and plugin packages on the fly, or erroring out if the versions requested are not in a supported set, or if the plugin is not supported, etc...</p>"},{"location":"guides/caps/#basic-example-with-appiumoptions","title":"Basic example with <code>appium:options</code>","text":"<p>The previous example still looks a bit disorganized, so of course we also recommend that cloud providers support the <code>appium:options</code> capability as detailed above, which could turn the previous set of capabilities into the following:</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"app\": \"Some-App.app.zip\",\n    \"automationName\": \"XCUITest\"\n  },\n  \"$cloud:appiumOptions\": {\n    \"version\": \"2.0.0\",\n    \"automationVersion\": \"3.52.0\",\n    \"plugins\": [\"images\"]\n  }\n}\n</code></pre>"},{"location":"guides/caps/#extension-objects","title":"Extension objects","text":"<p>Some service providers may wish to dynamically allow access to all of the features of the Appium 2 CLI, including downloading arbitrary drivers and plugins. To represent these extensions, we can define special JSON \"extension objects\", with the following keys:</p> <ul> <li><code>name</code>: the name of the extension. This would be an <code>npm</code> package name (if downloading from <code>npm</code>),   or a <code>git</code> or GitHub spec (if downloading from a <code>git</code> server or GitHub).</li> <li><code>version</code>: the version of the extension, e.g., the <code>npm</code> package version or <code>git</code> SHA.</li> <li>(optional) <code>source</code>: a denotation of where the extension can be downloaded from. It is recommended   to support the following values: <code>appium</code>, <code>npm</code>, <code>git</code>, <code>github</code>. Here, <code>appium</code> means \"Appium's   own official list\", and should be the default value if this key is not included.</li> <li>(optional) <code>package</code>: when downloading extensions from <code>git</code> or GitHub, the <code>npm</code> package name of   the extension must also be provided. This is optional for non-<code>git</code> sources.</li> </ul> <p>Since each session is handled by a single driver, the <code>$cloud:appiumOptions</code>/<code>$automation</code> capability could be used with an extension object value to denote this driver, for example:</p> <pre><code>{\n    \"$cloud:appiumOptions\": {\n        \"automation\": {\n            \"name\": \"git+https://some-git-host.com/custom-driver-project.git\",\n            \"version\": \"some-git-sha\",\n            \"source\": \"git\",\n            \"package\": \"driver-npm-package-name\"\n        }\n    }\n}\n</code></pre> <p>And since sessions can handle multiple plugins, each value in the list of <code>$cloud:appiumPlugins</code> could also be an extension object rather than a string, so that specific versions could be requested:</p> <pre><code>{\n    \"$cloud:appiumOptions\": {\n        \"plugins\": [{\n            \"name\": \"images\",\n            \"version\": \"1.1.0\"\n        }, {\n            \"name\": \"my-github-org/my-custom-plugin\",\n            \"version\": \"a83f2e\",\n            \"source\": \"github\",\n            \"package\": \"custom-plugin\"\n        }]\n    }\n}\n</code></pre> <p>These serve as illustrative examples for the recommendations here. Of course, it is up to the service providers to implement the handling of these capabilities at their front end / load balancer, to perform any error checking, or to actually run any of the <code>appium driver</code> or <code>appium plugin</code> CLI commands that support the end user's request. This section is merely a suggestion as to how service providers might design their user-facing capabilities API in a way which in principle supports all of the capabilities that Appium itself would provide to the end user if they were running Appium on their own.</p>"},{"location":"guides/config/","title":"The Appium Config File","text":"<p>Instead of passing arguments on the command line to Appium, you may add them to a special config file. Appium will read values from this config file when it runs. (Please note that CLI arguments have precedence over configuration files; if a value is set in a config file and via CLI argument, the CLI argument is preferred.)</p>"},{"location":"guides/config/#supported-config-file-formats","title":"Supported Config File Formats","text":"<p>You can store your config data in the following kinds of files:</p> <ul> <li>JSON</li> <li>YAML</li> <li>JS (a JavaScript file exporting a JS object)</li> <li>CJS (the same as above; the extension is for common JS)</li> </ul> <p>Warning</p> <p>Note: Configuration files in ESM format are not currently supported.</p>"},{"location":"guides/config/#supported-config-file-locations","title":"Supported Config File Locations","text":"<p>Configuration files can be named anything, but the following filenames will be automatically discovered and loaded by Appium:</p> <ul> <li><code>.appiumrc.json</code> (recommended)</li> <li><code>.appiumrc.yaml</code></li> <li><code>.appiumrc.yml</code></li> <li><code>.appiumrc.js</code></li> <li><code>.appiumrc.cjs</code></li> <li><code>appium.config.js</code></li> <li><code>appium.config.cjs</code></li> <li><code>.appiumrc</code> (which is considered to be JSON)</li> </ul> <p>Further, if your project uses Node.js, you can use store the configuration inside an <code>appium</code> property in your <code>package.json</code> and it will be automatically discovered.</p>"},{"location":"guides/config/#config-file-search","title":"Config File Search","text":"<p>Appium will search up the directory tree from the current working directory for one of these files. If it reaches the current user's home directory or filesystem root, it will stop looking.</p> <p>To specify a custom location for your config file, use <code>appium --config-file /path/to/config/file</code>.</p>"},{"location":"guides/config/#configuration-file-format","title":"Configuration File Format","text":"<p>First, you might want to look at some examples:</p> <ul> <li>Appium Configuration - JSON</li> <li>Appium Configuration - YAML</li> <li>Appium Configuration - JS</li> </ul> <p>A description of the format is available, as well:</p> <ul> <li>Appium Configuration File JSON Schema</li> <li>TypeScript declarations for Appium Configuration</li> </ul> <p>To describe in words, the config file will have a root <code>server</code> property, and all arguments are child properties. For certain properties which must be supplied on the command-line as comma-delimited lists, JSON strings, and/or external filepaths, these instead will be of their \"native\" type. For example, <code>--use-plugins &lt;value&gt;</code> needs <code>&lt;value&gt;</code> to be comma-delimited string or path to a delimited file. However, the config file just wants an array, e.g.,:</p> <pre><code>{\n  \"server\": {\n    \"use-plugins\": [\"my-plugin\", \"some-other-plugin\"]\n  }\n}\n</code></pre>"},{"location":"guides/config/#configuring-extensions-drivers-and-plugins","title":"Configuring extensions (drivers and plugins)","text":"<p>For <code>driver</code>-and-<code>plugin</code>-specific configuration, these live under the <code>server.driver</code> and <code>server.plugin</code> properties, respectively. Each driver or plugin will have its own named property, and the values of any specific configuration it provides are under this. For example:</p> <pre><code>{\n  \"server\": {\n    \"driver\": {\n      \"xcuitest\": {\n        \"webkit-debug-proxy-port\": 5400\n      }\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>The above configuration corresponds to the <code>--driver-xcuitest-webkit-debug-proxy-port</code> CLI argument.</p> <p>All properties are case-sensitive and will be in kebab-case. For example, <code>callback-port</code> is allowed, but <code>callbackPort</code> is not.</p>"},{"location":"guides/context/","title":"Managing Contexts","text":"<p>A common feature of many app platforms is the ability for developers to embed web content inside of the platform-native app frame. This allows developers to leverage web technologies or existing web content for some or all of the app functionality. However, the additional complexity of mixing \"modes\" within a single application can make it difficult for automation tools that are designed to target the \"native\" elements and behaviours.</p> <p>Appium provides a set of APIs for working with different app modes, called \"contexts\", that Appium drivers can implement if they support automation commands in these different modes. There are three basic commands that Appium has added to the W3C WebDriver spec for this purpose:</p> Command Name Method/Route Params Description Returns <code>Get Contexts</code> <code>GET /session/:id/contexts</code> Get a list of the available contexts <code>array&lt;string&gt;</code> <code>Get Current Context</code> <code>GET /session/:id/context</code> Get the name of the active context <code>string</code> <code>Set Context</code> <code>POST /session/:id/context</code> <code>name</code> (<code>string</code>) Switch into the context with the given <code>name</code> <code>null</code> <p>This API is flexible enough to handle a variety of semantic interpretations on the part of the driver. For example, the XCUITest driver includes two kinds of contexts: the native app context and any active webviews, as one context per webview. A call to <code>Get Contexts</code> will return the list of names, which you as a test author can sift through and use to switch into the appropriate context. As another example, the Appium Altunity Plugin introduces the concept of a <code>UNITY</code> context, which encapsulates all the plugin's specific behaviour to ensure that when outside of the <code>UNITY</code> context, the active driver's usual command implementations are used.</p> <p>It is important to note that a call to <code>Get Contexts</code> will always contain at least one context, conventionally but not necessarily named <code>NATIVE_APP</code>. This is the default active context.</p> <p>Depending on the type of context you're in, the operation of the driver might change. The XCUITest driver, when targeting a webview context, will not run its typical routines for finding and interacting with elements. Instead, it will run a different set of routines appropriate to web elements. This might have a variety of consequences, like supporting a different set of locator strategies.</p> <p>The command names in the table above are generic references to the commands and not code examples. For examples of how to access the Context API in the language-specific client libraries, please visit the documentation for a given library.</p>"},{"location":"guides/event-timing/","title":"Retrieving Event Timings","text":"<p>Appium comes with the ability to retrieve timing information about startup information and command length. This is an advanced feature that is controlled by the use of the <code>appium:eventTimings</code> capability (set it to <code>true</code> to log event timings).</p> <p>With this capability turned on, the <code>GET /session/:id</code> response (i.e., the response to <code>driver.getSessionDetails()</code> or similar, depending on client) will be decorated with an <code>events</code> property. This is the structure of that <code>events</code> property:</p> <pre><code>{\n    \"&lt;event_type&gt;\": [&lt;occurence_timestamp_1&gt;, ...],\n    \"commands\": [\n        {\n            \"cmd\": \"&lt;command_name&gt;\",\n            \"startTime\": &lt;js_timestamp&gt;,\n            \"endTime\": &lt;js_timestamp&gt;\n        },\n        ...\n    ]\n}\n</code></pre> <p>In other words, the <code>events</code> property has 2 kinds of properties of its own:</p> <ul> <li>Properties which are the names of event types</li> <li>The <code>commands</code> property</li> </ul> <p>Properties which are names of event types correspond to an array of timestamps when that event happened. It's an array because events might happen multiple times in the course of a session. Examples of event types include:</p> <ul> <li><code>newSessionRequested</code></li> <li><code>newSessionStarted</code></li> </ul> <p>(Individual drivers will define their own event types, so we do not have an exhaustive list to share here. It's best to actually get one of these responses from a real session to inspect the possible event types.)</p> <p>The <code>commands</code> property is an array of objects. Each object has the name of the Appium-internal command (for example <code>click</code>), as well as the time the command started processing and the time it finished processing.</p> <p>With this data, you can calculate the time between events, or a strict timeline of events, or statistical information about average length of a certain type of command, and so on.</p> <p>You can only receive data about events that have happened when you make the call to <code>/session/:id</code>, so the best time to get data about an entire session is right before quitting it.</p> <p>The Appium team maintains an event timings parser tool that can be used to generate various kinds of reports from event timings output: appium/appium-event-parser.</p>"},{"location":"guides/event-timing/#add-a-custom-event","title":"Add a custom event","text":"<p>TODO</p> <p>The links to the commands in the following paragraph do not yet work since these docs are under construction.</p> <p>You can add custom events that will show up in the event timings data. You can send a custom event name to the Appium server using the Log Event API, and the server will store the timestamp. The Get Events command can be used to retrieve named events' timestamps later on.</p>"},{"location":"guides/execute-methods/","title":"Execute Methods","text":"<p>Because the scope of commands implemented in Appium drivers is broader than the scope of commands defined by the W3C WebDriver spec, Appium needs a way for these \"extended\" commands to be accessible by client libraries. There are two main strategies for this:</p> <ol> <li>Appium drivers define new W3C-compatible API routes, and Appium clients are updated to include    support for those new routes.</li> <li>Appium drivers define so-called \"Execute Methods\" which provide new functionality by    overloading the existing <code>Execute Script</code> command which is already available in any WebDriver-    based client library (including all Selenium and Appium clients).</li> </ol> <p>There are pros and cons for each strategy, but it is ultimately up to the extension author to decide how they wish implement new commands. </p> <p>This guide is designed to specifically help you understand the \"Execute Method\" strategy.  This pattern is commonly used in official Appium drivers and other third-party extensions. Here's an example of how the <code>Execute Script</code> command is designed to work in the world of WebDriver and browser automation:</p> JS (WebDriverIO)JavaPythonRubyC# <pre><code>await driver.executeScript('return arguments[0] + arguments[1]', [3, 4])\n</code></pre> <pre><code>JavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"return arguments[0] + arguments[1]\", 3, 4);\n</code></pre> <pre><code>driver.execute_script('return arguments[0] + arguments[1]', 3, 4)\n</code></pre> <pre><code>driver.execute_script 'return arguments[0] + arguments[1]', 3, 4\n</code></pre> <pre><code>((IJavaScriptExecutor)driver).ExecuteScript(\"return arguments[0] + arguments[1]\", 3, 4);\n</code></pre> <p>What's happening here is that we are defining a snippet of Javascript (technically, a function body) to be executed within the web browser. The client can send arguments which are serialized, sent over HTTP, and finally provided to the function as parameters.  In this example, we are essentially defining an addition function. The return value of the <code>Execute Script</code> command is whatever the return value of the Javascript snippet is! In the case of this example, that value would be the number <code>7</code> (<code>3</code> + <code>4</code>).</p> <p>Each client library has its own way of calling the command and providing any arguments to the script function, but the function itself\u2014the snippet\u2014is always a string and is the same across all languages.</p> <p>In the world of Appium, we are usually not automating a web browser, which means this command is not particularly useful. But it is useful as a way to encode the name of an arbitrary command and to provide parameters. For example, the XCUITest Driver has implemented a command that lets a client terminate a running application if you know the ID (the <code>bundleId</code>) of the app. The way that the driver makes this command available is via the Execute Method <code>mobile: terminateApp</code>. Instead of providing a JavaScript function to the \"Execute Script\" command, the user provides a known string as defined by the driver. The only other thing a client needs to know is the set of parameters for the method, which are documented by the driver. In this case, we have a parameter named <code>bundleId</code>, whose value should be a string encoding the ID of the app to terminate. Here is how this Execute Method would be called:</p> JS (WebDriverIO)JavaPythonRubyC# <pre><code>await driver.executeScript('mobile: terminateApp', [{bundleId: 'com.my.app'}])\n</code></pre> <pre><code>JavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"mobile: terminateApp\", ImmutableMap.of(\"bundleId\", \"com.my.app\"));\n</code></pre> <pre><code>driver.execute_script('mobile: terminateApp', {'bundleId': 'com.my.app'})\n</code></pre> <pre><code>driver.execute_script 'mobile: terminateApp', { bundleId: 'com.my.app' }\n</code></pre> <pre><code>((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: terminateApp\",\n    new Dictionary&lt;string, string&gt; { { \"bundleId\", \"com.my.app\" } });\n</code></pre> <p>There are two important differences in using Appium Execute Methods from vanilla Selenium Javascript execution:</p> <ol> <li>The script string is just a command name; it will be provided by the driver documentation</li> <li>The standard way to provide parameters is as a single object with keys representing parameter    names and values representing parameter values. So in this case, we had to specify both the    parameter name (<code>bundleId</code>) as the key of the parameters object, and the parameter value    (<code>com.my.app</code>) as the value for that key. A driver can define parameters as required or optional.</li> </ol> <p>Of course, always refer to the documentation for the particular Execute Method in case the author has made any alterations to the standard access method.</p>"},{"location":"guides/grid/","title":"Appium and Selenium Grid","text":""},{"location":"guides/grid/#using-selenium-grid-4","title":"Using Selenium Grid 4+","text":"<p>The relay feature in Grid 4 allows you to proxy Appium requests to an Appium server instance. Here is an example walkthrough of how you would connect two different Appium instances to a Selenium Grid.</p>"},{"location":"guides/grid/#define-the-appium-configs","title":"Define the Appium configs","text":"<p>Each Appium instance should have a config file that can be easily updated. It should contain any information which needs to be unique to that particular server (e.g., ports its drivers should use that others should not). We are going to have 2 Appium servers, so we will need 2 config files:</p> <pre><code># appium1.yml\nserver:\n  port: 4723\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8100\n    mjpegServerPort: 9100\n    mjpegScreenshotUrl: \"http://localhost:9100\"\n</code></pre> <p>In the above YAML config file, we specify the Appium server port, the driver used, and parameters for the driver that will be sent in as default capabilities. Our goal is to ensure that any other drivers running on this host will not compete with system ports or other resources. The second config file could look like the following, where we simply adjust a few ports to prevent clashes:</p> <pre><code># appium2.yml\nserver:\n  port: 4733\n  use-drivers:\n    - xcuitest\n  default-capabilities:\n    wdaLocalPort: 8110\n    mjpegServerPort: 9110\n    mjpegScreenshotUrl: \"http://localhost:9110\"\n</code></pre>"},{"location":"guides/grid/#define-the-grid-node-configs","title":"Define the Grid node configs","text":"<p>We will be launching one Grid \"node\" per Appium server, to manage relaying commands and determining capacity and online status, etc... So we should have one config file per Grid node as well. Each node config should include the address of the Appium server it will target, as well as a list of capability \"configs\" it should accept to relay a session request to Appium. Here is what the config could look like for the two nodes:</p> <pre><code># node1.toml\n[server]\nport = 5555\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4723\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 13\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <pre><code># node2.toml\n[server]\nport = 5565\n\n[node]\ndetect-drivers = false\n\n[relay]\nurl = \"http://localhost:4733\"\nstatus-endpoint = \"/status\"\nconfigs = [\n    \"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 12\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <p>Note that each node config also specifies a different port itself for the node to run on.</p>"},{"location":"guides/grid/#putting-it-together","title":"Putting it together","text":"<p>The Grid nodes aren't enough--you'll also want a Grid \"hub\" that acts as a load balancer and manager for all the nodes. So in the end we'll have 5 processes running at once: 2 Appium servers, 2 Grid nodes, and 1 Grid hub. It's best to run each of these in a separate terminal window to avoid confusion of logs. Here is how you'd start each process:</p> <ol> <li><code>appium --config appium1.yml</code></li> <li><code>appium --config appium2.yml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node1.toml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node2.toml</code></li> <li><code>java -jar /path/to/selenium.jar hub</code></li> </ol> <p>Once you wait a few moments for the nodes to detect their Appium servers, and to register with the hub, you'll be able to send all your Appium traffic via the single hub endpoint (defaulting to <code>http://localhost:4444</code>).</p> <p>And of course, you're able to link up Appium servers and nodes running on different machines in your network to form a larger grid.</p>"},{"location":"guides/grid/#using-selenium-grid-3","title":"Using Selenium Grid 3","text":"<p>It is possible to register your Appium server with a local Selenium Grid 3 (setup docs) instance by using the <code>--nodeconfig</code> server argument.</p> <pre><code>appium server --nodeconfig /path/to/nodeconfig.json --base-path=/wd/hub\n</code></pre> <p>In the referenced config file you have to define the <code>browserName</code>, <code>version</code> and <code>platform</code> capabilities and based on these parameters the grid will re-direct your test to the right device. You will also need to configure your host details and the Selenium Grid details. For a full list of all parameters and descriptions see here.</p> <p>Once you start the Appium server it will register with the grid, and you will see your device on the grid console page:</p> <p><code>http://**\\&lt;grid-ip-adress\\&gt;**:**\\&lt;grid-port\\&gt;**/grid/console</code></p>"},{"location":"guides/grid/#example-grid-node-configuration-json","title":"Example Grid Node Configuration JSON","text":"<pre><code>{\n  \"capabilities\":\n      [\n        {\n          \"browserName\": \"&lt;e.g._iPhone5_or_iPad4&gt;\",\n          \"version\":\"&lt;version_of_iOS_e.g._7.1&gt;\",\n          \"maxInstances\": 1,\n          \"platform\":\"&lt;platform_e.g._MAC_or_ANDROID&gt;\"\n        }\n      ],\n  \"configuration\":\n  {\n    \"cleanUpCycle\":2000,\n    \"timeout\":30000,\n    \"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n    \"url\":\"http://&lt;host_name_appium_server_or_ip-address_appium_server&gt;:&lt;appium_port&gt;/wd/hub\",\n    \"host\": \"&lt;host_name_appium_server_or_ip-address_appium_server&gt;\",\n    \"port\": &lt;appium_port&gt;,\n    \"maxSession\": 1,\n    \"register\": true,\n    \"registerCycle\": 5000,\n    \"hubPort\": &lt;grid_port&gt;,\n    \"hubHost\": \"&lt;Grid_host_name_or_grid_ip-address&gt;\",\n    \"hubProtocol\": \"&lt;Protocol_of_Grid_defaults_to_http&gt;\"\n  }\n}\n</code></pre> <p>If <code>url</code>, <code>host</code>, and <code>port</code> are not given, the config will be auto updated to point to <code>localhost:&lt;appium-port&gt;</code>.</p> <p>If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your <code>host</code> and <code>url</code> configuration; <code>localhost</code> and <code>127.0.0.1</code> will prevent Selenium Grid from connecting correctly.</p>"},{"location":"guides/log-filters/","title":"Filtering the Appium Log","text":"<p>Sometimes it might be necessary to hide sensitive information, like passwords, device identifiers, hashes, etc..., from the server log. Appium makes it possible to ensure such information is redacted in logs via the <code>--log-filters</code> command line argument. This argument allows you to provide the path to a special config file, containing one or more log obfuscation rules.</p>"},{"location":"guides/log-filters/#config-format","title":"Config Format","text":"<p>The filtering config must be one of:</p> <ul> <li>a path to a valid JSON file containing an array of filtering rules</li> <li>a <code>log-filters</code> entry in an Appium Config file, with the rules array inline</li> </ul> <p>Each rule is an object with a set of predefined properties. The following rule properties are supported:</p> <ul> <li><code>pattern</code>: A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern.</li> <li><code>text</code>: A simple non-empty exact text match to replace. Either this property or the above one must   be provided. <code>pattern</code> has priority over <code>text</code> if both are provided.</li> <li><code>flags</code>: Regular expression flags for the given pattern. Supported flags are the same as for the   standard JavaScript RegExp constructor.   Note that the <code>g</code> (global matching) flag is always enabled.</li> <li><code>replacer</code>: The replacer value to use. By default it is <code>**SECURE**</code>. Empty values are allowed.</li> </ul>"},{"location":"guides/log-filters/#config-examples","title":"Config Examples","text":"<p>Replace all occurrences of <code>my.magic.app</code> string with the default replacer:</p> <pre><code>[\n    {\n        \"text\": \"my.magic.app\"\n    }\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any char&gt;</code> string with a custom replacer (case insensitive):</p> <pre><code>[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any chars&gt;</code> and/or <code>your.magic</code> strings with a custom replacer (case insensitive):</p> <pre><code>[\n    {\n        \"pattern\": \"my\\\\.magic\\\\.\\\\w+\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    },\n    {\n        \"pattern\": \"your\\\\.magic\",\n        \"flags\": \"i\",\n        \"replacer\": \"***\"\n    }\n]\n</code></pre> <p>Truncate all log lines to max 15 chars (advanced):</p> <pre><code>[\n    {\n        \"pattern\": \"(.{1,15}).*\",\n        \"flags\": \"s\",\n        \"replacer\": \"$1\"\n    }\n]\n</code></pre>"},{"location":"guides/log-filters/#config-errors-handling","title":"Config Errors Handling","text":"<p>If any of the config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.</p>"},{"location":"guides/managing-exts/","title":"Managing Drivers and Plugins","text":"<p>To do anything useful with Appium, you need to have at least one Driver installed, otherwise Appium won't know how to automate anything. There is an entire Ecosystem of drivers and plugins out there!</p> <p>This guide helps explain how to manage these drivers and plugins. There are two basic strategies: using Appium's extension CLI interface, or managing extensions yourself in an <code>npm</code>-based project.</p> <p>Note</p> <p>Other package managers are not currently supported.</p>"},{"location":"guides/managing-exts/#using-appiums-extension-cli","title":"Using Appium's Extension CLI","text":"<p>With Appium's Extension CLI, you let Appium manage drivers and plugins for you.  You will use CLI commands to tell Appium which extensions you would like to install, update, or remove. Here's an example of how you might install a driver using the CLI:</p> <pre><code>appium driver install xcuitest\n</code></pre> <p>This command will install the latest version of the XCUITest Driver. The Extension CLI comes with a variety of commands and parameters; see the documentation for that command for all the specifics.</p> <p>The all-important question when Appium is managing your extensions for you is: where are they installed? Appium manages extensions in a directory specified by the <code>APPIUM_HOME</code> environment variable. You can set that variable to anything you like, and Appium will manage its extensions there. You can therefore also use the <code>APPIUM_HOME</code> environment variable to manage different sets of extensions, for example if you want to have the same driver installed at conflicting versions:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium driver install xcuitest@4.11.1\nAPPIUM_HOME=/path/to/home2 appium driver install xcuitest@4.11.2\n</code></pre> <p>Running these commands will result in two separate <code>APPIUM_HOME</code> directories being created and populated with the corresponding version of the XCUITest driver. You can then use the same environment variables to direct Appium which version to use on launch:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium  # use xcuitest driver 4.11.1\nAPPIUM_HOME=/path/to/home2 appium  # use xcuitest driver 4.11.2\n</code></pre> <p>You don't need to set <code>APPIUM_HOME</code> if you don't want to! By default, Appium will set <code>APPIUM_HOME</code> to the directory <code>.appium</code> in your user home directory.</p> <p>These installed packages will be managed by <code>extensions.yaml</code> in <code>$APPIUM_HOME/node_modules/.cache/appium/extensions.yaml</code>.</p>"},{"location":"guides/managing-exts/#do-it-yourself-with-npm","title":"Do-It-Yourself with <code>npm</code>","text":"<p>Because Appium and Appium drivers are Node.js programs, if you are integrating your Appium scripts into your own Node.js project, there is an alternative way to manage drivers and plugins: via <code>npm</code>, like any other dependency. Basically, whenever you run Appium, if you have not explicitly set <code>APPIUM_HOME</code>, it will:</p> <ol> <li>Try to determine whether the current directory is inside an <code>npm</code> package.</li> <li>If so, it will check whether <code>appium</code> is a dependency (dev, prod, or peer) in the project's    <code>package.json</code></li> <li>If so, unless you have specified <code>APPIUM_HOME</code> in your environment, Appium will ignore load    drivers and plugins defined in that <code>package.json</code> file instead.</li> </ol> <p>This means you are freely able to add Appium drivers and plugins as regular package dependencies or dev dependencies. For example, if your project has a <code>package.json</code> which includes the following:</p> <pre><code>{\n  \"devDependencies\": {\n    \"appium\": \"^2.0.0\",\n    \"appium-xcuitest-driver\": \"^4.11.1\"\n  }\n}\n</code></pre> <p>Then, if you run <code>npx appium</code> inside your project, Appium will detect that it is a dependency of the project, and will load the XCUITest driver which is also listed as a dev dependency for the project.</p> <p>This strategy is only recommended if you are already using <code>npm</code> for your project. Otherwise, it is recommended that you use Appium's Extension CLI and, if necessary, adjust <code>APPIUM_HOME</code> to change the location of stored extensions.</p>"},{"location":"guides/migrating-1-to-2/","title":"Migrating to Appium 2","text":"<p>This document is a guide for those who are using Appium 1 and wish to migrate to Appium 2. It contains a list of breaking changes and how to migrate your environments or test suites to ensure compatibility with Appium 2.</p>"},{"location":"guides/migrating-1-to-2/#overview-of-appium-2","title":"Overview of Appium 2","text":"<p>Appium 2 is the most major new release of Appium in over 5 years. The changes in Appium 2 are not primarily related to changes in automation behaviors for specific platforms. Instead, Appium 2 reenvisions Appium as a platform where \"drivers\" (code projects that introduce support for automation of a given platform) and \"plugins\" (code projects that allow for overriding, altering, extending, or adding behaviors to Appium) can be easily created and shared.</p> <p>At the same time, the Appium project is taking the opportunity to remove many old and deprecated bits of functionality.</p> <p>Together these do introduce a few breaking changes to how Appium is installed, how drivers and various features are managed, and protocol support. These are detailed below.</p>"},{"location":"guides/migrating-1-to-2/#breaking-changes","title":"Breaking Changes","text":""},{"location":"guides/migrating-1-to-2/#default-server-base-path","title":"Default server base path","text":"<p>With Appium 1, the server would accept commands by default on <code>http://localhost:4723/wd/hub</code>. The <code>/wd/hub</code> base path was a legacy convention from the days of migrating from Selenium 1 to Selenium 2, and is no longer relevant. As such the default base path for the server is now <code>/</code>. If you want to retain the old behaviour, you can set the base path via a command line argument as follows:</p> <pre><code>appium --base-path=/wd/hub\n</code></pre> <p>You can also set server arguments as Config file properties.</p>"},{"location":"guides/migrating-1-to-2/#installing-drivers-during-setup","title":"Installing drivers during setup","text":"<p>When you installed Appium 1, all available drivers would be installed at the same time as the main Appium server. This is no longer the case. Simply installing Appium 2 (e.g., by <code>npm i -g appium</code>), will install the Appium server only, but no drivers. To install drivers, you must instead use the new Appium extension CLI. For example, to install the latest versions of the XCUITest and UiAutomator2 drivers, after installing Appium you would run the following commands:</p> <pre><code>appium driver install uiautomator2     # installs the latest driver version\nappium driver install xcuitest@4.12.2  # installs a specific driver version\n</code></pre> <p>At this point, your drivers are installed and ready. There's a lot more you can do with the Appium 2 command line, so be sure to check out its documentation. If you're running in a CI environment or want to install Appium along with some drivers all in one step, you can do so using some special flags during install, for example:</p> <pre><code>npm i -g appium --drivers=xcuitest,uiautomator2\n</code></pre> <p>This will install Appium and the two drivers for you in one go. Please uninstall any existing Appium 1 <code>npm</code> packages (with <code>npm uninstall -g appium</code>) if you get an installation or startup error.</p>"},{"location":"guides/migrating-1-to-2/#drivers-installation-path","title":"Drivers installation path","text":"<p>When you installed Appium 1, all available drivers would be installed at the same time as the main Appium server, at <code>/path/to/appium/node_modules</code>. For example, <code>appium-webdriveragent</code> was located at <code>/path/to/appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>.</p> <p>Appium 2 installs such dependencies in the path defined by the <code>APPIUM_HOME</code> environment variable. The default path is <code>~/.appium</code>. So, <code>appium-webdriveragent</code> would now be located at <code>$APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>.</p>"},{"location":"guides/migrating-1-to-2/#chromedriver-installation-flags","title":"Chromedriver installation flags","text":"<p>In Appium 1, it was possible to customize the way Chromedriver was installed (as part of the UiAutomator2 driver for example), using the following command line flags:</p> <ul> <li><code>--chromedriver-skip-install</code></li> <li><code>--chromedriver-version</code></li> <li><code>--chromedriver-cdnurl</code></li> </ul> <p>Because Appium 2 now installs drivers for you, and because these flags were implemented as <code>npm</code> config flags, they will no longer work. Instead, use the following environment variables during driver installation:</p> <ul> <li><code>APPIUM_SKIP_CHROMEDRIVER_INSTALL</code></li> <li><code>CHROMEDRIVER_VERSION</code></li> <li><code>CHROMEDRIVER_CDNURL</code></li> </ul> <p>For example:</p> <pre><code>APPIUM_SKIP_CHROMEDRIVER_INSTALL=1 appium driver install uiautomator2\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-specific-command-line-options","title":"Driver-specific command line options","text":"<p>With Appium 1, command-line options specific to particular drivers were all hosted on the main Appium server. So, for example, <code>--chromedriver-executable</code> was a CLI parameter you could use with Appium to set the location of a specific Chromedriver version for use with, say, the UiAutomator2 driver.</p> <p>With Appium 2, all driver- and platform-specific CLI params have been moved to the drivers themselves. To access the corresponding functionality, you'll need to refer to the driver/plugin documentation. In some cases, the extension will continue to expose CLI parameters. For example, the XCUITest driver used to expose a parameter <code>--webdriveragent-port</code>. Now, to access this parameter, it should be prefixed with <code>driver-xcuitest</code>, to differentiate it from parameters other drivers might also expose. To use this parameter, you thus need to start Appium with something like:</p> <pre><code>appium --driver-xcuitest-webdriveragent-port=5000\n</code></pre> <p>Some drivers have done away with CLI args entirely in favour of default capabilities. With the above-mentioned <code>--chromedriver-executable</code> parameter for example, you now need to take advantage of the <code>appium:chromedriverExecutable</code> capability supported by the UiAutomator2 driver. To set this capability from the command line, do the following:</p> <pre><code>appium --default-capabilities '{\"appium:chromedriverExecutable\": \"/path/to/chromedriver\"}'\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-specific-automation-commands","title":"Driver-specific automation commands","text":"<p>The definition of certain commands that pertain only to specific drivers has been moved to those drivers' implementations. For example, <code>pressKeyCode</code> is specific to the UiAutomator2 driver and is now understood only by that driver. In practice, the only breaking change here is the kind of error you would encounter if the appropriate driver is not installed. Previously, you would get a <code>501 Not Yet Implemented</code> error if using a driver that didn't implement the command. Now, you will get a <code>404 Not Found</code> error because if a driver that doesn't know about the command is not active, the main Appium server will not define the route corresponding to the command.</p>"},{"location":"guides/migrating-1-to-2/#driver-updates","title":"Driver updates","text":"<p>In the past, to get updates to your iOS or Android drivers, you'd simply wait for those updates to be rolled into a new release of Appium, and then update your Appium version. With Appium 2, the Appium server and the Appium drivers are versioned and released separately. This means that drivers can be on their own release cadence, and you can get the latest driver version right away, rather than waiting for a new Appium server release. The way to check for driver updates is with the CLI:</p> <pre><code>appium driver list --updates\n</code></pre> <p>If any updates are available, you can then run the <code>update</code> command for any given driver:</p> <pre><code>appium driver update xcuitest\n</code></pre> <p>(For a complete description of the update command, check out the Extension CLI documentation)</p> <p>To update the Appium server itself, you do the same thing as in the past: <code>npm install -g appium</code>. Now, installing new versions of the Appium server will leave your drivers intact, so the whole process will be much more quick.</p> <p>If you would like to update to a specific driver version, not the latest, please uninstall the driver and install the desired version using the <code>install</code> subcommand instead of <code>update</code>.</p> <pre><code>appium driver uninstall xcuitest\nappium driver install xcuitest@4.11.1\n</code></pre>"},{"location":"guides/migrating-1-to-2/#protocol-changes","title":"Protocol changes","text":"<p>Appium's API is based on the W3C WebDriver Protocol, and it has supported this protocol for years. Before the W3C WebDriver Protocol was designed as a web standard, several other protocols were used for both Selenium and Appium. These protocols were the \"JSONWP\" (JSON Wire Protocol) and \"MJSONWP\" (Mobile JSON Wire Protocol). The W3C Protocol differs from the (M)JSONWP protocols in a few small ways.</p> <p>Up until Appium 2, Appium supported both protocols, so that older Selenium/Appium clients could still communicate with newer Appium servers. Appium 2 removes support for older protocols and is now only compatible with the W3C WebDriver Protocol.</p>"},{"location":"guides/migrating-1-to-2/#capabilities-must-use-vendor-prefix","title":"Capabilities must use vendor prefix","text":"<p>One significant difference between old and new protocols is in the format of capabilities. Previously called \"desired capabilities\", and now called simply \"capabilities\", there is now a requirement for a so-called \"vendor prefix\" on any non-standard capabilities. The list of standard capabilities is given in the WebDriver Protocol spec, and includes a few commonly used capabilities such as <code>browserName</code> and <code>platformName</code>.</p> <p>These standard capabilities continue to be used as-is. All other capabilities must include a \"vendor prefix\" in their name. A vendor prefix is a string followed by a colon, such as <code>appium:</code>. Most of Appium's capabilities go beyond the standard W3C capabilities and must therefore include vendor prefixes (we recommend that you use <code>appium:</code> unless directed otherwise by documentation). For example:</p> <ul> <li><code>appium:app</code></li> <li><code>appium:noReset</code></li> <li><code>appium:deviceName</code></li> </ul> <p>This requirement may or may not be a breaking change for your test suites when targeting Appium 2. If you're using an updated Appium client (at least one maintained by the Appium team), the client will add the <code>appium:</code> prefix for you on all necessary capabilities automatically. New versions of Appium Inspector will also do this. Cloud-based Appium providers may also do this. So simply be aware that if you get any messages to the effect that your capabilities lack a vendor prefix, this is how you solve that problem.</p> <p>To make everyone's lives a bit easier, we've also introduced the option of grouping up all Appium-related capabilities into one object capability, <code>appium:options</code>. You can bundle together anything that you would normally put an <code>appium:</code> prefix on into this one capability. Here's an example (in raw JSON) of how you might start an iOS session on the Safari browser using <code>appium:options</code>:</p> <pre><code>{\n  \"platformName\": \"iOS\",\n  \"browserName\": \"Safari\",\n  \"appium:options\": {\n    \"platformVersion\": \"14.4\",\n    \"deviceName\": \"iPhone 11\",\n    \"automationName\": \"XCUITest\"\n  }\n}\n</code></pre> <p>(Of course, each client will have a different way of creating structured capabilities like <code>appium:options</code> or other ones that you might have seen such as <code>goog:chromeOptions</code>).</p> <p>Note</p> <p>Capabilities included in the <code>appium:options</code> object will overwrite capabilities of the same name that are used outside of this object. (The <code>appium:options</code> syntax support by cloud providers may vary.)</p> <p>For more information on capabilities, have a look at the Capabilities Guide.</p>"},{"location":"guides/migrating-1-to-2/#removed-commands","title":"Removed Commands","text":"<p>In addition to commands which have been moved to driver implementations, commands which were a part of the old JSON Wire Protocol and not a part of the W3C Protocol are no longer available:</p> <ul> <li>TODO (these commands are being identified and removed and will be updated here when complete)</li> </ul> <p>If you use a modern Appium or Selenium client, you should no longer have access to these anyway, so any breaking changes should appear on the client side first and foremost.</p>"},{"location":"guides/migrating-1-to-2/#image-analysis-features-moved-to-plugin","title":"Image analysis features moved to plugin","text":"<p>One of the design goals for Appium 2 is to migrate non-core features into special extensions called plugins. This allows people to opt into features which require extra time to download or extra system setup. The various image-related features of Appium (image comparison, finding elements by image, etc...) have been moved into an officially supported plugin called images.</p> <p>If you use these image-related methods, to continue accessing them you will need to do two things:</p> <ol> <li>Install the plugin: <code>appium plugin install images</code></li> <li>Ensure you start the Appium server with access to run the plugin by including it in the list of    plugins designated on the command line, e.g., <code>appium --use-plugins=images</code></li> </ol> <p>Image-related commands will also be removed on the client side of things, which means you will need to follow the instructions on the plugin README for installing client-side plugins to access these features.</p>"},{"location":"guides/migrating-1-to-2/#execute-driver-script-command-moved-to-plugin","title":"Execute Driver Script command moved to plugin","text":"<p>If you use the advanced Execute Driver Script feature (which allows you to send in a WebdriverIO script to have it executed completely on the server instead of command-by-command from the client), this functionality has been moved to a plugin. Here's what to do to keep using it:</p> <ol> <li>Install the plugin: <code>appium plugin install execute-driver</code></li> <li>Ensure you start the Appium server with access to run the plugin by including it in the list of    plugins designated on the command line, e.g., <code>appium --use-plugins=execute-driver</code></li> </ol>"},{"location":"guides/migrating-1-to-2/#external-files-no-longer-supported-for-nodeconfig-default-capabilities-allow-insecure-and-deny-insecure","title":"External Files No Longer Supported for <code>--nodeconfig</code>, <code>--default-capabilities</code>, <code>--allow-insecure</code> and <code>--deny-insecure</code>","text":"<p>These options can be provided as strings on the command line (a JSON string for <code>--nodeconfig</code> and a comma-separated list of strings for <code>--allow-insecure</code> and <code>--deny-insecure</code>). Arguments provided on the command line will likely need to be quoted or escaped.</p> <p>The recommended method to provide these options is through a configuration file.</p> <p>In summary, if you are using a JSON Appium config file, you can simply cut-and-paste the contents of your \"nodeconfig\" JSON file into the value of the <code>server.nodeconfig</code> property. Any CSV-like files you had previously provided for <code>--allow-insecure</code> and <code>--deny-insecure</code> become the values of the <code>server.allow-insecure</code> and <code>server.deny-insecure</code> properties in the Appium config files (respectively); both are arrays of strings.</p>"},{"location":"guides/migrating-1-to-2/#old-drivers-removed","title":"Old drivers removed","text":"<p>The old iOS and Android (UiAutomator 1) drivers and related tools (e.g., <code>authorize-ios</code>) have been removed. They haven't been relevant for many years anyway.</p>"},{"location":"guides/migrating-1-to-2/#server-can-no-longer-be-started-with-port-0","title":"Server can no longer be started with <code>--port 0</code>","text":"<p>In Appium 1, it was possible to specify <code>--port 0</code> during server startup. This had the effect of starting Appium on a random free port. In Appium 2, port values must be <code>1</code> or higher. The random port assignment was never an intentional feature of Appium 1, but a consequence of how Node's HTTP servers work and the fact that there was no port input validation in Appium 1. If you want to find a random free port to start Appium on, you must now take care of this on your own prior to starting Appium. Starting Appium on an explicit and known port is the correct practice moving forward.</p>"},{"location":"guides/migrating-1-to-2/#internal-packages-renamed","title":"Internal packages renamed","text":"<p>Some Appium-internal NPM packages have been renamed (for example, <code>appium-base-driver</code> is now <code>@appium/base-driver</code>). This is not a breaking change for Appium users, only for people who have built software that directly incorporates Appium's code.</p>"},{"location":"guides/migrating-1-to-2/#wd-javascript-client-library-no-longer-supported","title":"<code>wd</code> JavaScript client library no longer supported","text":"<p>For many years, some of Appium's authors maintained the WD client library. This library has been deprecated and has not been updated for use with the W3C WebDriver protocol. As such, if you're using this library you'll need to move to a more modern one. We recommend WebdriverIO.</p>"},{"location":"guides/migrating-1-to-2/#appium-desktop-replaced-with-appium-inspector","title":"Appium Desktop replaced with Appium Inspector","text":"<p>The inspector functionality of Appium Desktop has been moved to its own app: Appium Inspector. It is fully compatible with standalone Appium 2 servers, but also works with later versions of Appium 1 servers. Appium Desktop itself has been deprecated and is not compatible with Appium 2.</p> <p>In addition to the app, Appium Inspector also has a browser version, accessible at inspector.appiumpro.com. Note that in order to use the browser version with a local Appium server, you'll need to first start the server with the <code>--allow-cors</code> flag.</p>"},{"location":"guides/migrating-1-to-2/#major-new-features","title":"Major New Features","text":"<p>Apart from the breaking changes mentioned above, in this section is a list of some of the major new features you may wish to take advantage of with Appium 2.</p>"},{"location":"guides/migrating-1-to-2/#plugins","title":"Plugins","text":""},{"location":"guides/migrating-1-to-2/#server-plugins","title":"Server Plugins","text":"<p>Appium extension authors can now develop their own server plugins, which can intercept and modify any Appium command, or even adjust the way the underlying Appium HTTP server itself works. To learn more about plugins, read the new Appium Introduction. Interested in building a plugin? Check out the Building Plugins guide.</p>"},{"location":"guides/migrating-1-to-2/#install-drivers-and-plugins-from-anywhere","title":"Install drivers and plugins from anywhere","text":"<p>You're no longer limited to the drivers that come with Appium, or that the Appium team even knows about! Appium extension authors can now develop custom drivers, which can be downloaded or installed via Appium's Extension CLI from <code>npm</code>, <code>git</code>, GitHub, or even the local filesystem. Interested in building a driver? Check out the Building Drivers guide.</p>"},{"location":"guides/migrating-1-to-2/#configuration-files","title":"Configuration Files","text":"<p>Appium now supports configuration files in addition to command-line arguments. In a nutshell, nearly all arguments which Appium 1 required to be provided on the CLI are now able to be expressed via a configuration file. Configuration files may be in JSON, JS, or YAML format. See the Config Guide for a full explanation.</p>"},{"location":"guides/migrating-1-to-2/#special-notes-for-cloud-providers","title":"Special Notes for Cloud Providers","text":"<p>The rest of this document has applied to Appium generally, but some of the architectural changes in Appium 2 will constitute breaking changes for Appium-related service providers, whether a cloud-based Appium host or an internal service. At the end of the day, the maintainer of the Appium server is responsible for installing and making available the various Appium drivers and plugins that end users may wish to use.</p> <p>We encourage cloud providers to thoroughly read and understand our recommendation for cloud provider capabilities in order to support user needs in an industry-compatible way!</p>"},{"location":"guides/security/","title":"Appium Server Security","text":"<p>The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, you can only safely enable all Appium's features if all the following are true:</p> <ul> <li>You're running your own Appium server locally or within a protected internal network</li> <li>You're not sharing it with any untrusted parties</li> <li>You don't expose Appium's port(s) to the wider internet</li> </ul> <p>But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to explicitly opt-in to these features. (Third-party driver and plugin authors can also hide behaviour behind security flags.)</p> <p>For security reasons, Appium client sessions can not request feature enablement via capabilities; this is the responsibility of the server admin who configures and launches the Appium server.</p>"},{"location":"guides/security/#security-server-args","title":"Security Server Args","text":"<p>The Server CLI Args doc outlines three relevant arguments which may be passed to Appium when starting it from the command line:</p> Parameter Description <code>--relaxed-security</code> Setting this flag turns on all insecure features (unless blocked by <code>--deny-insecure</code>; see below) <code>--allow-insecure</code> Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow only the features listed. For example, <code>--allow-insecure=adb_shell</code> will cause only the ADB shell execution feature to be enabled. This is true unless <code>--relaxed-security</code> is also used, in which case all features will still be enabled. It makes no sense to combine this flag with <code>--relaxed-security</code>. <code>--deny-insecure</code> This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be disabled, regardless of whether <code>--relaxed-security</code> is set and regardless of whether the names are also listed with <code>--allow-insecure</code>."},{"location":"guides/security/#insecure-features","title":"Insecure Features","text":"<p>Each Appium driver is responsible for its own security, and can create its own feature names. Thus you should read through the documentation for a particular driver to know which feature names it might use. Here is an incomplete list of examples from some of Appium's official drivers:</p> Feature Name Description Supported Extension(s) <code>get_server_logs</code> Allows retrieving of Appium server logs via the Webdriver log interface IOS, XCUITest, Android, UiAutomator2, Espresso <code>adb_shell</code> Allows execution of arbitrary shell commands via ADB, using the <code>mobile: shell</code> command Android, UiAutomator2, Espresso <code>record_audio</code> Allow recording of host machine audio inputs XCUITest <code>execute_driver_script</code> Allows to send a request which has multiple Appium commands. Execute Driver Plugin"},{"location":"guides/security/#examples","title":"Examples","text":"<p>To turn on the <code>get_server_logs</code> feature for my Appium server, I could start it like this:</p> <pre><code>appium --allow-insecure=get_server_logs\n</code></pre> <p>To turn on multiple features:</p> <pre><code>appium --allow-insecure=get_server_logs,record_audio\n</code></pre> <p>To allow all features except one:</p> <pre><code>appium --relaxed-security --deny-insecure=adb_shell\n</code></pre>"},{"location":"guides/settings/","title":"Session Settings","text":"<p>Appium has a set of extension APIs that allow you to adjust parameters for a given session during the session itself. Called \"Settings\", these parameters are similar to Capabilities, but while Capabilities cannot be adjusted once a session has started, Settings can be adjusted any number of times during the course of a session.</p> <p>There are 3 important points to the concept of Settings:</p> <ul> <li>Settings are mutable; they can be changed during a session using the Settings API</li> <li>Settings are only relevant during the session in which they are set. They are typically reset for   each new session, though depending on the driver, some settings may persist between sessions</li> <li>Settings only adjust the way the Appium server behaves during test automation. They do not affect   the device or app under test</li> </ul> <p>An example of a setting would be the <code>ignoreUnimportantViews</code> setting recognized by the UiAutomator2 driver. The driver can be instructed to ignore elements in the view hierarchy which it deems irrelevant. Changing this setting to <code>true</code> can cause tests to run faster. But if later in the same session you want to access elements which would be ignored under this setting, you can always change it back to <code>false</code>.</p> <p>Settings are implemented via the following API endpoints:</p> Command Method/Route Params Description Returns <code>Update Settings</code> <code>POST /session/:id/appium/settings</code> <code>settings</code> (<code>Record&lt;string, any&gt;</code>) Update the provided setting values <code>null</code> <code>Get Settings</code> <code>GET /session/:id/appium/settings</code> Return the current settings <code>settings</code> (<code>Record&lt;string, any&gt;</code>) <p>The <code>settings</code> object must be a set of keys and values, where the key is the setting name, and the value is any documented valid value for that setting.</p> <p>Info</p> <p>Settings are driver-specific, so refer to your driver's documentation for a list of supported settings</p>"},{"location":"guides/settings/#initializing-settings-via-capabilities","title":"Initializing Settings via Capabilities","text":"<p>If you want to start an Appium session with a setting in a non-default state, you can do so by including a capability of the form <code>appium:settings[&lt;name&gt;]</code> with the appropriate value. So to turn on the <code>ignoreUnimportantViews</code> setting mentioned above from the very beginning of a session, you would construct a set of capabilities that includes the following in its JSON representation:</p> <pre><code>{\n    \"appium:settings[ignoreUnimportantViews]\": true\n}\n</code></pre> <p>Also, since Appium 2.1, there is a possibility to provide multiple settings in a single <code>appium:settings</code> capability value:</p> <pre><code>{\n    \"appium:settings\": {\n        \"ignoreUnimportantViews\": true,\n        \"allowInvisibleElements\": true\n    }\n}\n</code></pre> <p>Of course, initializing a setting via capabilities doesn't prevent you from changing it later on via the Settings API. To learn more about how to use the Settings API in the context of your specific client library, visit the documentation for that client.</p>"},{"location":"guides/tls/","title":"SSL/TLS/SPDY Support","text":"<p>Appium 2.2 introduces the option to start the Appium server with SSL/TLS support. </p>"},{"location":"guides/tls/#command-line-arguments","title":"Command Line Arguments","text":"<p>In order to enable secure connections to the server, you need to provide the following command line arguments:</p> <pre><code>appium server --ssl-cert-path=/path/to/cert.pem --ssl-key-path=/path/to/key.pem\n</code></pre> <p>Both arguments must be provided and should contain paths to a valid X509 PEM certificate and its corresponding private key.</p> <p>After the server is started use the <code>https</code> protocol and a client supporting SSL/TLS or SPDY to communicate to it.</p>"},{"location":"guides/tls/#supported-features","title":"Supported Features","text":"<p>Once a secure server socket is established it supports the following protocols: <code>['h2', 'spdy/3.1', 'spdy/3', 'spdy/2', 'http/1.1', 'http/1.0']</code>. See the SPDY node module documentation to get more details about its features. All insecure client connections will be rejected by the server.</p>"},{"location":"guides/tls/#self-signed-certificates","title":"Self-Signed Certificates","text":"<p>Use the following command in order to generate a self-signed certificate/key pair:</p> <pre><code>openssl req -nodes -new -x509 -keyout key.pem -out cert.pem -subj \"/C=US/ST=State/L=City/O=company/OU=Com/CN=www.testserver.local\"\n</code></pre> <p>Feel free to change the value of <code>-subj</code> in the command above with your matching details. The server should work just fine with a self-signed certificate, although you need to take care about a proper client setup, e.g. make sure it does not reject unauthorized certificates.</p>"},{"location":"intro/","title":"Appium \u200b\u7b80\u4ecb","text":"<p>\u200b\u6b63\u5982\u200b\u4e3b\u9875\u200b\u4e0a\u200b\u63d0\u5230\u200b\u7684\u200b\u90a3\u6837\u200b\uff0cAppium\u200b\u65e8\u5728\u200b\u652f\u6301\u200b\u8bb8\u591a\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\uff08\u200b\u79fb\u52a8\u200b\u7aef\u200b\u3001\u200b\u7f51\u9875\u200b\u7aef\u200b\u3001\u200b\u684c\u9762\u200b\u7aef\u200b\u7b49\u200b\uff09\u200b\u7684\u200bUI\u200b\u81ea\u52a8\u5316\u200b\u3002\u200b\u4e0d\u4ec5\u5982\u6b64\u200b\uff0c\u200b\u5b83\u200b\u8fd8\u200b\u65e8\u5728\u200b\u652f\u6301\u200b\u7528\u200b\u4e0d\u540c\u200b\u8bed\u8a00\u200b\uff08JS\u3001Java\u3001Python\u200b\u7b49\u200b\uff09\u200b\u7f16\u5199\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u4ee3\u7801\u200b\u3002\u200b\u5c06\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u529f\u80fd\u200b\u7ed3\u5408\u200b\u5230\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u4e2d\u662f\u200b\u4e00\u9879\u200b\u975e\u5e38\u200b\u8270\u5de8\u200b\u3001\u200b\u751a\u81f3\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u7684\u200b\u4efb\u52a1\u200b\uff01</p> <p>\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u8fd9\u4e00\u200b\u76ee\u6807\u200b\uff0cAppium\u200b\u5b9e\u9645\u4e0a\u200b\u88ab\u200b\u5206\u4e3a\u200b\u56db\u4e2a\u200b\u90e8\u5206\u200b\uff1a</p> <ul> <li> Appium Core - \u200b\u5b9a\u4e49\u200b\u6838\u5fc3\u200bAPI</li> <li> Drivers - \u200b\u5b9e\u73b0\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u5e73\u53f0\u200b\u7684\u200b\u8fde\u63a5\u200b</li> <li> Clients - \u200b\u7528\u200b\u7279\u5b9a\u200b\u8bed\u8a00\u200b\u5b9e\u73b0\u200bAppium\u200b\u7684\u200bAPI</li> <li> Plugins - \u200b\u66f4\u6539\u200b\u6216\u200b\u6269\u5c55\u200bAppium\u200b\u7684\u200b\u6838\u5fc3\u200b\u529f\u80fd\u200b</li> </ul> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200bAppium\u200b\u81ea\u52a8\u5316\u200b\u67d0\u4e9b\u200b\u5185\u5bb9\u200b\uff0c\u200b\u4f60\u200b\u9700\u8981\u200b\uff1a</p> <ul> <li>\u200b\u5b89\u88c5\u200bAppium\u200b\u672c\u8eab\u200b</li> <li>\u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u76ee\u6807\u200b\u5e73\u53f0\u200b\u5b89\u88c5\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b</li> <li>\u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u76ee\u6807\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u5b89\u88c5\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b</li> <li>\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u5b89\u88c5\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u63d2\u4ef6\u200b</li> </ul> <p>\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u662f\u200b\u57fa\u7840\u200b\uff01\u200b\u5982\u679c\u200b\u4f60\u200b\u51c6\u5907\u200b\u597d\u200b\u52a0\u5165\u200b\uff0c\u200b\u8bf7\u200b\u7ee7\u7eed\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\uff01</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u5176\u200b\u8fd0\u4f5c\u200b\u65b9\u5f0f\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u53c2\u9605\u200b\u4ee5\u4e0b\u200b\u9875\u9762\u200b\u4e86\u89e3\u200b\u80cc\u666f\u200b\u6750\u6599\u200b\uff1a</p> <ul> <li>Appium Core</li> <li>Appium Drivers</li> <li>Appium Clients</li> </ul> <p>\u200b\u6700\u540e\u200b\uff0c\u200b\u8981\u200b\u4e86\u89e3\u200bAppium\u200b\u7684\u200b\u8d77\u6e90\u200b\uff0c\u200b\u8bf7\u200b\u67e5\u770b\u200bAppium\u200b\u9879\u76ee\u200b\u5386\u53f2\u200b\u3002</p>"},{"location":"intro/appium/","title":"Appium\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\uff1f","text":"<p>\u200b\u6b63\u5982\u200b\u4e3b\u9875\u200b\u4e0a\u200b\u63d0\u5230\u200b\u7684\u200b\u90a3\u6837\u200b\uff0cAppium\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u548c\u200b\u76f8\u5173\u200b\u8f6f\u4ef6\u200b\u751f\u6001\u7cfb\u7edf\u200b\uff0c\u200b\u65e8\u5728\u200b\u4fc3\u8fdb\u200b\u8bb8\u591a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5e73\u53f0\u200b\u7684\u200bUI\u200b\u81ea\u52a8\u5316\u200b\u3002\u200b\u968f\u7740\u200bAppium 2\u200b\u7684\u200b\u53d1\u5e03\u200b\uff0cAppium\u200b\u7684\u200b\u4e3b\u8981\u200b\u76ee\u6807\u200b\u5982\u4e0b\u200b\uff1a<sup>1</sup></p> <ul> <li>\u200b\u5728\u200b\u8de8\u5e73\u53f0\u200b\u3001\u200b\u6807\u51c6\u200bAPI\u200b\u4e0b\u200b\u63d0\u4f9b\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5e73\u53f0\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u529f\u80fd\u200b</li> <li>\u200b\u5141\u8bb8\u200b\u4ece\u200b\u4efb\u4f55\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u8f7b\u677e\u200b\u8bbf\u95ee\u200b\u6b64\u200bAPI</li> <li>\u200b\u63d0\u4f9b\u200b\u5de5\u5177\u200b\u4ee5\u200b\u65b9\u4fbf\u200b\u793e\u533a\u200b\u5f00\u53d1\u200bAppium\u200b\u6269\u5c55\u200b</li> </ul> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u8bf7\u200b\u9009\u62e9\u200b\u60a8\u200b\u6240\u200b\u77e5\u9053\u200b\u7684\u200b\u4efb\u4f55\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5e73\u53f0\u200b\uff0c\u200b\u4f8b\u5982\u200biOS\u200b\u6216\u200bAndroid\u3002Appium\u200b\u5e0c\u671b\u200b\u6709\u200b\u4e00\u79cd\u200b\u65b9\u6cd5\u200b\u8ba9\u200b\u5f00\u53d1\u4eba\u5458\u200b\u548c\u200b\u6d4b\u8bd5\u4eba\u5458\u200b\u6839\u636e\u200b\u5355\u4e00\u200b\u3001\u200b\u7edf\u4e00\u200b\u7684\u200bAPI\u200b\u4e3a\u200b\u8be5\u200b\u5e73\u53f0\u200b\u7f16\u5199\u200bUI\u200b\u81ea\u52a8\u5316\u200b\u4ee3\u7801\u200b\u3002\u200b\u6839\u636e\u200bAppium\u200b\u7684\u200b\u76ee\u6807\u200b\uff0c\u200b\u6211\u4eec\u200b\u6709\u200b\u5f88\u591a\u200b\u95ee\u9898\u200b\u9700\u8981\u200b\u56de\u7b54\u200b\u624d\u80fd\u200b\u4f7f\u200b\u8fd9\u200b\u4e00\u5207\u987a\u5229\u200b\u8fdb\u884c\u200b\uff1a</p> <ul> <li>\u201c\u200b\u5355\u4e00\u200b\u3001\u200b\u7edf\u4e00\u200b\u201dAPI\u200b\u5e94\u8be5\u200b\u662f\u200b\u54ea\u4e2a\u200bAPI\uff1f</li> <li>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5c06\u200b\u8be5\u200bAPI\u200b\u6620\u5c04\u200b\u5230\u200b\u7279\u5b9a\u200b\u5e73\u53f0\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u884c\u4e3a\u200b\uff1f</li> <li>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u591a\u79cd\u200b\u6d41\u884c\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u8bbf\u95ee\u200b\u8be5\u200bAPI\uff1f</li> </ul> <p>\u200b\u8003\u8651\u200b\u5230\u200b\u9664\u4e86\u200biOS\u200b\u548c\u200bAndroid\u200b\u4e4b\u5916\u200b\u8fd8\u6709\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5e73\u53f0\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u8fd8\u200b\u9690\u85cf\u200b\u7740\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u66f4\u5927\u200b\u7684\u200b\u95ee\u9898\u200b\uff1a</p> <ul> <li>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u6240\u6709\u200b\u5e73\u53f0\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\uff1f</li> </ul> <p>\u200b\u63a2\u7d22\u200bAppium\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u95ee\u9898\u200b\u7684\u200b\u7b54\u6848\u200b\u53ef\u80fd\u200b\u4e0d\u662f\u200b\u4e86\u89e3\u200bAppium\u200b\u662f\u200b\u4ec0\u4e48\u200b\u7684\u200b\u6700\u5feb\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4f46\u200b\u5b83\u200b\u80af\u5b9a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff01\u200b\u90a3\u4e48\u200b\u8ba9\u200b\u6211\u4eec\u200b\u6df1\u5165\u7814\u7a76\u200b\u5427\u200b\u3002</p>"},{"location":"intro/appium/#appiumapi","title":"Appium\u200b\u5bf9\u200bAPI\u200b\u7684\u200b\u9009\u62e9","text":"<p>Appium\u200b\u975e\u5e38\u200b\u5e78\u8fd0\u200b\uff0c\u200b\u5b83\u200b\u5148\u4e8e\u200bUI\u200b\u81ea\u52a8\u5316\u200b\u9886\u57df\u200b\u7684\u200b\u957f\u671f\u200b\u5148\u9a71\u200b\u6280\u672f\u200b Selenium \u3002Selenium\u200b\u9879\u76ee\u200b\u7684\u200b\u76ee\u6807\u200b\u662f\u200b\u652f\u6301\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200bUI\u200b\u81ea\u52a8\u5316\u200b\uff0c\u200b\u901a\u8fc7\u200b\u8fd9\u79cd\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5176\u200b\u89c6\u4e3a\u200b\u5360\u636e\u200bAppium\u200b\u76ee\u6807\u200b\u7684\u200b\u4e00\u4e2a\u200b\u5b50\u96c6\u200b\u3002\u200b\u4e00\u8def\u200b\u8d70\u6765\u200b\uff0cSelenium\uff08\u200b\u4ee5\u53ca\u200b\u5408\u5e76\u200b\u540e\u200b\u7684\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200bWebDriver\u200b\u7684\u200b\u9879\u76ee\u200b\uff09\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u76f8\u5bf9\u200b\u7a33\u5b9a\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u81ea\u52a8\u5316\u200bAPI\u3002</p> <p>\u200b\u591a\u5e74\u200b\u6765\u200b\uff0cSelenium\u200b\u4e0e\u200b\u591a\u5bb6\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u4f9b\u5e94\u5546\u200b\u548c\u200b W3C \u200b\u6807\u51c6\u200b\u5c0f\u7ec4\u200b\u5408\u4f5c\u200b\uff0c\u200b\u5c06\u200b\u5176\u200bAPI\u200b\u8f6c\u53d8\u200b\u4e3a\u200b\u5b98\u65b9\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u6807\u51c6\u200b\uff0c\u200b\u79f0\u4e3a\u200b WebDriver\u200b\u89c4\u8303\u200b\u3002\u200b\u6240\u6709\u200b\u4e3b\u8981\u200b\u6d4f\u89c8\u5668\u200b\u73b0\u5728\u200b\u90fd\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u7b26\u5408\u200bWebDriver\u200b\u89c4\u8303\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u529f\u80fd\u200b\uff0cSelenium\u200b\u56e2\u961f\u200b\u65e0\u9700\u200b\u7ef4\u62a4\u200b\u4efb\u4f55\u200b\u6267\u884c\u200b\u5b9e\u9645\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u8f6f\u4ef6\u200b\uff1b\u200b\u80dc\u5229\u200b\u7684\u200b\u6807\u51c6\u200b\uff01</p> <p>Appium\u200b\u7684\u200b\u6700\u521d\u200b\u76ee\u6807\u200b\u662f\u200b\u4e3a\u200b\u79fb\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff08iOS\u200b\u548c\u200bAndroid\uff09\u200b\u5f00\u53d1\u200b\u81ea\u52a8\u5316\u200b\u6807\u51c6\u200b\u3002\u200b\u6211\u4eec\u200b\u672c\u200b\u53ef\u4ee5\u200b\u521b\u9020\u200b\u4e00\u4e9b\u200b\u65b0\u200b\u7684\u200b\u4e1c\u897f\u200b\uff0c\u200b\u4f46\u200b\u8981\u200b\u672c\u7740\u200b\u56e2\u7ed3\u4e00\u81f4\u200b\u548c\u200b\u4fdd\u6301\u200b\u6807\u51c6\u200b\u7684\u200b\u7cbe\u795e\u200b\uff0c\u200b\u597d\u200b\u5427\u200b\uff0c\u200b\u6807\u51c6\u200b\uff0c\u200b\u6211\u4eec\u200b\u51b3\u5b9a\u200b\u91c7\u7528\u200bWebDriver\u200b\u89c4\u8303\u200b\u4f5c\u4e3a\u200bAppium\u200b\u7684\u200bAPI\u3002<sup>2</sup>\u200b\u867d\u7136\u200b\u7f51\u7ad9\u200b\u548c\u200b\u79fb\u52a8\u200b\u539f\u751f\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e2d\u200b\u7684\u200b\u7528\u6237\u200b\u4ea4\u4e92\u200b\u5e76\u200b\u4e0d\u200b\u5b8c\u5168\u76f8\u540c\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4e00\u65e6\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u8003\u8651\u200b\u7531\u200b\u7b80\u5355\u200b\u9065\u63a7\u5668\u200b\u63a7\u5236\u200b\u7684\u200b\u7535\u89c6\u200b\u5e73\u53f0\u200b\uff0c\u200b\u5dee\u5f02\u200b\u5c31\u200b\u4f1a\u200b\u66f4\u200b\u5927\u200b\uff09\uff0c\u200b\u5b9e\u9645\u4e0a\u200b\u5927\u591a\u6570\u200b\u8f6f\u4ef6\u200bUI\u200b\u51e0\u4e4e\u200b\u76f8\u540c\u200b\u3002\u200b\u8fd9\u200b\u610f\u5473\u7740\u200bWebDriver\u200b\u89c4\u8303\u200b\u63d0\u4f9b\u200b\u81ea\u52a8\u5316\u200bAPI\u200b\u57fa\u5143\u200b\uff08\u200b\u67e5\u627e\u200b\u5143\u7d20\u200b\u3001\u200b\u4e0e\u200b\u5143\u7d20\u200b\u4ea4\u4e92\u200b\u3001\u200b\u52a0\u8f7d\u200b\u9875\u9762\u200b\u6216\u200b\u5c4f\u5e55\u200b\u7b49\u200b\uff09\u200b\u6216\u591a\u6216\u5c11\u200b\u6620\u5c04\u200b\u5230\u200b\u4efb\u4f55\u200b\u5e73\u53f0\u200b\u3002</p> <p>\u200b\u5f53\u7136\u200b\uff0cAppium\u200b\u5e0c\u671b\u200b\u652f\u6301\u200b\u7528\u6237\u200b\u4ea4\u4e92\u200b\u4ece\u200b\u7f51\u9875\u200b\u5230\u200b\u79fb\u52a8\u200b\u8bbe\u5907\u200b\u6216\u200b\u4ece\u200b\u7f51\u9875\u200b\u5230\u200b\u7535\u89c6\u200b\u7684\u200b\u4e0d\u540c\u200b\u60c5\u51b5\u200b\uff0c\u200b\u56e0\u6b64\u200bAppium\u200b\u8fd8\u200b\u5229\u7528\u200b\u4e86\u200bWebDriver\u200b\u89c4\u8303\u200b\u7684\u200b\u5185\u7f6e\u200b\u53ef\u6269\u5c55\u6027\u200b\u3002\u200b\u7ed3\u679c\u200b\u662f\u200b\uff0c\u200b\u65e0\u8bba\u200b\u60a8\u200b\u60f3\u8981\u200b\u5b9e\u73b0\u200b\u54ea\u4e2a\u200b\u5e73\u53f0\u200b\u81ea\u52a8\u5316\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200bAppium\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u90fd\u200b\u5c06\u200b\u4f7f\u7528\u200b\u6807\u51c6\u200b\u7684\u200bWebDriver\u200b\u89c4\u8303\u200b\u6765\u200b\u6267\u884c\u200b\uff0c\u200b\u4f46\u200b\u6709\u200b\u4e24\u4e2a\u200b\u8b66\u544a\u200b\uff1a</p> <ul> <li>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u65e0\u6cd5\u200b\u5728\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u652f\u6301\u200b\u7279\u5b9a\u200b\u7684\u200bWebDriver API\u200b\u547d\u4ee4\u200b\uff0c\u200b\u56e0\u6b64\u200b\u67d0\u4e9b\u200b\u547d\u4ee4\u200b\u53ef\u80fd\u200b\u4e0d\u200b\u53d7\u200b\u652f\u6301\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u539f\u751f\u200b\u79fb\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u81ea\u52a8\u5316\u200b\u4e2d\u200b\uff0c\u200b\u83b7\u53d6\u200b\u6216\u200b\u8bbe\u7f6e\u200bcookie\u200b\u662f\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u7684\u200b\uff09\u3002</li> <li>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u652f\u6301\u200b\u8d85\u51fa\u200bWebDriver API\u200b\u547d\u4ee4\u200b\u5217\u8868\u200b\u4e2d\u200b\u53ef\u7528\u200b\u8303\u56f4\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u884c\u4e3a\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u4efb\u4f55\u200b\u6b64\u7c7b\u200b\u547d\u4ee4\u200b\u90fd\u200b\u662f\u200bWebDriver API\u200b\u7684\u200b\u6709\u6548\u200b\u4e14\u200b\u7b26\u5408\u89c4\u8303\u200b\u7684\u200b\u6269\u5c55\u200b\u3002</li> </ul> <p>\u200b\u60a8\u200b\u5b9e\u9645\u4e0a\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bWebDriver API\uff0c\u200b\u7279\u522b\u200b\u662f\u200b\u5728\u200bAppium\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\uff1f\u200b\u6211\u4eec\u200b\u5c06\u200b\u5728\u200b\u4e0b\u9762\u200b\u5173\u4e8e\u200bAppium\u200b\u5982\u4f55\u200b\u63d0\u4f9b\u200b\u901a\u7528\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u8bbf\u95ee\u200b\u7684\u200b\u90e8\u5206\u200b\u4e2d\u200b\u8ba8\u8bba\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u3002\u200b\u76ee\u524d\u200b\u60a8\u200b\u9700\u8981\u200b\u77e5\u9053\u200b\u7684\u200b\u662f\u200b\uff0cAppium\u200b\u5f15\u5165\u200b\u901a\u7528\u200bUI\u200b\u81ea\u52a8\u5316\u200b\u754c\u9762\u200b\u7684\u200b\u65b9\u5f0f\u200b\u662f\u200b\u901a\u8fc7\u200b\u5b9e\u73b0\u200bWebDriver\u200b\u534f\u8bae\u200b\u3002</p>"},{"location":"intro/appium/#_1","title":"\u5e73\u53f0\u200b\u81ea\u52a8\u5316\u200b\u884c\u4e3a","text":"<p>\u200b\u4e0b\u200b\u4e00\u4e2a\u200b\u95ee\u9898\u200b\u662f\u200b\uff0cAppium\u200b\u5982\u4f55\u200b\u5c06\u200b\u8be5\u200b\u534f\u8bae\u6620\u5c04\u200b\u5230\u200b\u5e7f\u6cdb\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u884c\u4e3a\u200b\uff1f\u200b\u4e25\u683c\u6765\u8bf4\u200b\uff0cAppium\u200b\u6ca1\u6709\u200b\u8fd9\u6837\u200b\u505a\u200b\uff01\u200b\u5b83\u200b\u5c06\u200b\u8fd9\u200b\u4e00\u200b\u8d23\u4efb\u200b\u7559\u7ed9\u200b\u4e86\u200b\u4e00\u79cd\u200b\u540d\u4e3a\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u6a21\u5757\u200b\u3002\u200b\u63a5\u4e0b\u6765\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9605\u8bfb\u200b\u5b8c\u6574\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7b80\u4ecb\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u76ee\u524d\u200b\u4e0d\u4f1a\u200b\u8be6\u7ec6\u200b\u4ecb\u7ecd\u200b\u5b83\u4eec\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u3002</p> <p>\u200b\u76ee\u524d\u200b\u9700\u8981\u200b\u4e86\u89e3\u200b\u7684\u200b\u91cd\u8981\u200b\u4e00\u70b9\u200b\u662f\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6709\u70b9\u50cf\u200bAppium\u200b\u7684\u200b\u53ef\u200b\u63d2\u5165\u200b\u6a21\u5757\u200b\uff0c\u200b\u5b83\u200b\u4f7f\u200bAppium\u200b\u80fd\u591f\u200b\u81ea\u52a8\u5316\u200b\u7279\u5b9a\u200b\u5e73\u53f0\u200b\uff08\u200b\u6216\u200b\u4e00\u7ec4\u200b\u5e73\u53f0\u200b\uff0c\u200b\u5177\u4f53\u200b\u53d6\u51b3\u4e8e\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u76ee\u6807\u200b\uff09\u3002\u200b\u5f52\u6839\u7ed3\u5e95\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u8d23\u4efb\u200b\u53ea\u662f\u200b\u7b80\u5355\u200b\u5730\u200b\u5b9e\u73b0\u200b\u4ee3\u8868\u200bWebDriver\u200b\u534f\u8bae\u200b\u7684\u200bAppium\u200b\u5185\u90e8\u200b\u63a5\u53e3\u200b\u3002\u200b\u5b83\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u63a5\u53e3\u200b\u5b8c\u5168\u200b\u53d6\u51b3\u4e8e\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff0c\u200b\u57fa\u4e8e\u200b\u5176\u200b\u5728\u200b\u7279\u5b9a\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u7b56\u7565\u200b\u3002\u200b\u901a\u5e38\u200b\uff0c\u200b\u7531\u4e8e\u200b\u7ec6\u8282\u200b\u4e0a\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u548c\u200b\u56f0\u96be\u6027\u200b\u8981\u200b\u5927\u5f97\u591a\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u901a\u8fc7\u200b\u4f9d\u8d56\u4e8e\u200b\u5e73\u53f0\u200b\u7279\u5b9a\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u6280\u672f\u200b\u6765\u200b\u505a\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u82f9\u679c\u200b\u7ef4\u62a4\u200b\u4e00\u9879\u200b\u540d\u4e3a\u200bXCUITest\u200b\u7684\u200biOS\u200b\u81ea\u52a8\u5316\u200b\u6280\u672f\u200b\u3002\u200b\u652f\u6301\u200biOS\u200b\u5e94\u7528\u200b\u81ea\u52a8\u5316\u200b\u7684\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u88ab\u200b\u79f0\u4e3a\u200bXCUITest Driver\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u6700\u7ec8\u200b\u7684\u200b\u4f5c\u7528\u200b\u662f\u200b\u5c06\u200bWebDriver\u200b\u534f\u8bae\u200b\u8f6c\u6362\u200b\u4e3a\u200bXCUITest\u200b\u5e93\u200b\u8c03\u7528\u200b\u3002</p> <p>\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u662f\u200b\u72ec\u7acb\u200b\u7684\u200b\u53ef\u200b\u63d2\u5165\u200b\u6a21\u5757\u200b\uff0c\u200b\u8fd9\u6837\u200b\u505a\u200b\u7684\u200b\u539f\u56e0\u200b\u4e4b\u4e00\u200b\u662f\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u7684\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\u5b8c\u5168\u200b\u4e0d\u540c\u200b\u3002\u200b\u6784\u5efa\u200b\u548c\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u5de5\u5177\u200b\u548c\u200b\u9700\u6c42\u200b\u4e5f\u200b\u662f\u200b\u5b8c\u5168\u200b\u4e0d\u540c\u200b\u7684\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0cAppium\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4ec5\u200b\u4f7f\u7528\u200b\u81ea\u52a8\u5316\u200b\u4efb\u52a1\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002\u200b\u9009\u62e9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5e76\u200b\u5b89\u88c5\u200b\u5b83\u4eec\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5b83\u4eec\u200b\u4e0e\u200bAppium\u200b\u5b9e\u4f8b\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u8fd9\u662f\u200b\u975e\u5e38\u200b\u91cd\u8981\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200bAppium\u200b\u62e5\u6709\u200b\u81ea\u5df1\u200b\u7684\u200bCLI\u200b\u6765\u200b\u7ba1\u7406\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4e3a\u4e86\u200b\u56de\u7b54\u200b\u6211\u4eec\u200b\u6700\u521d\u200b\u7684\u200b\u95ee\u9898\u200b\uff0cAppium\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u5e73\u53f0\u200b\u63d0\u4f9b\u200b\u81ea\u52a8\u5316\u200b\u529f\u80fd\u200b\u8bbf\u95ee\u200b\u7684\u200b\u65b9\u5f0f\u200b\u662f\u200b\uff0cAppium\u200b\u56e2\u961f\u200b\uff08\u200b\u6216\u200b\u5176\u4ed6\u200b\u4efb\u4f55\u4eba\u200b<sup>3</sup>\uff09\u200b\u4e3a\u200b\u8be5\u200b\u5e73\u53f0\u200b\u7f16\u5199\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff0c\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u5b9e\u73b0\u200b\u5c3d\u53ef\u80fd\u200b\u591a\u200b\u6216\u200b\u5c3d\u53ef\u80fd\u5c11\u200b\u7684\u200bWebDriver\u200b\u534f\u8bae\u200b\u3002\u200b\u7136\u540e\u200b\u4efb\u4f55\u200b\u4f7f\u7528\u200bAppium\u200b\u7684\u200b\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5b89\u88c5\u200b\u8be5\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"intro/appium/#_2","title":"\u901a\u7528\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u8bbf\u95ee","text":"<p>\u200b\u4f46\u200b\u4f7f\u7528\u200bAppium\u200b\u5230\u5e95\u200b\u662f\u200b\u4ec0\u4e48\u200b\u610f\u601d\u200b\uff0c\u200b\u6216\u8005\u200b\u770b\u8d77\u6765\u200b\u662f\u200b\u4ec0\u4e48\u200b\u6837\u5b50\u200b\u5462\u200b\uff1f\u200b\u7531\u4e8e\u200bAppium\u200b\u6700\u7ec8\u200b\u662f\u200b\u4e00\u4e2a\u200bNode.js\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u770b\u8d77\u6765\u200b\u5c31\u200b\u50cf\u200b\u5c06\u200bAppium\u200b\u53ca\u5176\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4f5c\u4e3a\u200b\u5e93\u200b\u5bfc\u5165\u5230\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200bNode.js\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u3002\u200b\u4f46\u200b\u8fd9\u200b\u65e0\u6cd5\u200b\u6ee1\u8db3\u200bAppium\u200b\u4e3a\u200b\u4f7f\u7528\u200b\u4efb\u4f55\u200b\u6d41\u884c\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7684\u200b\u4eba\u4eec\u200b\u63d0\u4f9b\u200b\u81ea\u52a8\u5316\u200b\u529f\u80fd\u200b\u7684\u200b\u76ee\u6807\u200b\u3002</p> <p>\u200b\u5e78\u8fd0\u200b\u7684\u200b\u662f\u200b\uff0cAppium\u200b\u642d\u4e0a\u200b\u4e86\u200bSelenium\u200b\u7684\u200b\u987a\u98ce\u200b\u8f66\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u6211\u4eec\u200b\u4ece\u200b\u7b2c\u4e00\u5929\u200b\u8d77\u200b\u5c31\u200b\u6709\u200b\u4e86\u200b\u89e3\u51b3\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u7684\u200b\u529e\u6cd5\u200b\u3002\u200b\u4f60\u200b\u770b\u200b\uff0cWebDriver\u200b\u89c4\u8303\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u4e00\u4e2a\u200b\u57fa\u4e8e\u200bHTTP\u200b\u7684\u200b\u534f\u8bae\u200b\uff0c\u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u5b83\u200b\u88ab\u200b\u8bbe\u8ba1\u200b\u4e3a\u200b\u5728\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u4f7f\u7528\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5728\u200b\u5355\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5185\u5b58\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u8fd9\u79cd\u200b\u201c\u200b\u5ba2\u6237\u7aef\u200b-\u200b\u670d\u52a1\u5668\u200b\u201d\u200b\u67b6\u6784\u200b\u7684\u200b\u4e3b\u8981\u200b\u597d\u5904\u200b\u4e4b\u4e00\u200b\u662f\u200b\uff0c\u200b\u5b83\u200b\u5141\u8bb8\u200b\u81ea\u52a8\u5316\u200b\u5b9e\u73b0\u200b\u8005\u200b\uff08\u200b\u6267\u884c\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u4e1c\u897f\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6307\u200b\u670d\u52a1\u5668\u7aef\u200b\uff09\u200b\u4e0e\u200b\u81ea\u52a8\u5316\u200b\u8fd0\u884c\u200b\u8005\u200b\uff08\u200b\u5b9a\u4e49\u200b\u81ea\u52a8\u5316\u200b\u5e94\u8be5\u200b\u6267\u884c\u200b\u4ec0\u4e48\u200b\u3001\u200b\u5728\u200b\u54ea\u4e9b\u200b\u6b65\u9aa4\u200b\u4e2d\u7b49\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6307\u200b\u5ba2\u6237\u7aef\u200b\uff09\u200b\u5b8c\u5168\u200b\u4e0d\u540c\u200b\u3002\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u6240\u6709\u200b\u201c\u200b\u786c\u200b\u4e1c\u897f\u200b\u201d\uff08\u200b\u5b9e\u9645\u4e0a\u200b\u662f\u200b\u5f04\u6e05\u695a\u200b\u5982\u4f55\u200b\u5728\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u5316\u200b\uff09\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u7531\u200b\u670d\u52a1\u5668\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5730\u65b9\u200b\u5904\u7406\u200b\uff0c\u200b\u800c\u200b\u201c\u200b\u7626\u200b\u201d\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\u53ef\u4ee5\u200b\u7528\u200b\u4efb\u4f55\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7f16\u5199\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u8bed\u8a00\u200b\u53ea\u200b\u9700\u4ee5\u200b\u9002\u5f53\u200b\u7684\u200b\u8bed\u8a00\u200b\u5bf9\u200b\u670d\u52a1\u5668\u200b\u7684\u200bHTTP\u200b\u8bf7\u6c42\u200b\u8fdb\u884c\u200b\u7f16\u7801\u200b\u3002\u200b\u6362\u53e5\u8bdd\u8bf4\u200b\uff0c\u200b\u5982\u679c\u200b\u5b58\u5728\u200b\u9ad8\u7ea7\u200b\u7684\u200bHTTP\u200b\u5e93\u200b\uff0c\u200b\u90a3\u4e48\u200b\u901a\u8fc7\u200b\u5728\u200b\u90a3\u79cd\u200b\u8bed\u8a00\u200b\u4e2d\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u57fa\u672c\u200b\u7684\u200bHTTP\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u76f8\u5bf9\u200b\u5bb9\u6613\u200b\u5730\u200b\u5c06\u200b\u57fa\u672c\u200b\u7684\u200bAppium/WebDriver\u200b\u529f\u80fd\u200b\u5f15\u5165\u200b\u5230\u200b\u65b0\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u5bf9\u4e8e\u200bAppium\u200b\u7528\u6237\u200b\u6765\u8bf4\u200b\uff0c\u200b\u8fd9\u91cc\u200b\u6709\u200b\u51e0\u4e2a\u200b\u91cd\u8981\u200b\u7684\u200b\u8981\u70b9\u200b\uff1a</p> <ul> <li>Appium\u200b\u662f\u200b\u4e00\u4e2a\u200bHTTP\u200b\u670d\u52a1\u5668\u200b\u3002\u200b\u53ea\u8981\u200b\u60a8\u200b\u60f3\u200b\u5c06\u200b\u5176\u200b\u7528\u4e8e\u200b\u81ea\u52a8\u5316\u200b\uff0c\u200b\u5b83\u200b\u5c31\u200b\u5fc5\u987b\u200b\u5728\u200b\u67d0\u53f0\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u4f5c\u4e3a\u200b\u8fdb\u7a0b\u200b\u8fd0\u884c\u200b\u3002\u200b\u5b83\u200b\u5fc5\u987b\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u8bbf\u95ee\u200b\u60a8\u200b\u60f3\u200b\u7528\u6765\u200b\u8fd0\u884c\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u4efb\u4f55\u200b\u8ba1\u7b97\u673a\u200b\uff08\u200b\u65e0\u8bba\u662f\u200b\u540c\u4e00\u200b\u53f0\u200b\u673a\u5668\u200b\u8fd8\u662f\u200b\u4e16\u754c\u5404\u5730\u200b\u7684\u200b\u673a\u5668\u200b\uff09\u3002</li> <li>\u200b\u9664\u975e\u200b\u60a8\u200b\u60f3\u200b\u7f16\u5199\u200b\u539f\u59cb\u200bHTTP\u200b\u8c03\u7528\u200b\u6216\u200b\u4f7f\u7528\u200bcURL\uff0c\u200b\u5426\u5219\u200b\u4f7f\u7528\u200bAppium\u200b\u8fdb\u884c\u200b\u81ea\u52a8\u5316\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u60a8\u200b\u9009\u62e9\u200b\u7684\u200b\u8bed\u8a00\u200b\u7684\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u76ee\u6807\u200b\u90fd\u200b\u662f\u200b\u5c01\u88c5\u200bWebDriver\u200b\u534f\u8bae\u200b\uff0c\u200b\u8fd9\u6837\u200b\u60a8\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u8bed\u8a00\u200b\u6765\u8bf4\u200b\u4e60\u60ef\u200b\u7684\u200b\u5bf9\u8c61\u200b\u548c\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u800c\u200b\u4e0d\u7528\u200b\u62c5\u5fc3\u200b\u534f\u8bae\u200b\u672c\u8eab\u200b\u3002</li> <li>Appium\u200b\u670d\u52a1\u5668\u200b\u548c\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u4e0d\u200b\u9700\u8981\u200b\u5728\u200b\u540c\u4e00\u200b\u53f0\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u8fd0\u884c\u200b\u3002\u200b\u60a8\u200b\u53ea\u200b\u9700\u8981\u200b\u80fd\u591f\u200b\u901a\u8fc7\u200b\u67d0\u79cd\u200b\u7f51\u7edc\u200b\u5c06\u200bHTTP\u200b\u8bf7\u6c42\u200b\u4ece\u200b\u5ba2\u6237\u7aef\u200b\u53d1\u9001\u5230\u200b\u670d\u52a1\u5668\u200b\u5373\u53ef\u200b\u3002\u200b\u8fd9\u200b\u6781\u5927\u200b\u5730\u65b9\u200b\u4fbf\u200b\u4e86\u200bAppium\u200b\u4e91\u200b\u63d0\u4f9b\u5546\u200b\u7684\u200b\u4f7f\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u4eec\u200b\u53ef\u4ee5\u200b\u6258\u7ba1\u200bAppium\u200b\u670d\u52a1\u5668\u200b\u4ee5\u53ca\u200b\u4efb\u4f55\u200b\u76f8\u5173\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u548c\u200b\u8bbe\u5907\u200b\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u9700\u8981\u200b\u505a\u200b\u7684\u200b\u5c31\u662f\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u811a\u672c\u200b\u6307\u5411\u200b\u5176\u200b\u5b89\u5168\u200b\u7aef\u70b9\u200b\u3002</li> </ul> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u4e0d\u662f\u200b\u5173\u4e8e\u200b\u201c\u200b\u6d4b\u8bd5\u200b\u201d\u200b\u672c\u8eab\u200b\uff0c\u200b\u800c\u200b\u7eaf\u7cb9\u200b\u662f\u200b\u5173\u4e8e\u200b\u4f7f\u7528\u200bAppium\u200b\u53ca\u5176\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u6765\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u5316\u200b\u76ee\u7684\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u4ee5\u200b\u201c\u200b\u6d4b\u8bd5\u200b\u201d\u200b\u4e3a\u200b\u76ee\u7684\u200b\u8fdb\u884c\u200b\u81ea\u52a8\u5316\u200b\uff0c\u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5e0c\u671b\u200b\u83b7\u5f97\u200b\u6d4b\u8bd5\u8fd0\u884c\u200b\u8005\u200b\u3001\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u7b49\u200b\u7684\u200b\u5e2e\u52a9\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u4e0d\u200b\u9700\u8981\u200b\u4e0e\u200bAppium\u200b\u76f8\u5173\u200b\uff1bAppium\u200b\u7684\u200b\u201c\u200b\u901a\u7528\u200b\u53ef\u200b\u8bbf\u95ee\u200b\u6027\u200b\u201d\u200b\u7684\u200b\u597d\u5904\u200b\u4e4b\u4e00\u200b\u662f\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u597d\u200b\u5730\u200b\u4e0e\u200b\u4f60\u200b\u8ba4\u4e3a\u200b\u5bf9\u200b\u4f60\u200b\u7684\u200b\u60c5\u51b5\u200b\u6700\u200b\u6709\u5229\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u7ec4\u200b\u5de5\u5177\u200b\u914d\u5408\u200b\u4f7f\u7528\u200b\u3002</p>"},{"location":"intro/appium/#appium","title":"Appium\u200b\u7684\u200b\u5e7f\u9614\u200b\u5e94\u7528\u200b\u8303\u56f4","text":"<p>Appium\u200b\u7684\u200b\u613f\u666f\u200b\uff08\u200b\u5728\u200b\u5355\u4e2a\u200bAPI\u200b\u4e0b\u200b\u5b9e\u73b0\u200b\u4e00\u5207\u200b\u81ea\u52a8\u5316\u200b\uff09\u200b\u662f\u200b\u5de8\u5927\u200b\u7684\u200b\uff01\u200b\u5f53\u7136\u200b\uff0c\u200b\u8fd9\u6bd4\u200b\u5f00\u6e90\u200b\u9879\u76ee\u200b\u7684\u200b\u6838\u5fc3\u200b\u7ef4\u62a4\u200b\u4eba\u5458\u200b\u56e2\u961f\u200b\u8981\u200b\u5927\u5f97\u591a\u200b\u3002\u200b\u90a3\u4e48\u200bAppium\u200b\u5e0c\u671b\u200b\u5982\u4f55\u200b\u5b9e\u73b0\u200b\u8fd9\u4e2a\u200b\u76ee\u6807\u200b\u5462\u200b\uff1f\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6388\u6743\u200b\u793e\u533a\u200b\u5728\u200bAppium\u200b\u4f5c\u4e3a\u200b\u5e73\u53f0\u200b\u7684\u200b\u57fa\u7840\u200b\u4e0a\u200b\u5f00\u53d1\u200b\u529f\u80fd\u200b\u3002\u200b\u8fd9\u200b\u5c31\u662f\u200b\u6211\u4eec\u200b\u6240\u8bf4\u200b\u7684\u200bAppium\u201c\u200b\u751f\u6001\u7cfb\u7edf\u200b\u201d\u3002</p> <p>Appium\u200b\u56e2\u961f\u200b\u672c\u8eab\u200b\u786e\u5b9e\u200b\u6b63\u5f0f\u200b\u7ef4\u62a4\u200b\u4e86\u200b\u4e00\u4e9b\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e4b\u524d\u200b\u8c08\u5230\u200b\u7684\u200bXCUITest\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff09\u3002\u200b\u4f46\u200b\u4e0d\u80fd\u200b\u6307\u671b\u200b\u4ed6\u4eec\u200b\u62e5\u6709\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u5e73\u53f0\u200b\u7684\u200b\u4e13\u4e1a\u77e5\u8bc6\u200b\u6216\u200b\u4e3a\u200b\u8bb8\u591a\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\u7ef4\u62a4\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u80fd\u529b\u200b\u3002\u200b\u4f46\u200b\u6211\u4eec\u200b\u6240\u200b\u505a\u200b\u7684\u200b\uff0c\u200b\u7279\u522b\u200b\u662f\u4ece\u200bAppium 2\u200b\u5f00\u59cb\u200b\uff0c\u200b\u662f\u200b\u63d0\u4f9b\u200b\u5de5\u5177\u200b\u6765\u200b\u5e2e\u52a9\u200b\u793e\u533a\u200b\u52a0\u5165\u200b\u6211\u4eec\u200b\u7684\u200b\u613f\u666f\u200b\uff1a</p> <ul> <li>\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u7b26\u5408\u200b\u7ea6\u5b9a\u200b\u7684\u200bNode.js\u200b\u6a21\u5757\u200b\u6765\u200b\u521b\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u200b\u5b9e\u73b0\u200bWebDriver\u200b\u534f\u8bae\u200b\u7684\u200b\u4efb\u4f55\u200b\u5b50\u96c6\u200b\u6216\u200b\u8d85\u96c6\u200b\u3002\u200b\u521b\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u901a\u5e38\u200b\u9700\u8981\u200b\u6700\u5c11\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u56e0\u4e3a\u200bWebDriver\u200b\u534f\u8bae\u200b\u7684\u200b\u7ec6\u8282\u200b\u88ab\u200b\u62bd\u8c61\u200b\u51fa\u6765\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6709\u200b\u8bb8\u591a\u200b\u8f85\u52a9\u200b\u5e93\u200b\u53ef\u7528\u200b\u2014\u2014\u200b\u8fd9\u4e9b\u200b\u5e93\u200b\u4e5f\u200b\u4e3a\u200bAppium\u200b\u56e2\u961f\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u63d0\u4f9b\u200b\u52a8\u529b\u200b\u3002</li> <li>\u200b\u4f7f\u7528\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200bCLI\u200b\u53ef\u4ee5\u200b\u8f7b\u677e\u200b\u5730\u200b\u4e0e\u200b\u4ed6\u4eba\u200b\u5171\u4eab\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002\u200b\u6ca1\u6709\u200b\u4e2d\u592e\u200b\u6743\u529b\u200b\u673a\u6784\u200b\u3002\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u516c\u5f00\u200b\u6216\u200b\u79c1\u4e0b\u200b\u3001\u200b\u514d\u8d39\u200b\u6216\u200b\u51fa\u552e\u200b\u5171\u4eab\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u5f00\u6e90\u200b\u7684\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u95ed\u6e90\u200b\u7684\u200b\uff08\u200b\u5c3d\u7ba1\u200b\u6211\u4eec\u200b\u5f88\u200b\u6b23\u8d4f\u200b\u5f00\u6e90\u200b\uff01\uff09\u3002</li> </ul> <p>Appium\u200b\u4f5c\u4e3a\u200b\u5f00\u53d1\u200b\u5e73\u53f0\u200b\u7684\u200b\u613f\u666f\u200b\u4e0d\u4ec5\u200b\u9650\u4e8e\u200b\u652f\u6301\u200b\u6240\u6709\u200b\u5e94\u7528\u200b\u5e73\u53f0\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u3002\u200b\u4f5c\u4e3a\u200b\u4e00\u79cd\u200b\u6d41\u884c\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u5de5\u5177\u200b\uff0cAppium\u200b\u6709\u200b\u5f88\u591a\u200b\u673a\u4f1a\u200b\u4e0e\u200b\u5404\u79cd\u200b\u5176\u4ed6\u200b\u5de5\u5177\u200b\u548c\u200b\u670d\u52a1\u200b\u96c6\u6210\u200b\u3002\u200b\u6b64\u5916\u200b\uff0c\u200b\u5bf9\u4e8e\u200bAppium\uff0c\u200b\u65e0\u8bba\u662f\u200b\u4f5c\u4e3a\u200b\u6838\u5fc3\u200b\u670d\u52a1\u5668\u200b\u8fd8\u662f\u200b\u901a\u8fc7\u200b\u5404\u79cd\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u5b9e\u73b0\u200b\uff0c\u200b\u90fd\u200b\u6709\u200b\u8bb8\u591a\u200b\u7279\u6027\u200b\u7684\u200b\u60f3\u6cd5\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u662f\u200b\u6838\u5fc3\u200b\u56e2\u961f\u200b\u6c38\u8fdc\u200b\u6ca1\u6709\u200b\u65f6\u95f4\u200b\u6765\u200b\u6784\u5efa\u200b\u7684\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200bAppium 2\u200b\u4e2d\u200b\uff0cAppium\u200b\u53d1\u5e03\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u7cfb\u7edf\u200b\uff0c\u200b\u4f7f\u200b\u4efb\u4f55\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u6784\u5efa\u200b\u548c\u200b\u5171\u4eab\u200b\u6539\u53d8\u200bAppium\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\u7684\u200b\u6a21\u5757\u200b\uff01</p> <p>\u200b\u5c31\u200b\u50cf\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200bCLI\u200b\u8f7b\u677e\u200b\u5171\u4eab\u200b\u548c\u200b\u4f7f\u7528\u200b\u4e00\u6837\u200b\uff0c\u200b\u63d2\u4ef6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u76f8\u4f3c\u200b\u7684\u200b\u63d2\u4ef6\u200bCLI\u200b\u53d1\u5e03\u200b\u548c\u200b\u4f7f\u7528\u200b\u3002\u200b\u63d2\u4ef6\u200b\u53ef\u4ee5\u200b\u505a\u200b\u5404\u79cd\u5404\u6837\u200b\u7684\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4e3a\u200bAppium\u200b\u6dfb\u52a0\u200b\u6839\u636e\u200b\u6a21\u677f\u200b\u56fe\u50cf\u200b\u67e5\u627e\u200b\u5c4f\u5e55\u200b\u533a\u57df\u200b\u5e76\u200b\u4e0e\u200b\u5c4f\u5e55\u200b\u533a\u57df\u200b\u4ea4\u4e92\u200b\u7684\u200b\u80fd\u529b\u200b\uff08\u200b\u5982\u200b\u5728\u200b\u56fe\u50cf\u200b\u63d2\u4ef6\u200b\u4e2d\u200b\uff09\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7528\u200b\u63d2\u4ef6\u200b\u505a\u200b\u4ec0\u4e48\u200b\u51e0\u4e4e\u200b\u6ca1\u6709\u200b\u9650\u5236\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4f60\u200b\u53ef\u80fd\u200b\u4e5f\u200b\u6709\u200b\u5174\u8da3\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u5728\u200bNode.js\u200b\u4e2d\u200b\u6784\u5efa\u200b\u53ef\u4ee5\u200b\u4e0e\u200bAppium\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u7684\u200b\u63d2\u4ef6\u200b\u3002</p> <p>\u200b\u8fd9\u200b\u5c31\u662f\u200bAppium\uff1a\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u6269\u5c55\u200b\u7684\u200b\u901a\u7528\u200b\u754c\u9762\u200b\uff0c\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b\u6f5c\u5728\u200b\u4e00\u5207\u200b\u7684\u200bUI\u200b\u81ea\u52a8\u5316\u200b\uff01\u200b\u8bf7\u200b\u7ee7\u7eed\u200b\u9605\u8bfb\u200b\u4e00\u4e9b\u200b\u5177\u4f53\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u6587\u6863\u200b\u4ee5\u200b\u83b7\u53d6\u200b\u66f4\u200b\u591a\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\uff0c\u200b\u6216\u200b\u67e5\u770b\u200b\u5404\u79cd\u200b\u6307\u5357\u200b\u4ee5\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200bAppium\u200b\u7684\u200b\u4e00\u4e9b\u200b\u6982\u5ff5\u200b\u548c\u200b\u529f\u80fd\u200b\u3002</p> <ol> <li> <p>\u200b\u4e3a\u4e86\u200b\u5b9e\u73b0\u200b\u8fd9\u4e9b\u200b\u4e3b\u8981\u200b\u76ee\u6807\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5236\u5b9a\u200b\u4e86\u200b\u4e00\u5957\u200b\u6b21\u8981\u200b\u76ee\u6807\u200b\u6216\u200b\u65b9\u6cd5\u8bba\u200b\u539f\u5219\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e5f\u200b\u9f13\u52b1\u200bAppium\u200b\u6269\u5c55\u200b\u5f00\u53d1\u4eba\u5458\u200b\u8fd9\u6837\u200b\u505a\u200b\uff1a</p> <ul> <li>\u200b\u5c3d\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\uff08\u200b\u5e76\u200b\u8d21\u732e\u200b\uff09\u200b\u5f00\u6e90\u200b\u6280\u672f\u200b</li> <li>\u200b\u5c3d\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\u4f9b\u5e94\u5546\u200b\u4e3a\u200b\u7ed9\u5b9a\u200b\u5e73\u53f0\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5de5\u5177\u200b</li> <li>\u200b\u5c3d\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\u5141\u8bb8\u200b\u4e0d\u200b\u4fee\u6539\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5c31\u200b\u80fd\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u5de5\u5177\u200b\uff08\u200b\u4e0d\u8981\u200b\u8ba9\u200b\u7528\u6237\u200b\u6784\u5efa\u200b\u989d\u5916\u200b\u7684\u200bSDK\u200b\u6216\u200b\u8f6f\u4ef6\u200b\uff0c\u200b\u4ece\u800c\u200b\u5bfc\u81f4\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u6d4b\u8bd5\u200b\u7248\u672c\u200b\u548c\u200b\u751f\u4ea7\u200b\u7248\u672c\u200b\u4e4b\u95f4\u200b\u5b58\u5728\u200b\u5dee\u5f02\u200b\uff09</li> <li>\u200b\u5c3d\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\u73b0\u6709\u200b\u6807\u51c6\u200b\u800c\u200b\u4e0d\u662f\u200b\u521b\u5efa\u200b\u65b0\u200b\u6807\u51c6\u200b</li> </ul> <p>\u21a9</p> </li> <li> <p>\u200b\u4ece\u6280\u672f\u4e0a\u200b\u8bb2\u200b\uff0c\u200b\u5f53\u200bAppium\u200b\u7b2c\u4e00\u6b21\u200b\u7f16\u5199\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u5904\u7406\u200b\u6bd4\u200bWebDriver\u200b\u89c4\u8303\u200b\u66f4\u200b\u65e9\u200b\u7684\u200b\u4e1c\u897f\u200b\uff0c\u200b\u79f0\u4e3a\u200bJSON Wire Protocol\u3002\u200b\u4ece\u90a3\u65f6\u8d77\u200b\uff0cAppium\u200b\u7ee7\u7eed\u200b\u968f\u7740\u200bW3C\u200b\u89c4\u8303\u200b\u53d1\u5c55\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5b8c\u5168\u7b26\u5408\u200bW3C\u3002\u00a0\u21a9</p> </li> <li> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6784\u5efa\u200b\u548c\u200b\u5171\u4eab\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff01\u200b\u67e5\u770b\u200b\u6784\u5efa\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff0c\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u5982\u4f55\u200b\u5728\u200bNode.js\u200b\u4e2d\u200b\u5f00\u53d1\u200b\u53ef\u200b\u4e0e\u200bAppium\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/clients/","title":"Appium\u200b\u5ba2\u6237\u7aef\u200b\u4ecb\u7ecd","text":"<p>\u200b\u7531\u4e8e\u200b\u6982\u8ff0\u200b\u4e2d\u200b\u8ba8\u8bba\u200b\u7684\u200b\u5168\u90e8\u200b\u539f\u56e0\u200b, Appium\u200b\u57fa\u4e8e\u200bW3C WebDriver \u200b\u89c4\u8303\u200b. \u200b\u8fd9\u200b\u610f\u5473\u7740\u200bAppium\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u5ba2\u6237\u7aef\u200b-\u200b\u670d\u52a1\u5668\u200b\u67b6\u6784\u200b. \u200b\u670d\u52a1\u5668\u200b(\u200b\u7531\u200bAppium\u200b\u672c\u8eab\u200b\u548c\u200b\u60a8\u200b\u7528\u4e8e\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u4efb\u4f55\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6216\u200b\u63d2\u4ef6\u200b) \u200b\u8fde\u63a5\u200b\u5230\u200b\u88ab\u200b\u6d4b\u200b\u8bbe\u5907\u200b,  \u200b\u5e76\u4e14\u200b\u5b9e\u9645\u4e0a\u200b\u8d1f\u8d23\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u5b9e\u73b0\u200b\u81ea\u52a8\u5316\u200b. \u200b\u5ba2\u6237\u7aef\u200b(\u200b\u7531\u200bAppium\u200b\u6d4b\u8bd5\u200b\u4f5c\u8005\u200b \u200b\u60a8\u200b \u200b\u9a71\u52a8\u200b)  \u200b\u8d1f\u8d23\u200b\u901a\u8fc7\u200b\u7f51\u7edc\u200b\u5411\u200b\u670d\u52a1\u5668\u53d1\u9001\u200b\u547d\u4ee4\u200b,  \u200b\u5e76\u4e14\u200b\u63a5\u6536\u200b\u4ece\u200b\u670d\u52a1\u5668\u200b\u54cd\u5e94\u200b\u7684\u200b\u7ed3\u679c\u200b.  \u200b\u8fd9\u4e9b\u200b\u54cd\u5e94\u200b\u53ef\u200b\u7528\u4e8e\u200b\u8868\u793a\u200b\u81ea\u52a8\u5316\u200b\u547d\u4ee4\u200b\u662f\u5426\u200b\u6210\u529f\u200b,  \u200b\u6216\u8005\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u60a8\u200b\u67e5\u8be2\u200b\u7684\u200b\u6709\u5173\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u72b6\u6001\u200b\u7684\u200b\u4fe1\u606f\u200b.  \u200b\u672c\u200b\u6587\u6863\u200b\u662f\u200b\u7b49\u540c\u4e8e\u200b\u5bf9\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6982\u5ff5\u200b\u4ecb\u7ecd\u200b.</p> <p>Info</p> <p>\u200b\u6709\u5173\u200b\u670d\u52a1\u7aef\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b(\u200b\u4f8b\u5982\u200b, Appium\u200b\u5982\u4f55\u200b\u5b9e\u9645\u200b\u63a7\u5236\u200b\u8bbe\u5907\u200b\uff1f) ,  \u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u6211\u4eec\u200b\u7684\u200bAppium\u200b\u9a71\u52a8\u200b\u7b80\u4ecb\u200b. \u200b\u8981\u200b\u8df3\u200b\u5230\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u94fe\u63a5\u200b\u5217\u8868\u200b, \u200b\u8bf7\u200b\u67e5\u770b\u200b\u751f\u6001\u7cfb\u7edf\u200b \u200b\u6587\u6863\u200b</p> <p>\u200b\u6709\u200b\u54ea\u4e9b\u200b\u7c7b\u578b\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u547d\u4ee4\u200b\u53ef\u7528\u200b\uff1f \u200b\u8fd9\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u5728\u200b\u4efb\u4f55\u200b\u7ed9\u5b9a\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u7684\u200b\u7279\u5b9a\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u548c\u200b\u63d2\u4ef6\u200b.  \u200b\u4e00\u7ec4\u200b\u6807\u51c6\u200b\u547d\u4ee4\u200b\u5c06\u200b\u5305\u62ec\u200b\u7684\u200b\u5185\u5bb9\u200b, \u200b\u5982\u4e0b\u200b\u6240\u793a\u200b:</p> <ul> <li>\u200b\u67e5\u627e\u200b\u5143\u7d20\u200b</li> <li>\u200b\u70b9\u51fb\u200b\u5143\u7d20\u200b</li> <li>\u200b\u83b7\u53d6\u200b\u6e90\u7801\u200b</li> <li>\u200b\u622a\u56fe\u200b</li> </ul> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200bWebDriver\u200b\u89c4\u8303\u200b\u4e2d\u200b\u67e5\u770b\u200b\u8fd9\u4e9b\u200b\u547d\u4ee4\u200b,  \u200b\u60a8\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b\u5b83\u4eec\u200b\u4e0d\u662f\u200b\u6839\u636e\u200b\u4efb\u4f55\u200b\u7279\u5b9a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u5b9a\u4e49\u200b.  \u200b\u5b83\u4eec\u200b\u4e0d\u662f\u200bJava\u200b\u547d\u4ee4\u200b\u6216\u200bJavaScript\u200b\u547d\u4ee4\u200b\u6216\u200bPython\u200b\u547d\u4ee4\u200b.  \u200b\u76f8\u53cd\u200b, \u200b\u5b83\u4eec\u200b\u6784\u6210\u200bHTTP API\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b,  \u200b\u53ef\u4ee5\u200b\u4ece\u200b\u5728\u200b\u4efb\u4f55\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u4e2d\u200b(\u200b\u6216\u8005\u200b\u6ca1\u6709\u200b!\u200b\u5982\u679c\u200b\u9700\u8981\u200b, \u200b\u53ef\u4ee5\u200b\u4ec5\u200b\u4f7f\u7528\u200bcURL) .</p> <p>\u200b\u56e0\u6b64\u200b, \u200b\u4f8b\u5982\u200b, <code>Find Element</code>\u200b\u547d\u4ee4\u200b\u5bf9\u5e94\u200b\u4e8e\u200b\u53d1\u9001\u5230\u200bHTTP\u200b\u7684\u200bHTTP <code>POST</code> \u200b\u8bf7\u6c42\u200b\u7aef\u70b9\u200b <code>/session/:sessionid/element</code> (\u200b\u5728\u200b\u672c\u4f8b\u200b\u4e2d\u200b, <code>:sessionid</code>\u200b\u662f\u200b\u670d\u52a1\u5668\u200b\u5728\u200b\u5148\u524d\u200b\u8c03\u7528\u200b<code>\u200b\u521b\u5efa\u200b\u4f1a\u8bdd\u200b</code>\u200b\u65f6\u200b\u751f\u6210\u200b\u7684\u200b\u552f\u4e00\u200b\u4f1a\u8bdd\u200bID) .</p> <p>\u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u4e3b\u8981\u200b\u5bf9\u200b\u4ece\u4e8b\u200bWebDriver\u200b\u89c4\u8303\u200b\u5f00\u53d1\u200b\u7684\u200b\u4eba\u200b\u6709\u7528\u200b. \u200b\u5bf9\u4e8e\u200b\u8bd5\u56fe\u200b\u7f16\u5199\u200bAppium\u200b\u6216\u200bSelenium\u200b\u6d4b\u8bd5\u200b\u7684\u200b\u4eba\u200b\u6765\u8bf4\u200b,  \u200b\u5b83\u200b\u4e0d\u662f\u200b\u7279\u522b\u200b\u6709\u7528\u200b. \u200b\u5f53\u200b\u4f60\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200bAppium\u200b\u6d4b\u8bd5\u200b\u65f6\u200b,  \u200b\u4f60\u200b\u60f3\u200b\u4f7f\u7528\u200b\u4f60\u200b\u719f\u6089\u200b\u7684\u200b\u7f16\u7a0b\u8bed\u8a00\u200b.  \u200b\u5e78\u8fd0\u200b\u7684\u200b\u662f\u200b\u5b58\u5728\u200b\u4e00\u7ec4\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b<sup>1</sup>,  \u200b\u7528\u4e8e\u200b\u5904\u7406\u200b\u8d1f\u8d23\u200b\u5411\u200bAppium\u200b\u670d\u52a1\u5668\u53d1\u9001\u200bHTTP\u200b\u8bf7\u6c42\u200b. \u200b\u76f8\u53cd\u200b, \u200b\u5b83\u4eec\u200b\u4e3a\u200b\u7279\u5b9a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u516c\u5f00\u200b\u4e86\u200b\u4e00\u7ec4\u200b \"\u200b\u539f\u751f\u200b\" \u200b\u547d\u4ee4\u200b,  \u200b\u56e0\u6b64\u200b, \u200b\u5bf9\u4e8e\u200b\u6d4b\u8bd5\u200b\u4f5c\u8005\u200b\u6765\u8bf4\u200b, \u200b\u611f\u89c9\u200b\u5c31\u200b\u50cf\u662f\u200b\u5728\u200b\u7f16\u5199\u200bPython\u3001JavaScript\u200b\u6216\u200bJava.</p> <p>\u200b\u4e3e\u4e2a\u200b\u4f8b\u5b50\u200b, \u200b\u4e0b\u9762\u200b\u662f\u200b\u5728\u200b\u4e94\u79cd\u200b\u4e0d\u540c\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u4e2d\u200b \u200b\u4f7f\u7528\u200b\u7684\u200b\u540c\u200b\u4e00\u7ec4\u200b\u7b80\u5355\u200b\u7684\u200bAppium\u200b\u547d\u4ee4\u200b,  \u200b\u4e3a\u200b\u6bcf\u79cd\u200b\u8bed\u8a00\u200b\u4f7f\u7528\u200b\u63a8\u8350\u200b\u7684\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u7ed1\u5b9a\u200b (\u200b\u6ce8\u610f\u200b, \u200b\u8fd9\u200b\u4e0d\u662f\u200b\u5305\u62ec\u200b\u6240\u200b\u9700\u200b\u5f15\u7528\u200b\u7684\u200b\u53ef\u200b\u5de5\u4f5c\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\uff1b \u200b\u8bf7\u200b\u67e5\u770b\u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\u7684\u200b\u8bf4\u660e\u200b\u8bbe\u7f6e\u200b\u548c\u200b\u547d\u4ee4\u200b\u53c2\u8003\u200b):</p> JavaScript (Webdriver.io)JavaPythonRubyC# <pre><code>const element = await driver.$('//*[@text=\"Foo\"]');\nawait element.click();\nconsole.log(await element.getText())\nconsole.log(await driver.getPageSource())\n</code></pre> <pre><code>WebElement element = driver.findElement(By.Xpath(\"//*[@text='Foo']\"))\nelement.click()\nSystem.out.println(element.getText())\nSystem.out.println(driver.getPageSource())\n</code></pre> <pre><code>element = driver.find_element(by=By.XPATH, value='//*[@text=\"Foo\"]')\nelement.click()\nprint(element.text)\nprint(driver.page_source)\n</code></pre> <pre><code>element = driver.find_element :xpath, '//*[@text=\"Foo\"]'\nelement.click\nputs element.text\nputs driver.page_source\n</code></pre> <pre><code>AppiumElement element = driver.FindElement(MobileBy.AccessibilityId(\"Views\"));   \nelement.click();\nSystem.Console.WriteLine(element.Text);\nSystem.Console.WriteLine(driver.PageSource);\n</code></pre> <p>\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u811a\u672c\u200b, \u200b\u5c3d\u7ba1\u200b\u4f7f\u7528\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bed\u8a00\u200b, \u200b\u4f46\u200b\u5728\u200b\u5e55\u540e\u200b\u505a\u200b\u7740\u200b\u76f8\u540c\u200b\u7684\u200b\u4e8b\u60c5\u200b:</p> <ol> <li>\u200b\u4f7f\u7528\u200b<code>xpath</code>\u200b\u7684\u200b <code>using</code>\u200b\u53c2\u6570\u200b\u548c\u200b\u8868\u793a\u200b\u7528\u4e8e\u200b\u67e5\u627e\u200b\u5143\u7d20\u200b\u7684\u200bXPath\u200b\u67e5\u8be2\u200b\u7684\u200b<code>value</code>\u200b\u53c2\u6570\u200b\u8c03\u7528\u200b<code>\u200b\u67e5\u627e\u200b\u5143\u7d20\u200b</code>.    (\u200b\u5982\u679c\u200b\u60a8\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u672f\u8bed\u200b\u611f\u5230\u200b\u56f0\u60d1\u200b, \u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u53d1\u73b0\u200b\u5bf9\u200bAppium\u200b\u6216\u200bSelenium\u200b\u7684\u200b\u4ecb\u7ecd\u200b\u5f88\u200b\u6709\u7528\u200b) </li> <li>\u200b\u4f7f\u7528\u200b\u4e0a\u200b\u4e00\u6b21\u200b\u8c03\u7528\u200b\u4e2d\u200b\u627e\u5230\u200b\u7684\u200b\u5143\u7d20\u200b\u7684\u200bID\u200b\u8c03\u7528\u200b<code>\u200b\u70b9\u51fb\u200b\u5143\u7d20\u200b</code>. </li> <li>\u200b\u4f7f\u7528\u200b\u76f8\u540c\u200b\u5143\u7d20\u200b\u7684\u200bID\u200b\u8c03\u7528\u200b<code>\u200b\u83b7\u53d6\u200b\u5143\u7d20\u200b\u6587\u672c\u200b</code>, \u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u6253\u5370\u200b\u5230\u200b\u63a7\u5236\u53f0\u200b. </li> <li>\u200b\u8c03\u7528\u200b<code>\u200b\u83b7\u53d6\u200b\u6e90\u7801\u200b</code>\u200b\u4ee5\u200b\u68c0\u7d22\u200b\u9875\u9762\u200b/\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u6e90\u7801\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u6253\u5370\u200b\u5230\u200b\u63a7\u5236\u53f0\u200b.</li> </ol> <p>\u200b\u5728\u200b\u9009\u62e9\u200b\u6216\u200b\u4f7f\u7528\u200b\u5ba2\u6237\u7aef\u200b\u4e4b\u524d\u200b, \u200b\u8981\u200b\u8bb0\u4f4f\u200b\u7684\u200b\u53e6\u200b\u4e00\u4ef6\u200b\u4e8b\u662f\u200b, \u200b\u6bcf\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u90fd\u200b\u662f\u200b\u72ec\u7acb\u200b\u7ef4\u62a4\u200b\u7684\u200b.  \u200b\u4ec5\u4ec5\u200b\u56e0\u4e3a\u200b\u4e00\u4e2a\u200b\u529f\u80fd\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u4e2d\u200b\u53ef\u7528\u200b, \u200b\u5e76\u200b\u4e0d\u200b\u610f\u5473\u7740\u200b\u5b83\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u4e0a\u200b\u53ef\u7528\u200b (\u200b\u5c3d\u7ba1\u200b\u6240\u6709\u200b\u5ba2\u6237\u7aef\u200b\u81f3\u5c11\u200b\u652f\u6301\u200b\u6807\u51c6\u200b\u7684\u200bW3C\u200b\u534f\u8bae\u200b\u4ee5\u53ca\u200b\u4efb\u4f55\u200b\u901a\u7528\u200b\u7684\u200bappium\u200b\u6269\u5c55\u200b) .  \u200b\u4ec5\u4ec5\u200b\u56e0\u4e3a\u200b\u4e00\u4e2a\u200b\u5ba2\u6237\u7aef\u200b\u6709\u7ec4\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u8f85\u52a9\u200b\u51fd\u6570\u200b,  \u200b\u8fd9\u200b\u5e76\u200b\u4e0d\u200b\u610f\u5473\u7740\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u4f1a\u200b. \u200b\u4e00\u4e9b\u200b\u5ba2\u6237\u200b\u7ecf\u5e38\u200b\u4fdd\u6301\u200b\u53ca\u65f6\u200b\u6700\u65b0\u200b, \u200b\u800c\u200b\u5176\u4ed6\u200b\u5ba2\u6237\u200b\u5219\u200b\u4e0d\u662f\u200b! \u200b\u6240\u4ee5\u200b\u5f53\u200b\u8003\u8651\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u5e93\u65f6\u200b,  \u200b\u9996\u5148\u200b\u8981\u200b\u8003\u8651\u200b\u7684\u200b\u662f\u200b\u60a8\u200b\u60f3\u8981\u200b\u4f7f\u7528\u200b\u7684\u200b\u8bed\u8a00\u200b,  \u200b\u7b2c\u4e8c\u4e2a\u200b\u8003\u8651\u200b\u56e0\u7d20\u200b\u662f\u200b\u7c7b\u5e93\u200b\u529f\u80fd\u9f50\u5168\u200b, \u200b\u7ef4\u62a4\u200b\u826f\u597d\u200b!</p> <p>\u200b\u4e3a\u4e86\u200b\u5b66\u4e60\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b,  \u200b\u8bf7\u200b\u8bbf\u95ee\u200b\u8be5\u200b\u5ba2\u6237\u200b\u7684\u200b\u4e3b\u9875\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b.  \u200b\u5728\u200b\u8bb8\u591a\u200b\u60c5\u51b5\u200b\u4e0b\u200b,  \u200b\u7ed9\u5b9a\u200b\u8bed\u8a00\u200b\u7684\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u6784\u5efa\u200b\u5728\u200b\u8be5\u200b\u8bed\u8a00\u200b\u7684\u200bSelenium\u200b\u5ba2\u6237\u7aef\u200b\u4e4b\u4e0a\u200b,  \u200b\u56e0\u6b64\u200b\u67d0\u4e9b\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u53ef\u80fd\u200b\u4ec5\u200b\u8bb0\u5f55\u200bAppium\u200b\u5ba2\u6237\u673a\u200b\u5728\u200bSelenium\u200b\u5ba2\u6237\u7aef\u200b\u4e4b\u4e0a\u200b\u6dfb\u52a0\u200b\u7684\u200b\u529f\u80fd\u200b.  \u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u90fd\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5168\u9762\u200b\u53c2\u8003\u200b,  \u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u8bbf\u95ee\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u6587\u6863\u200b\u4ee5\u53ca\u200bSelenium\u200b\u5ba2\u6237\u7aef\u200b\u6587\u6863\u200b.</p> <p>\u200b\u8fd9\u200b\u5c31\u662f\u200b\u60a8\u200b\u9700\u8981\u200b\u4e86\u89e3\u200b\u7684\u200b\u5173\u4e8e\u200bAppium\u200b\u5ba2\u6237\u7aef\u200b\u7684\u200b\u6240\u6709\u200b\u4fe1\u606f\u200b! \u200b\u8f6c\u200b\u5230\u200b\u751f\u6001\u7cfb\u7edf\u200b \u200b\u9875\u9762\u200b\u67e5\u770b\u200b\u5f53\u524d\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b\u5217\u8868\u200b.</p> <ol> <li> <p>\u200b\u8fd9\u4e9b\u200b\u5e93\u200b\u53c8\u200b\u79f0\u4e3a\u200b \"\u200b\u5ba2\u6237\u7aef\u200b\"\u3001\"\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\" \u200b\u6216\u200b \"\u200b\u5ba2\u6237\u7aef\u200b\u7ed1\u5b9a\u200b\". \u200b\u4ed6\u4eec\u200b\u662f\u200b\u540c\u200b\u4e00\u79cd\u200b\u6982\u5ff5\u200b!\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/drivers/","title":"Appium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7b80\u4ecb","text":"<p>\u200b\u6b63\u5982\u200b\u6982\u8ff0\u200b\u6240\u200b\u8868\u660e\u200b\u7684\u200b\u90a3\u6837\u200b\uff0c\u201c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u201d\u200b\u57fa\u672c\u4e0a\u200b\u662f\u200bAppium\u200b\u5bf9\u200b\u201c\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u652f\u6301\u200b\u591a\u4e2a\u200b\u65e0\u5173\u200b\u5e73\u53f0\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u201d\u200b\u8fd9\u4e2a\u200b\u95ee\u9898\u200b\u7684\u200b\u56de\u7b54\u200b\uff0c\u200b\u5728\u200b\u672c\u200b\u6587\u6863\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u66f4\u200b\u8be6\u7ec6\u200b\u5730\u200b\u4e86\u89e3\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u5de5\u4f5c\u200b\u65b9\u5f0f\u200b\u3002\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b\u5177\u4f53\u200b\u7ec6\u8282\u200b\u5bf9\u200b\u60a8\u200b\u6765\u8bf4\u200b\u53ef\u80fd\u200b\u5e76\u200b\u4e0d\u200b\u592a\u200b\u91cd\u8981\u200b\uff0c\u200b\u9664\u975e\u200b\u60a8\u200b\u8ba1\u5212\u200b\u7f16\u5199\u200b\u81ea\u5df1\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6216\u200b\u4e3a\u200b\u73b0\u6709\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u505a\u51fa\u200b\u8d21\u732e\u200b\uff08\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u60a8\u200b\u8fd9\u6837\u200b\u505a\u200b\uff01\uff09\u3002</p> <p>\u200b\u6df1\u5165\u200b\u4e86\u89e3\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\u7684\u200b\u4e3b\u8981\u200b\u597d\u5904\u200b\u662f\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u4e2d\u200b\u4e0d\u53ef\u907f\u514d\u200b\u5730\u200b\u9047\u5230\u200b\u95ee\u9898\u200b\u65f6\u200b\uff0c\u200b\u4e86\u89e3\u200b\u5178\u578b\u200b\u7684\u200b\u590d\u6742\u6027\u200b\u6216\u200b\u5178\u578b\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u67b6\u6784\u200b\u5c06\u200b\u4e3a\u200b\u60a8\u200b\u7684\u200b\u8c03\u8bd5\u200b\u8fc7\u7a0b\u200b\u63d0\u4f9b\u200b\u4fe1\u606f\u200b\u3002</p>"},{"location":"intro/drivers/#_1","title":"\u63a5\u53e3\u200b\u5b9e\u73b0","text":"<p>\u200b\u5728\u200b\u6700\u200b\u57fa\u672c\u200b\u7684\u200b\u5c42\u9762\u200b\u4e0a\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ea\u662f\u200bNode.js\u200b\u7c7b\u200b\uff0c\u200b\u5b83\u200b\u6269\u5c55\u200b\u4e86\u200bAppium\u200b\u4e2d\u200b\u5305\u542b\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7279\u6b8a\u200b\u7c7b\u200b\uff0c\u200b\u79f0\u4e3a\u200b<code>BaseDriver</code>\u3002\u200b\u53ea\u200b\u9700\u200b\u4e00\u4e9b\u200b\u975e\u5e38\u7b80\u5355\u200b\u7684\u200b\u4ee3\u7801\u200b\uff0c\u200b\u60a8\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u62e5\u6709\u200b\u4e00\u4e2a\u200b\u63a5\u8fd1\u200b\u53ef\u200b\u5de5\u4f5c\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff1a</p> <pre><code>import BaseDriver from '@appium/base-driver'\n\nclass MyNewDriver extends BaseDriver {\n}\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u7a7a\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4ec0\u4e48\u200b\u4e5f\u200b\u4e0d\u200b\u505a\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5b83\u200b\u5305\u88c5\u200b\u5728\u200b\u4e00\u4e2a\u200bNode.js\u200b\u6a21\u5757\u200b\u4e2d\u200b\uff0c\u200b\u5728\u200b\u6a21\u5757\u200b\u7684\u200b\u6e05\u5355\u200b\uff08<code>package.json</code>\uff09\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u4e00\u4e9b\u200b\u4e0e\u200bAppium\u200b\u76f8\u5173\u200b\u7684\u200b\u5b57\u200b\u6bb5\u200b\uff0c\u200b\u7136\u540e\u200b\u4f7f\u7528\u200b<code>appium driver install</code>\u200b\u6765\u200b\u5b89\u88c5\u200b\u5b83\u200b\u3002</p> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u4ece\u200b\u6280\u672f\u200b\u89d2\u5ea6\u200b\u6765\u770b\u200b\uff0cAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ea\u662f\u200b\u7ee7\u627f\u200b\u81ea\u200b\u5176\u4ed6\u200bAppium\u200b\u4ee3\u7801\u200b\u7684\u200b\u4e00\u6bb5\u200b\u4ee3\u7801\u200b\u3002\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u73b0\u5728\u200b\uff0c\u200b\u4ece\u200b<code>BaseDriver</code>\u200b\u7ee7\u627f\u200b\u5b9e\u9645\u4e0a\u200b\u7ed9\u200b\u4e86\u200b\u6211\u4eec\u200b\u5f88\u591a\u200b\u4e1c\u897f\u200b\uff0c\u200b\u56e0\u4e3a\u200b<code>BaseDriver</code>\u200b\u672c\u8d28\u200b\u4e0a\u200b\u662f\u200b\u6574\u4e2a\u200bWebDriver\u200b\u534f\u8bae\u200b\u7684\u200b\u5c01\u88c5\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u9700\u8981\u200b\u505a\u200b\u7684\u200b\u6709\u7528\u200b\u7684\u200b\u4e8b\u60c5\u200b\u5c31\u662f\u200b\u5b9e\u73b0\u200bNode.js\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5176\u200b\u540d\u79f0\u200b\u4e0e\u200bWebDriver\u200b\u534f\u8bae\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u540d\u79f0\u200b\u76f8\u5bf9\u200b\u5e94\u200b\u3002</p> <p>\u200b\u5047\u8bbe\u200b\u6211\u200b\u60f3\u200b\u7528\u200b\u8fd9\u4e2a\u200b\u7a7a\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u505a\u200b\u4e00\u4e9b\u200b\u4e8b\u60c5\u200b\uff1b\u200b\u9996\u5148\u200b\u6211\u200b\u5fc5\u987b\u200b\u51b3\u5b9a\u200b\u6211\u200b\u60f3\u200b\u5b9e\u73b0\u200b\u54ea\u4e2a\u200bWebDriver\u200b\u547d\u4ee4\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u793a\u4f8b\u200b\uff0c\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5b9e\u73b0\u200bNavigate To\u200b\u8fd9\u4e2a\u200bWebDriver\u200b\u547d\u4ee4\u200b\u3002\u200b\u6682\u4e14\u200b\u4e0d\u8c08\u200b\u6267\u884c\u200b\u6b64\u200b\u547d\u4ee4\u200b\u65f6\u200b\u6211\u200b\u60f3\u200b\u8ba9\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u505a\u200b\u4ec0\u4e48\u200b\u3002\u200b\u4e3a\u4e86\u200b\u544a\u8bc9\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u53ef\u4ee5\u200b\u5904\u7406\u200b\u8be5\u200b\u547d\u4ee4\u200b\uff0c\u200b\u6211\u4eec\u200b\u6240\u8981\u200b\u505a\u200b\u7684\u200b\u5c31\u662f\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7c7b\u4e2d\u200b\u5b9a\u4e49\u200b\u4e00\u4e2a\u200b\u8fd9\u6837\u200b\u7684\u200b\u65b9\u6cd5\u200b\uff1a<sup>1</sup></p> <pre><code>async setUrl(url) {\n    // \u200b\u5728\u200b\u8fd9\u91cc\u200b\u505a\u200b\u6211\u4eec\u200b\u60f3\u200b\u505a\u200b\u7684\u200b\u4e8b\u200b\n}\n</code></pre> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5b9e\u9645\u200b\u5b9e\u73b0\u200b\u547d\u4ee4\u200b\u5b8c\u5168\u200b\u53d6\u51b3\u4e8e\u200b\u6211\u4eec\u200b\uff0c\u200b\u53d6\u51b3\u4e8e\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u652f\u6301\u200b\u7684\u200b\u5e73\u53f0\u200b\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u8be5\u200b\u547d\u4ee4\u200b\u9488\u5bf9\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\u7684\u200b\u4e00\u4e9b\u200b\u4e0d\u540c\u200b\u793a\u4f8b\u200b\u5b9e\u73b0\u200b\uff1a</p> <ul> <li>\u200b\u6d4f\u89c8\u5668\u200b: \u200b\u6267\u884c\u200b\u4e00\u4e9b\u200bJavaScript\u200b\u53bb\u200b\u8bbe\u7f6e\u200b<code>window.location.href</code></li> <li>iOS\u200b\u5e94\u7528\u7a0b\u5e8f\u200b: \u200b\u4f7f\u7528\u200b\u6df1\u5ea6\u200b\u94fe\u63a5\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b</li> <li>Android\u200b\u5e94\u7528\u7a0b\u5e8f\u200b: \u200b\u4f7f\u7528\u200b\u6df1\u5ea6\u200b\u94fe\u63a5\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b</li> <li>React\u200b\u5e94\u7528\u7a0b\u5e8f\u200b: \u200b\u52a0\u8f7d\u200b\u7279\u5b9a\u200b\u8def\u7ebf\u200b</li> <li>Unity: \u200b\u8f6c\u200b\u5230\u200b\u6307\u5b9a\u200b\u7684\u200b\u573a\u666f\u200b</li> </ul> <p>\u200b\u56e0\u6b64\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u5728\u200b\u4e0d\u540c\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u5b9e\u73b0\u200b\u76f8\u540c\u200bWebDriver\u200b\u547d\u4ee4\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5b58\u5728\u200b\u5f88\u5927\u200b\u5dee\u5f02\u200b\u3002<sup>2</sup>\u200b\u4e0d\u8fc7\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u8868\u8fbe\u200b\u4ed6\u4eec\u200b\u80fd\u591f\u200b\u5904\u7406\u200b\u534f\u8bae\u200b\u547d\u4ee4\u200b\u7684\u200b\u65b9\u5f0f\u200b\u662f\u200b\u76f8\u540c\u200b\u7684\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8981\u200b\u6df1\u5165\u200b\u8fd9\u4e48\u200b\u591a\u200b\u7ec6\u8282\u200b\uff08\u200b\u987a\u4fbf\u200b\u8bf4\u200b\u4e00\u4e0b\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u8bb0\u4f4f\u200b\u8fd9\u4e9b\u200b\uff09\uff0c\u200b\u91cd\u70b9\u200b\u662f\u200b\u8981\u200b\u5f3a\u8c03\u200b\u4e00\u4e2a\u200b\u89c2\u70b9\u200b\uff0c\u200b\u5373\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u672c\u8d28\u200b\u4e0a\u200b\u5e76\u200b\u4e0d\u662f\u200b\u4ec0\u4e48\u200b\u7279\u522b\u200b\u7684\u200b\u4e1c\u897f\u200b\uff0c\u200b\u5b83\u200b\u4e0d\u8fc7\u200b\u662f\u200b\u4e00\u6bb5\u200b\u80fd\u591f\u200b\u5904\u7406\u200bWebDriver\u200b\u534f\u8bae\u200b\u547d\u4ee4\u200b\u7684\u200bJavaScript\u200b\u4ee3\u7801\u200b\u3002\u200b\u4ece\u200b\u90a3\u91cc\u200b\u5f00\u59cb\u200b\uff0c\u200b\u4f60\u200b\u80fd\u200b\u8d70\u200b\u591a\u200b\u8fdc\u200b\u5c31\u200b\u770b\u200b\u4f60\u200b\u4e86\u200b\uff0c\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7684\u200b\u4f5c\u8005\u200b\uff01</p>"},{"location":"intro/drivers/#_2","title":"\u81ea\u52a8\u5316\u200b\u6620\u5c04","text":"<p>But typically what driver authors want to do is to provide automation behaviours for a given platform(s) that are semantically very similar to the the WebDriver spec implementations for browsers. When you want to find an element, you should get a reference to a UI element. When you want to click or tap that element, the resulting behaviour should be the same as if a person were to click or tap on the element. And so on.</p> <p>So the real challenge for driver authors is not how to work with the WebDriver protocol (because <code>BaseDriver</code> encapsulates all that for you), but how to make the actual automation happen on the target platform. Every driver relies on its own set of underlying technologies here. As mentioned in the Overview, the iOS driver uses an Apple technology called XCUITest. These underlying automation technologies usually have proprietary or idiosyncratic APIs of their own. Writing a driver becomes the task of mapping the WebDriver protocol to this underlying API (or sometimes a set of different underlying APIs--for example, the UiAutomator2 driver relies not only on the UiAutomator2 technology from Google, but also functions only available through ADB, as well as functions only available via the Android SDK inside a helper app). Tying it all together into a single, usable, WebDriver interface is the incredibly useful (but incredibly challenging) art of driver development!</p>"},{"location":"intro/drivers/#_3","title":"\u591a\u5c42\u200b\u67b6\u6784","text":"<p>In practice, this often results in a pretty complex architecture. Let's take iOS for example again. The XCUITest framework (the one used by the Appium driver) expects code that calls it to be written in Objective-C or Swift. Furthermore, XCUITest code can only be run in a special mode triggered by Xcode (and directly or indirectly, the Xcode command line tools). In other words, there's no straightforward way to go from a Node.js function implementation (like <code>setUrl()</code> above) to XCUITest API calls.</p> <p>What the XCUITest driver authors have done is instead to split the driver into two parts: one part written in Node.js (the part which is incorporated into Appium and which initially handles the WebDriver commands), and the other part written in Objective-C (the part which actually gets run on an iOS device and makes XCUITest API calls). This makes interfacing with XCUITest possible, but introduces the new problem of coordination between the two parts.</p> <p>The driver authors could have chosen any of a number of very different strategies to model the communication between the Node.js side and the Objective-C side, but at the end of the day decided to use ... the WebDriver protocol! That's right, the Objective-C side of the XCUITest driver is itself a WebDriver implementation, called WebDriverAgent.<sup>3</sup></p> <ul> <li>The Appium XCUITest driver builds and manages WebDriverAgent for you, which can be a pain and     involves the use of Xcode.</li> <li>The XCUITest driver does lots more than what can be done by WebDriverAgent, for example working     with simulators or devices, installing apps, and the like.</li> </ul> <p>The moral of the story is that driver architectures can become quite complicated and multilayered, due to the nature of the problem we're trying to solve. It also means it can be difficult sometimes to tell where in this chain of technologies something has gone wrong, if you run into a problem with a particular test. With the XCUITest world again, we have something like the following set of technologies all in play at the same time:</p> <ul> <li>Your test code (in its programming language) - owned by you</li> <li>The Appium client library - owned by Appium</li> <li>The Selenium client library - owned by Selenium</li> <li>The network (local or Internet)</li> <li>The Appium server - owned by Appium</li> <li>The Appium XCUITest driver - owned by Appium</li> <li>WebDriverAgent - owned by Appium</li> <li>Xcode - owned by Apple</li> <li>XCUITest - owned by Apple</li> <li>iOS itself - owned by Apple</li> <li>macOS (where Xcode and iOS simulators run) - owned by Apple</li> </ul> <p>It's a pretty deep stack!</p>"},{"location":"intro/drivers/#_4","title":"\u4ee3\u7406\u200b\u6a21\u5f0f","text":"<p>There's one other important architectural aspect of drivers to understand. It can be exemplified again by the XCUITest driver. Recall that we just discussed how the two \"halves\" of the XCUITest driver both speak the WebDriver protocol---the Node.js half clicks right into Appium's WebDriver server, and the Objective-c half (WebDriverAgent) is its own WebDriver implementation.</p> <p>This opens up the possibility of Appium taking a shortcut in certain cases. Let's imagine that the XCUITest driver needs to implement the <code>Click Element</code> command. The internal code of this implementation would look something like taking the appropriate parameters and constructing an HTTP request to the WebDriverAgent server. In this case, we're basically just reconstructing the client's original call to the Appium server!<sup>4</sup> So there's really no need to even write a function implementing the <code>Click Element</code> command. Instead, the XCUITest driver can just let Appium know that this command should be proxied directly to some other WebDriver server.</p> <p>If you're not familiar with the concept of \"proxying,\" in this case it just means that the XCUITest driver will not be involved at all in handling the command. Instead it will merely be repackaged and forwarded to WebDriverAgent at the protocol level, and WebDriverAgent's response will likewise be passed back directly to the client, without any XCUITest driver code seeing it or modifying it.</p> <p>This architectural pattern provides a nice bonus for driver authors who choose to deal with the WebDriver protocol everywhere, rather than constructing bespoke protocols. It also means that Appium can create wrapper drivers for any other existing WebDriver implementation very easily. If you look at the Appium Safari driver code, for example, you'll see that it implements basically no standard commands, because all of these are proxied directly to an underlying SafariDriver process.</p> <p>It's important to understand that this proxying business is sometimes happening under the hood, because if you're ever diving into some open source driver code trying to figure out where a command is implemented, you might be surprised to find no implementation at all in the Node.js driver code itself! In that case, you'll need to figure out where commands are being proxied to so you can look there for the appropriate implementation.</p> <p>OK, that's enough for this very detailed introduction to drivers!</p> <ol> <li> <p>\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6ce8\u610f\u200b\u5230\u200b<code>setUrl</code>\u200b\u770b\u8d77\u6765\u200b\u4e00\u70b9\u200b\u4e5f\u200b\u4e0d\u200b\u50cf\u200b<code>Navigate To</code>\uff0c\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u600e\u4e48\u200b\u77e5\u9053\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200b\u5b83\u200b\u800c\u200b\u4e0d\u662f\u200b\u5176\u4ed6\u200b\u968f\u673a\u200b\u5b57\u7b26\u4e32\u200b\u5462\u200b\uff1fAppium\u200b\u4e2d\u200bWebDriver\u200b\u534f\u8bae\u200b\u5230\u200b\u65b9\u6cd5\u200b\u540d\u200b\u7684\u200b\u6620\u5c04\u200b\u662f\u200b\u5728\u200b<code>@appium/base-driver</code>\u200b\u5305\u4e2d\u200b\u540d\u4e3a\u200broutes.js\u200b\u7684\u200b\u7279\u6b8a\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u6b63\u5728\u200b\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u5f04\u6e05\u695a\u200b\u8981\u200b\u4f7f\u7528\u200b\u4ec0\u4e48\u200b\u65b9\u6cd5\u200b\u540d\u200b\u4ee5\u53ca\u200b\u9700\u8981\u200b\u4ec0\u4e48\u200b\u53c2\u6570\u200b\u3002\u200b\u6216\u8005\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u67e5\u770b\u200b\u4efb\u4f55\u200b\u4e3b\u8981\u200b\u7684\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u6e90\u4ee3\u7801\u200b\uff01\u00a0\u21a9</p> </li> <li> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u8bed\u4e49\u200b\u5c3d\u53ef\u80fd\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u5728\u200biOS\u200b\u4e16\u754c\u200b\u4e2d\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0c\u200b\u901a\u8fc7\u200b\u6df1\u5ea6\u200b\u94fe\u63a5\u200b\uff08\u200b\u4e00\u4e2a\u200b\u5e26\u6709\u200b\u7279\u5b9a\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u534f\u8bae\u200b\u7684\u200bURL\uff09\u200b\u542f\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\uff0c\u200b\u8fd9\u200b\u51e0\u4e4e\u200b\u662f\u200b\u6211\u4eec\u200b\u80fd\u591f\u200b\u5b9e\u73b0\u200b\u7684\u200b\u6700\u200b\u63a5\u8fd1\u200b\u4e8e\u200b\u5bfc\u822a\u200b\u5230\u200b\u7f51\u9875\u200bURL\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u00a0\u21a9</p> </li> <li> <p>You could in theory, therefore, point your WebDriver client straight to WebDriverAgent and   bypass Appium entirely. This is usually not convenient, however, for a few reasons:\u00a0\u21a9</p> </li> <li> <p>It's not exactly the same call, because the Appium server and the WebDriverAgent server   will generate different session IDs, but these differences will be handled transparently.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/history/","title":"Appium \u200b\u9879\u76ee\u200b\u5386\u53f2","text":"<p>TODO</p>"},{"location":"quickstart/","title":"\u5feb\u901f\u200b\u5165\u95e8\u200b\u4ecb\u7ecd","text":"<p>\u200b\u8ba9\u200b\u6211\u4eec\u200b\u5f00\u59cb\u200b\u4f7f\u7528\u200b Appium\uff01\u200b\u4e3a\u4e86\u200b\u6210\u529f\u200b\u4f7f\u7528\u200b\u672c\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\u4ecb\u7ecd\u200b, \u200b\u6211\u4eec\u200b\u5efa\u8bae\u60a8\u200b \u200b\u9996\u5148\u200b\u9605\u8bfb\u200b \u200b\u4ecb\u7ecd\u200b, \u200b\u4ee5\u4fbf\u200b\u60a8\u200b\u4e86\u89e3\u200b \u200b\u8fd0\u884c\u200b Appium \u200b\u548c\u200b\u7f16\u5199\u200b Appium \u200b\u811a\u672c\u200b\u6240\u200b\u6d89\u53ca\u200b\u7684\u200b\u6982\u5ff5\u200b\u3002</p> <p>\u200b\u672c\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\u8bfe\u7a0b\u200b\u7684\u200b\u57fa\u672c\u200b\u8ba1\u5212\u200b\u5982\u4e0b\u200b:</p> <ol> <li>\u200b\u5b89\u88c5\u200b Appium</li> <li>\u200b\u5b89\u88c5\u200b Appium \u200b\u9a71\u52a8\u200b\u53ca\u5176\u200b\u4f9d\u8d56\u200b\u9879\u200b (\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b UiAutomator2 driver \u200b\u5bf9\u4e8e\u200b\u8fd9\u4e9b\u200b\u4f8b\u5b50\u200b)</li> <li>\u200b\u7528\u200b\u4f60\u200b\u9009\u62e9\u200b\u7684\u200b\u8bed\u8a00\u200b\u5b89\u88c5\u200b Appium \u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\uff08\u200b\u672c\u200b\u6307\u5357\u200b\u5305\u542b\u200b\u4ee5\u4e0b\u200b\u9009\u9879\u200b JavaScript\u3001Python\u3001Java\u3001Ruby \u200b\u548c\u200b .NET \u200b\u7684\u200b\u9009\u9879\u200b\uff09\u3002</li> <li>\u200b\u4f7f\u7528\u200b\u793a\u4f8b\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7f16\u5199\u200b\u5e76\u200b\u8fd0\u884c\u200b\u7b80\u5355\u200b\u7684\u200b Appium \u200b\u81ea\u52a8\u5316\u200b\u811a\u672c\u200b</li> </ol>"},{"location":"quickstart/#_1","title":"\u8981\u6c42","text":"<p>\u200b\u5f00\u59cb\u200b\u4e4b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200b\u7cfb\u7edf\u200b\u6ee1\u8db3\u200b\u8fd0\u884c\u200b Appium \u200b\u670d\u52a1\u5668\u200b\u7684\u200b \u200b\u8981\u6c42\u200b.\u200b\u5176\u4ed6\u200b\u8981\u6c42\u200b \u200b\u5c06\u200b\u5728\u200b\u5b89\u88c5\u200b UiAutomator2 \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u65f6\u200b\u4e00\u5e76\u200b\u8ba8\u8bba\u200b\u3002 \u200b\u672c\u200b\u6307\u5357\u200b\u8fd8\u200b\u5047\u8bbe\u200b \u200b\u60a8\u200b\u5df2\u200b\u719f\u7ec3\u638c\u63e1\u200b\u60a8\u200b\u7684\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u5e73\u53f0\u200b\u4e0a\u200b\u7684\u200b\u57fa\u672c\u200b\u547d\u4ee4\u884c\u200b\u529f\u80fd\u200b\uff0c\u200b\u4f8b\u5982\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b\u547d\u4ee4\u884c\u200b\u547d\u4ee4\u200b, \u200b\u8bbe\u7f6e\u200b \u200b\u6c38\u4e45\u200b\u7684\u200b\u7cfb\u7edf\u200b\u53d8\u91cf\u200b, \u200b\u7b49\u7b49\u200b...</p> <p>\u200b\u73b0\u5728\u200b\u4f60\u200b\u5df2\u7ecf\u200b\u51c6\u5907\u200b\u597d\u200b\u5f00\u59cb\u200b\u4e86\u200b\uff01\u200b\u8bf7\u200b\u524d\u5f80\u200b \u200b\u5b89\u88c5\u200b Appium\u200b\u5427\u200b.</p>"},{"location":"quickstart/install/","title":"\u5b89\u88c5\u200b Appium","text":"<p>\u200b\u4fe1\u606f\u200b</p> <p>\u200b\u5b89\u88c5\u200b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u52a1\u5fc5\u200b\u68c0\u67e5\u200b\u7cfb\u7edf\u200b\u8981\u6c42\u200b.</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>npm</code> \u200b\u5728\u200b\u5168\u5c40\u200b\u8303\u56f4\u200b\u5185\u200b\u5b89\u88c5\u200b Appium\uff1a</p> <pre><code>npm i -g appium\n</code></pre> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u76ee\u524d\u200b\u4e0d\u200b\u652f\u6301\u200b\u5176\u4ed6\u200b\u8f6f\u4ef6\u5305\u200b\u7ba1\u7406\u5668\u200b\u3002</p> <p>\u200b\u5b89\u88c5\u200b\u5b8c\u6210\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u5e94\u8be5\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u547d\u4ee4\u884c\u200b\u8fd0\u884c\u200b Appium\uff1a</p> <pre><code>appium\n</code></pre> <p>\u200b\u4f60\u200b\u5e94\u8be5\u200b\u4f1a\u200b\u770b\u5230\u200b\u4e00\u4e9b\u200b\u8f93\u51fa\u200b\u7ed3\u679c\u200b\uff0c\u200b\u5f00\u5934\u200b\u4e00\u884c\u200b\u662f\u200b\u8fd9\u6837\u200b\u7684\u200b:</p> <pre><code>[Appium] \u200b\u6b22\u8fce\u200b\u6765\u5230\u200b Appium v2.4.1\n</code></pre> <p>\u200b\u4e3a\u4e86\u200b\u66f4\u65b0\u200bAppiums\u200b\u4f7f\u7528\u200b <code>npm</code>:</p> <pre><code>npm update -g appium\n</code></pre> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u5982\u679c\u200b\u4f60\u200b\u770b\u5230\u200b\u8fd9\u4e2a\u200b\uff0c\u200b\u8bf4\u660e\u200b Appium \u200b\u670d\u52a1\u5668\u200b\u5df2\u7ecf\u200b\u542f\u52a8\u200b\u5e76\u200b\u8fd0\u884c\u200b\u3002\u200b\u6309\u200b (Ctrl-C) \u200b\u7ee7\u7eed\u200b\u9000\u51fa\u200b\u5e76\u200b\u8df3\u8f6c\u200b\u5230\u200b\u5230\u200b  \u200b\u4e0b\u200b\u4e00\u6b65\u200b, \u200b\u5728\u200b\u8fd9\u91cc\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b89\u88c5\u200b\u4e00\u4e2a\u200b\u7528\u4e8e\u200b\u81ea\u52a8\u200b\u8fd0\u884c\u200b Android \u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b.</p>"},{"location":"quickstart/next-steps/","title":"\u4e0b\u200b\u4e00\u6b65","text":"<p>\u200b\u65e2\u7136\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u6210\u529f\u200b\u914d\u7f6e\u200b\u4e86\u200b\u60a8\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8fdb\u884c\u200bAndroid\u200b\u81ea\u52a8\u5316\u200b\u5e76\u200b\u8fd0\u884c\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u6d4b\u8bd5\u200b\uff0c \u200b\u60a8\u200b\u53ef\u80fd\u200b\u5e0c\u671b\u200b\u7ee7\u7eed\u200b\u63a2\u7d22\u200b\u8fd9\u4efd\u200b\u6587\u6863\u200b\u3002\u200b\u7279\u522b\u200b\u662f\u200b\u5bf9\u4e8e\u200b\u521d\u5b66\u8005\u200b\uff0c \u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e00\u4e9b\u200b\u5f88\u200b\u597d\u200b\u7684\u200b\u6307\u5357\u200b\u548c\u200b\u53c2\u8003\u8d44\u6599\u200b\uff1a</p> <ul> <li>\u200b\u5728\u200b \u200b\u751f\u6001\u7cfb\u7edf\u200b \u200b\u9875\u9762\u200b: \u200b\u6d4f\u89c8\u200b\u53ef\u7528\u200b\u7684\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b, \u200b\u5ba2\u6237\u7aef\u200b, \u200b\u63d2\u4ef6\u200b, \u200b\u548c\u200b\u5de5\u5177\u200b</li> <li>\u200b\u7ba1\u7406\u200bAppium\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u4e0e\u200b\u63d2\u4ef6\u200b</li> <li>\u200b\u80fd\u529b\u200b</li> <li>\u200b\u8bbe\u7f6e\u200b</li> </ul> <p>\u200b\u60a8\u200b\u8fd8\u200b\u4f1a\u200b\u53d1\u73b0\u200bAppium \u200b\u76d1\u6d4b\u200b\u8005\u200b \u200b\u7f16\u5199\u200b Appium \u200b\u6d4b\u8bd5\u200b\u4e0d\u53ef\u6216\u7f3a\u200b\u7684\u200b\u5de5\u5177\u200b\u3002 \u200b\u662f\u200b\u7f16\u5199\u200b Appium \u200b\u6d4b\u8bd5\u200b\u4e0d\u53ef\u6216\u7f3a\u200b\u7684\u200b\u5de5\u5177\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8fdb\u884c\u200b\u53ef\u89c6\u5316\u200b\u68c0\u67e5\u200b\uff0c\u200b\u5e76\u200b \u200b\u5e2e\u52a9\u200b\u60a8\u200b\u53d1\u73b0\u200b\u53ef\u200b\u7528\u4e8e\u200b\u6d4b\u8bd5\u200b\u811a\u672c\u200b\u7684\u200b\u5143\u7d20\u200b\u5b9a\u4f4d\u5668\u200b\u3002</p> <p>\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u5229\u7528\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4f17\u591a\u200b\u5728\u7ebf\u200b Appium \u200b\u8bfe\u7a0b\u200b\u4e4b\u4e00\u200b\u3002</p> <p>\u200b\u795d\u4f60\u597d\u8fd0\u200b\uff0c\u200b\u73a9\u5f97\u200b\u5f00\u5fc3\u200b\uff01</p>"},{"location":"quickstart/requirements/","title":"System Requirements","text":"<p>The basic requirements for the Appium server are:</p> <ul> <li>A macOS, Linux, or Windows operating system</li> <li>Node.js version in the SemVer range <code>^14.17.0 || ^16.13.0 || &gt;=18.0.0</code><ul> <li>LTS is recommended</li> </ul> </li> <li><code>npm</code> version <code>&gt;=8</code> (<code>npm</code> is usually bundled with Node.js, but can be upgraded independently)</li> </ul> <p>By itself, Appium is relatively lightweight and doesn't have significant disk space or RAM requirements. It can even be run in resource-constrained environments like Raspberry Pi, so long as Node.js is available.</p>"},{"location":"quickstart/requirements/#driver-requirements","title":"Driver Requirements","text":"<p>Drivers for automating specific platforms will likely have other requirements. Refer to the documentation of the Appium driver(s) for that platform for additional dependencies. It is almost universally the case that Appium drivers for a given platform will require the developer toolchain and SDKs for that platform to be installed.</p> <p>In order to assist with driver requirements, each (official) driver comes with the Appium Doctor tool, which allows to verify if all requirements have been set up. Learn more about how to use this tool in the Command-Line Usage documentation.</p>"},{"location":"quickstart/test-dotnet/","title":"Write a Test (.NET)","text":"<p>The Appium .NET Client is an official Appium client in C#. This driver is an extension of the Selenium C# client. It has all the functionalities of the regular driver, but add Appium-specific methods on top of this. The driver is available on the public NuGet Gallery as Appium.WebDriver.</p> <p>Now, we get inside the directory and create a new NUnit project. We will also add the references to the Appium.Net driver, and other dependencies.</p> <pre><code>cd dotnet-client\ndotnet new nunit --name appiumtest \n\ncd appiumtest\n\n# This will install the latest 5.x version\ndotnet add package Appium.WebDriver  --prerelease\ndotnet add package Newtonsoft.Json --version 13.0.3\n</code></pre> <p>Once this is done, your project should have a placeholder file <code>UnitTest1.cs</code>. We will replace the code to include the OpenQA namespaces, an initialization of the driver, and the actual test.</p> UnitTest1.cs<pre><code>using OpenQA.Selenium;\nusing OpenQA.Selenium.Appium;\nusing OpenQA.Selenium.Appium.Android;\nusing OpenQA.Selenium.Appium.Enums;\n\nnamespace appiumtest;\n\npublic class Tests\n{\n    private AndroidDriver _driver;\n\n    [OneTimeSetUp]\n    public void SetUp()\n    {\n        var serverUri = new Uri(Environment.GetEnvironmentVariable(\"APPIUM_HOST\") ?? \"http://127.0.0.1:4723/\");\n        var driverOptions = new AppiumOptions() {\n            AutomationName = AutomationName.AndroidUIAutomator2,\n            PlatformName = \"Android\",\n            DeviceName = \"Android Emulator\",\n        };\n\n        driverOptions.AddAdditionalAppiumOption(\"appPackage\", \"com.android.settings\");\n        driverOptions.AddAdditionalAppiumOption(\"appActivity\", \".Settings\");\n        // NoReset assumes the app com.google.android is preinstalled on the emulator\n        driverOptions.AddAdditionalAppiumOption(\"noReset\", true);\n\n        _driver = new AndroidDriver(serverUri, driverOptions, TimeSpan.FromSeconds(180));\n        _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(10);\n    }\n\n    [OneTimeTearDown]\n    public void TearDown()\n    {\n        _driver.Dispose();\n    }\n\n    [Test]\n    public void TestBattery()\n    {\n        _driver.StartActivity(\"com.android.settings\", \".Settings\");\n        _driver.FindElement(By.XPath(\"//*[@text='Battery']\")).Click();\n    }\n}\n</code></pre> <p>Note</p> <p>It's not within the scope of this guide to give a complete run-down on the dotnet client library or everything that's happening here, so we'll leave the code itself unexplained in detail for now. You may want to read up particularly on Appium Capabilities in addition to familiarizing yourself with the  dotnet client driver documentation for a fuller explanation of the various API commands you see and what their purpose is.</p> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what kind of thing you want to automate. Some of these parameters can be overriden using environment variables.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>dotnet test\n\n# Example output:\n# Starting test execution, please wait...\n# A total of 1 test files matched the specified pattern.\n\n# Passed!  - Failed:     0, Passed:     1, Skipped:     0, Total:     1, Duration: 323 ms - appiumtest.dll (net7.0)\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view in the emulator before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-java/","title":"\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u6d4b\u8bd5\u200b(Java)","text":"<p>Appium \u200b\u56e2\u961f\u200b\u4e3a\u200b Java \u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u7ef4\u62a4\u200b\u4e00\u4e2a\u200b\u5b98\u65b9\u200b\u5ba2\u6237\u7aef\u200b. \u200b\u5b83\u200b\u662f\u200b\u5efa\u7acb\u200b\u5728\u200b Selenium\u200b\u4e0a\u200b\u7684\u200b. \u200b\u60a8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u5728\u200b Kotlin \u200b\u9879\u76ee\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u8be5\u200b\u5ba2\u6237\u7aef\u200b.</p> <p>\u200b\u9075\u5faa\u200b\u5728\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b Appium Java \u200b\u5ba2\u6237\u7aef\u200b \u200b\u6559\u7a0b\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u5c06\u200b\u8be5\u5e93\u200b\u8fde\u63a5\u200b\u5230\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u6e90\u200b\u3002</p> <p>Appium Java \u200b\u5ba2\u6237\u7aef\u200b\u6709\u200b\u4e13\u95e8\u200b\u7684\u200b\u7c7b\u6765\u200b\u652f\u6301\u200b\u5927\u591a\u6570\u200b\u5b98\u65b9\u200b Appium \u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u5176\u4ed6\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b \u200b\u60a8\u200b\u53ea\u200b\u9700\u200b\u4f7f\u7528\u200b  AppiumDriver\u200b\u7c7b\u200b \u200b\u6216\u200b\u5728\u200b\u6b64\u57fa\u7840\u200b\u4e0a\u200b\u521b\u5efa\u200b\u60a8\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u884d\u751f\u200b\u5de5\u5177\u200b. \u200b\u8bf7\u200b\u67e5\u770b\u200b \u200b\u9a71\u52a8\u200b\u652f\u6301\u200b \u200b\u6587\u7ae0\u200b\uff0c\u200b\u4e86\u89e3\u200b\u6709\u5173\u200b\u5f53\u524d\u200b\u9a71\u52a8\u7a0b\u5e8f\u200b\u7c7b\u200b\u5b9e\u73b0\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b.</p> <p>\u200b\u8bf7\u53c2\u9605\u200b \u200b\u4f7f\u7528\u200b\u5b9e\u4f8b\u200b \u200b\u4e00\u6587\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b \u200b\u5982\u4f55\u200b\u4ece\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u8c03\u7528\u200b Java \u200b\u5ba2\u6237\u7aef\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u6210\u529f\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7ee7\u7eed\u200b\u9605\u8bfb\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b \u200b\u4e0b\u200b\u4e00\u200b\u6b65\u9aa4\u200b \u200b\u7ee7\u7eed\u200b\u63a2\u7d22\u200b</p>"},{"location":"quickstart/test-js/","title":"\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u6d4b\u8bd5\u200b (JS)","text":"<p>\u200b\u8981\u200b\u5728\u200b JavaScript\uff08Node.js\uff09\u200b\u4e2d\u200b\u7f16\u5199\u200b Appium \u200b\u6d4b\u8bd5\u200b\uff0c\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u4e0e\u200b Appium \u200b\u517c\u5bb9\u200b\u7684\u200b\u5ba2\u6237\u7aef\u200b \u200b\u5e93\u200b\u3002\u200b\u7ef4\u62a4\u200b\u6700\u597d\u200b\u7684\u200b\u5e93\u200b\u548c\u200b Appium \u200b\u56e2\u961f\u200b\u63a8\u8350\u200b\u4f7f\u7528\u200b\u7684\u200b\u5e93\u200b\u662f\u200b WebdriverIO, \u200b\u6240\u6709\u200b\u5c31\u8ba9\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u5b83\u200b\u5427\u200b\u3002\u200b\u65e2\u7136\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u4e86\u200b Appium\uff0c\u200b\u6211\u4eec\u200b \u200b\u5df2\u7ecf\u200b\u6ee1\u8db3\u200b\u4e86\u200b Node \u200b\u548c\u200b NPM \u200b\u7684\u200b\u8981\u6c42\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u53ea\u200b\u9700\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u9879\u76ee\u200b\u76ee\u5f55\u200b \u200b\u7136\u540e\u200b\u5728\u200b\u5176\u4e2d\u200b\u521d\u59cb\u5316\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b Node.js \u200b\u9879\u76ee\u200b:</p> <pre><code>npm init\n</code></pre> <p>\u200b\u60a8\u200b\u5728\u200b\u63d0\u793a\u200b\u4e2d\u200b\u8f93\u5165\u200b\u4ec0\u4e48\u200b\u5185\u5bb9\u200b\u5e76\u200b\u4e0d\u200b\u91cd\u8981\u200b\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u6700\u7ec8\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u6709\u6548\u200b\u7684\u200b <code>package.json</code>.</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u901a\u8fc7\u200b NPM \u200b\u5b89\u88c5\u200b <code>webdriverio</code> \u200b\u8f6f\u4ef6\u5305\u200b:</p> <pre><code>npm i --save-dev webdriverio\n</code></pre> <p>\u200b\u5b8c\u6210\u200b\u4e0a\u8ff0\u200b\u64cd\u4f5c\u200b\u540e\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b <code>package.json</code> \u200b\u6587\u4ef6\u200b\u5e94\u200b\u5305\u542b\u200b\u7c7b\u4f3c\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\u7684\u200b\u90e8\u5206\u200b:</p> package.json<pre><code>{\n  \"devDependencies\": {\n    \"webdriverio\": \"8.40.3\"\n  }\n}\n</code></pre> <p>\u200b\u73b0\u5728\u200b\u662f\u200b\u7f16\u5199\u200b\u6d4b\u8bd5\u200b\u672c\u8eab\u200b\u7684\u200b\u65f6\u5019\u200b\u4e86\u200b\u3002\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u540d\u4e3a\u200b <code>test.js</code> \u200b\u7684\u200b\u65b0\u200b\u6587\u4ef6\u200b\uff0c\u200b\u5185\u5bb9\u200b\u5982\u4e0b\u200b:</p> test.js<pre><code>const {remote} = require('webdriverio');\n\nconst capabilities = {\n  platformName: 'Android',\n  'appium:automationName': 'UiAutomator2',\n  'appium:deviceName': 'Android',\n  'appium:appPackage': 'com.android.settings',\n  'appium:appActivity': '.Settings',\n};\n\nconst wdOpts = {\n  hostname: process.env.APPIUM_HOST || 'localhost',\n  port: parseInt(process.env.APPIUM_PORT, 10) || 4723,\n  logLevel: 'info',\n  capabilities,\n};\n\nasync function runTest() {\n  const driver = await remote(wdOpts);\n  try {\n    const batteryItem = await driver.$('//*[@text=\"Battery\"]');\n    await batteryItem.click();\n  } finally {\n    await driver.pause(1000);\n    await driver.deleteSession();\n  }\n}\n\nrunTest().catch(console.error);\n</code></pre> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u672c\u200b\u6307\u5357\u200b\u7684\u200b\u8303\u56f4\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5b8c\u6574\u200b\u4ecb\u7ecd\u200b WebdriverIO \u200b\u5ba2\u6237\u7aef\u200b \u200b\u5e93\u200b\u6216\u200b\u8fd9\u91cc\u200b\u53d1\u751f\u200b\u7684\u200b\u4e00\u5207\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u6682\u4e14\u200b\u4e0d\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u672c\u8eab\u200b\u8fdb\u884c\u200b\u8be6\u7ec6\u200b\u89e3\u91ca\u200b\u3002 \u200b\u6240\u4ee5\u200b\u76ee\u524d\u200b\u6211\u4eec\u200b\u6682\u65f6\u200b\u4e0d\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u672c\u8eab\u200b\u8fdb\u884c\u200b\u8be6\u7ec6\u200b\u89e3\u91ca\u200b\u3002\u200b\u60a8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u7279\u522b\u200b\u9605\u8bfb\u200b Appium \u200b\u80fd\u529b\u200b, \u200b\u9664\u4e86\u200b\u719f\u6089\u200b\u4f18\u79c0\u200b\u7684\u200b WebdriverIO \u200b\u6587\u6863\u200b \u200b\u6765\u200b\u83b7\u5f97\u200b\u66f4\u200b\u5168\u9762\u200b\u7684\u200b\u89e3\u91ca\u200b, \u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u7684\u200b\u5404\u79cd\u200b API \u200b\u547d\u4ee4\u200b\u4ee5\u53ca\u200b\u7528\u9014\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\u53ef\u200b\u4ece\u200b GitHub Appium repository.</p> <p>\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u6b63\u5728\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u64cd\u4f5c\u200b\uff1a</p> <ol> <li>\u200b\u5b9a\u4e49\u200b\u4e00\u7ec4\u200b \"Capabilities\" \u200b\u80fd\u529b\u200b\u503c\u200b(\u200b\u53c2\u6570\u200b)\uff0c\u200b\u4ee5\u4fbf\u200b Appium \u200b\u77e5\u9053\u200b\u60a8\u200b\u60f3\u200b\u81ea\u52a8\u200b\u6267\u884c\u200b\u54ea\u200b\u79cd\u200b\u4efb\u52a1\u200b\u3002 \u200b\u8981\u200b\u81ea\u52a8\u200b\u6267\u884c\u200b\u7684\u200b\u4efb\u52a1\u200b\u3002</li> <li>\u200b\u5728\u200b\u5185\u7f6e\u200b\u7684\u200b Android \u200b\u8bbe\u7f6e\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e0a\u200b\u542f\u52a8\u200b Appium \u200b\u4f1a\u8bdd\u200b\u3002</li> <li>\u200b\u627e\u5230\u200b \"Battery\"\u200b\u5217\u8868\u200b\u9879\u200b\u5e76\u200b\u70b9\u51fb\u200b\u5b83\u200b\u3002</li> <li>\u200b\u505c\u987f\u200b\u7247\u523b\u200b\uff0c\u200b\u7eaf\u7cb9\u200b\u662f\u200b\u4e3a\u4e86\u200b\u89c2\u5bdf\u200b\u81ea\u52a8\u5316\u200b\u89c6\u89c9\u6548\u679c\u200b\u3002</li> <li>\u200b\u7ed3\u675f\u200b Appium \u200b\u4f1a\u8bdd\u200b\u3002</li> </ol> <p>\u200b\u5c31\u662f\u200b\u8fd9\u6837\u200b\uff01\u200b\u8ba9\u200b\u6211\u4eec\u200b\u8bd5\u4e00\u8bd5\u200b\u5427\u200b\u3002\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200b Appium \u200b\u670d\u52a1\u5668\u200b \u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5426\u5219\u200b\u4f1a\u200b\u51fa\u73b0\u200b\u4e00\u4e2a\u200b\u6709\u5173\u200b\u65e0\u6cd5\u200b\u8fde\u63a5\u200b\u5230\u200b Appium \u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u9519\u8bef\u200b\u3002 \u200b\u7136\u540e\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u811a\u672c\u200b\u4e86\u200b\uff1a</p> <pre><code>node test.js\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4e00\u5207\u987a\u5229\u200b\uff0c\u200b\u5728\u200b\u5e94\u7528\u200b\u518d\u6b21\u200b\u5173\u95ed\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4f60\u200b\u4f1a\u200b\u770b\u5230\u200b \"\u200b\u8bbe\u7f6e\u200b \"\u200b\u5e94\u7528\u200b\u6253\u5f00\u200b\u5e76\u200b\u5bfc\u822a\u200b\u5230\u200b \"Battery \"\u200b\u89c6\u56fe\u200b</p> <p>\u200b\u606d\u559c\u200b\u60a8\u200b\uff0c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5f00\u59cb\u200b\u4e86\u200b Appium \u200b\u4e4b\u65c5\u200b\uff01\u200b\u8bf7\u200b\u7ee7\u7eed\u200b\u9605\u8bfb\u200b\u4e00\u4e9b\u200b \u200b\u4e0b\u200b\u4e00\u200b\u6b65\u9aa4\u200b \u200b\u7ee7\u7eed\u200b\u63a2\u7d22\u200b.</p>"},{"location":"quickstart/test-py/","title":"\u7f16\u5199\u200b\u4e00\u4e2a\u200b\u6d4b\u8bd5\u200b (Python)","text":"<p>Appium Python Client \u200b\u662f\u200b\u5b98\u65b9\u200b\u7684\u200bAppium Python\u200b\u5ba2\u6237\u7aef\u200b\uff0c\u200b\u53ef\u200b\u901a\u8fc7\u200bpypi\u200b\u91cc\u200b\u5305\u200b\u540d\u4e3a\u200bAppium-Python-Client\u200b\u8fdb\u884c\u200b\u5b89\u88c5\u200b\u3002 \u200b\u5b83\u200b\u7ee7\u627f\u200b\u81ea\u200b Selenium Python Binding\uff0c \u200b\u56e0\u6b64\u200b\u5b89\u88c5\u200bAppium Python\u200b\u5ba2\u6237\u7aef\u200b\u65f6\u4f1a\u200b\u5305\u542b\u200bselenium\u200b\u7ed1\u5b9a\u200b\u3002</p> <pre><code>pip install Appium-Python-Client\n</code></pre> <p>\u200b\u8fd9\u4e2a\u200b\u793a\u4f8b\u200b\u4f7f\u7528\u200bPython\u200b\u5185\u7f6e\u200b\u7684\u200b<code>unittest</code>\u200b\u6a21\u5757\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4efb\u4f55\u200b\u4f60\u200b\u60f3\u8981\u200b\u7684\u200bPython\u200b\u6d4b\u8bd5\u200b\u6846\u67b6\u200b\u3002 Appium Python\u200b\u5ba2\u6237\u7aef\u200b\u81ea\u52a8\u200b\u6dfb\u52a0\u200b<code>appium:</code>\u200b\u4f9b\u5e94\u5546\u200b\u524d\u7f00\u200b\u3002 \u200b\u901a\u5e38\u200b\u4f60\u200b\u4e0d\u200b\u9700\u8981\u200b\u62c5\u5fc3\u200b\u524d\u7f00\u200b\u3002</p> test.py<pre><code>import unittest\nfrom appium import webdriver\nfrom appium.options.android import UiAutomator2Options\nfrom appium.webdriver.common.appiumby import AppiumBy\n\ncapabilities = dict(\n    platformName='Android',\n    automationName='uiautomator2',\n    deviceName='Android',\n    appPackage='com.android.settings',\n    appActivity='.Settings',\n    language='en',\n    locale='US'\n)\n\nappium_server_url = 'http://localhost:4723'\n\nclass TestAppium(unittest.TestCase):\n    def setUp(self) -&gt; None:\n        self.driver = webdriver.Remote(appium_server_url, options=UiAutomator2Options().load_capabilities(capabilities))\n\n    def tearDown(self) -&gt; None:\n        if self.driver:\n            self.driver.quit()\n\n    def test_find_battery(self) -&gt; None:\n        el = self.driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\n        el.click()\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Note</p> <p>\u200b\u5728\u200b\u672c\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4e0d\u4f1a\u200b\u8be6\u7ec6\u200b\u89e3\u91ca\u200bPython\u200b\u5ba2\u6237\u7aef\u200b\u5e93\u200b\u6216\u200b\u8fd9\u91cc\u200b\u53d1\u751f\u200b\u7684\u200b\u6240\u6709\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u56e0\u6b64\u200b\u73b0\u5728\u200b\u4e0d\u200b\u5bf9\u200b\u4ee3\u7801\u200b\u672c\u8eab\u200b\u8fdb\u884c\u200b\u8be6\u7ec6\u200b\u8bf4\u660e\u200b\u3002</p> <ul> <li>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u60f3\u8981\u200b\u7279\u522b\u200b\u4e86\u89e3\u200b\u4e00\u4e0b\u200bAppium Capabilities\u3002</li> <li>Python\u200b\u5ba2\u6237\u7aef\u200bGitHub\u200b\u4ed3\u5e93\u200b\u4e2d\u200b\u7684\u200b\u529f\u80fd\u200b\u6d4b\u8bd5\u4ee3\u7801\u200b\u5e94\u8be5\u200b\u6709\u52a9\u4e8e\u200b\u627e\u5230\u200b\u66f4\u200b\u591a\u200b\u7684\u200b\u5de5\u4f5c\u200b\u793a\u4f8b\u200b\u3002</li> <li>\u200b\u6587\u6863\u200b\u4e5f\u200b\u6709\u52a9\u4e8e\u200b\u627e\u5230\u200b\u5728\u200bAppium Python\u200b\u5ba2\u6237\u7aef\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002</li> </ul> <p>Note</p> <p>\u200b\u793a\u4f8b\u200b\u4ee3\u7801\u200b\u53ef\u200b\u4ece\u200b GitHub Appium\u200b\u4ed3\u5e93\u200b \u200b\u83b7\u53d6\u200b\u3002</p> <p>\u200b\u57fa\u672c\u4e0a\u200b\uff0c\u200b\u8fd9\u200b\u6bb5\u200b\u4ee3\u7801\u200b\u6b63\u5728\u200b\u505a\u200b\u4ee5\u4e0b\u200b\u4e8b\u60c5\u200b\uff1a</p> <ol> <li>\u200b\u5b9a\u4e49\u200b\u4e00\u7ec4\u200b\u201cCapabilities\u201d\uff08\u200b\u53c2\u6570\u200b\uff09\uff0c\u200b\u53d1\u9001\u5230\u200bAppium\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u4ee5\u4fbf\u200bAppium\u200b\u77e5\u9053\u200b\u4f60\u200b\u60f3\u8981\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u4e8b\u7269\u200b\u7c7b\u578b\u200b\u3002</li> <li>\u200b\u5728\u200b\u5185\u7f6e\u200b\u7684\u200b Android \u200b\u8bbe\u7f6e\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u4e0a\u200b\u542f\u52a8\u200b Appium \u200b\u4f1a\u8bdd\u200b\u3002</li> <li>\u200b\u67e5\u627e\u200b\u201cBattery\u201d\u200b\u5217\u8868\u200b\u9879\u200b\u5e76\u200b\u70b9\u51fb\u200b\u5b83\u200b\u3002</li> <li>\u200b\u505c\u987f\u200b\u7247\u523b\u200b\uff0c\u200b\u7eaf\u7cb9\u200b\u662f\u200b\u4e3a\u4e86\u200b\u89c2\u5bdf\u200b\u81ea\u52a8\u5316\u200b\u89c6\u89c9\u6548\u679c\u200b\u3002\u3002</li> <li>\u200b\u7ed3\u675f\u200bAppium\u200b\u4f1a\u8bdd\u200b\u3002</li> </ol> <p>\u200b\u5c31\u200b\u8fd9\u4e9b\u200b\uff01\u200b\u8ba9\u200b\u6211\u4eec\u200b\u8bd5\u4e00\u8bd5\u200b\u3002\u200b\u5728\u200b\u8fd0\u884c\u200b\u6d4b\u8bd5\u200b\u4e4b\u524d\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200bAppium\u200b\u670d\u52a1\u5668\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u7ec8\u7aef\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u8fd0\u884c\u200b\uff0c\u200b\u5426\u5219\u200b\u4f60\u200b\u5c06\u200b\u6536\u5230\u200b\u65e0\u6cd5\u200b\u8fde\u63a5\u200b\u5230\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u9519\u8bef\u200b\u3002\u200b\u7136\u540e\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u811a\u672c\u200b\uff1a</p> <pre><code>python test.py\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4e00\u5207\u987a\u5229\u200b\uff0c\u200b\u5728\u200b\u5e94\u7528\u200b\u518d\u6b21\u200b\u5173\u95ed\u200b\u4e4b\u524d\u200b\uff0c\u200b\u4f60\u200b\u4f1a\u200b\u770b\u5230\u200b \"\u200b\u8bbe\u7f6e\u200b \"\u200b\u5e94\u7528\u200b\u6253\u5f00\u200b\u5e76\u200b\u5bfc\u822a\u200b\u5230\u200b \"Battery \"\u200b\u89c6\u56fe\u200b\u3002 \u200b\u606d\u559c\u200b\u60a8\u200b\uff0c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5f00\u59cb\u200b\u4e86\u200b\u60a8\u200b\u7684\u200bAppium\u200b\u4e4b\u65c5\u200b\u4e86\u200b\uff01\u200b\u7ee7\u7eed\u200b\u9605\u8bfb\u200b\u4e00\u4e9b\u200b\u4e0b\u200b\u4e00\u200b\u6b65\u9aa4\u200b\u6765\u200b\u63a2\u7d22\u200b\u5b83\u200b\u5427\u200b\u3002</p>"},{"location":"quickstart/test-rb/","title":"Write a Test (Ruby)","text":"<p>The AppiumLib and the AppiumLibCore (recommended) are official Appium client libraries in Ruby, which are available via gem under the appium_lib and the appium_lib_core package names. The appium_lib_core inherits from the Selenium Ruby Binding, and the appium_lib inherits from the appium_lib_core, so installing these libraries include the selenium binding. We recommend <code>appium_lib_core</code> if you need a less complex client-side solution. The <code>appium_lib</code> has some useful methods the core does not have, but for the cost of greater complexity and historical methods which may not work in the latest environment.</p> <p>As the first step, let's initialize a Gemfile to manage the dependency:</p> <pre><code>bundle init\n</code></pre> <p>Then, you could add Appium Ruby Client dependency as below:</p> <pre><code>bundle add appium_lib_core\n# or\n# bundle add appium_lib\n</code></pre> <p>Test code example below uses <code>test-unit</code> module, thus please run:</p> <pre><code>bundle add test-unit\n</code></pre> <p>Once these steps has done, your <code>Gemfile</code> file should include:</p> Gemfile<pre><code>source 'https://rubygems.org'\n\ngem 'appium_lib_core'\ngem 'test-unit'\n</code></pre> <p>The <code>appium_lib_core</code> is the main part as an Appium client. <code>appium_lib</code> has various helper methods, but the driver instance was ordinary designed to be used as a global variable. It could causes an issue to handle the instance. <code>appium_lib_core</code> does not have such a global variable.</p> <p>This example is by the <code>appium_lib_core</code> with <code>test-unit</code> gem module. Tes code in <code>appium_lib</code> should be similar.</p> test.rb<pre><code>require 'appium_lib_core'\nrequire 'test/unit'\n\nCAPABILITIES = {\n  platformName: 'Android',\n  automationName: 'uiautomator2',\n  deviceName: 'Android',\n  appPackage: 'com.android.settings',\n  appActivity: '.Settings',\n  language: 'en',\n  locale: 'US'\n}\n\nSERVER_URL = 'http://localhost:4723'\n\nclass AppiumTest &lt; Test::Unit::TestCase\n  def setup\n    @core = ::Appium::Core.for capabilities: CAPABILITIES\n    @driver = @core.start_driver server_url: SERVER_URL\n  end\n\n  def teardown\n    @driver&amp;.quit\n  end\n\n  def test_version\n    @driver.wait { |d| d.find_element :xpath, '//*[@text=\"Battery\"]' }.click\n  end\nend\n</code></pre> <p>Note</p> <p>It's not within the scope of this guide to give a complete run-down on the Ruby client library or everything that's happening here, so we'll leave the code itself unexplained in detail for now.</p> <ul> <li>You may want to read up particularly on Appium Capabilities.</li> <li>functional test code in the appium_lib_core GitHub repository should help to find more working example.</li> <li>Documentation appium_lib_core and appium_lib also helps to find available methods.</li> </ul> <p>Note</p> <p>The sample code is available from GitHub Appium repository.</p> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code># Please run \"bundle install\" first if your environment has not run the installation command yet.\nbundle exec ruby test.rb\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/uiauto2-driver/","title":"\u5b89\u88c5\u200b UiAutomator2 \u200b\u9a71\u52a8","text":"<p>\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u9a71\u52a8\u200b\uff0c\u200b\u4f60\u200b\u51e0\u4e4e\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b Appium\uff0c\u200b\u9a71\u52a8\u200b\u662f\u200b\u5141\u8bb8\u200b Appium \u200b\u81ea\u52a8\u5316\u200b\u7279\u5b9a\u200b\u5e73\u53f0\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002</p> <p>Info</p> <p>\u200b\u5728\u200b\u672c\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\u6307\u5357\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u81ea\u52a8\u5316\u200b\u4e00\u4e2a\u200b Android \u200b\u5e73\u53f0\u200b\u7684\u200b\u5e94\u7528\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u901a\u8fc7\u200b Appium \u200b\u8fdb\u884c\u200b Android \u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u7cfb\u7edf\u200b\u8981\u6c42\u200b\u4e0e\u200b Appium \u200b\u672c\u8eab\u200b\u76f8\u540c\u200b\uff08\u200b\u800c\u200b iOS \u200b\u9a71\u52a8\u200b\u4f8b\u5982\u200b\uff0c\u200b\u9700\u8981\u200b\u4f60\u200b\u4f7f\u7528\u200b macOS\uff09\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u4f7f\u7528\u200b\u7684\u200b\u9a71\u52a8\u200b\u79f0\u4e3a\u200b UiAutomator2 \u200b\u9a71\u52a8\u200b\u3002\u200b\u503c\u5f97\u200b\u8bbf\u95ee\u200b\u8be5\u200b\u9a71\u52a8\u200b\u7684\u200b\u6587\u6863\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u52a0\u5165\u200b\u4e66\u7b7e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u8fd9\u200b\u5c06\u200b\u662f\u200b\u4eca\u540e\u200b\u4e0d\u53ef\u6216\u7f3a\u200b\u7684\u200b\u53c2\u8003\u8d44\u6599\u200b\u3002</p>"},{"location":"quickstart/uiauto2-driver/#android","title":"\u8bbe\u7f6e\u200b Android \u200b\u81ea\u52a8\u5316\u200b\u8981\u6c42","text":"<p>\u200b\u6839\u636e\u200b\u9a71\u52a8\u200b\u7684\u200b\u8981\u6c42\u200b\uff0c\u200b\u9664\u4e86\u200b\u4e00\u4e2a\u200b\u8fd0\u884c\u200b\u4e2d\u200b\u7684\u200b Appium \u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u9700\u8981\u200b\u8bbe\u7f6e\u200b\u4ee5\u4e0b\u5185\u5bb9\u200b\uff1a</p>"},{"location":"quickstart/uiauto2-driver/#android-sdk","title":"Android SDK","text":"<ul> <li>\u200b\u8bbe\u7f6e\u200b Android SDK \u200b\u8981\u6c42\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4e0b\u8f7d\u200b Android Studio\u3002 \u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u5176\u200b SDK \u200b\u7ba1\u7406\u5668\u200b (\u200b\u8bbe\u7f6e\u200b -&gt; \u200b\u5916\u89c2\u200b\u548c\u200b\u884c\u4e3a\u200b -&gt; \u200b\u7cfb\u7edf\u200b\u8bbe\u7f6e\u200b -&gt; Android SDK) \u200b\u6765\u200b\u4e0b\u8f7d\u200b\u4ee5\u4e0b\u200b\u9879\u76ee\u200b\uff1a<ul> <li>Android SDK \u200b\u5e73\u53f0\u200b\uff08\u200b\u9009\u62e9\u200b\u6211\u4eec\u200b\u60f3\u8981\u200b\u81ea\u52a8\u5316\u200b\u7684\u200b\u4efb\u4f55\u200b Android \u200b\u5e73\u53f0\u200b\uff0c\u200b\u4f8b\u5982\u200b\uff0cAPI \u200b\u7ea7\u522b\u200b 30\uff09</li> <li>Android SDK \u200b\u5e73\u53f0\u200b\u5de5\u5177\u200b</li> </ul> </li> <li>\u200b\u5982\u679c\u200b\u613f\u610f\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u901a\u8fc7\u200b Android Studio \u200b\u4e0b\u8f7d\u200b\u8fd9\u4e9b\u200b\u9879\u76ee\u200b\uff1a<ul> <li>\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Android \u200b\u547d\u4ee4\u884c\u200b\u5de5\u5177\u200b \u200b\u4e2d\u200b\u5305\u542b\u200b\u7684\u200b <code>sdkmanager</code> \u200b\u4e0b\u8f7d\u200b Android SDK \u200b\u5e73\u53f0\u200b</li> <li>Android SDK \u200b\u5e73\u53f0\u200b\u5de5\u5177\u200b</li> </ul> </li> <li>\u200b\u8bbe\u7f6e\u200b <code>ANDROID_HOME</code> \u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u6307\u5411\u200b\u5b89\u88c5\u200b Android SDK \u200b\u7684\u200b\u76ee\u5f55\u200b\u3002\u200b\u901a\u5e38\u200b\u53ef\u4ee5\u200b\u5728\u200b Android Studio \u200b\u7684\u200b SDK \u200b\u7ba1\u7406\u5668\u200b\u4e2d\u200b\u627e\u5230\u200b\u8fd9\u4e2a\u200b\u76ee\u5f55\u200b\u7684\u200b\u8def\u5f84\u200b\u3002\u200b\u5b83\u200b\u5c06\u200b\u5305\u542b\u200b <code>platform-tools</code> \u200b\u548c\u200b\u5176\u4ed6\u200b\u76ee\u5f55\u200b\u3002</li> </ul>"},{"location":"quickstart/uiauto2-driver/#java-jdk","title":"Java JDK","text":"<ul> <li>\u200b\u5b89\u88c5\u200b Java JDK\uff08\u200b\u5bf9\u4e8e\u200b\u6700\u65b0\u200b\u7684\u200b Android API \u200b\u7ea7\u522b\u200b\uff0c\u200b\u9700\u8981\u200b JDK 9\uff0c\u200b\u5426\u5219\u200b\u9700\u8981\u200b JDK 8\uff09\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4ece\u200b Oracle \u200b\u6216\u200b Adoptium \u200b\u4e0b\u8f7d\u200b\u3002 \u200b\u786e\u4fdd\u200b\u4e0b\u8f7d\u200b\u7684\u200b\u662f\u200b JDK \u200b\u800c\u200b\u4e0d\u662f\u200b JRE\u3002</li> <li>\u200b\u8bbe\u7f6e\u200b <code>JAVA_HOME</code> \u200b\u73af\u5883\u53d8\u91cf\u200b\uff0c\u200b\u6307\u5411\u200b JDK \u200b\u7684\u200b\u5b89\u88c5\u200b\u76ee\u5f55\u200b\u3002\u200b\u5b83\u200b\u5c06\u200b\u5305\u542b\u200b <code>bin</code>\u3001<code>include</code> \u200b\u548c\u200b\u5176\u4ed6\u200b\u76ee\u5f55\u200b\u3002</li> </ul>"},{"location":"quickstart/uiauto2-driver/#_1","title":"\u51c6\u5907\u200b\u8bbe\u5907","text":"<ul> <li>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b\u6a21\u62df\u5668\u200b\uff0c\u200b\u4f7f\u7528\u200b Android Studio \u200b\u521b\u5efa\u200b\u5e76\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200b Android \u200b\u865a\u62df\u200b\u8bbe\u5907\u200b (AVD)\u3002 \u200b\u4f60\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u4e0b\u8f7d\u200b\u4f60\u200b\u60f3\u8981\u200b\u521b\u5efa\u200b\u7684\u200b\u6a21\u62df\u5668\u200b\u7684\u200b API \u200b\u7ea7\u522b\u200b\u7684\u200b\u7cfb\u7edf\u200b\u955c\u50cf\u200b\u3002\u200b\u4f7f\u7528\u200b Android Studio \u200b\u4e2d\u200b\u7684\u200b AVD \u200b\u521b\u5efa\u200b\u5411\u5bfc\u200b\u901a\u5e38\u200b\u662f\u200b\u5b8c\u6210\u200b\u6240\u6709\u200b\u8fd9\u4e9b\u200b\u64cd\u4f5c\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u5f0f\u200b\u3002</li> <li>\u200b\u5982\u679c\u200b\u4f7f\u7528\u200b\u771f\u5b9e\u200b\u8bbe\u5907\u200b\uff0c\u200b\u5e94\u8be5\u200b\u4e3a\u200b\u5f00\u53d1\u200b\u8bbe\u7f6e\u200b\u5e76\u200b\u542f\u7528\u200b USB \u200b\u8c03\u8bd5\u200b\u3002</li> <li>\u200b\u8fde\u63a5\u200b\u6a21\u62df\u5668\u200b\u6216\u200b\u8bbe\u5907\u200b\u540e\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8fd0\u884c\u200b <code>adb devices</code>\uff08\u200b\u901a\u8fc7\u200b\u4f4d\u4e8e\u200b <code>$ANDROID_HOME/platform-tools/adb</code> \u200b\u7684\u200b\u4e8c\u8fdb\u5236\u200b\u6587\u4ef6\u200b\uff09\u200b\u6765\u200b\u9a8c\u8bc1\u200b\u4f60\u200b\u7684\u200b\u8bbe\u5907\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u4e3a\u200b\u5df2\u200b\u8fde\u63a5\u200b\u3002</li> </ul> <p>\u200b\u4e00\u65e6\u200b\u4f60\u200b\u7684\u200b\u8bbe\u5907\u200b\u5728\u200b <code>adb</code> \u200b\u4e2d\u200b\u663e\u793a\u200b\u4e3a\u200b\u5df2\u200b\u8fde\u63a5\u200b\uff0c\u200b\u5e76\u4e14\u200b\u4f60\u200b\u5df2\u200b\u9a8c\u8bc1\u200b\u73af\u5883\u53d8\u91cf\u200b\u8bbe\u7f6e\u200b\u6b63\u786e\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5f00\u59cb\u200b\u4e86\u200b\uff01\u200b\u5982\u679c\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u6b65\u9aa4\u200b\u4e2d\u200b\u9047\u5230\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u8003\u200b\u9a71\u52a8\u200b\u6587\u6863\u200b\uff0c\u200b\u6216\u200b\u5fc5\u8981\u200b\u65f6\u200b\u67e5\u770b\u200b\u5404\u79cd\u200b Android \u200b\u6216\u200b Java \u200b\u6587\u6863\u200b\u7f51\u7ad9\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u606d\u559c\u200b\u4f60\u200b\uff1a\u200b\u4e0d\u7ba1\u200b\u4f60\u200b\u662f\u5426\u200b\u6253\u7b97\u200b\uff0c\u200b\u4f60\u200b\u73b0\u5728\u200b\u5df2\u7ecf\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u7cfb\u7edf\u200b\u4e0a\u200b\u8bbe\u7f6e\u200b\u4e86\u200b Android \u200b\u5f00\u53d1\u8005\u200b\u5de5\u5177\u200b\u94fe\u200b\uff0c\u200b\u6240\u4ee5\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5f00\u59cb\u200b\u5236\u4f5c\u200b Android \u200b\u5e94\u7528\u200b\u4e86\u200b\uff01</p>"},{"location":"quickstart/uiauto2-driver/#_2","title":"\u5b89\u88c5\u200b\u9a71\u52a8\u200b\u672c\u8eab","text":"<p>\u200b\u7531\u4e8e\u200b UiAutomator2 \u200b\u9a71\u52a8\u200b\u662f\u200b\u7531\u200b\u6838\u5fc3\u200b Appium \u200b\u56e2\u961f\u200b\u7ef4\u62a4\u200b\u7684\u200b\uff0c\u200b\u5b83\u200b\u6709\u200b\u4e00\u4e2a\u200b\u5b98\u65b9\u200b\u7684\u200b\u9a71\u52a8\u200b\u540d\u79f0\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b Appium \u200b\u6269\u5c55\u200b CLI \u200b\u8f7b\u677e\u200b\u5b89\u88c5\u200b\uff1a</p> <pre><code>appium driver install uiautomator2\n</code></pre> <p>\u200b\u5b83\u200b\u5e94\u8be5\u200b\u4ea7\u751f\u200b\u7c7b\u4f3c\u200b\u4e0b\u9762\u200b\u7684\u200b\u8f93\u51fa\u200b\uff1a</p> <pre><code>Attempting to find and install driver 'uiautomator2'\n\u2714 Installing 'uiautomator2' using NPM install spec 'appium-uiautomator2-driver'\nDriver uiautomator2@2.0.5 successfully installed\n- automationName: UiAutomator2\n- platformNames: [\"Android\"]\n</code></pre> <p>\u200b\u8fd0\u884c\u200b\u6b64\u200b\u547d\u4ee4\u200b\u5c06\u200b\u5b9a\u4f4d\u200b\u5e76\u200b\u5b89\u88c5\u200b UiAutomator2 \u200b\u9a71\u52a8\u200b\u7684\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u53ef\u200b\u7528\u4e8e\u200b\u81ea\u52a8\u5316\u200b\u3002\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5f53\u200b\u5b89\u88c5\u200b\u65f6\u200b\uff0c\u200b\u5b83\u4f1a\u200b\u544a\u8bc9\u200b\u4f60\u200b\u54ea\u4e9b\u200b\u5e73\u53f0\u200b\u5b83\u200b\u9002\u7528\u200b\uff08\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u662f\u200b <code>Android</code>\uff09\uff0c\u200b\u4ee5\u53ca\u200b\u5728\u200b Appium \u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u6b64\u200b\u9a71\u52a8\u200b\u65f6\u200b\u5fc5\u987b\u200b\u4f7f\u7528\u200b\u7684\u200b\u81ea\u52a8\u5316\u200b\u540d\u79f0\u200b\uff08\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u662f\u200b <code>UiAutomator2</code> \u200b\u7684\u200b <code>appium:automationName</code> capability\uff09\u3002</p> <p>Note</p> <p>\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u5feb\u901f\u200b\u5165\u95e8\u200b\u4e2d\u200b\uff0c\u200b\u6211\u4eec\u200b\u4f7f\u7528\u200b\u4e86\u200b \u200b\u6269\u5c55\u200b CLI \u200b\u6765\u200b\u5b89\u88c5\u200b UiAutomator2 \u200b\u9a71\u52a8\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u4f60\u200b\u5c06\u200b Appium \u200b\u96c6\u6210\u200b\u5230\u200b\u4e00\u4e2a\u200b Node.js \u200b\u9879\u76ee\u200b\u4e2d\u200b\uff0c\u200b\u4f60\u200b\u53ef\u80fd\u200b\u66f4\u200b\u559c\u6b22\u200b\u4f7f\u7528\u200b <code>npm</code> \u200b\u6765\u200b\u7ba1\u7406\u200b Appium \u200b\u53ca\u5176\u200b\u76f8\u5173\u9a71\u52a8\u200b\u3002\u200b\u8981\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u8fd9\u79cd\u200b\u6280\u672f\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u8bbf\u95ee\u200b\u5173\u4e8e\u200b\u7ba1\u7406\u200b Appium \u200b\u6269\u5c55\u200b\u7684\u200b\u6307\u5357\u200b\u3002</p> <p>\u200b\u73b0\u5728\u200b\uff0c\u200b\u518d\u6b21\u200b\u542f\u52a8\u200b Appium \u200b\u670d\u52a1\u5668\u200b\uff08\u200b\u8fd0\u884c\u200b <code>appium</code>\uff09\uff0c\u200b\u4f60\u200b\u5e94\u8be5\u200b\u770b\u5230\u200b\u65b0\u200b\u5b89\u88c5\u200b\u7684\u200b\u9a71\u52a8\u200b\u88ab\u200b\u5217\u4e3a\u200b\u53ef\u7528\u200b\uff1a</p> <pre><code>[Appium] Available drivers:\n[Appium]   - uiautomator2@2.0.5 (automationName 'UiAutomator2')\n</code></pre> <p>Android \u200b\u8bbe\u7f6e\u200b\u5b8c\u6210\u200b\u5e76\u4e14\u200b UiAutomator2 \u200b\u9a71\u52a8\u200b\u5df2\u200b\u5b89\u88c5\u200b\u540e\u200b\uff0c\u200b\u4f60\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u7f16\u5199\u200b\u4f60\u200b\u7684\u200b\u7b2c\u4e00\u4e2a\u200b\u6d4b\u8bd5\u200b\u4e86\u200b\uff01\u200b\u73b0\u5728\u200b\u9009\u62e9\u200b\u4f60\u200b\u559c\u6b22\u200b\u7684\u200b\u8bed\u8a00\u200b\u5e76\u200b\u8bd5\u4e00\u8bd5\u200b\uff1a</p> <ul> <li> JavaScript</li> <li> Java</li> <li> Python</li> </ul>"},{"location":"blog/archive/2024/","title":"2024","text":""}]}