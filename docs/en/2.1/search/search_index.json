{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Appium Documentation","text":"<p>Welcome to the Appium documentation! Appium is an open-source project and ecosystem of related software, designed to facilitate UI automation of many app platforms, including mobile (iOS, Android, Tizen), browser (Chrome, Firefox, Safari), desktop (macOS, Windows), TV (Roku, tvOS, Android TV, Samsung), and more.</p> <p>If you're new to Appium, it's recommended that you start off with the Introduction, then move on to the Quickstart. And you can always find Appium's code on GitHub at appium/appium.</p>"},{"location":"#what-is-appium-for","title":"What is Appium for?","text":"<p>Appium is used mostly in the field of software test automation, to help determine whether the functionality of a given app is working as expected. In contrast to other types of software testing, UI automation allows testers to write code that walks through user scenarios in the actual UI of an application, mimicking as closely as possible what happens in the real world while enabling the various benefits of automation, including speed, scale, and consistency.</p> <p>Appium aims to provide a set of tools that support this kind of automation in a standard way across any number of platforms. Most platforms come with tools that allow UI automation at some level, but these are usually platform-specific and require specialized knowledge and specific programming language experience and toolchains. Appium tries to unify all these automation technology under a single stable interface, accessible via most popular programming languages (you can write Appium scripts in Java, Python, Ruby, JS, and more).</p> <p>To learn more about how Appium accomplishes this goal, and the various components involved, have a read through our Introduction.</p>"},{"location":"#learning-appium","title":"Learning Appium","text":"<p>This documentation is a great way to learn more about Appium:</p> <ul> <li>Check out the Introduction first to make sure you understand all the concepts involved in Appium.</li> <li>Go through the Quickstart to get set up and run a basic Android test.</li> <li>Have a look at the various guides and references.</li> <li>Using Appium for a real project means using an Appium driver for a specific platform, so you'll want to have a look at the Ecosystem page where we keep links to the drivers and plugins you might want to use; you can refer to those projects for specific information about using Appium for a given platform.</li> </ul> <p>You can also check out a list of third-party Resources to explore Appium around the web.</p>"},{"location":"#contributing-to-appium","title":"Contributing to Appium","text":"<p>Appium is open source, available under an Apache 2.0 license. Appium's copyright is held by the OpenJS Foundation, and Appium receives contributions from many companies across several software industries, regardless of their competitive status. (3rd-party drivers and plugins are available under the licenses provided by their authors.)</p> <p>As such, we welcome contributions! The project moves forward in relation to the investment of contributions of code, documentation, maintenance, and support from companies and volunteers. To learn more about contributing, check out our GitHub repo at appium/appium and read through our Contributing guides.</p>"},{"location":"resources/","title":"Additional Resources","text":"<p>Here you can find links to additional Appium resources around the web:</p>"},{"location":"resources/#websites","title":"Websites","text":"<ul> <li>Appium Pro - a blog and newsletter written by one of Appium's maintainers, Jonathan Lipps, with lots of useful guides</li> </ul>"},{"location":"resources/#online-courses","title":"Online Courses","text":"<ul> <li>Appium and Selenium Fundamentals - a comprehensive video course on learning Python, Selenium, and Appium by Jonathan Lipps</li> <li>Mobile Test Automation with Appium - a video course by Moataz Nabil</li> <li>Advanced Appium - a video course by Jonathan Lipps</li> </ul>"},{"location":"cli/","title":"CLI Intro","text":"<p>When you install Appium globally via <code>npm</code>, an executable shell script named <code>appium</code> is placed in your global Node <code>bin</code> folder, often also symlinked to places like <code>/usr/local/bin</code>. If your <code>PATH</code> is set up to look for programs in appropriate directory, then you will be able to run <code>appium</code> from the command line of your terminal, like any other executable. The <code>appium</code> program has three main subcommands, each of which has its own set of documentation:</p> <ol> <li>The <code>server</code> subcommand starts an Appium server listening for new session requests,    and takes a variety of parameters related to the operation of the server and also those consumed    by active drivers or plugins.</li> <li>The Extension (<code>driver</code> and <code>plugin</code>) subcommands assist in managing Appium    drivers and plugins.</li> </ol>"},{"location":"cli/args/","title":"Server CLI Args","text":"<p>To start the Appium server, you may either run <code>appium</code> or <code>appium server</code>. The <code>server</code> subcommand is considered to be the default, so if you omit it, Appium will interpret this as your request to run the Appium server. (You could run different subcommands, like <code>appium driver</code> or <code>appium plugin</code>: see the Extensions CLI for more info).</p> <p>The invocation of <code>appium</code> (or <code>appium server</code>) takes a number of arguments, which are detailed below.</p> <p>Note</p> <p>All of these arguments can be set via a Configuration File instead if you want. Any arguments set on the command line will override any arguments found in a configuration file.</p> Argument\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description Type Default Aliases <code>--address</code> IP address to listen on string <code>0.0.0.0</code> <code>-a</code> <code>--allow-cors</code> Whether the Appium server should allow web browser connections from any host boolean <code>false</code> <code>--allow-insecure</code> Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list. array <code>[]</code> <code>--base-path</code> Base path to use as the prefix for all webdriver routes running on the server string <code>\"\"</code> <code>-pa</code> <code>--callback-address</code> Callback IP address (default: same as \"address\") string <code>-ca</code> <code>--callback-port</code> Callback port (default: same as \"port\") (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-cp</code> <code>--debug-log-spacing</code> Add exaggerated spacing in logs to help with visual inspection boolean <code>false</code> <code>--default-capabilities</code> Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON. object <code>-dc</code> <code>--deny-insecure</code> Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list. array <code>[]</code> <code>--driver</code> Driver-specific configuration. Keys should correspond to driver package names object <code>--keep-alive-timeout</code> Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout. integer <code>600</code> <code>-ka</code> <code>--local-timezone</code> Use local timezone for timestamps boolean <code>false</code> <code>--log</code> Also send log output to this file string <code>-g</code> <code>--log-filters</code> One or more log filtering rules array <code>--log-level</code> Log level (console[:file]) (Value must be one of: <code>info</code>, <code>info:debug</code>, <code>info:info</code>, <code>info:warn</code>, <code>info:error</code>, <code>warn</code>, <code>warn:debug</code>, <code>warn:info</code>, <code>warn:warn</code>, <code>warn:error</code>, <code>error</code>, <code>error:debug</code>, <code>error:info</code>, <code>error:warn</code>, <code>error:error</code>, <code>debug</code>, <code>debug:debug</code>, <code>debug:info</code>, <code>debug:warn</code>, <code>debug:error</code>) string <code>debug</code> <code>--log-no-colors</code> Do not use color in console output boolean <code>false</code> <code>--log-timestamp</code> Show timestamps in console output boolean <code>false</code> <code>--long-stacktrace</code> Add long stack traces to log entries. Recommended for debugging only. boolean <code>false</code> <code>--no-perms-check</code> Do not check that needed files are readable and/or writable boolean <code>false</code> <code>--nodeconfig</code> Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself object <code>--plugin</code> Plugin-specific configuration. Keys should correspond to plugin package names object <code>--port</code> Port to listen on (Value must be between <code>1</code> and <code>65535</code>) integer <code>4723</code> <code>-p</code> <code>--relaxed-security</code> Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\" boolean <code>false</code> <code>--session-override</code> Enables session override (clobbering) boolean <code>false</code> <code>--strict-caps</code> Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device boolean <code>false</code> <code>--tmp</code> Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise. string <code>--trace-dir</code> Absolute path to directory Appium can use to save iOS instrument traces; defaults to /appium-instruments string <code>--use-drivers</code> A list of drivers to activate. By default, all installed drivers will be activated. array <code>[]</code> <code>--use-plugins</code> A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\". array <code>[]</code> <code>--webhook</code> Also send log output to this http listener string <code>-G</code>"},{"location":"cli/env-vars/","title":"Server Environment Variables","text":"<p>The primary way of configuring the Appium server is via CLI Args. However, some more advanced features are toggled or configured via environment variables. To set environment variables, refer to the documentation for your operating system and terminal. These are the environment variables that the Appium server understands:</p> Variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>APPIUM_HOME</code> By default, Appium creates a directory called <code>.appium</code> in the home directory for your system user. You can adjust the directory with this variable, as detailed in the Managing Extensions guide. <code>APPIUM_TMP_DIR</code> By default, Appium uses a random temporary directory for many of its operations. If you wish to use a specific directory, you may do so by including an absolute path as the value of this variable. The behaviour is equivalent to using the <code>--tmp</code> CLI arg. <code>APPIUM_PREFER_SYSTEM_UNZIP</code> Set to <code>0</code> or <code>false</code> to request that Appium not use the <code>unzip</code> binary included on your system for unzipping downloaded apps or other artifacts. Instead it will use a JS-based unzip library. This could help on some systems with non-existent or non-standard <code>unzip</code> commands. Note that if unzipping fails using the system library, the fallback library will be attempted in any case, so setting this env var merely saves time in the event you know the system unzip will fail. <code>APPIUM_HOST</code> Same as the <code>--address</code> CLI arg <code>APPIUM_PORT</code> Same as the <code>--port</code> CLI arg <code>APPIUM_RELOAD_EXTENSIONS</code> Set to <code>1</code> to cause Appium to re-require extensions when new sessions are created. This is mostly useful for building extensions <code>APPIUM_OMIT_PEER_DEPS</code> Adds <code>--omit=peer</code> to all the NPM commands run internally by Appium. Mostly an internal feature."},{"location":"cli/extensions/","title":"The Extension CLI","text":"<p>Appium allows for the flexible installation and management of drivers (which provide Appium with the capability to automate a given platform) and plugins (which can augment or alter the way individual Appium commands work). For a conceptual understanding of these entities, please review the Introduction. Management of drivers and plugins is handled by Appium's Extension CLI.</p> <p>Note</p> <p>This reference uses placeholders to refer to various options. Anywhere you see one of these placeholders in the reference, ensure you replace it with the correct type of actual content.</p> Placeholder Meaning <code>&lt;ext-type&gt;</code> \"Extension type\". It should be either <code>driver</code> or <code>plugin</code>. All the Extension CLI commands can be used with either drivers or plugins, so you must specify which type of extension will be used <code>&lt;ext-name&gt;</code> \"Extension name\". This is the short name of the extension found in a call to <code>appium &lt;ext-type&gt; list</code>. This is distinct from the NPM package name of the extension or, in general, the \"install spec\" of the extension. <code>&lt;install-spec&gt;</code> \"Install specification\". This refers to the string used to indicate what extension Appium should install. <code>&lt;install-source&gt;</code> This refers to the method that Appium should use to install an extension."},{"location":"cli/extensions/#commands","title":"Commands","text":"<p>All Extension CLI commands begin with <code>appium &lt;ext-type&gt;</code>, i.e., either <code>appium driver</code> or <code>appium plugin</code>.</p> <p>All Extension CLI commands can take an optional <code>--json</code> argument, which will return the result of the command as a machine-readable JSON string rather than the standard output, which is colourized and tuned for human consumption.</p>"},{"location":"cli/extensions/#list","title":"<code>list</code>","text":"<p>List installed and available extensions. \"Available\" extensions include those which are officially recognized by the Appium team, but you are not limited to installing only the extensions displayed in this list.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; list [--installed] [--updates] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> </ul> <p>Optional arguments:</p> <ul> <li><code>--installed</code>: show only installed extensions, not installed plus available extensions</li> <li><code>--updates</code>: for extensions installed via NPM, display a message if there are any updates</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#install","title":"<code>install</code>","text":"<p>Install an extension. If successful, respond with the short name of the extension which can be used in other invocations of the Extension CLI. If the extension is a driver, also note which platforms may be used with the driver.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; install &lt;install-spec&gt; [--source=&lt;install-source&gt;] [--package=&lt;package-name&gt;] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;install-spec&gt;</code>: this is the name, location, and/or version of the extension you want to   install. Its possible values are dependent on the <code>&lt;install-source&gt;</code> (see below).</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--source</code>: this directs Appium where to find your extension. See below for a table of possible   source types and corresponding install specification.</li> <li><code>--package</code>: when <code>&lt;install-source&gt;</code> is <code>git</code> or <code>github</code>, <code>--package</code> is required. It should be   the Node.js package name of the extension. Without this information, Appium will not be able to   find the installed package.</li> <li><code>--json</code>: return the result in JSON format</li> </ul> Install source type Behaviour None This is the default behaviour when no <code>--source</code> is used. In this case, Appium will look at <code>&lt;install-spec&gt;</code> and match it against the name of extensions available when running <code>appium &lt;ext-type&gt; list</code>, i.e., against the officially recognized extension names. If found, it will install that extension at the latest version via NPM <code>npm</code> Install an extension based on its NPM package name. Here, <code>&lt;install-spec&gt;</code> must be the NPM package name with any additional NPM installation modifiers, like version (see below) <code>github</code> Install an extension via a GitHub spec of the form <code>&lt;org&gt;/&lt;repo&gt;</code> <code>git</code> Install an extension via a Git URL (e.g., <code>git+ssh://git-host.com/repo.git</code>) <code>local</code> Install an extension via a local path. This must be a path to the directory where the Node.js package information for the driver is located."},{"location":"cli/extensions/#npm-based-install-spec","title":"NPM-based <code>&lt;install-spec&gt;</code>","text":"<p>When Appium is installing an extension via NPM (as is the case when <code>--source</code> is either omitted or set to <code>npm</code>), the <code>&lt;install-spec&gt;</code> can be complex, and can include any kind of information allowed by <code>npm install</code>:</p> <ul> <li><code>[@scope]/&lt;name&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;tag&gt;</code></li> <li><code>[@scope]/&lt;name&gt;@&lt;version range&gt;</code></li> </ul>"},{"location":"cli/extensions/#examples","title":"Examples","text":"<ul> <li> <p>Install the latest XCUITest driver:</p> <pre><code>appium driver install xcuitest\n</code></pre> </li> <li> <p>Install the XCUITest driver at version 4.11.1:</p> <pre><code>appium driver install xcuitest@4.11.1\n</code></pre> </li> <li> <p>Install the <code>beta</code> version of the <code>@appium/fake-driver</code> from NPM:</p> <pre><code>appium driver install --source=npm @appium/fake-driver@beta\n</code></pre> </li> <li> <p>Install a locally-developed plugin:</p> <pre><code>appium plugin install --source=local /path/to/my/plugin\n</code></pre> </li> </ul>"},{"location":"cli/extensions/#update","title":"<code>update</code>","text":"<p>Update one or more extensions that have been installed via NPM. By default, Appium will not automatically update any extension that has a revision in its major version, so as to prevent unintended breaking changes.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; update &lt;ext-name&gt; [--unsafe] [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to update, or the string <code>installed</code> (which will update   all installed extensions)</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--unsafe</code>: direct Appium to go ahead and update passed a major version boundary</li> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#uninstall","title":"<code>uninstall</code>","text":"<p>Remove an installed extension.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; uninstall &lt;ext-name&gt; [--json]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension to uninstall</li> </ul> <p>Optional arguments:</p> <ul> <li><code>--json</code>: return the result in JSON format</li> </ul>"},{"location":"cli/extensions/#run","title":"<code>run</code>","text":"<p>Run a script included in an extension package. Extension authors can include runnable scripts that assist with setup or perform other tasks. These scripts are given names (called the <code>&lt;script-name&gt;</code> in this reference) by extension authors and will generally be documented in extension documentation.</p> <p>Usage:</p> <pre><code>appium &lt;ext-type&gt; run &lt;ext-name&gt; [--json] &lt;script-name&gt; [script-args]\n</code></pre> <p>Required arguments:</p> <ul> <li><code>&lt;ext-type&gt;</code>: must be <code>driver</code> or <code>plugin</code></li> <li><code>&lt;ext-name&gt;</code>: the name of the extension whose script you want to run</li> <li><code>&lt;script-name&gt;</code>: the name of the script the extension has published</li> </ul> <p>Optional arguments:</p> <ul> <li><code>script-args</code>: any arguments that Appium does not interpret as belonging to its own set of   arguments will be passed along to the extension script</li> <li><code>--json</code>: return the result in JSON format</li> </ul> <p>Example (run the <code>reset</code> script included with the UiAutomator2 driver):</p> <pre><code>appium driver run uiautomator2 reset\n</code></pre>"},{"location":"contributing/","title":"Contributing to Appium","text":"<p>This section of Appium's documentation is for those who are interested in contributing to Appium's development. It contains developer overviews, guides, and notes. Use the navigation menu to find a specific topic. All the information in these guides assumes in-depth familiarity with Appium already.</p> <p>Warning</p> <p>Developer information may not be kept up to date as frequently as user-facing information, or it may be most relevant in its current form on the online repository, not in this published version. Always be sure to check the repo or discuss with maintainers. We're always happy to help new contributors get started!</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>The project offers a variety of ways to contribute, e.g.:</p> <ul> <li>contributing code</li> <li>improving documentation</li> <li>creating educational content (blog posts, tutorials, videos, etc.)</li> <li>spreading the good word about the project (e.g. via Twitter)</li> <li>filing bugs if you discover them while using Appium</li> <li>making feature requests if you are missing something in the project or help triaging bugs</li> <li>supporting users in the Appium forum</li> </ul>"},{"location":"contributing/#the-appium-development-process","title":"The Appium Development Process","text":"<p>To contribute to the Appium code base make sure to check out the Git repository.</p> <p>Info</p> <p>If you are VS Code user you can easily check out the project using Runme.</p> <p>It is advised to fork before cloning it to your system.</p> <p>```sh { name=clone } export GITHUB_USERNAME= git clone git@github.com:$GITHUB_USERNAME/appium.git <pre><code>After cloning you can go ahead and install the project dependencies:\n\n```sh { name=install }\nnpm install\n</code></pre> <p>From here on there are several things you can do.</p>"},{"location":"contributing/#watch-files","title":"Watch Files","text":"<p>When developing Appium code we have to watch all JavaScript and TypeScript files to re-compile them after every change. You can run this watch process via:</p> <p>```sh { name=watch, background=true } npm run dev <pre><code>### Start Appium in Dev-Mode\n\nTo test your changes you can run Appium in dev mode via:\n\n```sh { name=start }\nnpm start\n</code></pre></p>"},{"location":"contributing/#run-tests","title":"Run Tests","text":"<p>The project maintains a set of different test variations you can run to verify the quality of the code.</p>"},{"location":"contributing/#linting","title":"Linting","text":"<p>Appium uses EsLint for static code analysis and linting. You can run these checks via:</p> <p>```sh { name=test-linting } npm run lint <pre><code>#### Unit\n\nRun via:\n\n```sh { name=test-unit }\nnpm run test:unit\n</code></pre></p> <p>You can also run tests for specific workspaces, e.g.:</p> <p>```sh { name=test-workspace } export APPIUM_WORKSPACE=@appium/doctor npm run test:unit -w $APPIUM_WORKSPACE <pre><code>#### Smoke and e2e Tests\n\nRun via:\n\n```sh { name=test-slow }\nnpm run test:slow\n</code></pre></p>"},{"location":"contributing/#deploy-docs-locally","title":"Deploy Docs Locally","text":"<p>Our documentation system uses MKDocs and therefor requires Python to be installed on your system. You can run the docs by:</p> <pre><code># installing needed Python dependencies\npip install -r packages/docutils/requirements.txt\n# build the project\nnpm run build\n# run dev server\nnpm run dev:docs\n</code></pre> <p>You should be able to view the page at <code>http://127.0.0.1:8000/docs/en</code>:</p> <pre><code>open http://127.0.0.1:8000/docs/en\n</code></pre>"},{"location":"contributing/config-system/","title":"Appium's Config System","text":"<p>Appium 2 supports configuration files. A configuration file is intended to have (nearly) 1:1 parity with command-line arguments. An end user can supply Appium 2 with a configuration file, CLI args, or both (the args have precedence over the config file).</p> <p>This document will be a technical overview of how the configuration system works. It is intended for Appium contributors, but will also explain the system's fundamental features.</p>"},{"location":"contributing/config-system/#reading-a-config-file","title":"Reading a Config File","text":"<p>A config file is a JSON, JavaScript, or YAML file which can be validated against a schema. By default, this file will be named <code>.appiumrc.{json,js,yaml,yml}</code> and should be in the root of the project which depends upon <code>appium</code>. Other filenames and locations are supported via the <code>--config &lt;file&gt;</code> flag. For obvious reasons, the <code>config</code> argument is disallowed within config files.</p> <p>In lieu of a separate file, configuration can be embedded in a project's <code>package.json</code> using the <code>appiumConfig</code> property, e.g.,:</p> <pre><code>{\n\"appiumConfig\": {\n\"server\": {\n\"port\": 12345\n}\n}\n}\n</code></pre> <p>When an Appium server is started via the <code>appium</code> executable, the <code>init</code> function in <code>lib/main.js</code> will call into <code>lib/config-file.js</code> to load and/or search for a configuration file and in <code>package.json</code>.</p> <p>Note</p> <p>It is not an error if configuration isn't found!</p> <p>The <code>lilconfig</code> package provides the search &amp; load functionality; refer to its documentation for more information about the search paths. Additionally, Appium provides support for config files written in YAML via the package <code>yaml</code>.</p> <p>If a config file is found and successfully validated, the result will be merged with a set of defaults and any additionall CLI arguments. CLI arguments have precedence over config files, and config files have precedence over defaults.</p>"},{"location":"contributing/config-system/#validation","title":"Validation","text":"<p>The same system is used for both validation of config files and command-line arguments.</p> <p>The package <code>ajv</code> provides validation. Of course, to make <code>ajv</code> validate anything, it must be provided a schema.</p> <p>The base schema is a JSON Schema Draft-7-compliant object exported by <code>lib/schema/appium-config-schema.js</code>. This schema defines configuration native to Appium, and only concerns its behavior as a server; it does not define configuration for any other functionality (e.g., the <code>plugin</code> or <code>driver</code> subcommands).</p> <p>Warning</p> <p>Note that this file is the base schema; this will become painfully relevant.</p> <p>This file is is not a JSON file, because a) JSON is painful to work with for humans, b) is especially reviled by @jlipps, and c) <code>ajv</code> accepts objects, not JSON files.</p> <p>It is more straightforward to explain how config files are validated, so we'll start there.</p>"},{"location":"contributing/config-system/#validating-config-files","title":"Validating Config Files","text":"<p>When a config file is found (<code>lib/config-file.js</code>), it will call the <code>validate</code> function exported from <code>lib/schema/schema.js</code> with the contents of the config file. In turn, this asks <code>ajv</code> to validate the data against the schema that Appium has provided it.</p> <p>If the config file is invalid, errors will be generated to be displayed to the user. Finally, the <code>init</code> function will detect these errors, display them, and the process will exit.</p> <p>I hope that made sense, because this is the easy part.</p>"},{"location":"contributing/config-system/#validating-cli-arguments","title":"Validating CLI Arguments","text":"<p>As mentioned earlier, the same system is used for validating both config files and CLI arguments.</p> <p>Totally not judging, but Appium uses <code>argparse</code> for its CLI argument parsing. This package, and others like it, provides an API to define the arguments a command-line Node.js script accepts, and will ultimately return an object representation of the user-supplied arguments.</p> <p>Just as the schema defines what's allowed in a config file, it also defines what's allowed on the command-line.</p>"},{"location":"contributing/config-system/#defining-cli-arguments-via-schema","title":"Defining CLI Arguments via Schema","text":"<p>CLI arguments must be defined before their values can be validated.</p> <p>A JSON schema isn't a natural fit for defining CLI args--it needs some grease to make it work--but it's close enough that we can do so with an adapter and some custom metadata.</p> <p>In <code>lib/cli/parser.js</code>, there's a wrapper around <code>argparse</code>'s <code>ArgumentParser</code>; it's called (wait for it)... <code>ArgParser</code>. The wrapper exists because we're doing some custom things with <code>argparse</code>, but is has nothing to do with the schema directly.</p> <p>An <code>ArgParser</code> instance is created and its <code>parseArgs()</code> method is called with the raw CLI arguments. The definition of the accepted arguments comes from <code>lib/cli/args.js</code> in part--here, all of the arguments not intended for use with the <code>server</code> subcommand are hard-coded (e.g., the <code>driver</code> subcommand and its subcommands). <code>args.js</code> also contains a function <code>getServerArgs()</code>, which in turn calls into <code>toParserArgs</code> in <code>lib/schema/cli-args.js</code>. <code>lib/schema/cli-args.js</code> can be considered the \"adapter\" layer between <code>argparse</code> and the schema.</p> <p><code>toParserArgs</code> uses the <code>flattenSchema</code> function exported by <code>lib/schema/schema.js</code>, which \"squashes\" the schema into a key/value representation. Then, <code>toParserArgs</code> iterates over each key/value pair and \"converts\" it into a suitable <code>ArgumentOption</code> object for final handoff to <code>ArgParser</code>.</p> <p>This adapter (<code>cli-args.js</code>) is where most of the mess is hidden; let's explore this rat's nest a bit further.</p>"},{"location":"contributing/config-system/#cli-schema-incongruities","title":"CLI &amp; Schema Incongruities","text":"<p>The conversion algorithm (see function <code>subSchemaToArgDef</code> in <code>lib/schema/cli-args.js</code>) is mostly just hacks and special cases neatly packed into a function. Things that don't cleanly map from <code>argparse</code> to a JSON schema include, but are not limited to:</p> <ul> <li>A schema cannot natively express \"store the value of <code>--foo=&lt;value&gt;</code> in a property called <code>bar</code>\" in a schema (this corresponds to the <code>ArgumentOption['dest']</code> prop).</li> <li>A schema cannot natively express aliases; e.g., <code>--verbose</code> can also be <code>-v</code></li> <li>A schema <code>enum</code> is not restricted to multiple types, but <code>argparse</code>'s equivalent <code>ArgumentOption['choices']</code> prop is</li> <li>A schema does not know about <code>argparse</code>'s concept of \"actions\" (note that Appium is not currently using custom actions--though it did, and it could again).</li> <li><code>argparse</code> has no native type for <code>email</code>, <code>hostname</code>, <code>ipv4</code>, <code>uri</code> etc., and the schema does</li> <li>Schema validation only validates, it does not perform translation, transformation, or coercion (mostly). <code>argparse</code> allows this.</li> <li>Schemas allow the <code>null</code> type, for whatever reason. Ever pass <code>null</code> on the CLI?</li> <li><code>argparse</code> does not understand anything other than primitives; no objects, arrays, etc., and certainly not arrays of a particular type.</li> </ul> <p>All of the above cases and others are handled by the adapter.</p> <p>Warning</p> <p>Some decisions made in the adapter were arrived at via coin toss. If you are curious about why something is the way it is, it's likely that it had to do something.</p> <p>Let's look more closely at handling types.</p>"},{"location":"contributing/config-system/#argument-types-via-ajv","title":"Argument Types via <code>ajv</code>","text":"<p>While <code>argparse</code> allows consumers, via its API, to define the type of various arguments (e.g., a string, number, boolean flag, etc.), Appium mostly avoids these built-in types. Why is that? Well:</p> <ol> <li>We already know the type of an argument, because we've defined it in a schema.</li> <li><code>ajv</code> provides validation against a schema.</li> <li>A schema allows for greater expression of types, allowed values, etc., than <code>argparse</code> can provide natively.</li> <li>The expressiveness of a schema allows for better error messaging.</li> </ol> <p>To that end, the adapter eschews <code>argparse</code>'s built-in types (see allowed string values of <code>ArgumentOption['type']</code>) and instead abuses the ability to provide a function as a <code>type</code>. The exception is boolean flags, which do not have a <code>type</code>, but rather <code>action: 'store_true'</code>. The world may never know why.</p>"},{"location":"contributing/config-system/#types-as-functions","title":"Types as Functions","text":"<p>When a <code>type</code> is a function, the function performs both validation and coercion (if necessary). So what are these functions?</p> <p>Note: <code>type</code> is omitted (and thus not a function) from the <code>ArgumentOption</code> if the property type is <code>boolean</code>, and is instead provided an <code>action</code> property of <code>store_true</code>. Yes, this is weird. No, I don't know why.</p> <p>Well... it depends upon the schema. But generally speaking, we create a pipeline of functions, each corresponding to a keyword in the schema. Let's take the example of the <code>port</code> argument. In lieu of asking the OS which ports the <code>appium</code>-running user can bind to, this argument is expected to be an integer between 1 and 65535. This turns out to be two functions which we combine into a pipeline:</p> <ol> <li>Convert the value to an integer, if possible. Because every value in <code>process.argv</code> is a string, we must coerce if we want a number.</li> <li>Use <code>ajv</code> to validate the integer against the schema for <code>port</code>. A schema lets us define a range via the <code>minimum</code> and <code>maximum</code> keywords. Read more about how this works in</li> </ol> <p>Much like the config file validation, if errors are detected, Appium nicely tells the end-user and the process exits w/ some help text.</p> <p>For other arguments which are naturally of non-primitive types, things are not so straightforward.</p>"},{"location":"contributing/config-system/#transformers","title":"Transformers","text":"<p>Remember how <code>argparse</code> doesn't understand arrays? What if the most ergonomic way to express a value is, in fact, an array?</p> <p>Well, Appium can't accept an array on the CLI, even though it can accept one in the config file. But Appium can accept a comma-delimited string (a CSV \"line\"). Or a string filepath referring to a file which contains a delimited list. Either way: by the time the value gets out of the argument parser, it should be an array.</p> <p>And as mentioned above, the native facilities of a JSON schema cannot express this. However, it's possible to define a custom keyword which Appium can then detect and handle accordingly. So that's what Appium does.</p> <p>In this case, a custom keyword <code>appiumCliTransformer</code> is registered with <code>ajv</code>. The value of <code>appiumCliTransformer</code> (at the time of this writing) can be <code>csv</code> or <code>json</code>. In the base schema file, <code>appium-config-schema.js</code>, Appium uses <code>appiumCliTransformer: 'csv'</code> if this behavior is desired.</p> <p>Note</p> <p>Any property defined in the schema having type <code>array</code> will automatically uses the <code>csv</code> transformer. Likewise, a property having type <code>object</code> will use the <code>json</code> transformer. It's conceivable that <code>array</code> may want to use the <code>json</code> transformer, but otherwise, the presence of the <code>appiumCliTransformer</code> keyword on an <code>array</code>-or-<code>object</code>-typed property is not stricly necessary.</p> <p>The adapter (remember the adapter?) creates a pipeline function including a special \"CSV transformer\" (transformers are defined in <code>lib/schema/cli-transformers.js</code>), and uses this function as the <code>type</code> property of the <code>ArgumentOption</code> passed into <code>argparse</code>. In this case, the <code>type: 'array'</code> in the schema is ignored.</p> <p>Note</p> <p>The config file doesn't need to perform any complex transformation of values, because it naturally allows Appium to define exactly what it expects. So Appium does no post-processing of config file values.</p> <p>Properties that do not need this special treatment use <code>ajv</code> directly for validation. How this works requires some explanation, so that's next.</p>"},{"location":"contributing/config-system/#validation-of-individual-arguments-via-ajv","title":"Validation of Individual Arguments via <code>ajv</code>","text":"<p>When we think of a JSON schema, we tend to think, \"I have this JSON file and I want to validate it against the schema\". That's valid, and in fact Appium does just that with config files! However, Appium does not do this when validating arguments.</p> <p>Note</p> <p>During implementation, I was tempted to mash all of the arguments together into a config-file-like data structure and then validate it all at once. I think that would have been possible, but since an object full of CLI arguments is a flat key/value structure and the schema is not, this seemed like trouble.</p> <p>Instead, Appium validates a value against a specific property within the schema. To do this, it maintains a mapping between a CLI argument definition and its corresponding property. The mapping itself is a <code>Map</code> with a unique identifier for the argument as the key, and an <code>ArgSpec</code> (<code>lib/schema/arg-spec.js</code>) object as the value.</p> <p>An <code>ArgSpec</code> object stores the following metadata:</p> Property Name Description <code>name</code> Canonical name of the argument, corresponding to the property name in the schema. <code>extType?</code> <code>driver</code> or <code>plugin</code>, if appropriate <code>extName?</code> Extension name, if appropriate <code>ref</code> Computed <code>$id</code> of the property in the schema <code>arg</code> Argument as accepted on CLI, without leading dashes <code>dest</code> Property name in parsed arguments object (as returned by <code>argparse</code>'s <code>parse_args()</code>) <code>defaultValue?</code> Value of the <code>default</code> keyword in schema, if appropriate <p>When a schema is finalized, the <code>Map</code> is populated with <code>ArgSpec</code> objects for all known arguments.</p> <p>So when the adapter is creating the pipeline of functions for the argument's <code>type</code>, it already has an <code>ArgSpec</code> for the argument. It creates a function which calls <code>validate(value, ref)</code> (in <code>lib/schema/schema.js</code>) where <code>value</code> is whatever the user provided, and <code>ref</code> is the <code>ref</code> property of the <code>ArgSpec</code>. The concept is that <code>ajv</code> can validate using any <code>ref</code> it knows about; each property in a schema can be referenced by this <code>ref</code> whether it's defined or not. To help visualize, if a schema is:</p> <pre><code>{\n\"$id\": \"my-schema.json\",\n\"type\": \"object\",\n\"properties\": {\n\"foo\": {\n\"type\": \"number\"\n}\n}\n}\n</code></pre> <p>The <code>ref</code> of <code>foo</code> would be <code>my-schema.json#/properties/foo</code>. Assuming our <code>Ajv</code> instance knows about this <code>my-schema.json</code>, then we can call its <code>getSchema(ref)</code> method (which has a <code>schema</code> property, but is a misnomer nonetheless) to get a validation function; <code>validate(value, ref)</code> in <code>schema.js</code> calls this validation function.</p> <p>Note</p> <p>The schema spec says a schema author can supply an explicit <code>$id</code> keyword to override this; it's unsupported by Appium at this time. If needed, extension authors must carefully use <code>$ref</code> without custom <code>$id</code>s. It's highly unlikely an extension would have a schema so complicated as to need this, however; Appium itself doesn't even use <code>$ref</code> to define its own properties!</p> <p>Next, let's take a look at how Appium loads schemas. This actually happens before any argument validation.</p>"},{"location":"contributing/config-system/#schema-loading","title":"Schema Loading","text":"<p>Let's ignore extensions for a moment, and start with the base schema.</p> <p>When something first imports the <code>lib/schema/schema.js</code> module, an instance of an <code>AppiumSchema</code> is created. This is a singleton, and its methods are exported from the module (all of which are bound to the instance).</p> <p>The constructor does very little; it instantiates an <code>Ajv</code> instance and configures it with Appium's custom keywords and adds support for the <code>format</code> keyword via the ajv-formats module.</p> <p>Otherwise, the <code>AppiumSchema</code> instance does not interact with the <code>Ajv</code> instance until its <code>finalize()</code> method (exported as <code>finalizeSchema()</code>) is called. When this method is called, we're saying \"we are not going to add any more schemas; go ahead and create <code>ArgSpec</code> objects and register schemas with <code>ajv</code>\".</p> <p>When does finalization happen? Well:</p> <ol> <li>When the <code>appium</code> executable begins, it checks for and configures extensions (hand-wave) in <code>APPIUM_HOME</code>.</li> <li>Only then does it start to think about arguments--it instantiates an <code>ArgParser</code>, which (as you'll recall) runs the adapter to convert the schema to arguments.</li> <li>Finalization happens here--when creating the parser. Appium need the schema(s) to be registered with <code>ajv</code> in order to create validation functions for arguments.</li> <li>Thereafter, Appium parses the arguments with the <code>ArgParser</code>.</li> <li>Finally, decides what to do with the returned object.</li> </ol> <p>Without extensions, <code>finalize()</code> still knows about the Appium base schema (<code>appium-config-schema.js</code>), and just registers that. However, step 1. above is doing a lot of work, so let's look at how extensions come into play.</p>"},{"location":"contributing/config-system/#extension-support","title":"Extension Support","text":"<p>One of the design goals of this system is the following:</p> <p>An extension should be able to register custom CLI arguments with the Appium, and a user should be able to use them like any other argument.</p> <p>Previously, Appium 2.0 accepted arguments in this manner (via <code>--driverArgs</code>), but validation was hand-rolled and required extension implementors to use a custom API. It also required the user to awkwardly pass a JSON string as the configuration on the command-line. Further, no contextual help (via <code>--help</code>) existed for these arguments.</p> <p>Now, by providing a schema for its options, a driver or plugin can register CLI arguments and config file schemas with Appium.</p> <p>To register a schema, an extension must provide the <code>appium.schema</code> property in its <code>package.json</code>. The value may be a schema or a path to a schema. If the latter, the schema should be JSON or a CommonJS module (ESM not supported at this time, nor is YAML).</p> <p>For any property in this schema, the property will appear as a CLI argument of the form <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-&lt;property-name&gt;</code>. For example, if the <code>fake</code> driver provides a property <code>foo</code>, the argument will be <code>--driver-fake-foo</code>, and will show in <code>appium server --help</code> like any other CLI argument.</p> <p>The corresponding property in a config file would be <code>server.&lt;extension-type&gt;.&lt;extension-name&gt;.&lt;property-name&gt;</code>, e.g.:</p> <pre><code>{\n\"server\": {\n\"driver\": {\n\"fake\": {\n\"foo\": \"bar\"\n}\n}\n}\n}\n</code></pre> <p>The naming convention described above avoids problems of one extension type having a name conflict with a different extension type.</p> <p>Note</p> <p>While an extension can provide aliases via <code>appiumCliAliases</code>, \"short\" flags are disallowed, since all arguments from extensions are prefixed with <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-</code>. The extension name and argument name will be kebab-cased for the CLI, according to Lodash's rules around kebab-casing.</p> <p>The schema object will look much like Appium's base schema, but it will only have top-level properties (nested properties are currently unsupported). Example:</p> <pre><code>{\n\"title\": \"my rad schema for the cowabunga driver\",\n\"type\": \"object\",\n\"properties\": {\n\"fizz\": {\n\"type\": \"string\",\n\"default\": \"buzz\",\n\"$comment\": \"corresponds to CLI --driver-cowabunga-fizz\"\n}\n}\n}\n</code></pre> <p>As written in a user's config file, this would be the <code>server.driver.cowabunga.fizz</code> property.</p> <p>When extensions are loaded, the <code>schema</code> property is verified and the schema is registered with the <code>AppiumSchema</code> (it is not registered with <code>Ajv</code> until <code>finalize()</code> is called).</p> <p>During finalization, each registered schema is added to the <code>Ajv</code> instance. The schema is assigned an <code>$id</code> based on the extension type and name (which overrides whatever the extension provides, if anything). Schemas are also forced to disallowed unknown arguments via the <code>additionalProperties: false</code> keyword.</p> <p>Behind the scenes, the base schema has <code>driver</code> and <code>plugin</code> properties which are objects. When finalized, a property is added to each--corresponding to an extension name--and the value of this property is a reference to the <code>$id</code> of a property in the extension schema. For example, the <code>server.driver</code> property will look like this:</p> <pre><code>{\n\"driver\": {\n\"cowabunga\": {\n\"$ref\": \"driver-cowabunga.json\"\n}\n}\n}\n</code></pre> <p>This is why we call it the \"base\" schema--it is mutated when extensions provide schemas. The extension schemas are kept separately, but the references are added to the schema before it's ultimately added to <code>ajv</code>. This works because an <code>Ajv</code> instance understands references from any schema it knows about to any schema it knows about.</p> <p>Note</p> <p>This makes it impossible to provide a complete static schema for Appium and the installed extensions (as of Nov 5 2021). A static <code>.json</code> schema is generated from the base (via a Gulp task), but it does not contain any extension schemas. The static schema also has uses beyond Appium; e.g., IDEs can provide contextual error-checking of config files this way. Let's solve this?</p> <p>Just like how we look up the reference ID of a particular argument in the base schema, validation of arguments from extensions happens the exact same way. If the <code>cowabunga</code> driver has the schema ID <code>driver-cowabunga.json</code>, then the <code>fizz</code> property can be referenced from any schema registered with <code>ajv</code> via <code>driver-cowabunga.json#/properties/fizz</code>. \"Base\" schema arguments begin with <code>appium.json#properties/</code> instead.</p>"},{"location":"contributing/config-system/#development-environment-support","title":"Development Environment Support","text":"<p>During the flow of development, a couple extra tasks have been automated to maintain the base schema:</p> <ul> <li>As a post-transpilation step, a <code>lib/appium-config.schema.json</code> gets generated from</li> <li><code>lib/schema/appium-config-schema.js</code> (in addition to its CJS counterpart generated by Babel).</li> <li>This file is under version control. It ends up being copied to</li> <li><code>build/lib/appium-config.schema.json</code> in this step. A pre-commit hook (see</li> <li><code>scripts/generate-schema-declarations.js</code> in the root monorepo) generates</li> <li>a <code>types/appium-config-schema.d.ts</code> from the above JSON file. The types in <code>types/types.d.ts</code></li> <li>depend upon this file. This file is under version control.</li> </ul>"},{"location":"contributing/config-system/#custom-keyword-reference","title":"Custom Keyword Reference","text":"<p>Keywords are defined in <code>lib/schema/keywords.js</code>.</p> <ul> <li><code>appiumCliAliases</code>: allows a schema to express aliases (e.g., a CLI argument can be <code>--verbose</code> or <code>-v</code>). This is an array of strings. Strings shorter than three (3) characters will begin with a single dash (<code>-</code>) instead of a double-dash (<code>--</code>). Note that any argument provided by an extension will begin with a double-dash, because these are required to have the <code>--&lt;extension-type&gt;-&lt;extension-name&gt;-</code> prefix.</li> <li><code>appiumCliDest</code>: allows a schema to specify a custom property name in the post-<code>argprase</code> arguments objects. If not set, this becomes a camelCased string.</li> <li><code>appiumCliDescription</code>: allows a schema to override the description of the argument when displayed on the command-line. This is useful paired with <code>appiumCliTransformer</code> (or <code>array</code>/<code>object</code>-typed properties), since there's a substantial difference between what a CLI-using user can provide vs. what a config-file-using user can provide.</li> <li><code>appiumCliTransformer</code>: currently a choice between <code>csv</code> and <code>json</code>. These are custom functions which post-process a value. They are not used when loading &amp; validating config files, but the idea should be that they result in the same object you'd get if you used whatever the config file wanted (e.g., an array of strings). <code>csv</code> is for comma-delimited strings and CSV files; <code>json</code> is for raw JSON strings and <code>.json</code> files.</li> <li><code>appiumCliIgnore</code>: If <code>true</code>, do not support this property on the CLI.</li> <li><code>appiumDeprecated</code>: If <code>true</code>, the property is considered \"deprecated\", and will be displayed as such to the user (e.g., in the <code>--help</code> output). Note the JSON Schema draft-2019-09 introduces a new keyword <code>deprecated</code> which we should use instead if upgrading to this metaschema. When doing so, <code>appiumDeprecated</code> should itself be marked as <code>deprecated</code>.</li> </ul>"},{"location":"ecosystem/","title":"The Appium Ecosystem","text":"<p>Appium has an ecosystem of related software and tools. In this guide we'll discuss important officially-supported and community-supported projects.</p>"},{"location":"ecosystem/#appium-inspector","title":"Appium Inspector","text":"<p>Appium has a graphical client which can be used to manually perform Appium commands, inspect app hierarchies, view screenshots, and more. It's very useful for Appium test development. You can learn more about the inspector here: Appium Inspector</p>"},{"location":"ecosystem/#drivers","title":"Drivers","text":"<p>You can't use Appium without at least one driver! Here are the drivers that are currently maintained by the Appium team. Click on the link for each driver to see the specific installation instructions and documentation for that driver.</p> <p>To learn more about what drivers are and how they work, check out the Driver Intro</p> Driver Installation Key Platform(s) Mode(s) Chromium <code>chromium</code> macOS, Windows, Linux Web Espresso <code>espresso</code> Android Native Gecko <code>gecko</code> macOS, Windows, Linux, Android Web Mac2 <code>mac2</code> macOS Native Safari <code>safari</code> macOS, iOS Web UiAutomator2 <code>uiautomator2</code> Android Native, Hybrid, Web XCUITest <code>xcuitest</code> iOS Native, Hybrid, Web <p>And of course, you can install any other drivers you find out there by using the Appium driver CLI.</p>"},{"location":"ecosystem/#other-drivers","title":"Other drivers","text":"<p>These drivers are not maintained by the Appium team and can be used to target additional platforms.</p> Driver Installation Key Platform(s) Mode(s) Supported By Flutter <code>--source=npm appium-flutter-driver</code> iOS, Android Native Community LG WebOS <code>--source=npm appium-lg-webos-driver</code> LG TV Web HeadSpin Linux <code>--source=npm @stdspa/appium-linux-driver</code> Linux Native <code>@fantonglang</code> Roku <code>--source=npm @headspinio/appium-roku-driver</code> Roku Native HeadSpin Tizen <code>--source=npm appium-tizen-driver</code> Android Native Community / Samsung TizenTV <code>--source=npm appium-tizen-tv-driver</code> Samsung TV Web HeadSpin Windows <code>--source=npm appium-windows-driver</code> Windows Native Community / Microsoft Youi <code>--source=npm appium-youiengine-driver</code> iOS, Android, macOS, Linux, tvOS Native Community / You.i <p>Note</p> <p>If you maintain an Appium driver that you would like to be listed in the Appium docs, feel free to make a PR to add it to this section with a link to the driver documentation.</p>"},{"location":"ecosystem/#clients","title":"Clients","text":"<p>You need clients to write and run Appium scripts. To learn more about clients, read our Client Intro. Here is the list of known Appium clients. You'll want to become very familiar with your client documentation (as well as the documentation of any Selenium client that the Appium client depends on) since that is what you will use as your primary interface to Appium.</p> Client Language Supported By Appium Java client Java Appium Team Appium Python client Python Appium Team Appium Ruby Core client (Recommended)Appium Ruby client Ruby Appium Team WebDriverIONightwatch Node.js Community Appium .NET client C# Appium Team* RobotFramework DSL Community <p>In general, any W3C WebDriver spec-compatible client will also integrate well with Appium, though some Appium-specific commands may not be implemented in other clients.</p>"},{"location":"ecosystem/#plugins","title":"Plugins","text":"<p>Appium Plugins offer ways to extend or modify Appium's behaviour. This is the list of plugins that are currently maintained by the Appium Team:</p> Plugin Installation Key Description Supported By Execute Driver <code>execute-driver</code> Run entire batches of commands in a single call to the Appium server Appium Team Images <code>images</code> Image matching and comparison features Appium Team Relaxed Caps <code>relaxed-caps</code> Relax Appium's requirement for vendor prefixes on capabilities Appium Team Universal XML <code>universal-xml</code> Instead of the standard XML format for iOS and Android, use an XML definition that is the same across both platforms Appium Team"},{"location":"ecosystem/#other-plugins","title":"Other plugins","text":"Plugin Installation Key Description Supported By AltUnity <code>--source=npm appium-altunity-plugin</code> Target Unity games and apps for automation with a new context, via the AltUnityTester framework HeadSpin Device Farm <code>--source=npm appium-device-farm</code> Manage and create driver session on connected android devices and iOS Simulators. <code>@AppiumTestDistribution</code> OCR <code>--source=npm appium-ocr-plugin</code> Find elements via OCR text <code>@jlipps</code> Reporter <code>--source=npm appium-reporter-plugin</code> Generates standalone consolidated html report with screenshots. Reports can be fetched from appium server, without worrying about heavy lifting such as screenshot capturing, report generation etc. <code>@AppiumTestDistribution</code> <p>Note</p> <p>If you maintain an Appium plugin that you would like to be listed in the Appium docs, feel free to make a PR to add it to this section with a link to the documentation for the plugin.</p>"},{"location":"ecosystem/#helper-tools","title":"Helper tools","text":"<p>The following tools might also be useful for Appium users:</p> Name Description Supported By appium-installer Help set up an Appium environment for Android and iOS <code>@AppiumTestDistribution</code>"},{"location":"ecosystem/build-docs/","title":"Building Docs for Appium Extensions","text":"<p>Once you've built a driver or built a plugin for Appium, you will hopefully want to document how that extension works for your users. The most basic way of doing this is to write up a quick <code>README.md</code> and keep it in the root of your project's repository. However, this can involve a lot of duplication of effort, especially when documenting things like Appium commands.</p> <p>Let's say your driver implements ~25 of the standard WebDriver protocol commands. You could write up a description of these commands, how they map to the protocol, what parameters they take, and what behaviour will result on your particular platform. But this information is already more or less stored in your code, as the command implementation (and any docstrings or comments). Having this information in two places creates an opportunity for the docs to get out of sync with the reality of the code. Wouldn't it be nice to generate command reference documentation straight from the code?</p> <p>Another problem with the basic single file <code>README.md</code> approach is that many extensions might want a whole set of documents including longer prose guides (like this one). It might be nice to have code examples where you can toggle between different programming languages. It might be nice to be able to add a project-specific logo. And so on.</p> <p>The Appium project has built tools to do all these things, and we've packaged up these tools so our ecosystem developers building drivers and plugins can also use them. The best way to get going with these tools is probably to look at an existing Appium driver repo to see how it's done, for example the XCUITest driver repo. But this guide will outline the basic approach.</p>"},{"location":"ecosystem/build-docs/#conceptual-architecture","title":"Conceptual architecture","text":"<p>Appium settled on MkDocs as a Markdown-based documentation site generator. It uses a Python toolchain (and not Node.js), but it turned out to be the best option for our purposes. You can adjust this, but by default Appium's utilities also assume that you'll be using the mkdocs-material theme/extension for MkDocs.</p> <p>From here, building a basic docs site is as easy as collecting your Markdown files together and creating a sort of manifest file defining how you want them to be organized.</p> <p>The other main piece is automatic documentation generation from your code files. Appium maintains a plugin for TypeDoc. This plugin is incorporated into our doc utility. When you give it an entrypoint for you driver or plugin, it will scan and parse all your code files looking for Appium command implementations. A set of Markdown reference files will be generated for these commands, which will then be included in your docs site.</p> <p>Note: Implementing an extension in TypeScript is not a requirement for generating documentation, but for automated doc generation to work, you will need to apply TypeScript-supported JSDoc-style docstrings to your JS codebase.  See \"JS Projects Utilizing TypeScript\" for more information.</p> <p>In order to make different versions of your docs available (one for each minor release of your extension, typically), we also bundle Mike.</p>"},{"location":"ecosystem/build-docs/#prerequisites","title":"Prerequisites","text":"<p>To take advantage of Appium's documentation utilities, you'll need to install:</p> <ul> <li>Python v3+</li> <li>pip (this may be installed automatically with Python)</li> <li> <p>The <code>@appium/docutils</code> package:</p> <pre><code>npm install --save-dev @appium/docutils\n</code></pre> </li> </ul>"},{"location":"ecosystem/build-docs/#initializing-an-extension-for-building-docs","title":"Initializing an Extension for Building Docs","text":"<p>To prepare your extension for generating documentation, run the following command:</p> <pre><code>npx appium-docs init --entry-point &lt;my-entry-point.js&gt;\n</code></pre> <p>...where <code>&lt;my-entry-point.js&gt;</code> is the source entry point to your extension. If you are not transpiling your code via TypeScript, Babel, etc., this is typically the same as the value of the <code>main</code> property in <code>package.json</code>.  If you are transpiling, this is typically different.  For example, your <code>main</code> property may be <code>dist/index.js</code>, but your source entry point is <code>src/index.ts</code>.</p> <p>This will:</p> <ol> <li>Create a <code>tsconfig.json</code> if one does not already exist. This is necessary even if your extension is not written in TypeScript.</li> <li>Create a <code>typedoc.json</code> with the necessary configuration for TypeDoc.</li> <li>Create a <code>mkdocs.yml</code> with the necessary configuration for MkDocs.</li> <li>Modify your <code>package.json</code> to add a <code>typedoc.entryPoint</code> property with a value of your entry point (as specified above).</li> </ol>"},{"location":"ecosystem/build-docs/#documenting-your-extension","title":"Documenting Your Extension","text":"<p>At this point, you can begin documenting your extension.  You don't need to do this all at once, but you should make the following changes, at minimum.</p>"},{"location":"ecosystem/build-docs/#newmethodmap-and-executemethodmap","title":"<code>newMethodMap</code> and <code>executeMethodMap</code>","text":"<p>The static properties <code>newMethodMap</code> and <code>executeMethodMap</code> may be present on your extension's main class.  If they are not, then you can skip to the next section.  If they are, you will need to make the following changes, depending on your extension's language.</p>"},{"location":"ecosystem/build-docs/#javascript","title":"JavaScript","text":"<pre><code>// note: this is equivalent to the TypeScript example below\nclass MyExtension {\nstatic newMethodMap = /** @type {const} */({\n// ...\n});\nstatic executeMethodMap = /** @type {const} */({\n// ...\n});\n}\n</code></pre>"},{"location":"ecosystem/build-docs/#typescript","title":"TypeScript","text":"<pre><code>class MyExtension {\nstatic newMethodMap = {\n// ...\n} as const;\nstatic executeMethodMap = {\n// ...\n} as const;\n}\n</code></pre>"},{"location":"ecosystem/build-docs/#driver-constraints","title":"Driver Constraints","text":"<p>Note: Plugin authors can skip this section.</p> <p>Your driver may have a property <code>desiredCapConstraints</code>. It should also follow the same pattern as <code>newMethodMap</code> and <code>executeMethodMap</code> above.  For example:</p> <pre><code>class MyExtension {\ndesiredCapConstraints = /** @type {const} */({\nmyCapability: {\npresence: true,\nisString: true\n},\nmyOtherCap: {\nisBoolean: true\n}\n});\n}\n</code></pre> <p>(For extensions written in TypeScript, use <code>as const</code> as before.)</p>"},{"location":"ecosystem/build-docs/#commands","title":"Commands","text":"<p>The documentation for a command, as defined in your extension, comes from multiple places. These sources are then combined as needed into the final output.</p> <p>In Appium, new commands are defined in <code>newMethodMap</code> and execute methods are defined in <code>executeMethodMap</code>.  The value of these properties are used to build your documentation.  In particular, parameter names and optional/required status override whatever method implementation does.  So for example, if your <code>newMethodMap</code> contains:</p> <pre><code>class MyExtension {\nstatic newMethodMap = /** @type {const} */({\n'/session/:sessionId/myThing': {\n/**\n       * Does my thing\n       */\nGET: {command: 'doMyThing', payloadParams: {required: ['a', 'b']}},    }\n})\n}\n</code></pre> <p>...and your <code>doMyThing</code> method implementation looks like this:</p> <pre><code>class MyExtension {\n/**\n   * Doesn't do my thing\n   * @param {any} a - Whatever\n   * @param {number} d - Some number\n   * @param {boolean} c - Some boolean\n   * @returns {Promise&lt;boolean&gt;} Some other boolean\n   */\nasync doMyThing(a, d = 1, c = false) {\n// ...\nreturn true;\n}\n}\n</code></pre> <p>The documentation will show that the <code>doMyThing</code> method accepts required parameters <code>a</code> and <code>b</code>. Even though <code>b</code> is named <code>d</code> in the implementation--and it's optional--it will be ignored. Likewise, since the definition in <code>newMethodMap</code> knows nothing about <code>c</code>, it too is ignored.</p> <p>In addition, the description from the docstring in <code>newMethodMap</code> overrides the description in the method implementation; it will describe the command <code>doMyThing</code> as \"Does my thing\".</p> <p>The <code>@param</code> tags and <code>@returns</code> tag from the method's docstring provide information about the expected and returned types, as well as a description of each. This is not expressible via <code>newMethodMap</code> and <code>executeMethodMap</code> alone; it provides more information for your extension's users.</p> <p>Note for TypeScript users: while the types will already be present, providing <code>@param</code> and <code>@returns</code> tags is still useful for providing descriptions.</p> <p>All commands must be <code>async</code>, so they will return <code>Promise&lt;T&gt;</code> where type <code>T</code> is the type of whatever the <code>Promise</code> fulfills with.  In the generated documentation, the <code>Promise</code> is ignored, and only <code>T</code> is reported.  So for <code>doMyThing</code>, the return type of the command, as output in the documentation, will be <code>boolean</code>.  </p> <p>This is because while extensions must be written in JavaScript, we're documenting an API which can be called from any language; that language likely won't have a concept of a <code>Promise</code>.  Likewise, <code>undefined</code> or <code>void</code> types will be output as <code>null</code> (since that is a concept that translates well to multiple languages).</p>"},{"location":"ecosystem/build-docs/#optional-readmemd","title":"Optional: <code>README.md</code>","text":"<p>If you have a <code>README.md</code>, it will be pulled in to the generated docs site automatically.  This behavior can be disabled by adding the following to <code>typedoc.json</code>:</p> <pre><code>{\n\"readme\": \"none\"\n}\n</code></pre>"},{"location":"ecosystem/build-docs/#next-steps","title":"Next Steps","text":"<p>Appium provides type definitions for extension authors; these are available via Appium itself and the <code>@appium/types</code> package.</p> <p>Of note, drivers should both extend <code>BaseDriver</code> and implement the <code>ExternalDriver</code> interface exported by <code>@appium/types</code>.  This will help ensure that your driver's implementation is correct and usable by different clients.</p> <p>You're encouraged to look at the official test/example extensions, <code>@appium/fake-driver</code> and <code>@appium/fake-plugin</code> for canonical examples of how to use these types.  </p>"},{"location":"ecosystem/build-docs/#resources","title":"Resources","text":"<p>How to type more complex return values or parameters is beyond the scope of this document. For more information, see:</p> <ul> <li>For extensions written in JS, the TypeScript documentation</li> <li>For tags in addition to what TS natively recognizes, see the TypeDoc documentation</li> </ul> <p>Likewise, refer to the MkDocs documentation for further information on how to customize your MkDocs output.</p>"},{"location":"ecosystem/build-docs/#usage","title":"Usage","text":"<p>At this point, you can use the <code>appium-docs</code> CLI tool. Run this tool with no arguments to get the full help output and see all the available subcommands and parameters. Here are a few usage examples:</p> <pre><code># Generate reference and build the mkdocs site into the site dir\nnpx appium-docs build\n\n# Same as build, but host the docs on a local dev server\n# and watch for changes and rebuild when files change\nnpx appium-docs build --serve\n\n# Build the docs and deploy them with mike versioning to the docs-site branch\n# using the included commit message and rebase strategy on the branch.\n# This is particularly useful for pushing content to a GitHub pages branch!\nnpx appium-docs build \\\n--deploy \\\n-b docs-site \\\n-m 'docs: auto-build docs for appium-xcuitest-driver@%s' \\\n--rebase\n</code></pre>"},{"location":"ecosystem/build-drivers/","title":"Building Appium Drivers","text":"<p>Appium wants to make it easy for anyone to develop their own automation drivers as part of the Appium ecosystem. This guide will explain what's involved and how you can accomplish various driver development tasks using the tools Appium provides. This guide assumes you (1) are a competent user of Appium, (2) are a competent Node.js developer, and (3) that you have read and understood the Driver Intro.</p> <p>If that describes you, great! This guide will get you started.</p>"},{"location":"ecosystem/build-drivers/#before-you-create-your-driver","title":"Before you create your driver","text":"<p>Before you get to work implementing your driver, it's important to have a few things sorted out. For example, you need to know what your driver will do. Which platform is it trying to expose WebDriver automation for?</p> <p>Appium doesn't magically give you the power to automate any platform. All it does is give you a set of convenient tools for implementing the WebDriver Protocol. So if you want to create, for example, a driver for a new app platform, you'll need to know how to automate apps on that platform without Appium.</p> <p>This usually means that you need to be very familiar with app development for a given platform. And it usually means that you will rely on tools or SDKs provided by the platform vendor.</p> <p>Basically, if you can't answer the question \"how would I launch, remotely trigger behaviours, and read state from an app on this platform?\" then you're not quite ready to write an Appium driver. Make sure you do the research to feel comfortable that there is a path forward. Once there is, coding it up and making it available as an Appium driver should be the easy part!</p>"},{"location":"ecosystem/build-drivers/#other-drivers-to-reference","title":"Other drivers to reference","text":"<p>One of the greatest things about building an Appium driver is that there are already a number of open source Appium drivers which you can look at for reference. There is a fake-driver sample driver which does basically nothing other than showcase some of the things described in this guide.</p> <p>And of course, all of Appium's official drivers are open source and available in repositories at the project's GitHub organization. So if you ever find yourself asking, \"how does a driver do X?\", read the code for these drivers! Also don't be afraid to ask questions of the Appium developers if you get stuck; we're always happy to help make sure the driver development experience is a good one!</p>"},{"location":"ecosystem/build-drivers/#basic-requirements-for-appium-drivers","title":"Basic requirements for Appium drivers","text":"<p>These are the things your driver must do (or be), if you want it to be a valid Appium driver.</p>"},{"location":"ecosystem/build-drivers/#nodejs-package-with-appium-extension-metadata","title":"Node.js package with Appium extension metadata","text":"<p>All Appium drivers are fundamentally Node.js packages, and therefore must have a valid <code>package.json</code>. Your driver is not limited to Node.js, but it must provide an adapter written in Node.js so it can be loaded by Appium.</p> <p>Your <code>package.json</code> must include <code>appium</code> as a <code>peerDependency</code>. The requirements for the dependency versions should be as loose as possible (unless you happen to know your driver will only work with certain versions of Appium). For Appium 2.0, for example, this would look something like <code>^2.0.0</code>, declaring that your driver works with any version of Appium that starts with 2.x.</p> <p>Your <code>package.json</code> must contain an <code>appium</code> field, like this (we call this the 'Appium extension metadata'):</p> <pre><code>```json\n{\n  ...,\n  \"appium\": {\n    \"driverName\": \"fake\",\n    \"automationName\": \"Fake\",\n    \"platformNames\": [\n      \"Fake\"\n    ],\n    \"mainClass\": \"FakeDriver\"\n  },\n  ...\n}\n```\n</code></pre> <p>The required subfields are:</p> <ul> <li><code>driverName</code>: this should be a short name for your driver.</li> <li><code>automationName</code>: this should be the string users will use for their <code>appium:automationName</code>   capability to tell Appium to use your driver.</li> <li><code>platformNames</code>: this is an array of one or more platform names considered valid for your driver.   When a user sends in the <code>platformName</code> capability to start a session, it must be included in   this list for your driver to handle the session. Known platform name strings include: <code>iOS</code>,   <code>tvOS</code>, <code>macOS</code>, <code>Windows</code>, <code>Android</code>.</li> <li><code>mainClass</code>: this is a named export (in CommonJS style) from your <code>main</code> field. It must be a   class which extends Appium's <code>BaseDriver</code> (see below).</li> </ul>"},{"location":"ecosystem/build-drivers/#extend-appiums-basedriver-class","title":"Extend Appium's <code>BaseDriver</code> class","text":"<p>Ultimately, your driver is much easier to write because most of the hard work of implementing the WebDriver protocol and handling certain common logic is taken care of already by Appium. This is all encoded up as a class which Appium exports for you to use, called <code>BaseDriver</code>. It is exported from <code>appium/driver</code>, so you can use one of these styles to import it and create your own class that extends it:</p> <pre><code>import {BaseDriver} from 'appium/driver';\n// or: const {BaseDriver} = require('appium/driver');\nexport class MyDriver extends BaseDriver {\n}\n</code></pre>"},{"location":"ecosystem/build-drivers/#make-your-driver-available","title":"Make your driver available","text":"<p>That's basically it! With a Node.js package exporting a driver class and with correct Appium extension metadata, you've got yourself an Appium driver! Now it doesn't do anything, but you can load it up in Appium, start and stop sessions with it, etc...</p> <p>To make it available to users, you could publish it via NPM. When you do so, your driver will be installable via the Appium CLI:</p> <pre><code>appium driver install --source=npm &lt;driver-package-on-npm&gt;\n</code></pre> <p>It's a good idea to test your driver first, of course. One way to see how it works within Appium is to install it locally first:</p> <pre><code>appium driver install --source=local /path/to/your/driver\n</code></pre>"},{"location":"ecosystem/build-drivers/#developing-your-driver","title":"Developing your driver","text":"<p>How you develop your driver is up to you. It is convenient, however, to run it from within Appium without having to do lots of publishing and installing. The most straightforward way to do this is to include the most recent version of Appium as a <code>devDependency</code>, and then also your own driver, like this:</p> <pre><code>{\n\"devDependencies\": {\n...,\n\"appium\": \"^2.0.0\",\n\"your-driver\": \"file:.\",\n...\n}\n}\n</code></pre> <p>Now, you can run Appium locally (<code>npm exec appium</code> or <code>npx appium</code>), and because your driver is listed as a dependency alongside it, it will be automatically \"installed\" and available. You can design your e2e tests this way, or if you're writing them in Node.js, you can simply import Appium's start server methods to handle starting and stopping the Appium server in Node. (TODO: reference an implementation of this in one of the open source drivers when ready).</p> <p>Another way to do local development with an existing Appium server install is to simply install your driver locally:</p> <pre><code>appium driver install --source=local /path/to/your/driver/dev/dir\n</code></pre>"},{"location":"ecosystem/build-drivers/#refreshing-your-driver-during-development","title":"Refreshing your driver during development","text":"<p>When the Appium server starts, it loads your driver into memory. Changes to your driver code will not take effect until the next time the Appium server starts. Simply starting a new session is not sufficient to cause your driver's code to be reloaded.</p> <p>However, you can set the <code>APPIUM_RELOAD_EXTENSIONS</code> environment variable to <code>1</code> to request that Appium clear its module cache and reload extensions whenever a new session is requested. This may obviate the need to restart the server when you make code changes to your driver.</p>"},{"location":"ecosystem/build-drivers/#standard-driver-implementation-ideas","title":"Standard driver implementation ideas","text":"<p>These are things you will probably find yourself wanting to do when creating a driver.</p>"},{"location":"ecosystem/build-drivers/#set-up-state-in-a-constructor","title":"Set up state in a constructor","text":"<p>If you define your own constructor, you'll need to call <code>super</code> to make sure all the standard state is set up correctly:</p> <pre><code>constructor(...args) {\nsuper(...args);\n// now do your own thing\n}\n</code></pre> <p>The <code>args</code> parameter here is the object containing all the CLI args used to start the Appium server.</p>"},{"location":"ecosystem/build-drivers/#define-and-validate-accepted-capabilities","title":"Define and validate accepted capabilities","text":"<p>You can define your own capabilities and basic validation for them. Users will always be able to send in capabilities that you don't define, but if they send in capabilities you have explicitly defined, then Appium will validate that they are of the correct type (and will check for the presence of required capabilities).</p> <p>If you want to turn capability validation off entirely, set <code>this.shouldValidateCaps</code> to <code>false</code> in your constructor.</p> <p>To give Appium your validation constraints, set <code>this.desiredCapConstraints</code> to a validation object in your constructor. Validation objects can be somewhat complex. Here's an example from the UiAutomator2 driver:</p> <pre><code>{\napp: {\npresence: true,\nisString: true\n},\nautomationName: {\nisString: true\n},\nbrowserName: {\nisString: true\n},\nlaunchTimeout: {\nisNumber: true\n},\n}\n</code></pre>"},{"location":"ecosystem/build-drivers/#start-a-session-and-read-capabilities","title":"Start a session and read capabilities","text":"<p>Appium's <code>BaseDriver</code> already implements the <code>createSession</code> command, so you don't have to. However it's very common to need to perform your own startup actions (launching an app, running some platform code, or doing different things based on capabilities you have defined for your driver). So you'll probably end up overriding <code>createSession</code>. You can do so by defining the method in your driver:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, otherDriverData) {\nconst [sessionId, caps] = super.createSession(w3cCaps);\n// do your own stuff here\nreturn [sessionId, caps];\n}\n</code></pre> <p>For legacy reasons, your function will receive old-style JSON Wire Protocol desired and required caps as the first two arguments. Given that the old protocol isn't supported anymore and clients have all been updated, you can instead only rely on the <code>w3cCaps</code> parameter. (For a discussion about what <code>otherDriverData</code> is about, see the section below on concurrent drivers).</p> <p>You'll want to make sure to call <code>super.createSession</code> in order to get the session ID as well as the processed capabilities (note that capabilities are also set on <code>this.caps</code>; modifying <code>caps</code> locally here would have no effect other than changing what the user sees in the create session response).</p> <p>So that's it! You can fill out the middle section with whatever startup logic your driver requires.</p>"},{"location":"ecosystem/build-drivers/#end-a-session","title":"End a session","text":"<p>If your driver requires any cleanup or shutdown logic, it's best to do it as part of overriding the implementation of <code>deleteSession</code>:</p> <pre><code>async deleteSession() {\n// do your own cleanup here\n// don't forget to call super!\nawait super.deleteSession();\n}\n</code></pre> <p>It's very important not to throw any errors here if possible so that all parts of session cleanup can succeed!</p>"},{"location":"ecosystem/build-drivers/#access-capabilities-and-cli-args","title":"Access capabilities and CLI args","text":"<p>You'll often want to read parameters the user has set for the session, whether as CLI args or as capabilities. The easiest way to do this is to access <code>this.opts</code>, which is a merge of all options, from the CLI or from capabilities. So for example to access the <code>appium:app</code> capability, you could simply get the value of <code>this.opts.app</code>.</p> <p>If you care about knowing whether something was sent in as a CLI arg or a capability, you can access the <code>this.cliArgs</code> and <code>this.caps</code> objects explicitly.</p> <p>In all cases, the <code>appium:</code> capability prefix will have been stripped away by the time you are accessing values here, for convenience.</p>"},{"location":"ecosystem/build-drivers/#implement-webdriver-commands","title":"Implement WebDriver commands","text":"<p>You handle WebDriver commands by implementing functions in your driver class. Each member of the WebDriver Protocol, plus the various Appium extensions, has a corresponding function that you implement if you want to support that command in your driver. The best way to see which commands Appium supports and which method you need to implement for each command is to look at Appium's routes.js. Each route object in this file tells you the command name as well as the parameters you'd expect to receive for that command.</p> <p>Let's take this block for example: <pre><code>'/session/:sessionId/url': {\nGET: {command: 'getUrl'},\nPOST: {command: 'setUrl', payloadParams: {required: ['url']}},\n}\n</code></pre></p> <p>Here we see that the route <code>/session/:sessionId/url</code> is mapped to two commands, one for a <code>GET</code> request and one for a <code>POST</code> request. If we want to allow our driver to change the \"url\" (or whatever that might mean for our driver), we can therefore implement the <code>setUrl</code> command, knowing it will take the <code>url</code> parameter:</p> <pre><code>async setUrl(url) {\n// your implementation here\n}\n</code></pre> <p>A few notes: - all command methods should be <code>async</code> functions or otherwise return a <code>Promise</code> - you don't need to worry about protocol encoding/decoding. You will get JS objects as params, and   can return JSON-serializable objects in response. Appium will take care of wrapping it up in the   WebDriver protocol response format, turning it into JSON, etc... - all session-based commands receive the <code>sessionId</code> parameter as the last parameter - all element-based commands receive the <code>elementId</code> parameter as the second-to-last parameter - if your driver doesn't implement a command, users can still try to access the command, and will   get a <code>501 Not Yet Implemented</code> response error.</p>"},{"location":"ecosystem/build-drivers/#implement-element-finding","title":"Implement element finding","text":"<p>Element finding is a special command implementation case. You don't actually want to override <code>findElement</code> or <code>findElements</code>, even though those are what are listed in <code>routes.js</code>. Appium does a lot of work for you if instead you implement this function:</p> <pre><code>async findElOrEls(strategy, selector, mult, context) {\n// find your element here\n}\n</code></pre> <p>Here's what gets passed in:</p> <ul> <li><code>strategy</code> - a string, the locator strategy being used</li> <li><code>selector</code> - a string, the selector</li> <li><code>mult</code> - boolean, whether the user has requested one element or all elements matching the   selector</li> <li><code>context</code> - (optional) if defined, will be a W3C Element (i.e., a JS object with the W3C element   identifier as the key and the element ID as the value)</li> </ul> <p>And you need to return one of the following:</p> <ul> <li>a single W3C element (an object as described above)</li> <li>an array of W3C elements</li> </ul> <p>Note that you can import that W3C web element identifier from <code>appium/support</code>:</p> <pre><code>import {util} from 'appium/support';\nconst { W3C_WEB_ELEMENT_IDENTIFIER } = util;\n</code></pre> <p>What you do with elements is up to you! Usually you end up keeping a cache map of IDs to actual element \"objects\" or whatever the equivalent is for your platform.</p>"},{"location":"ecosystem/build-drivers/#define-valid-locator-strategies","title":"Define valid locator strategies","text":"<p>Your driver might only support a subset of the standard WebDriver locator strategies, or it might add its own custom locator strategies. To tell Appium which strategies are considered valid for your driver, create an array of strategies and assign it to <code>this.locatorStrategies</code>:</p> <pre><code>this.locatorStrategies = ['xpath', 'custom-strategy'];\n</code></pre> <p>Appium will throw an error if the user attempts to use any strategies other than the allowed ones, which enables you to keep your element finding code clean and deal with only the strategies you know about.</p> <p>By default, the list of valid strategies is empty, so if your driver isn't simply proxying to another WebDriver endpoint, you'll need to define some. The protocol-standard locator strategies are defined here.</p>"},{"location":"ecosystem/build-drivers/#throw-webdriver-specific-errors","title":"Throw WebDriver-specific errors","text":"<p>The WebDriver spec defines a set of error codes to accompany command responses if an error occurred. Appium has created error classes for each of these codes, so you can throw the appropriate error from inside a command, and it will do the right thing in terms of the protocol response to the user. To get access to these error classes, import them from <code>appium/driver</code>:</p> <pre><code>import {errors} from 'appium/driver';\n\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"ecosystem/build-drivers/#log-messages-to-the-appium-log","title":"Log messages to the Appium log","text":"<p>You can always use <code>console.log</code>, of course, but Appium provides a nice logger for you as <code>this.log</code> (it has <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> methods on it for differing log levels). If you want to create an Appium logger outside of a driver context (say in a script or helper file), you can always construct your own too:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyDriver');\n</code></pre>"},{"location":"ecosystem/build-drivers/#further-possibilities-for-appium-drivers","title":"Further possibilities for Appium drivers","text":"<p>These are things your driver can do to take advantage of extra driver features or do its job more conveniently.</p>"},{"location":"ecosystem/build-drivers/#add-a-schema-for-custom-command-line-arguments","title":"Add a schema for custom command line arguments","text":"<p>You can add custom CLI args if you want your driver to receive data from the command line when the Appium server is started (for example, ports that a server administrator should set that should not be passed in as capabilities.</p> <p>To define CLI arguments (or configuration properties) for the Appium server, your extension must provide a schema. In the <code>appium</code> property of your extension's <code>package.json</code>, add a <code>schema</code> property. This will either a) be a schema itself, or b) be a path to a schema file.</p> <p>The rules for these schemas:</p> <ul> <li>Schemas must conform to JSON Schema Draft-07.</li> <li>If the <code>schema</code> property is a path to a schema file, the file must be in JSON or JS (CommonJS) format.</li> <li>Custom <code>$id</code> values are unsupported. To use <code>$ref</code>, provide a value relative to the schema root, e.g., <code>/properties/foo</code>.</li> <li>Known values of the <code>format</code> keyword are likely supported, but various other keywords may be unsupported. If you find a keyword that is unsupported which you need to use, please ask for support or send a PR!</li> <li>The schema must be of type <code>object</code> (<code>{\"type\": \"object\"}</code>), containing the arguments in a <code>properties</code> keyword. Nested properties are unsupported.</li> </ul> <p>Example:</p> <pre><code>{\n\"type\": \"object\",\n\"properties\": {\n\"test-web-server-port\": {\n\"type\": \"integer\",\n\"minimum\": 1,\n\"maximum\": 65535,\n\"description\": \"The port to use for the test web server\"\n},\n\"test-web-server-host\": {\n\"type\": \"string\",\n\"description\": \"The host to use for the test web server\",\n\"default\": \"sillyhost\"\n}\n}\n}\n</code></pre> <p>The above schema defines two properties which can be set via CLI argument or configuration file. If this extension is a driver and its name is \"horace\", the CLI args would be <code>--driver-horace-test-web-server-port</code> and <code>--driver-horace-test-web-server-host</code>, respectively. Alternatively, a user could provide a configuration file containing:</p> <pre><code>{\n\"server\": {\n\"driver\": {\n\"horace\": {\n\"test-web-server-port\": 1234,\n\"test-web-server-host\": \"localhorse\"\n}\n}\n}\n}\n</code></pre>"},{"location":"ecosystem/build-drivers/#add-driver-scripts","title":"Add driver scripts","text":"<p>Sometimes you might want users of your driver to be able to run scripts outside the context of a session (for example, to run a script that pre-builds aspects of your driver). To support this, you can add a map of script names and JS files to the <code>scripts</code> field within your Appium extension metadata. So let's say you've created a script in your project that lives in a <code>scripts</code> directory in your project, named <code>driver-prebuild.js</code>. Then you could add a <code>scripts</code> field like this:</p> <pre><code>{\n\"scripts\": {\n\"prebuild\": \"./scripts/driver-prebuild.js\"\n}\n}\n</code></pre> <p>Now, assuming your driver is named <code>mydriver</code>, users of your driver can run <code>appium driver run mydriver prebuild</code>, and your script will execute.</p>"},{"location":"ecosystem/build-drivers/#proxy-commands-to-another-webdriver-implementation","title":"Proxy commands to another WebDriver implementation","text":"<p>A very common design architecture for Appium drivers is to have some kind of platform-specific WebDriver implementation that the Appium driver interfaces with. For example, the Appium UiAutomator2 driver interfaces with a special (Java-based) server running on the Android device. In webview mode, it also interfaces with Chromedriver.</p> <p>If you find yourself in this situation, it is extremely easy to tell Appium that your driver is just going to be proxying WebDriver commands straight to another endpoint.</p> <p>First, let Appium know that your driver can proxy by implementing the <code>canProxy</code> method:</p> <pre><code>canProxy() {\nreturn true;\n}\n</code></pre> <p>Next, tell Appium which WebDriver routes it should not attempt to proxy (there often end up being certain routes that you don't want to forward on):</p> <pre><code>getProxyAvoidList() {\nreturn [\n['POST', new RegExp('^/session/[^/]+/appium')]\n];\n}\n</code></pre> <p>The proxy avoidance list should be an array of arrays, where each inner array has an HTTP method as its first member, and a regular expression as its second. If the regular expression matches the route, then the route will not be proxied and instead will be handled by your driver. In this example, we are avoiding proxying all <code>POST</code> routes that have the <code>appium</code> prefix.</p> <p>Next, we have to set up the proxying itself. The way to do this is to use a special class from Appium called <code>JWProxy</code>. (The name means \"JSON Wire Proxy\" and is related to a legacy implementation of the protocol). You'll want to create a <code>JWProxy</code> object using the details required to connect to the remote server:</p> <pre><code>// import {JWProxy} from 'appium/driver';\nconst proxy = new JWProxy({\nserver: 'remote.server',\nport: 1234,\nbase: '/',\n});\nthis.proxyReqRes = proxy.proxyReqRes.bind(proxy);\nthis.proxyCommand = proxy.command.bind(proxy);\n</code></pre> <p>Here we are creating a proxy object and assigning some of its methods to <code>this</code> under the names <code>proxyReqRes</code> and <code>proxyCommand</code>. This is required for Appium to use the proxy, so don't forget this step! The <code>JWProxy</code> has a variety of other options which you can check out in the source code, as well. (TODO: publish options as API docs and link here).</p> <p>Finally, we need a way to tell Appium when the proxy is active. For your driver it might always be active, or it might only be active when in a certain context. You can define the logic as an implementation of <code>proxyActive</code>:</p> <pre><code>proxyActive() {\nreturn true; // or use custom logic\n}\n</code></pre> <p>With those pieces in play, you won't have to reimplement anything that's already implemented by the remote endpoint you're proxying to. Appium will take care of all the proxying for you.</p>"},{"location":"ecosystem/build-drivers/#extend-the-existing-protocol-with-new-commands","title":"Extend the existing protocol with new commands","text":"<p>You may find that the existing commands don't cut it for your driver. If you want to expose behaviours that don't map to any of the existing commands, you can create new commands in one of two ways:</p> <ol> <li>Extending the WebDriver protocol and creating client-side plugins to access the extensions</li> <li>Overloading the Execute Script command by defining Execute    Methods</li> </ol> <p>If you want to follow the first path, you can direct Appium to recognize new methods and add them to its set of allowed HTTP routes and command names. You do this by assigning the <code>newMethodMap</code> static variable in your driver class to an object of the same form as Appium's <code>routes.js</code> object. For example, here is the <code>newMethodMap</code> for the <code>FakeDriver</code> example driver:</p> <pre><code>static newMethodMap = {\n'/session/:sessionId/fakedriver': {\nGET: {command: 'getFakeThing'},\nPOST: {command: 'setFakeThing', payloadParams: {required: ['thing']}},\n},\n'/session/:sessionId/fakedriverargs': {\nGET: {command: 'getFakeDriverArgs'},\n},\n};\n</code></pre> <p>In this example we're adding a few new routes and a total of 3 new commands. For more examples of how to define commands in this way, it's best to have a look through <code>routes.js</code>. Now all you need to do is implement the command handlers in the same way you'd implement any other Appium command.</p> <p>The downside of this way of adding new commands is that people using the standard Appium clients won't have nice client-side functions designed to target these endpoints. So you would need to create and release client-side plugins for each language you want to support (directions or examples can be found at the relevant client docs).</p> <p>An alternative to this way of doing things is to overload a command which all WebDriver clients have access to already: Execute Script. Appium provides some a convenient tool for making this easy. Let's say you are building a driver for stereo system called <code>soundz</code>, and you wanted to create a command for playing a song by name. You could expose this to your users in such a way that they call something like:</p> <pre><code>// webdriverio example. Calling webdriverio's `executeScript` command is what trigger's Appium's\n// Execute Script command handler\ndriver.executeScript('soundz: playSong', [{song: 'Stairway to Heaven', artist: 'Led Zeppelin'}]);\n</code></pre> <p>Then in your driver code you can define the static property <code>executeMethodMap</code> as a mapping of script names to methods on your driver. It has the same basic form as <code>newMethodMap</code>, described above. Once <code>executeMethodMap</code> is defined, you'll also need to implement the Execute Script command handler, which according to Appium's routes mapping is called <code>execute</code>. The implementation can call a single helper function, <code>this.executeMethod</code>, which takes care of looking at the script and arguments the user sent in and routing it to the correct custom handler you've defined. Here's an example:</p> <pre><code>static executeMethodMap = {\n'soundz: playSong', {\ncommand: 'soundzPlaySong',\nparams: {required: ['song', 'artist'], optional: []},\n}\n}\nasync soundzPlaySong(song, artist) {\n// play the song based on song and artist details\n}\nasync execute(script, args) {\nreturn await this.executeMethod(script, args);\n}\n</code></pre> <p>A couple notes about this system: 1. The arguments array sent via the call to Execute Script must contain only zero or one element(s). The    first item in the list is considered to be the parameters object for your method. These parameters    will be parsed, validated, and then applied to your overload method in the order specified in    <code>executeMethodMap</code> (the order specified in the <code>required</code> parameters list, followed by the    <code>optional</code> parameters list). I.e., this framework assumes only a single actual argument sent in via    Execute Script (and this argument should be an object with keys/values representing the    parameters your execute method expects). 1. Appium does not automatically implement <code>execute</code> (the Execute Script handler) for you. You may    wish, for example, to only call the <code>executeMethod</code> helper function when you're not in proxy    mode! 1. The <code>executeMethod</code> helper will reject with an error if a script name doesn't match one of the    script names defined as a command in <code>executeMethodMap</code>, or if there are missing parameters.</p>"},{"location":"ecosystem/build-drivers/#implement-handling-of-appium-settings","title":"Implement handling of Appium settings","text":"<p>Appium users can send parameters to your driver via CLI args as well as via capabilities. But these cannot change during the course of a test, and sometimes users want to adjust parameters mid-test. Appium has a Settings API for this purpose.</p> <p>To support settings in your own driver, first of all define <code>this.settings</code> to be an instance of the appropriate class, in your constructor:</p> <pre><code>// import {DeviceSettings} from 'appium/driver';\nthis.settings = new DeviceSettings();\n</code></pre> <p>Now, you can read user settings any time simply by calling <code>this.settings.getSettings()</code>. This will return a JS object where the settings names are keys and have their corresponding values.</p> <p>If you want to assign some default settings, or run some code on your end whenever settings are updated, you can do both of these things as well.</p> <pre><code>constructor() {\nconst defaults = {setting1: 'value1'};\nthis.settings = new DeviceSettings(defaults, this.onSettingsUpdate.bind(this));\n}\nasync onSettingsUpdate(key, value) {\n// do anything you want here with key and value\n}\n</code></pre>"},{"location":"ecosystem/build-drivers/#make-itself-aware-of-resources-other-concurrent-drivers-are-using","title":"Make itself aware of resources other concurrent drivers are using","text":"<p>Let's say your driver uses up some system resources, like ports. There are a few ways to make sure that multiple simultaneous sessions don't use the same resources:</p> <ol> <li>Have your users specify resource IDs via capabilities (<code>appium:driverPort</code> etc)</li> <li>Just always use free resources (find a new random port for each session)</li> <li>Have each driver express what resources it is using, then examine currently-used resources from    other drivers when a new session begins.</li> </ol> <p>To support this third strategy, you can implement <code>get driverData</code> in your driver to return what sorts of resources your driver is currently using, for example:</p> <pre><code>get driverData() {\nreturn {specialPort: 1234, specialFile: /path/to/file}\n}\n</code></pre> <p>Now, when a new session is started on your driver, the <code>driverData</code> response from any other simultaneously running drivers (of the same type) will also be included, as the last parameter of the <code>createSession</code> method:</p> <pre><code>async createSession(jwpCaps, reqCaps, w3cCaps, driverData)\n</code></pre> <p>You can dig into this <code>driverData</code> array to see what resources other drivers are using to help determine which ones you want to use for this particular session.</p> <p>Warning</p> <p>Be careful here, since <code>driverData</code> is only passed between sessions of a single running Appium server. There's nothing to stop a user from running multiple Appium servers and requesting your driver simultaneously on each of them. In this case, you won't be able to ensure independence of resources via <code>driverData</code>, so you might consider using file-based locking mechanisms or something similar.</p> <p>Warning</p> <p>It's also important to note you will only receive <code>driverData</code> for other instances of your driver. So unrelated drivers also running may still be using some system resources. In general Appium doesn't provide any features for ensuring unrelated drivers don't interfere with one another, so it's up to the drivers to allow users to specify resource locations or addresses to avoid clashes.</p>"},{"location":"ecosystem/build-drivers/#log-events-to-the-appium-event-timeline","title":"Log events to the Appium event timeline","text":"<p>Appium has an Event Timing API which allows users to get timestamps for certain server-side events (like commands, startup milestones, etc...) and display them on a timeline. The feature basically exists to allow introspection of timing for internal events to help with debugging or running analysis on Appium driver internals. You can add your own events to the event log:</p> <pre><code>this.logEvent(name);\n</code></pre> <p>Simply provide a name for the event and it will be added at the current time, and made accessible as part of the event log for users.</p>"},{"location":"ecosystem/build-drivers/#hide-behaviour-behind-security-flags","title":"Hide behaviour behind security flags","text":"<p>Appium has a feature-flag based security model that allows driver authors to hide certain features behind security flags. What this means is that if you have a feature you deem insecure and want to require server admins to opt in to it, you can require that they enable the feature by adding it to the <code>--allow-insecure</code> list or turning off server security entirely.</p> <p>To support the check within your own driver, you can call <code>this.isFeatureEnabled(featureName)</code> to determine whether a feature of the given name has been enabled. Or, if you want to simply short-circuit and throw an error if the feature isn't enabled, you can call <code>this.assertFeatureEnabled(featureName)</code>.</p>"},{"location":"ecosystem/build-drivers/#use-a-temp-dir-for-files","title":"Use a temp dir for files","text":"<p>If you want to use a temporary directory for files your driver creates that are not important to keep around between computer or server restarts, you can simply read from <code>this.opts.tmpDir</code>. This reads the temporary directory location from <code>@appium/support</code>, potentially overridden by a CLI flag. I.e., it's safer than writing to your own temporary directory because the location here plays nicely with possible user configuration. <code>this.opts.tmpDir</code> is a string, the path to the dir.</p>"},{"location":"ecosystem/build-drivers/#deal-with-unexpected-shutdowns-or-crashes","title":"Deal with unexpected shutdowns or crashes","text":"<p>Your driver might run into a situation where it can't continue operating normally. For example, it might detect that some external service has crashed and nothing will work anymore. In this case, it can call <code>this.startUnexpectedShutdown(err)</code> with an error object including any details, and Appium will attempt to gracefully handle any remaining requests before shutting down the session.</p> <p>If you want to perform some of your own cleanup logic when you encounter this condition, you can either do so immediately before calling <code>this.startUnexpectedShutdown</code>, or you can attach a handler to the unexpected shutdown event and run your cleanup logic \"out of band\" so to speak:</p> <pre><code>this.onUnexpectedShutdown(handler)\n</code></pre> <p><code>handler</code> should be a function which receives an error object (representing the reason for the unexpected shutdown).</p>"},{"location":"ecosystem/build-plugins/","title":"Building Appium Plugins","text":"<p>This is a high-level guide for developing Appium plugins, which is not something most Appium users need to know or care about. If you are not familiar with Appium plugins yet from a user perspective, check out the list of plugins to play around with some and get an idea of the sorts of things that plugins can do. Plugins are a powerful system for augmenting Appium's functionality or changing the way Appium works. They can be distributed to other Appium users and can extend Appium's ecosystem in all kinds of interesting ways! (There is also a significant amount of overlap here with developing Appium drivers, so you may also want to check out the building drivers guide for further inspiration.)</p>"},{"location":"ecosystem/build-plugins/#before-you-create-your-plugin","title":"Before you create your plugin","text":"<p>Before creating your plugin, it's good to have a general idea of what you want your plugin to accomplish and whether it will be possible to implement it given the restrictions of the Appium platform. Reading through this guide will help you understand what's possible. In general, Appium's plugin system is extremely powerful and no attempts have been made to artificially limit what's possible with them (which is a main reason that all plugins are opt-in by the system administrator responsible for starting the Appium server---plugins are powerful and should only be used when explicitly trusted!).</p>"},{"location":"ecosystem/build-plugins/#other-plugins-to-reference","title":"Other plugins to reference","text":"<p>There are a wide variety of open source Appium plugins available for perusal. It's definitely recommended to explore the code for some other plugins before embarking on writing your own. The Appium team maintains a set of official plugins in the Appium GitHub repo. Links to other open source plugins can be found in the Plugin list</p>"},{"location":"ecosystem/build-plugins/#basic-requirements-for-plugins","title":"Basic requirements for plugins","text":"<p>These are the things your plugin must do (or be), if you want it to be a valid Appium plugin.</p>"},{"location":"ecosystem/build-plugins/#nodejs-package-with-appium-extension-metadata","title":"Node.js package with Appium extension metadata","text":"<p>All Appium plugins are fundamentally Node.js packages, and therefore must have a valid <code>package.json</code>. Your driver is not limited to Node.js, but it must provide an adapter written in Node.js so it can be loaded by Appium.</p> <p>Your <code>package.json</code> must include <code>appium</code> as a <code>peerDependency</code>. The requirements for the dependency versions should be as loose as possible (unless you happen to know your plugin will only work with certain versions of Appium). For Appium 2.0, for example, this would look something like <code>^2.0.0</code>, declaring that your plugin works with any version of Appium that starts with 2.x.</p> <p>Your <code>package.json</code> must contain an <code>appium</code> field, like this (we call this the 'Appium extension metadata'):</p> <pre><code>```json\n{\n  ...,\n  \"appium\": {\n    \"pluginName\": \"fake\",\n    \"mainClass\": \"FakePlugin\"\n  },\n  ...\n}\n```\n</code></pre> <p>The required subfields are:</p> <ul> <li><code>pluginName</code>: this should be a short name for your plugin.</li> <li><code>mainClass</code>: this is a named export (in CommonJS style) from your <code>main</code> field. It must be a   class which extends Appium's <code>BasePlugin</code> (see below).</li> </ul>"},{"location":"ecosystem/build-plugins/#extend-appiums-baseplugin-class","title":"Extend Appium's <code>BasePlugin</code> class","text":"<p>Ultimately, your plugin is much easier to write because most of the hard work of defining patterns for overriding commands is done for you. This is all encoded up as a class which Appium exports for you to use, called <code>BasePlugin</code>. It is exported from <code>appium/plugin</code>, so you can use one of these styles to import it and create your own class that extends it:</p> <pre><code>import {BasePlugin} from 'appium/plugin';\n// or: const {BasePlugin} = require('appium/plugin');\nexport class MyPlugin extends BasePlugin {\n// class methods here\n}\n</code></pre> <p>Note</p> <p>In all the code samples below, whenever we reference an example method, it is assumed that it is defined within the class, though this is not explicitly written, for the sake of clarity and space.</p>"},{"location":"ecosystem/build-plugins/#make-your-plugin-available","title":"Make your plugin available","text":"<p>That's basically it! With a Node.js package exporting a plugin class and with correct Appium extension metadata, you've got yourself an Appium plugin! Now it doesn't do anything, but you can load it up in Appium, activate it, etc...</p> <p>To make it available to users, you could publish it via NPM. When you do so, your plugin will be installable via the Appium CLI:</p> <pre><code>appium plugin install --source=npm &lt;plugin-package-on-npm&gt;\n</code></pre> <p>It's a good idea to test your plugin first, of course. One way to see how it works within Appium is to install it locally first:</p> <pre><code>appium plugin install --source=local /path/to/your/plugin\n</code></pre> <p>And of course, plugins must be \"activated\" during Appium server start, so make sure you direct your users to do so:</p> <pre><code>appium --use-plugins=plugin-name\n</code></pre>"},{"location":"ecosystem/build-plugins/#developing-your-plugin","title":"Developing your plugin","text":"<p>How you develop your plugin is up to you. It is convenient, however, to run it from within Appium without having to do lots of publishing and installing. The most straightforward way to do this is to include the most recent version of Appium as a <code>devDependency</code> (although its being already included as a <code>peerDependency</code> is sufficient in newer versions of NPM), and then also your own plugin, like this:</p> <pre><code>{\n\"devDependencies\": {\n...,\n\"appium\": \"^2.0.0\",\n\"your-plugin\": \"file:.\",\n...\n}\n}\n</code></pre> <p>Now, you can run Appium locally (<code>npm exec appium</code> or <code>npx appium</code>), and because your plugin is listed as a dependency alongside it, it will be automatically \"installed\" and available. You can design your e2e tests this way, or if you're writing them in Node.js, you can simply import Appium's start server methods to handle starting and stopping the Appium server in Node.</p> <p>Of course, you can always install it locally as described above as well.</p> <p>Anytime you make changes to your plugin code, you'll need to restart the Appium server to make sure it picks up the latest code. As with drivers, you can set the <code>APPIUM_RELOAD_EXTENSIONS</code> environment variable if you wish Appium to try to re-require your plugin module when a new session starts.</p>"},{"location":"ecosystem/build-plugins/#standard-plugin-implementation-ideas","title":"Standard plugin implementation ideas","text":"<p>These are things you will probably find yourself wanting to do when creating a plugin.</p>"},{"location":"ecosystem/build-plugins/#set-up-state-in-a-constructor","title":"Set up state in a constructor","text":"<p>If you define your own constructor, you'll need to call <code>super</code> to make sure all the standard state is set up correctly:</p> <pre><code>constructor(...args) {\nsuper(...args);\n// now do your own thing\n}\n</code></pre> <p>The <code>args</code> parameter here is the object containing all the CLI args used to start the Appium server.</p>"},{"location":"ecosystem/build-plugins/#intercept-and-handle-specific-appium-commands","title":"Intercept and handle specific Appium commands","text":"<p>This is the most normal behavior for Appium plugins -- to modify or replace the execution of one or more commands that would normally be handled by the active driver. To override the default command handling, you need to implement <code>async</code> methods in your class with the same name as the Appium commands to be handled (just exactly how drivers themselves are implemented). Curious what command names there are? They are defined in the Appium base driver's routes.js file, and of course you can add more as defined in the next section.</p> <p>Each command method is sent the following arguments:</p> <ol> <li><code>next</code>: This is a reference to an <code>async</code> function which encapsulates the chain of behaviors which would take place if this plugin were not handling the command. You can choose to call the next behavior in the chain at any point in your logic (by making sure to include <code>await next()</code> somewhere), or not. If you don't, it means the default behavior (or any plugins registered after this one) won't be run.</li> <li><code>driver</code>: This is the object representing the driver handling the current session. You have access to it for any work you need to do, for example calling other driver methods, checking capabilities or settings, etc...</li> <li><code>...args</code>: A spread array with any arguments that have been applied to the command by the user.</li> </ol> <p>For example, if we wanted to override the <code>setUrl</code> command to simply add some extra logging on top, we would implement as follows:</p> <pre><code>async setUrl(next, driver, url) {\nthis.log(`Let's get the page source for some reason before navigating to '${url}'!`);\nawait driver.getPageSource();\nconst result = await next();\nthis.log(`We can also log after the original behaviour`);\nreturn result;\n}\n</code></pre>"},{"location":"ecosystem/build-plugins/#intercept-and-handle-all-appium-commands","title":"Intercept and handle all Appium commands","text":"<p>You might find yourself in a position where you want to handle all commands, in order to inspect payloads to determine whether or not to act in some way. If so, you can implement <code>async handle</code>, and any command that is not handled by one of your named methods will be handled by this method instead. It takes the following parameters (with all the same semantics as above):</p> <ol> <li><code>next</code></li> <li><code>driver</code></li> <li><code>cmdName</code> - string representing the command being run</li> <li><code>...args</code></li> </ol> <p>For example, let's say we want to log timing for all Appium commands as part of a plugin. We could do this by implementing <code>handle</code> in our plugin class as follows:</p> <pre><code>async handle(next, driver, cmdName, ...args) {\nconst start = Date.now();\ntry {\nconst result = await next();\n} finally {\nconst elapsedMs = Date.now() - start;\nthis.log(`Command '${cmdName}' took ${elapsedMs}`);\n}\nreturn result;\n}\n</code></pre>"},{"location":"ecosystem/build-plugins/#work-around-driver-proxies","title":"Work around driver proxies","text":"<p>There is a bit of a gotcha with handling Appium commands. Appium drivers have the ability to turn on a special 'proxy' mode, wherein the Appium server process takes a look at incoming URLs, and decides whether to forward them on to some upstream WebDriver server. It could happen that a command which a plugin wants to handle is designated as a command which is being proxied to an upstream server. In this case, we run into a problem, because the plugin never gets a chance to handle that command! For this reason, plugins can implement a special member function called <code>shouldAvoidProxy</code>, which takes the following parameters:</p> <ol> <li><code>method</code> - string denoting HTTP method (<code>GET</code>, <code>POST</code>, etc...)</li> <li><code>route</code> - string denoting the requested resource, for example <code>/session/8b3d9aa8-a0ca-47b9-9ab7-446e818ec4fc/source</code></li> <li><code>body</code> - optional value of any type representing the WebDriver request body</li> </ol> <p>These parameters define an incoming request. If you want to handle a command in your plugin which would normally be proxied directly through a driver, you could disable or 'avoid' proxying the request, and instead have the request fall into the typical Appium command execution flow (and thereby your own command function). To avoid proxying a request, just return <code>true</code> from <code>shouldAvoidProxy</code>. Some examples of how this method is used are in the Universal XML plugin (where we want to avoid proxying the <code>getPageSource</code> command, or in the Images plugin (where we want to conditionally avoid proxying any command if it looks like it contains an image element).</p>"},{"location":"ecosystem/build-plugins/#throw-webdriver-specific-errors","title":"Throw WebDriver-specific errors","text":"<p>The WebDriver spec defines a set of error codes to accompany command responses if an error occurred. Appium has created error classes for each of these codes, so you can throw the appropriate error from inside a command, and it will do the right thing in terms of the protocol response to the user. To get access to these error classes, import them from <code>appium/driver</code>:</p> <pre><code>import {errors} from 'appium/driver';\nthrow new errors.NoSuchElementError();\n</code></pre>"},{"location":"ecosystem/build-plugins/#log-messages-to-the-appium-log","title":"Log messages to the Appium log","text":"<p>You can always use <code>console.log</code>, of course, but Appium provides a nice logger for you as <code>this.logger</code> (it has <code>.info</code>, <code>.debug</code>, <code>.log</code>, <code>.warn</code>, <code>.error</code> methods on it for differing log levels). If you want to create an Appium logger outside of a plugin context (say in a script or helper file), you can always construct your own too:</p> <pre><code>import {logging} from 'appium/support';\nconst log = logging.getLogger('MyPlugin');\n</code></pre>"},{"location":"ecosystem/build-plugins/#further-possibilities-for-appium-plugins","title":"Further possibilities for Appium plugins","text":"<p>These are things your plugin can do to take advantage of extra plugin features or do its job more conveniently.</p>"},{"location":"ecosystem/build-plugins/#add-a-schema-for-custom-command-line-arguments","title":"Add a schema for custom command line arguments","text":"<p>You can add custom CLI args if you want your plugin to receive data from the command line when the Appium server is started (for example, ports that a server administrator should set that should not be passed in as capabilities).</p> <p>This works largely the same for plugins as it does for drivers, so for more details have a look at the equivalent section in the building drivers doc.</p> <p>The only difference is that to construct the CLI argument name, you prefix it with <code>--plugin-&lt;name&gt;</code>. So for example, if you have a plugin named <code>pluggo</code> and a CLI arg defined with the name <code>electro-port</code>, you can set it when starting Appium via <code>--plugin-pluggo-electro-port</code>.</p> <p>Setting args via a configuration file is also supported, as it is for drivers, but under the <code>plugin</code> field instead. For example:</p> <pre><code>{\n\"server\": {\n\"plugin\": {\n\"pluggo\": {\n\"electro-port\": 1234\n}\n}\n}\n}\n</code></pre>"},{"location":"ecosystem/build-plugins/#add-plugin-scripts","title":"Add plugin scripts","text":"<p>Sometimes you might want users of your plugin to be able to run scripts outside the context of a session (for example, to run a script that pre-builds aspects of your plugin). To support this, you can add a map of script names and JS files to the <code>scripts</code> field within your Appium extension metadata. So let's say you've created a script in your project that lives in a <code>scripts</code> directory in your project, named <code>plugin-prebuild.js</code>. Then you could add a <code>scripts</code> field like this:</p> <pre><code>{\n\"scripts\": {\n\"prebuild\": \"./scripts/plugin-prebuild.js\"\n}\n}\n</code></pre> <p>Now, assuming your plugin is named <code>myplugin</code>, users of your plugin can run <code>appium plugin run myplugin prebuild</code>, and your script will execute.</p>"},{"location":"ecosystem/build-plugins/#add-new-appium-commands","title":"Add new Appium commands","text":"<p>If you want to offer functionality that doesn't map to any of the existing commands supported by drivers, you can create new commands in one of two ways, just as is possible for drivers:</p> <ol> <li>Extending the WebDriver protocol and creating client-side plugins to access the extensions</li> <li>Overloading the Execute Script command by defining Execute    Methods</li> </ol> <p>If you want to follow the first path, you can direct Appium to recognize new methods and add them to its set of allowed HTTP routes and command names. You do this by assigning the <code>newMethodMap</code> static variable in your driver class to an object of the same form as Appium's <code>routes.js</code> object. For example, here is part of the <code>newMethodMap</code> for the <code>FakePlugin</code> example driver:</p> <pre><code>static newMethodMap = {\n'/session/:sessionId/fake_data': {\nGET: {command: 'getFakeSessionData', neverProxy: true},\nPOST: {\ncommand: 'setFakeSessionData',\npayloadParams: {required: ['data']},\nneverProxy: true,\n},\n},\n'/session/:sessionId/fakepluginargs': {\nGET: {command: 'getFakePluginArgs', neverProxy: true},\n},\n};\n</code></pre> <p>Note</p> <p>If you're using TypeScript, static member objects like these should be defined <code>as const</code>.</p> <p>In this example we're adding a few new routes and a total of 3 new commands. For more examples of how to define commands in this way, it's best to have a look through <code>routes.js</code>. Now all you need to do is implement the command handlers in the same way you'd implement any other Appium command.</p> <p>Note also the special <code>neverProxy</code> key for commands; this is generally a good idea to set to <code>true</code> for plugins, since your plugin might be active for a driver that is put into proxy mode but hasn't bothered to decline proxying for these (new and therefore unknown) commands. Setting <code>neverProxy</code> to <code>true</code> here will cause Appium to never proxy these routes and therefore ensure your plugin handles them, even if a driver is in proxy mode.</p> <p>The downside of adding new commands via <code>newMethodMap</code> is that people using the standard Appium clients won't have nice client-side functions designed to target these endpoints. So you would need to create and release client-side plugins for each language you want to support (directions or examples can be found at the relevant client docs).</p> <p>An alternative to this way of doing things is to overload a command which all WebDriver clients have access to already: Execute Script. Make sure to read the section on adding new commands in the Building Drivers guide to understand the way this works in general. The way it works with plugins is only slightly different. Let's look at an example taken from Appium's <code>fake-plugin</code>:</p> <pre><code>static executeMethodMap = {\n'fake: plugMeIn': {\ncommand: 'plugMeIn',\nparams: {required: ['socket']},\n},\n};\nasync plugMeIn(next, driver, socket) {\nreturn `Plugged in to ${socket}`;\n}\nasync execute(next, driver, script, args) {\nreturn await this.executeMethod(next, driver, script, args);\n}\n</code></pre> <p>We have three important components shown here which make this system work, all of which are defined inside the plugin class:</p> <ol> <li>The <code>executeMethodMap</code>, defined in just the same way as for drivers</li> <li>The implementation of the command method as defined in <code>executeMethodMap</code> (in this case,    <code>plugMeIn</code>)</li> <li>The overriding/handling of the <code>execute</code> command. Just like any plugin command handlers, the first two arguments are <code>next</code> and <code>driver</code>, followed by the script name and args. <code>BasePlugin</code> implements a helper method which we can simply call with all of these arguments.</li> </ol> <p>Overriding Execute Methods from drivers works as you'd expect: if your plugin defines an Execute Method with the same name as that of a driver, your command (in this case <code>plugMeIn</code>) will be called first. You can choose to run the driver's original behaviour via <code>next</code> if you want.</p>"},{"location":"ecosystem/build-plugins/#update-the-appium-server-object","title":"Update the Appium server object","text":"<p>You probably don't normally need to update the Appium server object (which is an Express server having already been configured in a variety of ways). But, for example, you could add new Express middleware to the server to support your plugin's requirements. To update the server you must implement the <code>static async updateServer</code> method in your class. This method takes three parameters:</p> <ul> <li><code>expressApp</code>: the Express app object</li> <li><code>httpServer</code>: the Node HTTP server object</li> <li><code>cliArgs</code>: a map of the CLI args used to start the Appium server</li> </ul> <p>You can do whatever you want with them inside the <code>updateServer</code> method. You might want to reference how these objects are created and worked with in the BaseDriver code, so that you know you're not undoing or overriding anything standard and important. But if you insist, you can, with results you'll need to test! Warning: this should be considered an advanced feature and requires knowledge of Express, as well as the care not to do anything that could affect the operation of other parts of the Appium server!</p>"},{"location":"ecosystem/build-plugins/#handle-unexpected-session-shutdown","title":"Handle unexpected session shutdown","text":"<p>When developing a plugin you may want to add some cleanup logic for when a session ends. You would naturally do this by adding a handler for <code>deleteSession</code>. This works in most cases, except when the session does not finish cleanly. Appium sometimes determines that a session has finished unexpectedly, and in these situations, Appium will look for a method called <code>onUnexpectedShutdown</code> in your plugin class, which will be called (passing the current session driver as the first parameter, and the error object representing the cause of the shutdown as the second), giving you an opportunity to take any steps that might be necessary to clean up from the session. For example, keeping in mind that the function is not <code>await</code>ed you could implement something like this:</p> <pre><code>async onUnexpectedShutdown(driver, cause) {\ntry {\n// do some cleanup\n} catch (e) {\n// log any errors; don't allow anything to be thrown as they will be unhandled rejections\n}\n}\n</code></pre>"},{"location":"guides/caching/","title":"Application Bundles Caching Logic","text":"<p>Appium Base driver provides a feature which enables caching of application builds provided, for example, as <code>app</code> capability value or to endpoints similar to the <code>installApp</code> one. This article explains common caching principles, so you could create more performant and efficient test suite execution strategies.</p>"},{"location":"guides/caching/#why-caching-is-necessary","title":"Why Caching Is Necessary","text":"<p>Mobile application bundles could reach hundreds of megabytes is size. This could become a serious performance issue if a test suite is executed, and it is necessary to fetch/extract the same application bundle for each test.</p>"},{"location":"guides/caching/#what-is-cached","title":"What Is Cached","text":"<p>Caching could be applied to application bundles generated by configureApp helper call. Inherited drivers can customize their caching logic by providing own <code>onPostProcess</code> property definition, but the general rule of thumb is that we need to cache locally all application bundles need to be downloaded and/or extracted first before they could be actually installed on the device under test. On iOS, for example, these are .ipa or .zip compressed application bundles or .aab on Android.</p>"},{"location":"guides/caching/#how-remote-application-bundles-are-cached","title":"How Remote Application Bundles Are Cached","text":"<p>In order to validate whether an app bundle downloaded from the given URL could be (re)used from the cache the following steps are applied:</p> <ol> <li>The script is sending <code>HEAD</code> request to the given link in order to only fetch response headers. If this request fails/ times out then no caching is applied.</li> <li>The following header values are being extracted: <code>Last-Modified</code>, <code>Cache-Control</code>. If no <code>Last-Modified</code> header is present or the header value cannot be parsed as a valid datetime then no caching is applied.</li> <li>The script checks if the given URL is already present in the cache. If the app is not cached yet then it gets downloaded and its current header values along with hashsum are added to the cache.</li> <li>If the URL was already in the cache then the script verifies that:</li> <li>the current <code>Last-Modified</code> datetime is not different from the previous one</li> <li>the difference between the current <code>Last-Modified</code> datetime and the cached one is not greater than max-age (if present)</li> <li>the hashsum of the cached file/folder is not changed (e.g. it was not corrupted while sitting in the cache)</li> <li>If all validations above succeed then the cached build is returned, otherwise the currently cached entry gets deleted and a new one is downloaded instead.</li> </ol>"},{"location":"guides/caching/#how-local-application-bundles-are-cached","title":"How Local Application Bundles Are Cached","text":"<p>It only makes sense to cache application bundles if they need some preprocessing before being installed on the device under test. For example, on iOS .ipa bundles must be unzipped, because the system installer only works with .app folders.</p> <ol> <li>The script verifies if the given bundle path is already present in the cache. If the bundle was not in the cache yet then it gets preprocessed and added there.</li> <li>The script validates the hashsum of the bundle and compares it to the previously stored one. If hash sums don't match then the cached item gets deleted and the preprocessing of the bundle repeats.</li> </ol>"},{"location":"guides/caching/#how-the-cache-file-system-is-configured","title":"How The Cache File System Is Configured","text":"<p>The cache where the base driver keeps all application bundles is located in the system temp folder. It is configured on per-process basis, so each test session initialized in scope of the same Appium server process takes advantages of it. It is a LRU Cache with the following limitations:</p> <ul> <li>Max items: 1024</li> <li>Max time to live (TTL) for each entry: 24 hours</li> <li>TTL is refreshed for each entry upon access</li> </ul> <p>Warning</p> <p>Note: The cache root folder is set up for automatic deletion on Appium process termination. This would only work if Appium server is killed with SIGINT or SIGTERM. If SIGKILL is used then no cache cleanup would be performed.</p>"},{"location":"guides/caps/","title":"Capabilities","text":"<p>\"Capabilities\" is the name given to the set of parameters used to start an Appium session. The information in the set is used to describe what sort of \"capabilities\" you want your session to have, for example, a certain mobile operating system or a certain version of a device. When you start your Appium session, your Appium client will include the set of capabilities you've defined as an object in the JSON-formatted body of the request. Capabilities are represented as key-value pairs, with values allowed to be any valid JSON type, including other objects. Appium will then examine the capabilities and make sure that it can satisfy them before proceeding to start the session and return an ID representing the session to your client library.</p> <p>The W3C WebDriver spec's section on Capabilities identifies a small set of 10 standard capabilities, including the following:</p> Capability Name Type Description <code>browserName</code> <code>string</code> The name of the browser to launch and automate <code>browserVersion</code> <code>string</code> The specific version of the browser <code>platformName</code> <code>string</code> The type of platform hosting the browser"},{"location":"guides/caps/#appium-capabilities","title":"Appium capabilities","text":"<p>Appium understands these browser-focused capabilities, but introduces a number of additional capabilities. According to the WebDriver spec, any non-standard \"extension capabilities\" must include a namespace prefix (signifying the vendor introducing the capability), ending in a <code>:</code>. Appium's vendor prefix is <code>appium:</code>, and so any Appium-specific capabilities must include this prefix. Depending on which client you are using, the prefix may be added automatically or in conjunction with certain interfaces, but it is always a good practice to explicitly include it for clarity.</p> <p>Here is a list of all the globally-recognized Appium capabilities. Notes:</p> <ul> <li>Individual drivers and plugins can support other capabilities, so refer to their documentation for lists of extension-specific capability names.</li> <li>Some drivers might not implement support for all of these capabilities</li> <li>A few Appium extension capabilities are required to start any Appium session; these are noted below as \"Required\"</li> </ul> Capability\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Type Required? Description <code>platformName</code> <code>string</code> Required The type of platform hosting the app or browser <code>appium:automationName</code> <code>string</code> Required The name of the Appium driver to use <code>browserName</code> <code>string</code> The name of the browser to launch and automate, if the driver supports web browsers as a special case <code>appium:app</code> <code>string</code> The path to an installable application <code>appium:deviceName</code> <code>string</code> The name of a particular device to automate, e.g., <code>iPhone 14</code> (currently only actually useful for specifying iOS simulators, since in other situations it's typically recommended to use a specific device id via the <code>appium:udid</code> capability). <code>appium:platformVersion</code> <code>string</code> The version of a platform, e.g., for iOS, <code>16.0</code> <code>appium:newCommandTimeout</code> <code>number</code> The number of seconds the Appium server should wait for clients to send commands before deciding that the client has gone away and the session should shut down <code>appium:noReset</code> <code>boolean</code> If true, instruct an Appium driver to avoid its usual reset logic during session start and cleanup (default <code>false</code>) <code>appium:fullReset</code> <code>boolean</code> If true, instruct an Appium driver to augment its usual reset logic with additional steps to ensure maximum environmental reproducibility (default <code>false</code>) <code>appium:eventTimings</code> <code>boolean</code> If true, instruct an Appium driver to collect Event Timings (default <code>false</code>) <code>appium:printPageSourceOnFindFailure</code> <code>boolean</code> If true, collect the page source and print it to the Appium log whenever a request to find an element fails (default <code>false</code>) <p>Some drivers place more complex constraints on capabilities as a group. For example, while the <code>appium:app</code> and <code>browserName</code> capabilities are listed above as optional, if you want to launch a session with a specific app, the XCUITest driver requires that at least one of <code>appium:app</code>, <code>browserName</code>, or <code>appium:bundleId</code> are included in the capabilities (otherwise it will not know what app to install and/or launch and will simply open a session on the home screen). Each driver will document how it interprets these capabilities and any other platform-specific requirements.</p> <p>Note</p> <p>Capabilities are like parameters used when starting a session. After the capabilities are sent and the session is started, they cannot be changed. If a driver supports updating aspects of its behaviour in the course of a session, it will provide a Setting for this purpose instead of, or in addition to, a capability.</p> <p>Each Appium client has its own way of constructing capabilities and starting a session. For examples of doing this in each client library, head to the Ecosystem page and click through to the appropriate client documentation.</p>"},{"location":"guides/caps/#appiumoptions","title":"<code>appium:options</code>","text":"<p>If you use a lot of <code>appium:</code> capabilities in your tests, it can get a little repetitive. You can combine all capabilities as an object value of a single <code>appium:options</code> capability instead, in which case you don't need to use prefixes on the capabilities inside the object. For example:</p> <pre><code>{\n\"platformName\": \"iOS\",\n\"appium:options\": {\n\"automationName\": \"XCUITest\",\n\"platformVersion\": \"16.0\",\n\"app\": \"/path/to/your.app\",\n\"deviceName\": \"iPhone 12\",\n\"noReset\": true\n}\n}\n</code></pre> <p>Note that constructing a capability value which is itself an object differs by language; refer to your client documentation for further examples on how to achieve this.</p> <p>Warning</p> <p>If you include the same capabilities both inside and outside of <code>appium:options</code>, the values inside of <code>appium:options</code> take precedence.</p>"},{"location":"guides/caps/#always-match-and-first-match-capabilities","title":"Always-match and first-match capabilities","text":"<p>The W3C spec allows clients to give the Appium server some flexibility in the kind of session it creates in response to a new session request. This is through the concept of \"always-match\" and \"first-match\" capabilities:</p> <ul> <li>Always-match capabilities consist of a single set of capabilities, every member of which must be satisfied by the server in order for the new session request to proceed.</li> <li>First-match capabilities consist of an array of capability sets. Each set is merged with the always-match capabilities, and the first set that the server knows how to handle will be the set that is used to start the session.</li> </ul> <p>Note</p> <p>Check out the spec itself or a summarized version for a more in-depth description of how capabilities are processed.</p> <p>In practice, use of first-match capabilities is not necessary or recommended for use with Appium. Instead, we recommend that you define the explicit set of capabilities you want the Appium server to handle. These will be encoded as the always-match capabilities, and the array of first-match capabilities will be empty.</p> <p>That being said, Appium does understand always-match and first-match capabilities as defined in the W3C spec, so if you use these features, Appium will work as expected. The process of defining always-match and first-match capabilities is unique to each client library, so refer to the documentation for your client library to see examples of how it works.</p>"},{"location":"guides/caps/#special-notes-for-cloud-providers","title":"Special notes for cloud providers","text":"<p>Warning</p> <p>This section is not intended for end-users of Appium; it is intended for developers building Appium-compatible cloud services.</p> <p>When managing an Appium cloud, your users may wish to target various independent versions of Appium drivers and plugins. It is of course up to each service provider how they wish to implement the discovery, installation, and availability of any official or third party drivers or plugins. But the Appium team makes the following recommendations in terms of the capabilities service providers support, for consistency across the industry. This is a recommendation only, and not a standard, but adopting it will help users to navigate the increased complexity that working with Appium 2.0 in a cloud environment may bring.</p>"},{"location":"guides/caps/#suggested-capabilities","title":"Suggested capabilities","text":"<p>In addition to the standard <code>platformName</code>, <code>appium:deviceName</code>, <code>appium:automationName</code>, and <code>appium:platformVersion</code>, we recommend adopting the capability <code>$cloud:appiumOptions</code>, where the label <code>$cloud</code> is not meant to be interpreted literally but instead should be replaced by your vendor prefix (so for HeadSpin it would be <code>headspin</code>, Sauce Labs it would be <code>sauce</code>, and BrowserStack it would be <code>browserstack</code>, to name just a few examples). The <code>$cloud:appiumOptions</code> capability would itself be a JSON object, with the following internal keys:</p> Capability Used for Example <code>version</code> Designating which version of the Appium server is used to host and manage drivers. If ommitted, behavior left up to the provider, but the recommendation would be to provide the latest official version. <code>2.0.0</code> <code>automationVersion</code> Designating which version of the specified driver should be used. <code>1.55.2</code> <code>automation</code> Designating a custom driver to use (see below for more info). This would override <code>appium:automationName</code> and <code>$cloud:automationVersion</code> <code>{\"name\": \"@org/custom-driver\", \"source\": \"github\", \"package\": \"custom-driver\"}</code> <code>plugins</code> Designating the list of plugins (and potentially versions of plugins) to be activated (see below for more info). <code>[\"images\", \"universal-xml\"]</code>"},{"location":"guides/caps/#basic-example","title":"Basic example","text":"<p>Appium extensions (drivers and plugins) have a set of properties that specify where they can be installed from. Cloud providers are obviously under no obligation to provide support for arbitrarily specified extensions, seeing as these may represent untrusted code running in a managed environment. In the case where arbitrary extensions are not supported, the <code>appium:automationName</code>, <code>$cloud:automationVersion</code>, and <code>$cloud:appiumPlugins</code> capabilities should be sufficient. See the following JSON object representing capabilities for a session:</p> <pre><code>{\n\"platformName\": \"iOS\",\n\"appium:platformVersion\": \"14.4\",\n\"appium:deviceName\": \"iPhone 11\",\n\"appium:app\": \"Some-App.app.zip\",\n\"appium:automationName\": \"XCUITest\",\n\"$cloud:appiumOptions\": {\n\"version\": \"2.0.0\",\n\"automationVersion\": \"3.52.0\",\n\"plugins\": [\"images\"]\n}\n}\n</code></pre> <p>This set of capabilities requests an Appium 2+ server supporting the XCUITest driver at version <code>3.52.0</code>, and the <code>images</code> plugin active. This set is easy for a cloud provider to verify. The cloud provider can obviously do anything it wants in response to these capabilities, including downloading Appium and driver and plugin packages on the fly, or erroring out if the versions requested are not in a supported set, or if the plugin is not supported, etc...</p>"},{"location":"guides/caps/#basic-example-with-appiumoptions","title":"Basic example with <code>appium:options</code>","text":"<p>The previous example still looks a bit disorganized, so of course we also recommend that cloud providers support the <code>appium:options</code> capability as detailed above, which could turn the previous set of capabilities into the following:</p> <pre><code>{\n\"platformName\": \"iOS\",\n\"appium:options\": {\n\"platformVersion\": \"14.4\",\n\"deviceName\": \"iPhone 11\",\n\"app\": \"Some-App.app.zip\",\n\"automationName\": \"XCUITest\"\n},\n\"$cloud:appiumOptions\": {\n\"version\": \"2.0.0\",\n\"automationVersion\": \"3.52.0\",\n\"plugins\": [\"images\"]\n}\n}\n</code></pre>"},{"location":"guides/caps/#extension-objects","title":"Extension objects","text":"<p>Some service providers may wish to dynamically allow access to all of the features of the Appium 2.0 CLI, including downloading arbitrary drivers and plugins. To represent these extensions, we can define special JSON \"extension objects\", with the following keys:</p> <ul> <li><code>name</code>: the name of the extension. This would be an NPM package name (if downloading from NPM), or a git or GitHub spec (if downloading from a git server or GitHub).</li> <li><code>version</code>: the version of the extension, e.g., the NPM package version or Git SHA.</li> <li>(optional) <code>source</code>: a denotation of where the extension can be downloaded from. Recommended to support the following values: <code>appium</code>, <code>npm</code>, <code>git</code>, <code>github</code>. Here, <code>appium</code> means \"Appium's own official list\", and should be the default value if this key is not included.</li> <li>(optional) <code>package</code>: when downloading extensions from git or github, the NPM package name of the extension must also be provided. This is optional for non-git sources.</li> </ul> <p>Since each session is handled by a single driver, the <code>$cloud:appiumOptions</code>/<code>$automation</code> capability could be used with an extension object value to denote this driver, for example:</p> <pre><code>{\n\"$cloud:appiumOptions\": {\n\"automation\": {\n\"name\": \"git+https://some-git-host.com/custom-driver-project.git\",\n\"version\": \"some-git-sha\",\n\"source\": \"git\",\n\"package\": \"driver-npm-package-name\"\n}\n}\n}\n</code></pre> <p>And since sessions can handle multiple plugins, each value in the list of <code>$cloud:appiumPlugins</code> could also be an extension object rather than a string, so that specific versions could be requested:</p> <pre><code>{\n\"$cloud:appiumOptions\": {\n\"plugins\": [{\n\"name\": \"images\",\n\"version\": \"1.1.0\"\n}, {\n\"name\": \"my-github-org/my-custom-plugin\",\n\"version\": \"a83f2e\",\n\"source\": \"github\",\n\"package\": \"custom-plugin\"\n}]\n}\n}\n</code></pre> <p>These serve as illustrative examples for the recommendations here. Of course it is up to the service providers to implement the handling of these capabilities at their front end / load balancer, to perform any error checking, or to actually run any of the <code>appium driver</code> or <code>appium plugin</code> CLI commands that support the end user's request. This section is merely a suggestion as to how service providers might design their user-facing capabilities API in a way which in principle supports all of the capabilities Appium itself would provide to the end user if they were running Appium on their own.</p>"},{"location":"guides/config/","title":"The Appium Config File","text":"<p>Instead of passing arguments on the command line to Appium, you may add them to a special config file. Appium will read values from this config file when it runs. (Please note that CLI arguments have precedence over configuration files; if a value is set in a config file and via CLI argument, the CLI argument is preferred.)</p>"},{"location":"guides/config/#supported-config-file-formats","title":"Supported Config File Formats","text":"<p>You can store your config data in the following kinds of files:</p> <ul> <li>JSON</li> <li>YAML</li> <li>JS (a JavaScript file exporting a JS object)</li> <li>CJS (the same as above; the extension is for common JS)</li> </ul> <p>Warning</p> <p>Note: Configuration files in ESM format are not currently supported.</p>"},{"location":"guides/config/#supported-config-file-locations","title":"Supported Config File Locations","text":"<p>Configuration files can be named anything, but the following filenames will be automatically discovered and loaded by Appium:</p> <ul> <li><code>.appiumrc.json</code> (recommended)</li> <li><code>.appiumrc.yaml</code></li> <li><code>.appiumrc.yml</code></li> <li><code>.appiumrc.js</code></li> <li><code>.appiumrc.cjs</code></li> <li><code>appium.config.js</code></li> <li><code>appium.config.cjs</code></li> <li><code>.appiumrc</code> (which is considered to be JSON)</li> </ul> <p>Further, if your project uses Node.js, you can use store the configuration inside an <code>appium</code> property in your <code>package.json</code> and it will be automatically discovered.</p>"},{"location":"guides/config/#config-file-search","title":"Config File Search","text":"<p>Appium will search up the directory tree from the current working directory for one of these files. If it reaches the current user's home directory or filesystem root, it will stop looking.</p> <p>To specify a custom location for your config file, use <code>appium --config-file /path/to/config/file</code>.</p>"},{"location":"guides/config/#configuration-file-format","title":"Configuration File Format","text":"<p>First, you might want to look at some examples:</p> <ul> <li>Appium Configuration - JSON</li> <li>Appium Configuration - YAML</li> <li>Appium Configuration - JS</li> </ul> <p>A description of the format is available, as well:</p> <ul> <li>Appium Configuration File JSON Schema</li> <li>TypeScript declarations for Appium Configuration</li> </ul> <p>To describe in words, the config file will have a root <code>server</code> property, and all arguments are child properties. For certain properties which must be supplied on the command-line as comma-delimited lists, JSON strings, and/or external filepaths, these instead will be of their \"native\" type. For example, <code>--use-plugins &lt;value&gt;</code> needs <code>&lt;value&gt;</code> to be comma-delimited string or path to a delimited file. However, the config file just wants an array, e.g.,:</p> <pre><code>{\n\"server\": {\n\"use-plugins\": [\"my-plugin\", \"some-other-plugin\"]\n}\n}\n</code></pre>"},{"location":"guides/config/#configuring-extensions-drivers-and-plugins","title":"Configuring extensions (drivers and plugins)","text":"<p>For <code>driver</code>-and-<code>plugin</code>-specific configuration, these live under the <code>server.driver</code> and <code>server.plugin</code> properties, respectively. Each driver or plugin will have its own named property, and the values of any specific configuration it provides are under this. For example:</p> <pre><code>{\n\"server\": {\n\"driver\": {\n\"xcuitest\": {\n\"webkit-debug-proxy-port\": 5400\n}\n}\n}\n}\n</code></pre> <p>Note</p> <p>The above configuration corresponds to the <code>--driver-xcuitest-webkit-debug-proxy-port</code> CLI argument.</p> <p>All properties are case-sensitive and will be in kebab-case. For example, <code>callback-port</code> is allowed, but <code>callbackPort</code> is not.</p>"},{"location":"guides/context/","title":"The Context API","text":"<p>A common feature of many app platforms is the ability for developers to embed web content inside of the platform-native app frame. This allows developers to leverage web technologies or existing web content for some or all of the app functionality. However, the additional complexity of mixing \"modes\" within a single application can make it difficult for automation tools that are designed to target the \"native\" elements and behaviours.</p> <p>Appium provides a set of APIs for working with different app modes, called \"contexts\", that Appium drivers can implement if they support automation commands in these different modes. There are three basic commands that Appium has added to the W3C WebDriver spec for this purpose:</p> Command Name Method/Route Params Description Returns <code>Get Contexts</code> <code>GET /session/:id/contexts</code> Get a list of the available contexts <code>array&lt;string&gt;</code> <code>Get Current Context</code> <code>GET /session/:id/context</code> Get the name of the active context <code>string</code> <code>Set Context</code> <code>POST /session/:id/context</code> <code>name</code> (<code>string)</code> Switch into the context with the given <code>name</code> <code>null</code> <p>This API is flexible enough to handle a variety of semantic interpretations on the part of the driver. For example, the XCUITest driver includes two kinds of contexts: the native app context and any active webviews, as one context per webview. A call to <code>Get Contexts</code> will return the list of names, which you as a test author can sift through and use to switch into the appropriate context. As another example, the Appium Altunity Plugin introduces the concept of a <code>UNITY</code> context, which encapsulates all the plugin's specific behaviour to ensure that when outside of the <code>UNITY</code> context, the active driver's usual command implementations are used.</p> <p>It is important to note that a call to <code>Get Contexts</code> will always contain at least one context, conventionally but not necessarily named <code>NATIVE_APP</code>. This is the default active context.</p> <p>Depending on the type of context you're in, the operation of the driver might change. The XCUITest driver, when targeting a webview context, will not run its typical routines for finding and interacting with elements. Instead, it will run a different set of routines appropriate to web elements. This might have a variety of consequences, like supporting a different set of locator strategies.</p> <p>The command names in the table above are generic references to the commands and not code examples. For examples of how to access the Context API in the language-specific client libraries, please visit the documentation for a given library.</p>"},{"location":"guides/event-timing/","title":"The Event Timing API","text":"<p>Appium comes with the ability to retrieve timing information about startup information and command length. This is an advanced feature that is controlled by the use of the <code>appium:eventTimings</code> capability (set it to <code>true</code> to log event timings).</p> <p>With this capability turned on, the <code>GET /session/:id</code> response (i.e., the response to <code>driver.getSessionDetails()</code> or similar, depending on client) will be decorated with an <code>events</code> property. This is the structure of that <code>events</code> property:</p> <pre><code>{\n    \"&lt;event_type&gt;\": [&lt;occurence_timestamp_1&gt;, ...],\n    \"commands\": [\n        {\n            \"cmd\": \"&lt;command_name&gt;\",\n            \"startTime\": &lt;js_timestamp&gt;,\n            \"endTime\": &lt;js_timestamp&gt;\n        },\n        ...\n    ]\n}\n</code></pre> <p>In other words, the <code>events</code> property has 2 kinds of properties of its own:</p> <ul> <li>Properties which are the names of event types</li> <li>The <code>commands</code> property</li> </ul> <p>Properties which are names of event types correspond to an array of timestamps when that event happened. It's an array because events might happen multiple times in the course of a session. Examples of event types include:</p> <ul> <li><code>newSessionRequested</code></li> <li><code>newSessionStarted</code></li> </ul> <p>(Individual drivers will define their own event types, so we do not have an exhaustive list to share here. It's best to actually get one of these responses from a real session to inspect the possible event types.)</p> <p>The <code>commands</code> property is an array of objects. Each object has the name of the Appium-internal command (for example <code>click</code>), as well as the time the command started processing and the time it finished processing.</p> <p>With this data, you can calculate the time between events, or a strict timeline of events, or statistical information about average length of a certain type of command, and so on.</p> <p>You can only receive data about events that have happened when you make the call to <code>/session/:id</code>, so the best time to get data about an entire session is right before quitting it.</p> <p>The Appium team maintains an event timings parser tool that can be used to generate various kinds of reports from event timings output: appium/appium-event-parser.</p>"},{"location":"guides/event-timing/#add-a-custom-event","title":"Add a custom event","text":"<p>TODO</p> <p>The links to the commands in the following paragraph do not yet work since these docs are under construction.</p> <p>You can add custom events that will show up in the event timings data. You can send a custom event name to the Appium server using the Log Event API, and the server will store the timestamp. The Get Events command can be used to retrieve named events' timestamps later on.</p>"},{"location":"guides/execute-methods/","title":"Execute Methods","text":"<p>Because the scope of commands implemented in Appium drivers is broader than the scope of commands defined by the W3C WebDriver spec, Appium needs a way for these \"extended\" commands to be accessible by client libraries. There are two main strategies for this:</p> <ol> <li>Appium drivers define new W3C-compatible API routes, and Appium clients are updated to include    support for those new routes.</li> <li>Appium drivers define so-called \"Execute Methods\" which provide new functionality by    overloading the existing <code>Execute Script</code> command which is already available in any WebDriver-    based client library (including all Selenium and Appium clients).</li> </ol> <p>There are pros and cons for each strategy, but it is ultimately up to the extension author to decide how they wish implement new commands. </p> <p>This guide is designed to specifically help you understand the \"Execute Method\" strategy.  This pattern is commonly used in official Appium drivers and other third-party extensions. Here's an example of how the <code>Execute Script</code> command is designed to work in the world of WebDriver and browser automation:</p> JS (WebDriverIO)JavaPythonRubyC# <pre><code>await driver.executeScript('return arguments[0] + arguments[1]', [3, 4])\n</code></pre> <pre><code>JavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"return arguments[0] + arguments[1]\", 3, 4);\n</code></pre> <pre><code>driver.execute_script('return arguments[0] + arguments[1]', 3, 4)\n</code></pre> <pre><code>driver.execute_script 'return arguments[0] + arguments[1]', 3, 4\n</code></pre> <pre><code>((IJavaScriptExecutor)driver).ExecuteScript(\"return arguments[0] + arguments[1]\", 3, 4);\n</code></pre> <p>What's happening here is that we are defining a snippet of Javascript (technically, a function body) to be executed within the web browser. The client can send arguments which are serialized, sent over HTTP, and finally provided to the function as parameters.  In this example, we are essentially defining an addition function. The return value of the <code>Execute Script</code> command is whatever the return value of the Javascript snippet is! In the case of this example, that value would be the number <code>7</code> (<code>3</code> + <code>4</code>).</p> <p>Each client library has its own way of calling the command and providing any arguments to the script function, but the function itself\u2014the snippet\u2014is always a string and is the same across all languages.</p> <p>In the world of Appium, we are usually not automating a web browser, which means this command is not particularly useful. But it is useful as a way to encode the name of an arbitrary command and to provide parameters. For example, the XCUITest Driver has implemented a command that lets a client terminate a running application if you know the ID (the <code>bundleId</code>) of the app. The way that the driver makes this command available is via the Execute Method <code>mobile: terminateApp</code>. Instead of providing a JavaScript function to the \"Execute Script\" command, the user provides a known string as defined by the driver. The only other thing a client needs to know is the set of parameters for the method, which are documented by the driver. In this case, we have a parameter named <code>bundleId</code>, whose value should be a string encoding the ID of the app to terminate. Here is how this Execute Method would be called:</p> JS (WebDriverIO)JavaPythonRubyC# <pre><code>await driver.executeScript('mobile: terminateApp', [{bundleId: 'com.my.app'}])\n</code></pre> <pre><code>JavascriptExecutor jsDriver = (JavascriptExecutor) driver;\njsDriver.executeScript(\"mobile: terminateApp\", ImmutableMap.of(\"bundleId\", \"com.my.app\"));\n</code></pre> <pre><code>driver.execute_script('mobile: terminateApp', {'bundleId': 'com.my.app'})\n</code></pre> <pre><code>driver.execute_script 'mobile: terminateApp', { bundleId: 'com.my.app' }\n</code></pre> <pre><code>((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: terminateApp\",\n    new Dictionary&lt;string, string&gt; { { \"bundleId\", \"com.my.app\" } });\n</code></pre> <p>There are two important differences in using Appium Execute Methods from vanilla Selenium Javascript execution:</p> <ol> <li>The script string is just a command name; it will be provided by the driver documentation</li> <li>The standard way to provide parameters is as a single object with keys representing parameter    names and values representing parameter values. So in this case, we had to specify both the    parameter name (<code>bundleId</code>) as the key of the parameters object, and the parameter value    (<code>com.my.app</code>) as the value for that key. A driver can define parameters as required or optional.</li> </ol> <p>Of course, always refer to the documentation for the particular Execute Method in case the author has made any alterations to the standard access method.</p>"},{"location":"guides/grid/","title":"Appium and Selenium Grid","text":""},{"location":"guides/grid/#using-selenium-grid-4","title":"Using Selenium Grid 4+","text":"<p>The relay feature in Grid 4 allows you to proxy Appium requests to an Appium server instance. Here is an example walkthrough of how you would connect two different Appium instances to a Selenium Grid.</p>"},{"location":"guides/grid/#define-the-appium-configs","title":"Define the Appium configs","text":"<p>Each Appium instance should have a config file that can be easily updated. It should contain any information which needs to be unique to that particular server (e.g., ports its drivers should use that others should not). We are going to have 2 Appium servers, so we will need 2 config files:</p> <pre><code># appium1.yml\nserver:\nport: 4723\nuse-drivers:\n- xcuitest\ndefault-capabilities:\nwdaLocalPort: 8100\nmjpegServerPort: 9100\nmjpegScreenshotUrl: \"http://localhost:9100\"\n</code></pre> <p>In the above YAML config file, we specify the Appium server port, the driver used, and parameters for the driver that will be sent in as default capabilities. Our goal is to ensure that any other drivers running on this host will not compete with system ports or other resources. The second config file could look like the following, where we simply adjust a few ports to prevent clashes:</p> <pre><code># appium2.yml\nserver:\nport: 4733\nuse-drivers:\n- xcuitest\ndefault-capabilities:\nwdaLocalPort: 8110\nmjpegServerPort: 9110\nmjpegScreenshotUrl: \"http://localhost:9110\"\n</code></pre>"},{"location":"guides/grid/#define-the-grid-node-configs","title":"Define the Grid node configs","text":"<p>We will be launching one Grid \"node\" per Appium server, to manage relaying commands and determining capacity and online status, etc... So we should have one config file per Grid node as well. Each node config should include the address of the Appium server it will target, as well as a list of capability \"configs\" it should accept to relay a session request to Appium. Here is what the config could look like for the two nodes:</p> <pre><code># node1.toml\n[server]\nport = 5555\n[node]\ndetect-drivers = false\n[relay]\nurl = \"http://localhost:4723\"\nstatus-endpoint = \"/status\"\nconfigs = [\n\"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 13\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <pre><code># node2.toml\n[server]\nport = 5565\n[node]\ndetect-drivers = false\n[relay]\nurl = \"http://localhost:4733\"\nstatus-endpoint = \"/status\"\nconfigs = [\n\"1\", \"{\\\"platformName\\\": \\\"iOS\\\", \\\"appium:platformVersion\\\": \\\"15.5\\\", \\\"appium:deviceName\\\": \\\"iPhone 12\\\", \\\"appium:automationName\\\": \\\"XCUITest\\\"}\"\n]\n</code></pre> <p>Note that each node config also specifies a different port itself for the node to run on.</p>"},{"location":"guides/grid/#putting-it-together","title":"Putting it together","text":"<p>The Grid nodes aren't enough--you'll also want a Grid \"hub\" that acts as a load balancer and manager for all the nodes. So in the end we'll have 5 processes running at once: 2 Appium servers, 2 Grid nodes, and 1 Grid hub. It's best to run each of these in a separate terminal window to avoid confusion of logs. Here is how you'd start each process:</p> <ol> <li><code>appium --config appium1.yml</code></li> <li><code>appium --config appium2.yml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node1.toml</code></li> <li><code>java -jar /path/to/selenium.jar node --config node2.toml</code></li> <li><code>java -jar /path/to/selenium.jar hub</code></li> </ol> <p>Once you wait a few moments for the nodes to detect their Appium servers, and to register with the hub, you'll be able to send all your Appium traffic via the single hub endpoint (defaulting to <code>http://localhost:4444</code>).</p> <p>And of course, you're able to link up Appium servers and nodes running on different machines in your network to form a larger grid.</p>"},{"location":"guides/grid/#using-selenium-grid-3","title":"Using Selenium Grid 3","text":"<p>It is possible to register your Appium server with a local Selenium Grid 3 (setup docs) instance by using the <code>--nodeconfig</code> server argument.</p> <pre><code>appium server --nodeconfig /path/to/nodeconfig.json --base-path=/wd/hub\n</code></pre> <p>In the referenced config file you have to define the <code>browserName</code>, <code>version</code> and <code>platform</code> capabilities and based on these parameters the grid will re-direct your test to the right device. You will also need to configure your host details and the Selenium Grid details. For a full list of all parameters and descriptions see here.</p> <p>Once you start the Appium server it will register with the grid, and you will see your device on the grid console page:</p> <p><code>http://**\\&lt;grid-ip-adress\\&gt;**:**\\&lt;grid-port\\&gt;**/grid/console</code></p>"},{"location":"guides/grid/#example-grid-node-configuration-json","title":"Example Grid Node Configuration JSON","text":"<pre><code>{\n\"capabilities\":\n[\n{\n\"browserName\": \"&lt;e.g._iPhone5_or_iPad4&gt;\",\n\"version\":\"&lt;version_of_iOS_e.g._7.1&gt;\",\n\"maxInstances\": 1,\n\"platform\":\"&lt;platform_e.g._MAC_or_ANDROID&gt;\"\n}\n],\n\"configuration\":\n{\n\"cleanUpCycle\":2000,\n\"timeout\":30000,\n\"proxy\": \"org.openqa.grid.selenium.proxy.DefaultRemoteProxy\",\n\"url\":\"http://&lt;host_name_appium_server_or_ip-address_appium_server&gt;:&lt;appium_port&gt;/wd/hub\",\n\"host\": \"&lt;host_name_appium_server_or_ip-address_appium_server&gt;\",\n\"port\": &lt;appium_port&gt;,\n\"maxSession\": 1,\n\"register\": true,\n\"registerCycle\": 5000,\n\"hubPort\": &lt;grid_port&gt;,\n\"hubHost\": \"&lt;Grid_host_name_or_grid_ip-address&gt;\",\n\"hubProtocol\": \"&lt;Protocol_of_Grid_defaults_to_http&gt;\"\n}\n}\n</code></pre> <p>If <code>url</code>, <code>host</code>, and <code>port</code> are not given, the config will be auto updated to point to <code>localhost:&lt;appium-port&gt;</code>.</p> <p>If your Appium server is running on a different machine to your Selenium Grid server, make sure you use an external name/IP address in your <code>host</code> and <code>url</code> configuration; <code>localhost</code> and <code>127.0.0.1</code> will prevent Selenium Grid from connecting correctly.</p>"},{"location":"guides/log-filters/","title":"Log Filtering","text":"<p>Sometimes it might be necessary to hide sensitive information, like passwords, device identifiers, hashes, etc..., from the server log. Appium makes it possible to ensure such information is redacted in logs via the <code>--log-filters</code> command line argument. This argument allows you to provide the path to a special config file, containing one or more log obfuscation rules.</p>"},{"location":"guides/log-filters/#config-format","title":"Config Format","text":"<p>The filtering config must be one of:</p> <ul> <li>a path to a valid JSON file containing an array of filtering rules</li> <li>a <code>log-filters</code> entry in an Appium Config file, with the rules array inline</li> </ul> <p>Each rule is an object with a set of predefined properties. The following rule properties are supported:</p> <ul> <li><code>pattern</code>: A valid Javascript RegExp pattern to replace. Must be a valid non-empty pattern.</li> <li><code>text</code>: A simple non-empty exact text match to replace. Either this property or the above one must be provided. <code>pattern</code> has priority over <code>text</code> if both are provided.</li> <li><code>flags</code>: Regular expression flags for the given pattern. Supported flags are the same as for the standard JavaScript RegExp constructor. Note that the <code>g</code> (global matching) flag is always enabled.</li> <li><code>replacer</code>: The replacer value to use. By default it is <code>**SECURE**</code>. Empty values are allowed.</li> </ul>"},{"location":"guides/log-filters/#config-examples","title":"Config Examples","text":"<p>Replace all occurrences of <code>my.magic.app</code> string with the default replacer:</p> <pre><code>[\n{\n\"text\": \"my.magic.app\"\n}\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any char&gt;</code> string with a custom replacer (case insensitive):</p> <pre><code>[\n{\n\"pattern\": \"my\\\\.magic\\\\.\\\\w\",\n\"flags\": \"i\",\n\"replacer\": \"***\"\n}\n]\n</code></pre> <p>Replace all occurrences of <code>my.magic.&lt;any chars&gt;</code> and/or <code>your.magic</code> strings with a custom replacer (case insensitive):</p> <pre><code>[\n{\n\"pattern\": \"my\\\\.magic\\\\.\\\\w+\",\n\"flags\": \"i\",\n\"replacer\": \"***\"\n},\n{\n\"pattern\": \"your\\\\.magic\",\n\"flags\": \"i\",\n\"replacer\": \"***\"\n}\n]\n</code></pre> <p>Truncate all log lines to max 15 chars (advanced):</p> <pre><code>[\n{\n\"pattern\": \"(.{1,15}).*\",\n\"flags\": \"s\",\n\"replacer\": \"$1\"\n}\n]\n</code></pre>"},{"location":"guides/log-filters/#config-errors-handling","title":"Config Errors Handling","text":"<p>If any of the config rules contains invalid items (such as empty/invalid pattern, empty rule, etc.) then Appium will print the detailed report about collected errors and will fail to start until these errors are addressed.</p>"},{"location":"guides/managing-exts/","title":"Managing Appium Drivers and Plugins","text":"<p>To do anything useful with Appium, you need to have at least one Driver installed, otherwise Appium won't know how to automate anything. There is an entire Ecosystem of drivers and plugins out there!</p> <p>This guide helps explain how to manage these drivers and plugins. There are two basic strategies: using Appium's extension CLI interface, or managing extensions yourself in an npm-based project.</p> <p>Note: Alternative package managers are not supported by Appium at the time of this writing.</p>"},{"location":"guides/managing-exts/#using-appiums-extension-cli","title":"Using Appium's Extension CLI","text":"<p>With Appium's Extension CLI, you let Appium manage drivers and plugins for you.  You will use CLI commands to tell Appium which extensions you would like to install, update, or remove. Here's an example of how you might install a driver using the CLI:</p> <pre><code>appium driver install xcuitest\n</code></pre> <p>This command will install the latest version of the XCUITest Driver. The Extension CLI comes with a variety of commands and parameters; see the documentation for that command for all the specifics.</p> <p>The all-important question when Appium is managing your extensions for you is: where are they installed? Appium manages extensions in a directory specified by the <code>APPIUM_HOME</code> environment variable. You can set that variable to anything you like, and Appium will manage its extensions there. You can therefore also use the <code>APPIUM_HOME</code> environment variable to manage different sets of extensions, for example if you want to have the same driver installed at conflicting versions:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium driver install xcuitest@4.11.1\nAPPIUM_HOME=/path/to/home2 appium driver install xcuitest@4.11.2\n</code></pre> <p>Running these commands will result in two separate <code>APPIUM_HOME</code> directories being created and populated with the corresponding version of the XCUITest driver. You can then use the same environment variables to direct Appium which version to use on launch:</p> <pre><code>APPIUM_HOME=/path/to/home1 appium  # use xcuitest driver 4.11.1\nAPPIUM_HOME=/path/to/home2 appium  # use xcuitest driver 4.11.2\n</code></pre> <p>You don't need to set <code>APPIUM_HOME</code> if you don't want to! By default, Appium will set <code>APPIUM_HOME</code> to the directory <code>.appium</code> in your user home directory.</p> <p>These installed packages will be managed by <code>extensions.yaml</code> in <code>$APPIUM_HOME/node_modules/.cache/appium/extensions.yaml</code>.</p>"},{"location":"guides/managing-exts/#do-it-yourself-with-npm","title":"Do-It-Yourself with <code>npm</code>","text":"<p>Because Appium and Appium drivers are Node.js programs, if you are integrating your Appium scripts into your own Node.js project, there is an alternative way to manage drivers and plugins: via <code>npm</code>, like any other dependency. Basically, whenever you run Appium, if you have not explicitly set <code>APPIUM_HOME</code>, it will:</p> <ol> <li>Try to determine whether the current directory is inside an <code>npm</code> package.</li> <li>If so, it will check whether <code>appium</code> is a dependency (dev, prod, or peer) in the project's    <code>package.json</code></li> <li>If so, unless you have specified <code>APPIUM_HOME</code> in your environment, Appium will ignore load drivers and plugins defined in that    <code>package.json</code> file instead.</li> </ol> <p>This means you are freely able to add Appium drivers and plugins as regular package dependencies or dev dependencies. For example, if your project has a <code>package.json</code> which includes the following:</p> <pre><code>{\n\"devDependencies\": {\n\"appium\": \"^2.0.0\",\n\"appium-xcuitest-driver\": \"^4.11.1\"\n}\n}\n</code></pre> <p>Then, if you run <code>npx appium</code> inside your project, Appium will detect that it is a dependency of the project, and will load the XCUITest driver which is also listed as a dev dependency for the project.</p> <p>This strategy is only recommended if you are already using <code>npm</code> for your project. Otherwise, it is recommended that you use Appium's Extension CLI and, if necessary, adjust <code>APPIUM_HOME</code> to change the location of stored extensions.</p>"},{"location":"guides/migrating-1-to-2/","title":"Migrating from Appium 1.x to Appium 2.x","text":"<p>This document is a guide for those who are using Appium 1.x and wish to migrate to Appium 2.x. It contains a list of breaking changes and how to migrate your environments or test suites to ensure compatibility with Appium 2.0.</p>"},{"location":"guides/migrating-1-to-2/#overview-of-appium-20","title":"Overview of Appium 2.0","text":"<p>Appium 2.0 is the most major new release of Appium in over 5 years. The changes in Appium 2.0 are not primarily related to changes in automation behaviors for specific platforms. Instead, Appium 2.0 reenvisions Appium as a platform where \"drivers\" (code projects that introduce support for automation of a given platform) and \"plugins\" (code projects that allow for overriding, altering, extending, or adding behaviors to Appium) can be easily created and shared.</p> <p>At the same time, the Appium project is taking the opportunity to remove many old and deprecated bits of functionality.</p> <p>Together these do introduce a few breaking changes to how Appium is installed, how drivers and various features are managed, and protocol support. These are detailed below.</p>"},{"location":"guides/migrating-1-to-2/#breaking-changes","title":"Breaking Changes","text":"<p>Here we call out the breaking changes and what you need to do to account for them.</p>"},{"location":"guides/migrating-1-to-2/#default-server-base-path","title":"Default server base path","text":"<p>With Appium 1.x, the server would accept commands by default on <code>http://localhost:4723/wd/hub</code>. The <code>/wd/hub</code> base path was a legacy convention from the days of migrating from Selenium 1 to Selenium 2, and is no longer relevant. As such the default base path for the server is now <code>/</code>. If you want to retain the old behaviour, you can set the base path via a command line argument as follows:</p> <pre><code>appium --base-path=/wd/hub\n</code></pre> <p>You can also set server arguments as Config file properties.</p>"},{"location":"guides/migrating-1-to-2/#installing-drivers-during-setup","title":"Installing drivers during setup","text":"<p>When you installed Appium 1.x, all available drivers would be installed at the same time as the main Appium server. This is no longer the case. Simply installing Appium 2.0 (e.g., by <code>npm install --location=global appium</code>), will install the Appium server only, but no drivers. To install drivers, you must instead use the new Appium extension CLI. For example, to install the latest versions of the XCUITest and UiAutomator2 drivers, after installing Appium you would run the following commands:</p> <pre><code>appium driver install uiautomator2     # installs the latest driver version\nappium driver install xcuitest@4.12.2  # installs a specific driver version\n</code></pre> <p>At this point, your drivers are installed and ready. There's a lot more you can do with this CLI so be sure to check out the docs on it. If you're running in a CI environment or want to install Appium along with some drivers all in one step, you can do so using some special flags during install, for example:</p> <pre><code>npm install --location=global appium --drivers=xcuitest,uiautomator2\n</code></pre> <p>This will install Appium and the two drivers for you in one go. Please uninstall any existing Appium 1.x npm packages (with <code>npm uninstall --location=global appium</code>) if you get an installation or startup error.</p>"},{"location":"guides/migrating-1-to-2/#drivers-installation-path","title":"Drivers installation path","text":"<p>When you installed Appium 1.x, all available drivers would be installed at the same time as the main Appium server. The path was <code>/path/to/appium/node_modules</code>. For example, <code>appium-webdriveragent</code> to build WebDriverAgent manually was <code>/path/to/appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>.</p> <p>Appium 2.0 installs such dependencies in <code>APPIUM_HOME</code> environment variable. The default path is <code>~/.appium</code>. So, the path to  <code>appium-webdriveragent</code> could be <code>$APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code> after installing the XCUITest driver package.</p>"},{"location":"guides/migrating-1-to-2/#chromedriver-installation-flags","title":"Chromedriver installation flags","text":"<p>In Appium 1.x it was possible to customize the way Chromedriver was installed (as part of the UiAutomator2 driver for example), using the following command line flags:</p> <ul> <li><code>--chromedriver-skip-install</code></li> <li><code>--chromedriver-version</code></li> <li><code>--chromedriver-cdnurl</code></li> </ul> <p>Because Appium 2.0 now installs drivers for you, and because these flags were implemented as NPM config flags, they will no longer work. Instead, use the following environment variables during driver installation:</p> <ul> <li><code>APPIUM_SKIP_CHROMEDRIVER_INSTALL</code></li> <li><code>CHROMEDRIVER_VERSION</code></li> <li><code>CHROMEDRIVER_CDNURL</code></li> </ul> <p>For example:</p> <pre><code>APPIUM_SKIP_CHROMEDRIVER_INSTALL=1 appium driver install uiautomator2\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-specific-command-line-options","title":"Driver-specific command line options","text":"<p>With Appium 1.x, command-line options specific to particular drivers were all hosted on the main Appium server. So, for example, <code>--chromedriver-executable</code> was a CLI parameter you could use with Appium to set the location of a specific Chromedriver version for use with, say, the UiAutomator2 driver.</p> <p>With Appium 2.x, all driver- and platform-specific CLI params have been moved to the drivers themselves. To access the corresponding functionality, you'll need to refer to the driver/plugin documentation. In some cases, the extension will continue to expose CLI parameters. For example, the XCUITest driver used to expose a parameter <code>--webdriveragent-port</code>. Now, to access this parameter, it should be prefixed with <code>driver-xcuitest</code>, to differentiate it from parameters other drivers might also expose. To use this parameter, you thus need to start Appium with something like:</p> <pre><code>appium --driver-xcuitest-webdriveragent-port=5000\n</code></pre> <p>Some drivers have done away with CLI args entirely in favour of default capabilities instead. With the above-mentioned <code>--chromedriver-executable</code> param for example, you now need to take advantage of the <code>appium:chromedriverExecutable</code> capability supported by the UiAutomator2 driver. To set this capability from the command line, do the following:</p> <pre><code>appium --default-capabilities '{\"appium:chromedriverExecutable\": \"/path/to/chromedriver\"}'\n</code></pre>"},{"location":"guides/migrating-1-to-2/#driver-specific-automation-commands","title":"Driver-specific automation commands","text":"<p>The definition of certain commands that pertain only to specific drivers has been moved to those drivers' implementations. For example, <code>pressKeyCode</code> is specific to the UiAutomator2 driver and is now understood only by that driver. In practice, the only breaking change here is the kind of error you would encounter if the appropriate driver is not installed. Previously, you would get a <code>501 Not Yet Implemented</code> error if using a driver that didn't implement the command. Now, you will get a <code>404 Not Found</code> error because if a driver that doesn't know about the command is not active, the main Appium server will not define the route corresponding to the command.</p>"},{"location":"guides/migrating-1-to-2/#driver-updates","title":"Driver updates","text":"<p>In the past, to get updates to your iOS or Android drivers, you'd simply wait for those updates to be rolled into a new release of Appium, and then update your Appium version. With Appium 2.x, the Appium server and the Appium drivers are versioned and released separately. This means that drivers can be on their own release cadence and that you can get driver updates as they happen, rather than waiting for a new Appium server release. The way to check for driver updates is with the CLI:</p> <pre><code>appium driver list --updates\n</code></pre> <p>If any updates are available, you can then run the <code>update</code> command for any given driver:</p> <pre><code>appium driver update xcuitest\n</code></pre> <p>(For a complete description of the update command, check out the Extension CLI doc)</p> <p>To update the Appium server itself, you do the same thing as in the past: <code>npm install --location=global appium</code>. Now, installing new versions of the Appium server will leave your drivers intact, so the whole process will be much more quick.</p> <p>If you would like to update to a specific version, not the latest, please uninstall the driver and install the desired version using the <code>install</code> subcommand instead of <code>update</code>.</p> <pre><code>appium driver uninstall xcuitest\nappium driver install xcuitest@4.11.1\n</code></pre>"},{"location":"guides/migrating-1-to-2/#protocol-changes","title":"Protocol changes","text":"<p>Appium's API is based on the W3C WebDriver Protocol, and it has supported this protocol for years. Before the W3C WebDriver Protocol was designed as a web standard, several other protocols were used for both Selenium and Appium. These protocols were the \"JSONWP\" (JSON Wire Protocol) and \"MJSONWP\" (Mobile JSON Wire Protocol). The W3C Protocol differs from the (M)JSONWP protocols in a few small ways.</p> <p>Up until Appium 2.0, Appium supported both protocols, so that older Selenium/Appium clients could still communicate with newer Appium servers. Moving forward, support for older protocols will be removed.</p>"},{"location":"guides/migrating-1-to-2/#capabilities","title":"Capabilities","text":"<p>One significant difference between old and new protocols is in the format of capabilities. Previously called \"desired capabilities\", and now called simply \"capabilities\", there is now a requirement for a so-called \"vendor prefix\" on any non-standard capabilities. The list of standard capabilities is given in the WebDriver Protocol spec, and includes a few commonly used capabilities such as <code>browserName</code> and <code>platformName</code>.</p> <p>These standard capabilities continue to be used as-is. All other capabilities must include a \"vendor prefix\" in their name. A vendor prefix is a string followed by a colon, such as <code>appium:</code>. Most of Appium's capabilities go beyond the standard W3C capabilities and must therefore include vendor prefixes (we recommend that you use <code>appium:</code> unless directed otherwise by documentation). For example:</p> <ul> <li><code>appium:app</code></li> <li><code>appium:noReset</code></li> <li><code>appium:deviceName</code></li> </ul> <p>This requirement may or may not be a breaking change for your test suites when targeting Appium 2.0. If you're using an updated Appium client (at least one maintained by the Appium team), the client will add the <code>appium:</code> prefix for you on all necessary capabilities automatically. New versions of Appium Inspector will also do this. Cloud-based Appium providers may also do this. So simply be aware that if you get any messages to the effect that your capabilities lack a vendor prefix, this is how you solve that problem.</p> <p>On a related note, it will no longer be possible to start Appium sessions using WebDriver clients that don't support the W3C protocol (see below for a comment to this effect for the WD library).</p> <p>To make everyone's lives a bit easier, we've also introduced the option of wrapping up all Appium-related capabilities into one object capability, <code>appium:options</code>. You can bundle together anything that you would normally put an <code>appium:</code> prefix on into this one capability. Here's an example (in raw JSON) of how you might start an iOS session on the Safari browser using <code>appium:options</code>:</p> <pre><code>{\n\"platformName\": \"iOS\",\n\"browserName\": \"Safari\",\n\"appium:options\": {\n\"platformVersion\": \"14.4\",\n\"deviceName\": \"iPhone 11\",\n\"automationName\": \"XCUITest\"\n}\n}\n</code></pre> <p>(Of course, each client will have a different way of creating structured capabilities like <code>appium:options</code> or other ones that you might have seen such as <code>goog:chromeOptions</code>). NB: capabilities that show up in <code>appium:options</code> will overwrite capabilities of the same name that show up at the top level of the object. (The new <code>appium:options</code> syntax support by cloud providers may vary.)</p> <p>For more information on capabilities, have a look at the Capabilities Guide.</p>"},{"location":"guides/migrating-1-to-2/#removed-commands","title":"Removed Commands","text":"<p>In addition to commands which have been moved to driver implementations, commands which were a part of the old JSON Wire Protocol and not a part of the W3C Protocol are no longer available:</p> <ul> <li>TODO (these commands are being identified and removed and will be updated here when complete)</li> </ul> <p>If you use a modern Appium or Selenium client, you should no longer have access to these anyway, so any breaking changes should appear on the client side first and foremost.</p>"},{"location":"guides/migrating-1-to-2/#image-analysis-features-moved-to-plugin","title":"Image analysis features moved to plugin","text":"<p>One of the design goals for Appium 2.0 is to migrate non-core features into special extensions called plugins. This allows people to opt into features which require extra time to download or extra system setup. The various image-related features of Appium (image comparison, finding elements by image, etc...) have been moved into an officially supported plugin called images.</p> <p>If you use these image-related methods, to continue accessing them you will need to do two things.</p> <ol> <li>Install the plugin: <code>appium plugin install images</code></li> <li>Ensure you start the Appium server with access to run the plugin by including it in the list of plugins designated on the command line, e.g., <code>appium --use-plugins=images</code></li> </ol> <p>Image-related commands will also be removed on the client side of things, which means you will need to follow the instructions on the plugin README for installing client-side plugins to access these features.</p>"},{"location":"guides/migrating-1-to-2/#execute-driver-script-command-moved-to-plugin","title":"Execute Driver Script command moved to plugin","text":"<p>If you use the advanced Execute Driver Script feature (which allows you to send in a WebdriverIO script to have it executed completely on the server instead of command-by-command from the client), this functionality has been moved to a plugin. Here's what to do to keep using it:</p> <ol> <li>Install the plugin: <code>appium plugin install execute-driver</code></li> <li>Ensure you start the Appium server with access to run the plugin by including it in the list of plugins designated on the command line, e.g., <code>appium --use-plugins=execute-driver</code></li> </ol>"},{"location":"guides/migrating-1-to-2/#external-files-no-longer-supported-for-nodeconfig-default-capabilities-allow-insecure-and-deny-insecure","title":"External Files No Longer Supported for <code>--nodeconfig</code>, <code>--default-capabilities</code>, <code>--allow-insecure</code> and <code>--deny-insecure</code>","text":"<p>These options can be provided as strings on the command line (a JSON string for <code>--nodeconfig</code> and a comma-separated list of strings for <code>--allow-insecure</code> and <code>--deny-insecure</code>). Arguments provided on the command line will likely need to be quoted or escaped.</p> <p>The recommended method to provide these options is now via a configuration file.</p> <p>In summary, if you are using a JSON Appium config file, you can simply cut-and-paste the contents of your \"nodeconfig\" JSON file into the value of the <code>server.nodeconfig</code> property.  Any CSV-like files you had previously provided for <code>--allow-insecure</code> and <code>--deny-insecure</code> become the values of the <code>server.allow-insecure</code> and <code>server.deny-insecure</code> properties in the Appium config files (respectively); both are arrays of strings.</p>"},{"location":"guides/migrating-1-to-2/#old-drivers-removed","title":"Old drivers removed","text":"<p>The old iOS and Android (UiAutomator 1) drivers and related tools (e.g., <code>authorize-ios</code>) have been removed. They haven't been relevant for many years anyway.</p>"},{"location":"guides/migrating-1-to-2/#server-can-no-longer-be-started-with-port-0","title":"Server can no longer be started with <code>--port 0</code>","text":"<p>In Appium 1.x, it was possible to specify <code>--port 0</code> during server startup. This had the effect of starting Appium on a random free port. In Appium 2.0, port values must be <code>1</code> or higher. The random port assignment was never an intentional feature of Appium 1.x, but a consequence of how Node's HTTP servers work and the fact that there was no port input validation in Appium 1.x. If you want to find a random free port to start Appium on, you must now take care of this on your own prior to starting Appium. Starting Appium on an explicit and known port is the correct practice moving forward.</p>"},{"location":"guides/migrating-1-to-2/#internal-packages-renamed","title":"Internal packages renamed","text":"<p>Some Appium-internal NPM packages have been renamed (for example, <code>appium-base-driver</code> is now <code>@appium/base-driver</code>). This is not a breaking change for Appium users, only for people who have built software that directly incorporates Appium's code.</p>"},{"location":"guides/migrating-1-to-2/#wd-javascript-client-library-no-longer-supported","title":"\"WD\" JavaScript client library no longer supported","text":"<p>For many years, some of Appium's authors maintained the WD client library. This library has been deprecated and has not been updated for use with the W3C WebDriver protocol. As such, if you're using this library you'll need to move to a more modern one. We recommend WebdriverIO.</p>"},{"location":"guides/migrating-1-to-2/#appium-desktop-replaced-with-appium-inspector","title":"Appium Desktop replaced with Appium Inspector","text":"<p>The inspector functionality of Appium Desktop has been moved to its own app: Appium Inspector. It's fully compatible with standalone Appium 2.0 servers, but also works with later versions of Appium 1.x servers. Appium Desktop itself has been deprecated and is not compatible with Appium 2.0.</p> <p>In addition to the app, Appium Inspector also has a browser version, accessible at https://inspector.appiumpro.com. Note that in order to use the browser version with a local Appium server, you'll need to first start the server with the <code>--allow-cors</code> flag.</p>"},{"location":"guides/migrating-1-to-2/#major-new-features","title":"Major New Features","text":"<p>Apart from the breaking changes mentioned above, in this section is a list of some of the major new features you may wish to take advantage of with Appium 2.0.</p>"},{"location":"guides/migrating-1-to-2/#plugins","title":"Plugins","text":""},{"location":"guides/migrating-1-to-2/#server-plugins","title":"Server Plugins","text":"<p>Appium extension authors can now develop their own server plugins, which can intercept and modify any Appium command, or even adjust the way the underlying Appium HTTP server itself works. To learn more about plugins, read the new Appium Introduction. Interested in building a plugin? Check out the Building Plugins guide.</p>"},{"location":"guides/migrating-1-to-2/#install-drivers-and-plugins-from-anywhere","title":"Install drivers and plugins from anywhere","text":"<p>You're no longer limited to the drivers that come with Appium, or that the Appium team even knows about! Appium extension authors can now develop custom drivers, which can be downloaded or installed via Appium's Extension CLI from NPM, Git, GitHub, or even the local filesystem. Interested in building a driver? Check out the Building Drivers guide.</p>"},{"location":"guides/migrating-1-to-2/#configuration-files","title":"Configuration Files","text":"<p>Appium now supports configuration files in addition to command-line arguments. In a nutshell, nearly all arguments which Appium 1.x required to be provided on the CLI are now able to be expressed via a configuration file. Configuration files may be in JSON, JS, or YAML format. See the Config Guide for a full explanation.</p>"},{"location":"guides/migrating-1-to-2/#special-notes-for-cloud-providers","title":"Special Notes for Cloud Providers","text":"<p>The rest of this document has applied to Appium generally, but some of the architectural changes in Appium 2.0 will constitute breaking changes for Appium-related service providers, whether a cloud-based Appium host or an internal service. At the end of the day, the maintainer of the Appium server is responsible for installing and making available the various Appium drivers and plugins that end users may wish to use.</p> <p>We encourage cloud providers to thoroughly read and understand our recommendation for cloud provider capabilities in order to support user needs in an industry-compatible way!</p>"},{"location":"guides/security/","title":"Appium Server Security","text":"<p>The Appium team makes every effort to ensure the security of the Appium server. This is especially important when Appium is run in a multitenant environment, or when multiple users are running sessions on the same Appium server. In general, you can only safely enable all Appium's features if all the following are true:</p> <ul> <li>You're running your own Appium server locally or within a protected internal network</li> <li>You're not sharing it with any untrusted parties</li> <li>You don't expose Appium's port(s) to the wider internet</li> </ul> <p>But because many Appium users might not be able to guarantee such a safe environment, the Appium team puts many features behind a security protection mechanism which forces system admins (the people that are in charge of starting the Appium server) to explicitly opt-in to these features. (Third-party driver and plugin authors can also hide behaviour behind security flags.)</p> <p>For security reasons, Appium client sessions can not request feature enablement via capabilities; this is the responsibility of the server admin who configures and launches the Appium server.</p>"},{"location":"guides/security/#security-server-args","title":"Security Server Args","text":"<p>The Server CLI Args doc outlines three relevant arguments which may be passed to Appium when starting it from the command line:</p> Parameter Description <code>--relaxed-security</code> Setting this flag turns on all insecure features (unless blocked by <code>--deny-insecure</code>; see below) <code>--allow-insecure</code> Setting this flag to a comma-separated list of feature names or a path to a file containing a feature list (each name on a separate line) will allow only the features listed. For example, <code>--allow-insecure=adb_shell</code> will cause only the ADB shell execution feature to be enabled. This is true unless <code>--relaxed-security</code> is also used, in which case all features will still be enabled. It makes no sense to combine this flag with <code>--relaxed-security</code>. <code>--deny-insecure</code> This flag can likewise be set to a comma-separated list of feature names, or a path to a feature file. Any features listed here will be disabled, regardless of whether <code>--relaxed-security</code> is set and regardless of whether the names are also listed with <code>--allow-insecure</code>."},{"location":"guides/security/#insecure-features","title":"Insecure Features","text":"<p>Each Appium driver is responsible for its own security, and can create its own feature names. Thus you should read through the documentation for a particular driver to know which feature names it might use. Here is an incomplete list of examples from some of Appium's official drivers:</p> Feature Name Description Supported Extension(s) <code>get_server_logs</code> Allows retrieving of Appium server logs via the Webdriver log interface IOS, XCUITest, Android, UiAutomator2, Espresso <code>adb_shell</code> Allows execution of arbitrary shell commands via ADB, using the <code>mobile: shell</code> command Android, UiAutomator2, Espresso <code>record_audio</code> Allow recording of host machine audio inputs XCUITest <code>execute_driver_script</code> Allows to send a request which has multiple Appium commands. Execute Driver Plugin"},{"location":"guides/security/#examples","title":"Examples","text":"<p>To turn on the <code>get_server_logs</code> feature for my Appium server, I could start it like this:</p> <pre><code>appium --allow-insecure=get_server_logs\n</code></pre> <p>To turn on multiple features:</p> <pre><code>appium --allow-insecure=get_server_logs,record_audio\n</code></pre> <p>To allow all features except one:</p> <pre><code>appium --relaxed-security --deny-insecure=adb_shell\n</code></pre>"},{"location":"guides/settings/","title":"The Settings API","text":"<p>Appium has introduced a set of extension APIs that allow you to adjust parameters for a given session during session execution. Called \"Settings\", these parameters mirror the role of Capabilities, but Capabilities cannot be adjusted once a session has started. Settings can be adjusted any number of times during the course of a session.</p> <p>There are 3 important points to the concept of Settings:  - Settings are mutable; they can be changed during a session using the Settings API  - Settings are only relevant during the session in which they are set. They are typically reset for each new session, though depending on the driver, some settings may persist between sessions.  - Settings adjust the way the appium server behaves during test automation. They don't refer to settings for the device or app under test</p> <p>An example of a setting would be the <code>ignoreUnimportantViews</code> setting recognized by the UiAutomator2 driver. The driver can be instructed to ignore lements in the view hierarchy which it deems irrelevant. Adjusting this setting to have a value of <code>true</code> can cause tests to run faster. But if you want to access elements which would be ignored under this setting, you could always reset it to <code>false</code> later in the session.</p> <p>Settings are implemented via the following API endpoints:</p> Command Method/Route Params Description Returns <code>Update Settings</code> <code>POST /session/:id/appium/settings</code> <code>settings</code> (<code>Record&lt;string, any&gt;</code>) Update setting values. The <code>settings</code> object needs to be a set of keys and values, where keys are the name of the settings and values are whatever value is documented as appropriate for that setting. <code>null</code> <code>Get Settings</code> <code>GET /session/:id/appium/settings</code> Return the current settings. <code>Record&lt;string, any&gt;</code> <p>Which settings are available depends on the driver you are using. Refer to the driver's documentation for a list of supported settings.</p>"},{"location":"guides/settings/#initializing-settings-via-capabilities","title":"Initializing Settings via Capabilities","text":"<p>When you want to start an Appium session with a setting in a certain state, you can do so by including a capability of the form <code>appium:settings[&lt;name&gt;]</code> with the appropriate value. So to turn on the <code>ignoreUnimportantViews</code> setting mentioned above from the very beginning of a session, you would construct a set of capabilities that includes the following in its JSON representation:</p> <pre><code>{\n\"appium:settings[ignoreUnimportantViews]\": true\n}\n</code></pre> <p>Also, since base-driver version 9.4.0, there is a possibility to provide multiple settings in a single <code>appium:settings</code> capability value:</p> <pre><code>{\n\"appium:settings\": {\n\"ignoreUnimportantViews\": true,\n\"allowInvisibleElements\": true\n}\n}\n</code></pre> <p>Of course, initializing a setting via capabilities doesn't prevent you from changing it later on via the Settings API. To learn more about how to use the Settings API in the context of your specific client library, visit the documentation for that library.</p>"},{"location":"intro/","title":"Intro to Appium","text":"<p>As mentioned on the main page, Appium is an open-source project and ecosystem of related software, designed to facilitate UI automation of many app platforms. With the release of Appium 2.0, Appium has the following primary goals:1</p> <ul> <li>Make platform-specific automation capabilities available under a cross-platform, standard API</li> <li>Allow easy access to this API from any programming language</li> <li>Provide tools to enable convenient community development of Appium extensions</li> </ul> <p>So, take any app platform you know about, like iOS or Android. Appium wants for there to be a way for developers and testers to write UI automation code for that platform, according to a single, unified API. Based on Appium's goals, we have a lot of questions to answer to make it all work:</p> <ul> <li>Which API should that \"single, unified\" API be?</li> <li>How do we map that API to automation behaviour for a specific platform?</li> <li>How do we make that API accessible via multiple popular programming languages?</li> </ul> <p>There's another, larger, question lurking in the background here too, given that there are more app platforms out there than just iOS and Android:</p> <ul> <li>How do we enable automation for all the platforms?</li> </ul> <p>Exploring Appium's answers to these questions may not be the quickest way to learn what Appium is, but it is certainly a good one! So let's dive in.</p>"},{"location":"intro/#appiums-choice-of-api","title":"Appium's choice of API","text":"<p>Appium is very fortunate to have been preceded by a technology which has been a long-standing pioneer in the field of UI automation, namely Selenium. The goal of the Selenium project has been to support UI automation of web browsers, and in this way we can think of it as occupying a subset of Appium's goals. Along the way, Selenium (and, after they merged, another project called WebDriver) developed a relatively stable API for browser automation.</p> <p>Over the years, Selenium worked with various web browser vendors and the W3C standards group to turn its API into an official web browser standard, called the WebDriver specification. All the main browsers now implement automation capabilities inline with the WebDriver spec, without the Selenium team having to maintain any software that performs actual automation; standards for the win!</p> <p>Appium's initial goals were to develop an automation standard for mobile apps (iOS and Android). We could have made up something new, but in the spirit of joining forces and keeping standards, well, standard, we decided to adopt the WebDriver spec as Appium's API.2 While user interaction on websites and in mobile native apps are not entirely identical (with even greater differences once we start to consider, for example, TV platforms controlled by simple remotes), the fact is that most software UIs are pretty much the same. This means that the WebDriver spec provides automation API primitives (finding elements, interacting with elements, loading pages or screens, etc...) that more or less map to any platform.</p> <p>Of course, Appium wants to support the cases where user interaction does differ from web to mobile or web to TV, and so Appium also makes use of the built-in extensibility of the WebDriver spec. The result is that, no matter what platform you want to automate, when you use Appium, you will do so using the standard WebDriver spec, with two caveats:</p> <ul> <li>We might not have any way to support a particular WebDriver API command on a given platform, and   so some commands might be unsupported (for example, getting or setting cookies is not possible in   the world of native mobile app automation).</li> <li>We might support automation behaviours that go beyond what's available in the WebDriver API   command list, though any such commands will be valid and spec-compliant extensions to the   WebDriver API.</li> </ul> <p>How do you actually use the WebDriver API, particularly in the context of Appium? We'll cover that in the section below on how Appium provides universal programming language access. All you need to know for now is that the way Appium introduces a universal UI automation interface is by implementing the WebDriver protocol.</p>"},{"location":"intro/#platform-automation-behaviour","title":"Platform automation behaviour","text":"<p>The next question is, how does Appium map this protocol to automation behaviour on a wide range of platforms? The trick is that, strictly speaking, Appium doesn't! It leaves this responsibility up to a kind of software module called an Appium driver. There's a whole Driver Introduction which you can read next, so we won't go into huge detail on how they work for now.</p> <p>What's important to understand at the moment is that a driver is kind of like a pluggable module for Appium that gives Appium the power to automate a particular platform (or set of platforms, depending on the goal of the driver). At the end of the day, a driver's responsibility is to simply implement an Appium-internal interface representing the WebDriver protocol. How it implements this interface is totally up to the driver, based on its strategy for making automation happen on a specific platform. Typically, and with a lot more complexity and difficulty in the details, a driver does this by relying on platform-specific automation technologies. For example, Apple maintains an iOS automation technology called XCUITest. The Appium driver that supports iOS app automation is called the XCUITest Driver because ultimately what it does is convert the WebDriver protocol to XCUITest library calls.</p> <p>One of the reasons that drivers are independent, pluggable modules is that they work completely differently from one another. The tools and requirements for building and using drivers for different platforms are completely different. And so Appium lets you use just the drivers that you need for your automation tasks. Choosing drivers and installing them so that you can use them with your Appium instance is so important that Appium has its very own CLI for managing drivers.</p> <p>So, to answer our original question, the way that Appium provides access to automation capabilities for a given platform is that the Appium team (or anyone else3) writes a driver for that platform, implementing as much or little of the WebDriver protocol as desired. The driver can then be installed by anyone using Appium.</p>"},{"location":"intro/#universal-programming-language-access","title":"Universal programming language access","text":"<p>But what does it mean, or look like, to use Appium, anyway? Since Appium is ultimately a Node.js program, it could have looked like importing Appium and its drivers as libraries into your own Node.js programs. But that wouldn't meet Appium's goal of providing automation capabilities to people using any popular programming language.</p> <p>Luckily, the fact that Appium rode in on Selenium's coattails meant that we had a solution to this problem from day one. You see, the WebDriver specification is actually an HTTP-based protocol, meaning it is designed to be used over a network rather than within the memory of a single program.</p> <p>One of the main benefits of this \"client-server\" architecture is that it allows the automation implementer (the thing doing the automation, in this case the 'server') to be completely distinct from the automation runner (the thing defining what automation should be done, in what steps, etc..., in this case the 'client'). Basically, all the \"hard stuff\" (actually figuring out how to make automation happen on a given platform) can be handled in one place by the server, and \"thin\" client libraries can be written in any programming language which simply encode HTTP requests to the server in language-appropriate way. It's possible, in other words, to bring basic Appium / WebDriver capabilities to a new programming language relatively easily, assuming high-level HTTP libraries exist, simply by coding up a basic HTTP client in that language.</p> <p>There are a couple important takeaways here for you, the Appium user:</p> <ul> <li>Appium is an HTTP server. It must run as a process on some computer for as long as you want to   be able to use it for automation. It must be accessible on the network to whichever computer you   want to use to run the automation from (whether that is the same machine or one across the   world).</li> <li>Unless you want to write raw HTTP calls or use cURL, using Appium for automation involves the use   of an Appium Client in the language of your choice. The goal of each of these   clients is to encapsulate the WebDriver protocol so that rather than worrying about the protocol   itself, you can work with objects and methods that feel idiomatic for your language.</li> <li>The Appium server and the Appium client do not need to be running on the same computer. You   simply need to be able to send HTTP requests from the client to the server over some network.   This greatly facilitates the use of cloud providers for Appium, since they can host the Appium   server and any related drivers and devices, and all you need to do is point your client script to   their secure endpoints.</li> </ul> <p>And of course, none of this is about \"testing\" per se, purely about the use of Appium and its client libraries for automation purposes. If you want to do automation for the purpose of \"testing\", you'll likely want to enlist the help of test runners, test frameworks, and the like, none of which need be related to Appium; one of the benefits of Appium's \"universal accessibility\" is that it plays well with whatever set of tools you find most beneficial for your situation.</p>"},{"location":"intro/#appiums-huge-scope","title":"Appium's huge scope","text":"<p>Appium's vision (automation of everything under a single API) is huge! Certainly, much bigger than the team of core maintainers for the open source project. So how does Appium hope to achieve this goal? Basically, by empowering the community to develop functionality on top of Appium as a platform. This is what we call the Appium \"ecosystem\".</p> <p>The Appium team does officially maintain a few drivers itself (for example, the XCUITest driver that we spoke about earlier). But it cannot hope to have the platform-specific expertise or the capacity to maintain drivers for many different platforms. But what we have done, particularly beginning with Appium 2.0, is to provide tools to empower the community to join in our vision:</p> <ul> <li>Anyone can create a driver simply by creating a Node.js module that conforms to the appropriate   conventions and implements any (sub|super)set of the WebDriver protocol. Creating a driver often   involves a minimal amount of code because the WebDriver protocol details are abstracted away, and   many helper libraries are available---the same libraries that power the Appium team's own   drivers.</li> <li>Sharing drivers with others is easy using the Appium driver CLI. There is no central authority.   Anyone can share drivers publicly or privately, for free or for sale. Drivers can be open or   closed source (though obviously we appreciate open source!).</li> </ul> <p>Appium's vision of being a platform for development extends beyond the support of automation for all app platforms. As a popular automation tool, there are many opportunities for integrating Appium with all kinds of other tools and services. In addition, there are many feature ideas for Appium, either as a core server or in its incarnation across various drivers, which the core team will never have time to build. And so, with Appium 2.0, Appium has released a plugin system that enables anyone to build and share modules that change how Appium works!</p> <p>In the same way that drivers are easily shareable and consumable via the Appium driver CLI, plugins can be published and consumed via a parallel Plugin CLI. Plugins can do all sorts of things, for example adding the ability for Appium to find and interact with screen regions based on a template image (as in the <code>images</code> plugin). There are very few limitations on what you can do with plugins, so you might also be interested in learning how to Build Plugins in Node.js that can be used with Appium.</p> <p>So that's Appium: an extensible, universal interface for the UI automation of potentially everything! Read on into some of the specific intro docs for more details, or check out the various guides to dive into some more general concepts and features of Appium.</p> <ol> <li> <p>To meet these primary goals, we also work with a set of secondary goals or methodology principles, which we also encourage for Appium extension developers:</p> <ul> <li>As far as possible, rely on (and contribute to) open source technology</li> <li>As far as possible, rely on vendor-provided tools for a given platform</li> <li>As far as possible, rely on automation tools that allow automation of unmodified apps (prefer   not to require the user to build in additional SDKs or software that introduce discrepancies   between the test version of the app and the production version)</li> <li>As far as possible, rely on existing standards instead of creating new ones</li> </ul> <p>\u21a9</p> </li> <li> <p>Technically, when Appium was first written, we were dealing with something older than the   WebDriver spec, called the JSON Wire Protocol. Since then, Appium continued to evolve along with   the W3C spec and is fully W3C-compliant.\u00a0\u21a9</p> </li> <li> <p>You can build and share your own drivers! Check out Building   Drivers to learn more about how to develop drivers in Node.js   that can be used with Appium.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/clients/","title":"Intro to Appium Clients","text":"<p>For all the reasons discussed in the main intro, Appium is based on the W3C WebDriver specification. This means that Appium implements a client-server architecture. The server (consisting of Appium itself along with any drivers or plugins you are using for automation) is connected to the devices under test, and is actually responsible for making automation happen on those devices. The client (driven by you, the Appium test author) is responsible for sending commands to the server over the network, and receiving responses from the server as a result. These responses can be used to tell whether automation commands are successful, or might contain information that you queried about the state of the application. This document is a conceptual introduction to the client side of this equation.</p> <p>Info</p> <p>For more about the server side of the equation (i.e., how does Appium actually control devices?), check out our Intro to Appium Drivers. To skip to a list of links to Appium client libraries, check out the Ecosystem documentation.</p> <p>What sorts of automation commands are available? That is up to the particular driver and plugins that you are using in any given session. A standard set of commands would include, for example, the following:</p> <ul> <li>Find Element</li> <li>Click Element</li> <li>Get Page Source</li> <li>Take Screenshot</li> </ul> <p>If you look at these commands in the WebDriver specification, you'll notice that they are not defined in terms of any particular programming language. They are not Java commands, or JavaScript commands, or Python commands. Instead, they form part of an HTTP API which can be accessed from within any programming language (or none! you could just use cURL if you want).</p> <p>So, for example, the <code>Find Element</code> command corresponds to an HTTP <code>POST</code> request sent to the HTTP endpoint <code>/session/:sessionid/element</code> (where in this case, <code>:sessionid</code> is a placeholder for the unique session ID generated by the server in a previous call to <code>Create Session</code>).</p> <p>This information is primarily useful for people developing technology that works with the WebDriver spec. It's not particularly useful for people trying to write Appium or Selenium tests. When you write an Appium test, you want to use a programming language you're familiar with. Luckily, there exist a set of Appium client libraries1 that take care of the responsibility of speaking HTTP to the Appium server. Instead, they expose a set of \"native\" commands for a particular programming language, so that, to the test author, it just feels like you're writing Python, or JavaScript, or Java.</p> <p>As an example, here's the same simple set of Appium commands in five different programming languages, using the recommended Appium client binding for each language (note that this is not working sample code including all appropriate imports; see each client library's instructions for setup and command reference):</p> JavaScript (Webdriver.io)JavaPythonRubyC# <pre><code>const element = await driver.$('//*[@text=\"Foo\"]');\nawait element.click();\nconsole.log(await element.getText())\nconsole.log(await driver.getPageSource())\n</code></pre> <pre><code>WebElement element = driver.findElement(By.Xpath(\"//*[@text='Foo']\"))\nelement.click()\nSystem.out.println(element.getText())\nSystem.out.println(driver.getPageSource())\n</code></pre> <pre><code>element = driver.find_element(by=By.XPATH, value='//*[@text=\"Foo\"]')\nelement.click()\nprint(element.text)\nprint(driver.page_source)\n</code></pre> <pre><code>element = driver.find_element :xpath, '//*[@text=\"Foo\"]'\nelement.click\nputs element.text\nputs driver.page_source\n</code></pre> <pre><code>AppiumElement element = driver.FindElement(MobileBy.AccessibilityId(\"Views\"));   \nelement.click();\nSystem.Console.WriteLine(element.Text);\nSystem.Console.WriteLine(driver.PageSource);\n</code></pre> <p>Each of these scripts, despite being in different languages, does the same thing under the hood:</p> <ol> <li>Call <code>Find Element</code> with a <code>using</code> parameter of <code>xpath</code> and a <code>value</code> parameter expressing the    XPath query used to find an element. (If you're confused about these terms, you might find an    introduction to Appium or Selenium useful)</li> <li>Call <code>Click Element</code> with the ID of the element found in the previous call.</li> <li>Call <code>Get Element Text</code> with the ID of the same element, and print it to the console.</li> <li>Call <code>Get Page Source</code> to retrieve the page/app source and print it to the console.</li> </ol> <p>The only other thing to keep in mind before choosing or using a client is that each client is independently maintained. Just because a feature is available in one client, it doesn't mean it's available in another client (though all clients support at least the standard W3C protocol plus any common appium extensions). Just because one client has a nice set of helper functions, doesn't mean another will. Some clients are kept very frequently up to date, and others are not! So when thinking about choosing a library, the first consideration is the language you want to use, and the second consideration is how full-featured and well-maintained the library is!</p> <p>To learn how to use an Appium client, visit that client's homepage to learn more. In many cases, the Appium client for a given language is built on top of the Selenium client for that language, and so certain Appium clients may only document the features which the Appium client added on top of the Selenium client. All that to say, for a full reference, you may need to visit both the Appium client documentation as well as the Selenium client documentation.</p> <p>That's all you need to know about Appium clients! Head over to the Ecosystem page to check out the current list of clients.</p> <ol> <li> <p>These libraries are alternately called \"clients\", \"client libraries\", or \"client bindings\".   They all mean the same thing!\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/drivers/","title":"Intro to Appium Drivers","text":"<p>As the main Overview makes clear, \"drivers\" are basically Appium's answer to the question, \"how do we support automation of multiple, unrelated platforms?\" In this doc we'll get into a little more detail about how drivers work. The specific details of how drivers work probably don't matter too much for you, unless you're planning on writing your own driver or contributing to an existing driver (things we hope you do!).</p> <p>The main benefit in understanding a bit more of how drivers work is that being aware of the typical complexity or the typical driver architecture will inform your debugging process when you inevitably run into an issue in one of your tests.</p>"},{"location":"intro/drivers/#interface-implementations","title":"Interface Implementations","text":"<p>At the most basic level, drivers are simply Node.js classes that extend a special class included in Appium, called <code>BaseDriver</code>. You could have something very close to a \"working\" driver, with these very simple lines of code:</p> <pre><code>import BaseDriver from '@appium/base-driver'\nclass MyNewDriver extends BaseDriver {\n}\n</code></pre> <p>This empty driver doesn't do anything, but you could wrap it up in a Node.js module, add a few Appium-related fields to the module's manifest (<code>package.json</code>), and then install it using <code>appium driver install</code>.</p> <p>So, from a technical perspective, an Appium driver is just a bit of code that inherits from some other Appium code. That's it! Now, inheriting from <code>BaseDriver</code> actually gives us a lot, because <code>BaseDriver</code> is essentially an encapsulation of the entire WebDriver protocol. So all a driver needs to do to do something useful is to implement Node.js methods with names corresponding to their WebDriver protocol equivalents.</p> <p>So let's say I wanted to do something with this empty driver; first I have to decide which WebDriver command I want to implement. For our example, let's take the Navigate To WebDriver command. Leave aside for the moment what I want to have the driver do when this command is executed. To tell Appium the driver can handle the command, all we have to do is define a method like this in our driver class:1</p> <pre><code>async setUrl(url) {\n// do whatever we want here\n}\n</code></pre> <p>That's it! How we actually implement the command is totally up to us, and depends on the platform(s) we want to support. Here are some different example implementations of this command for different platforms:</p> <ul> <li>Browsers: execute some JavaScript to set <code>window.location.href</code></li> <li>iOS apps: launch an app using a deep link</li> <li>Android apps: launch an app using a deep link</li> <li>React apps: load a specific route</li> <li>Unity: go to a named scene</li> </ul> <p>So you can see there can be a lot of differences between how drivers implement the same WebDriver command across platforms.2 What is the same, though, is how they express that they can handle a protocol command.</p> <p>We're going into this great amount of detail (which you don't need to remember, by the way), because it's important to stress the point that an Appium driver is not inherently anything in particular, other than a bit of JS code that can handle WebDriver protocol commands. Where you go from there is up to you, the driver author!</p>"},{"location":"intro/drivers/#automation-mapping","title":"Automation mapping","text":"<p>But typically what driver authors want to do is to provide automation behaviours for a given platform(s) that are semantically very similar to the the WebDriver spec implementations for browsers. When you want to find an element, you should get a reference to a UI element. When you want to click or tap that element, the resulting behaviour should be the same as if a person were to click or tap on the element. And so on.</p> <p>So the real challenge for driver authors is not how to work with the WebDriver protocol (because <code>BaseDriver</code> encapsulates all that for you), but how to make the actual automation happen on the target platform. Every driver relies on its own set of underlying technologies here. As mentioned in the Overview, the iOS driver uses an Apple technology called XCUITest. These underlying automation technologies usually have proprietary or idiosyncratic APIs of their own. Writing a driver becomes the task of mapping the WebDriver protocol to this underlying API (or sometimes a set of different underlying APIs--for example, the UiAutomator2 driver relies not only on the UiAutomator2 technology from Google, but also functions only available through ADB, as well as functions only available via the Android SDK inside a helper app). Tying it all together into a single, usable, WebDriver interface is the incredibly useful (but incredibly challenging) art of driver development!</p>"},{"location":"intro/drivers/#multi-level-architecture","title":"Multi-level architecture","text":"<p>In practice, this often results in a pretty complex architecture. Let's take iOS for example again. The XCUITest framework (the one used by the Appium driver) expects code that calls it to be written in Objective-C or Swift. Furthermore, XCUITest code can only be run in a special mode triggered by Xcode (and directly or indirectly, the Xcode command line tools). In other words, there's no straightforward way to go from a Node.js function implementation (like <code>setUrl()</code> above) to XCUITest API calls.</p> <p>What the XCUITest driver authors have done is instead to split the driver into two parts: one part written in Node.js (the part which is incorporated into Appium and which initially handles the WebDriver commands), and the other part written in Objective-C (the part which actually gets run on an iOS device and makes XCUITest API calls). This makes interfacing with XCUITest possible, but introduces the new problem of coordination between the two parts.</p> <p>The driver authors could have chosen any of a number of very different strategies to model the communication between the Node.js side and the Objective-C side, but at the end of the day decided to use ... the WebDriver protocol! That's right, the Objective-C side of the XCUITest driver is itself a WebDriver implementation, called WebDriverAgent.3</p> <ul> <li>The Appium XCUITest driver builds and manages WebDriverAgent for you, which can be a pain and     involves the use of Xcode.</li> <li>The XCUITest driver does lots more than what can be done by WebDriverAgent, for example working     with simulators or devices, installing apps, and the like.</li> </ul> <p>The moral of the story is that driver architectures can become quite complicated and multilayered, due to the nature of the problem we're trying to solve. It also means it can be difficult sometimes to tell where in this chain of technologies something has gone wrong, if you run into a problem with a particular test. With the XCUITest world again, we have something like the following set of technologies all in play at the same time:</p> <ul> <li>Your test code (in its programming language) - owned by you</li> <li>The Appium client library - owned by Appium</li> <li>The Selenium client library - owned by Selenium</li> <li>The network (local or Internet)</li> <li>The Appium server - owned by Appium</li> <li>The Appium XCUITest driver - owned by Appium</li> <li>WebDriverAgent - owned by Appium</li> <li>Xcode - owned by Apple</li> <li>XCUITest - owned by Apple</li> <li>iOS itself - owned by Apple</li> <li>macOS (where Xcode and iOS simulators run) - owned by Apple</li> </ul> <p>It's a pretty deep stack!</p>"},{"location":"intro/drivers/#proxy-mode","title":"Proxy mode","text":"<p>There's one other important architectural aspect of drivers to understand. It can be exemplified again by the XCUITest driver. Recall that we just discussed how the two \"halves\" of the XCUITest driver both speak the WebDriver protocol---the Node.js half clicks right into Appium's WebDriver server, and the Objective-c half (WebDriverAgent) is its own WebDriver implementation.</p> <p>This opens up the possibility of Appium taking a shortcut in certain cases. Let's imagine that the XCUITest driver needs to implement the <code>Click Element</code> command. The internal code of this implementation would look something like taking the appropriate parameters and constructing an HTTP request to the WebDriverAgent server. In this case, we're basically just reconstructing the client's original call to the Appium server!4 So there's really no need to even write a function implementing the <code>Click Element</code> command. Instead, the XCUITest driver can just let Appium know that this command should be proxied directly to some other WebDriver server.</p> <p>If you're not familiar with the concept of \"proxying,\" in this case it just means that the XCUITest driver will not be involved at all in handling the command. Instead it will merely be repackaged and forwarded to WebDriverAgent at the protocol level, and WebDriverAgent's response will likewise be passed back directly to the client, without any XCUITest driver code seeing it or modifying it.</p> <p>This architectural pattern provides a nice bonus for driver authors who choose to deal with the WebDriver protocol everywhere, rather than constructing bespoke protocols. It also means that Appium can create wrapper drivers for any other existing WebDriver implementation very easily. If you look at the Appium Safari driver code, for example, you'll see that it implements basically no standard commands, because all of these are proxied directly to an underlying SafariDriver process.</p> <p>It's important to understand that this proxying business is sometimes happening under the hood, because if you're ever diving into some open source driver code trying to figure out where a command is implemented, you might be surprised to find no implementation at all in the Node.js driver code itself! In that case, you'll need to figure out where commands are being proxied to so you can look there for the appropriate implementation.</p> <p>OK, that's enough for this very detailed introduction to drivers!</p> <ol> <li> <p>You might notice that <code>setUrl</code> doesn't look anything like <code>Navigate To</code>, so how did we know   to use it rather than some other random string? Well, Appium's WebDriver-protocol-to-method-name   mapping is defined in a special file within the <code>@appium/base-driver</code> package called   routes.js.   So if you're writing a driver, this is where you would go to figure out what method names to use   and what parameters to expect. Or you could look at the source for any of the main Appium   drivers!\u00a0\u21a9</p> </li> <li> <p>Of course, we want to keep the semantics as similar as possible, but in the world of iOS, for   example, launching an app via a deep link (a URL with a special app-specific scheme) is about as   close as we are going to get to navigating to a web URL.\u00a0\u21a9</p> </li> <li> <p>You could in theory, therefore, point your WebDriver client straight to WebDriverAgent and   bypass Appium entirely. This is usually not convenient, however, for a few reasons:\u00a0\u21a9</p> </li> <li> <p>It's not exactly the same call, because the Appium server and the WebDriverAgent server   will generate different session IDs, but these differences will be handled transparently.\u00a0\u21a9</p> </li> </ol>"},{"location":"intro/history/","title":"Appium Project History","text":"<p>Appium has been around in one form or another since 2012. It's been under the direction of various individuals and organizations, and it's even been implemented in 3 different programming languages! Welcome to more than you ever wanted to know about how Appium got to be what is it today...</p>"},{"location":"intro/history/#early-inspiration","title":"Early Inspiration","text":"<p>Dan Cuellar was the Test Manager at Zoosk in 2011, when he encountered a problem. The length of the test passes on the iOS product was getting out of hand. Less testing was an option, but would come with additional risk, especially with it taking several days to get patches through the iOS App Store Review process. He thought back to his days working on websites and realized automation was the answer.</p> <p>Dan surveyed the existing landscape of tools, only to find that all of them hand major drawbacks. The tool supplied by Apple, UIAutomation, required tests to be written in JavaScript, and did not allow for real-time debugging or interpretation. It also had to be executed inside the Xcode profiling tool, Instruments. Other 3rd-party tools used private APIs and required SDKs and HTTP Servers to be embedded into the application. This seemed highly undesirable.</p> <p>Unsatisfied with the existing options, Dan asked his manager for some additional time to see if he could find a better way. He spent 2 weeks poking and prodding around to see if there was a way to use approved Apple technologies to automate an iOS application. The first implementation he tried used AppleScript to send messages to Mac UI elements using the OS X accessibility APIs. This worked to some degree, but would never work on real devices, not to mention other drawbacks.</p> <p>So he thought, what if I could get the UIAutomation framework to run in real time like an interpreter? He looked into it and he determined that all he would need to do is find a way to receive, execute, and reply to commands from within a UIAutomation javascript program. Using the utility Apple provided for executing shell commands he was able to <code>cat</code> sequentially ordered text files to receive commands, <code>eval()</code> the output to execute them, and write them back to disk with <code>python</code>. He then prepared code in C# that implemented the Selenium-style syntax to write the sequentially ordered javascript commands. iOSAuto is born.</p>"},{"location":"intro/history/#selenium-conference-2012","title":"Selenium Conference 2012","text":"<p>Dan was selected to speak at Selenium Conference 2012 in London about an entirely different topic. As part of his presentation, he showed off iOS Automation using Selenium syntax to demonstrate writing platform-agnostic tests that use separate platform-specific page objects with a common interface. To his surprise, the cool test architecture would take a backseat to the spectacle of iOS tests running like WebDriver tests. Several people suggested that he give a lightning talk later in the conference to explain exactly how it worked.</p> <p>On the second day of the conference, Dan stepped up on stage to give the lightning talk.  Jason Huggins, co-creator of Selenium, moderated the lightning talks.  Dan experienced technical difficulties getting his presentation to load, and Jason nearly had to move on to the next lightning talk.  At the last moment, the screen turned on and Dan jumped into his presentation. He explained the details of his implementation and how it worked, begged for contributors, and in five minutes it was over. The crowd applauded politely, and he left the stage.</p>"},{"location":"intro/history/#the-phone-rings","title":"The Phone Rings","text":"<p>Four months after the Selenium Conference, Jason called Dan. Jason had been working on iOS testing support for a client at Sauce Labs.  Jason remembered Dan's lightning talk and thought the project might be useful to Jason's work, but Dan's source code was not public. Jason asked Dan to meet up.  Later that week, Dan met Jason in a bar in San Francisco and showed him the source code for iOS Auto.</p> <p>A long-time open source advocate, Jason encouraged Dan to release his code under an open source license.  In August, Dan released the source code on GitHub in C#. Jason encouraged Dan to change the language to make the project more appealing to potential contributors. Dan uploaded a new version in Python. In September, Jason added a web server and began to implement the WebDriver wire protocol over HTTP, making iOS Auto scriptable from any Selenium WebDriver client library in any language.</p>"},{"location":"intro/history/#the-mobile-testing-summit","title":"The Mobile Testing Summit","text":"<p>Jason decided that the project should be presented at the Mobile Testing Summit in November, but suggested that the project get a new name first. Many ideas were thrown out and they settled on AppleCart. A day later, while he was perusing some of Apple's guidance on copyright and trademarks, Jason noticed that under the section of examples for names Apple would defend its trademarks against, the first example was \"AppleCart\". He called Dan and informed him of the situation, and they brainstormed for a bit before Jason hit the jackpot. Appium... Selenium for Apps.</p>"},{"location":"intro/history/#sauce-labs-and-nodejs","title":"Sauce Labs and Node.js","text":"<p>In January 2013, not long after the Mobile Testing Summit, Sauce Labs decided to fully back Appium and provide more developer power. A task force was created to evaluate the current state and how best to move forward with the project. The team, which included Jonathan Lipps (the current project lead), decided that Appium needed a rebirth, and ultimately settled on Node.js as the framework to use. Node is well-known as a fast and efficient web server backend, and at the end of the day, Appium is just a highly-specialized web server. It was also decided that JavaScript as a language was accessible enough that Appium would be able to grow into a larger community of open-source developers with JavaScript than the other options on the table.</p> <p>In just a few days, the team leveraged the existing work on Appium and had a new version of Appium with as much functionality as the previous Python version. The foundation had been laid for Appium's basic architecture, and we have been successfully building on it since. A few weeks into this sprint, Jonathan Lipps was formally designated project lead and he began to strategize how to get more people from the community involved with Appium's development.</p>"},{"location":"intro/history/#appium-around-the-world","title":"Appium Around the World","text":"<p>Ultimately, Jonathan decided that getting Appium in front of as many developers at conferences and meetups was the best way to attract users and contributions. Appium in its new incarnation was debuted at the Google Test Automation Conference 2013. Later in 2013, Appium was presented at conferences and meetups all around the US, as well as in England, Poland, Portugal, and Australia. Notably, Jonathan had Appium perform as instruments in a band and Dan Cuellar put together a fun Appium video montage for Selenium Conference.</p> <p>But during all these presentations and conferences, the project continued to develop. Early in 2013 we released Android and Selendroid support, making Appium the first truly cross-platform automation framework. The project also continued to attract users and contributors, and by the end of 2013, we'd already had well over 1,000 commits.</p>"},{"location":"intro/history/#the-road-to-appium-10","title":"The Road to Appium 1.0","text":"<p>Appium began to grow and mature significantly. In May 2014, we released Appium 1.0, which stood as a milestone in Appium's development. Appium was given various awards and became the most popular open-source cross-platform mobile automation framework. Stability improved, bugs were prioritized and fixed, and features added. Sauce Labs increased the number of developers it donated to working on Appium, but the entire community stayed involved in guiding the project and contributing to it, and project governance continued to happen in the open, on public mailing lists and GitHub's issue tracker.</p>"},{"location":"intro/history/#the-appium-umbrella-broadens","title":"The Appium Umbrella Broadens","text":"<p>Eventually, it became clear that the Appium codebase was not optimized for a large team of distributed, sometime contributors. We took the opportunity as a committer team to rewrite Appium from the ground up, using a more modern version of the JavaScript language, and redoing Appium's architecture so that it was easy for users or third-party developers to build their own Appium \"drivers\". We wanted for it to be easier for new contributors to get ramped up on the Appium codebase, and to see support for new platforms added to Appium by groups other than the core team. That vision has begun to be fulfilled, with groups like Microsoft and Youi.tv adding drivers to Appium for Windows desktop app automation and Youi.tv app automation, respectively. Who knows what platforms will be added next?</p>"},{"location":"intro/history/#appium-to-the-people","title":"Appium To The People","text":"<p>In late 2016, Sauce Labs donated Appium as a project to the JS Foundation, in order to cement for the world Sauce's commitment that Appium remains open source. The JS Foundation is a non-profit open source stewardship organization which takes responsibility for holding the copyright for open source projects, as well as ensuring they have a long and successful tenure in the community. As a result of our move to a non-profit foundation, we hope that the door will open even more widely for new contributors, either as individuals or representing one of the many companies which now have an interest in seeing Appium move forward.</p> <p>Eventually, the JS Foundation merged into the OpenJS Foundation, and Appium is currently an Impact Project in the foundation.</p>"},{"location":"intro/history/#appium-20","title":"Appium 2.0","text":"<p>Appium 2.0 was released in 2022, with a new focus on Appium as an ecosystem rather than a singular project. Drivers and plugins can be developed and shared by anyone, opening up a world of possibilities for automation-related development for platforms far beyond iOS and Android.</p>"},{"location":"intro/requirements/","title":"Appium Requirements","text":"<p>The basic requirements for the Appium server are:</p> <ul> <li>A macOS, Linux, or Windows operating system</li> <li>Node.js version in the SemVer range <code>^14.17.0 || ^16.13.0 || &gt;=18.0.0</code></li> <li>NPM version &gt;= 8 (NPM is usually bundled with Node.js, but can be upgraded independently)</li> </ul> <p>By itself, Appium is relatively lightweight and doesn't have significant disk space or RAM requirements. It can even be run in resource-constrained environments like Raspberry Pi, so long as Node.js is available.</p> <p>To use Appium to automate a particular platform, please refer to the documentation of the Appium driver(s) for that platform for additional dependencies. It is almost universally the case that Appium drivers for a given platform will require the developer toolchain and SDKs for that platform to be available.</p>"},{"location":"quickstart/","title":"Quickstart Intro","text":"<p>Let's get up and running with Appium! To successfully use this quickstart, it's recommended that you first have read the Introduction, so that you understand the concepts involved in running Appium and writing Appium scripts.</p> <p>The basic plan for this quickstart is as follows:</p> <ol> <li>Install Appium</li> <li>Install an Appium driver and its dependencies (we'll be using the UiAutomator2 driver for these examples)</li> <li>Install an Appium client library in your language or choice (this guide contains options for JavaScript, Python, and Java, though Appium clients also exist in other language).</li> <li>Write and run a simple Appium automation script using a sample application</li> </ol>"},{"location":"quickstart/#requirements","title":"Requirements","text":"<p>Before getting started, make sure your system satisfies the requirements for running the Appium server. Additional requirements will be discussed in conjunction with installing the UiAutomator2 driver. The guide also assumes you have basic command line proficiency on your platform, for example being able to run commands, set and persist environment variables, etc...</p> <p>Now you're ready to get started! So head on over to Installing Appium.</p>"},{"location":"quickstart/install/","title":"Install Appium","text":"<p>Installing Appium is as easy as running a single NPM command:</p> <pre><code>npm i --location=global appium\n</code></pre> <p>This command installs Appium globally on your system so that you can access it from the command line simply by running the <code>appium</code> command. Go ahead and run it now:</p> <pre><code>appium\n</code></pre> <p>You should see some output that starts with a line like this:</p> <pre><code>[Appium] Welcome to Appium v2.0.0\n</code></pre> <p>That's it! If you get this kind of output, the Appium server is up and running. Go ahead and quit it (CTRL-C) and move on to the next step, where we'll install a driver for automating Android apps.</p>"},{"location":"quickstart/next-steps/","title":"Next Steps","text":"<p>Now that you've successfully set up your system for Android automation and run a simple test, you'll want to continue exploring this documentation. In particular, these are good guides and reference materials especially for beginners:</p> <ul> <li>Managing Appium Drivers and Plugins</li> <li>Capabilities</li> <li>The list of available Drivers and Plugins</li> </ul> <p>You'll also find that the Appium Inspector is an indispensable tool for use in Appium test-writing, as it enables visual inspection of apps and helps you to discover element locators for use in your test scripts.</p> <p>You might also take advantage of one of the many online Appium courses available to you.</p> <p>Good luck and have fun!</p>"},{"location":"quickstart/test-java/","title":"Write a Test (Java)","text":"<p>The Appium team maintains an official client for the Java programming language. It is built on top of Selenium. You can also use this client in your Kotlin projects.</p> <p>Follow the Add Appium java client to your test framework tutorial in order to connect the library to your test framework sources.</p> <p>The Appium Java client has dedicated classes to support most of the official Appium drivers. For other drivers you could simply use the AppiumDriver class or build your custom derivatives from it. Check the Drivers Support article to learn more about the current driver class implementations.</p> <p>Follow the Usage Examples article in order understand how to invoke Java client features from your test framework.</p>"},{"location":"quickstart/test-js/","title":"Write a Test (JS)","text":"<p>To write an Appium test in JavaScript (Node.js), we need to choose an Appium-compatible client library. The best-maintained library and the one the Appium team recommends using is WebdriverIO, so let's use that. Since we already have Appium installed we know our Node and NPM requirements are already satisfied. So just create a new project directory somewhere on your computer and then initialize a new Node.js project in it:</p> <pre><code>npm init\n</code></pre> <p>It doesn't really matter what you put in the prompts, just so long as you end up with a valid <code>package.json</code>.</p> <p>Now, install the <code>webdriverio</code> package via NPM:</p> <pre><code>npm i --save-dev webdriverio\n</code></pre> <p>Once this is done, your <code>package.json</code> file should include a section like the following:</p> package.json<pre><code>{\n\"devDependencies\": {\n\"webdriverio\": \"^8.11.2\"\n}\n}\n</code></pre> <p>Now it's time to type up the test itself. Create a new file called <code>test.js</code> with the following contents:</p> test.js<pre><code>const {remote} = require('webdriverio');\nconst capabilities = {\nplatformName: 'Android',\n'appium:automationName': 'UiAutomator2',\n'appium:deviceName': 'Android',\n'appium:appPackage': 'com.android.settings',\n'appium:appActivity': '.Settings',\n};\nconst wdOpts = {\nhostname: process.env.APPIUM_HOST || 'localhost',\nport: parseInt(process.env.APPIUM_PORT, 10) || 4723,\nlogLevel: 'info',\ncapabilities,\n};\nasync function runTest() {\nconst driver = await remote(wdOpts);\ntry {\nconst batteryItem = await driver.$('//*[@text=\"Battery\"]');\nawait batteryItem.click();\n} finally {\nawait driver.pause(1000);\nawait driver.deleteSession();\n}\n}\nrunTest().catch(console.error);\n</code></pre> <p>Note</p> <p>It's not within the scope of this guide to give a complete run-down on the WebdriverIO client library or everything that's happening here, so we'll leave the code itself unexplained in detail for now. You may want to read up particularly on Appium Capabilities in addition to familiarizing yourself with the excellent WebdriverIO documentation for a fuller explanation of the various API commands you see and what their purpose is.</p> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>node test.js\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-py/","title":"Write a Test (Python)","text":"<p>The Appium Python Client is an official Appium client in Python, which is available via pypi under the Appium-Python-Client package name. It inherits from the Selenium Python Binding, so installing the Appium Python Client includes the selenium binding.</p> <pre><code>pip install Appium-Python-Client\n</code></pre> <p>This example uses Python's built-in <code>unittest</code> module, though you can use any Python test framework you want. The Appium Python client adds the <code>appium:</code> vendor prefix automatically. You usually do not need to worry about the prefix.</p> test.py<pre><code>import unittest\nfrom appium import webdriver\nfrom appium.webdriver.common.appiumby import AppiumBy\ncapabilities = dict(\nplatformName='Android',\nautomationName='uiautomator2',\ndeviceName='Android',\nappPackage='com.android.settings',\nappActivity='.Settings',\nlanguage='en',\nlocale='US'\n)\nappium_server_url = 'http://localhost:4723'\nclass TestAppium(unittest.TestCase):\ndef setUp(self) -&gt; None:\nself.driver = webdriver.Remote(appium_server_url, capabilities)\ndef tearDown(self) -&gt; None:\nif self.driver:\nself.driver.quit()\ndef test_find_battery(self) -&gt; None:\nel = self.driver.find_element(by=AppiumBy.XPATH, value='//*[@text=\"Battery\"]')\nel.click()\nif __name__ == '__main__':\nunittest.main()\n</code></pre> <p>Note</p> <p>It's not within the scope of this guide to give a complete run-down on the Python client library or everything that's happening here, so we'll leave the code itself unexplained in detail for now. - You may want to read up particularly on Appium Capabilities. - functional test code in Python Client GitHub repository should help to find more working example. - Documentation also helps to find methods defined in the Appium Python Client.</p> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>python test.py\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/test-rb/","title":"Write a Test (Ruby)","text":"<p>The AppiumLib and the AppiumLibCore (recommended) are official Appium client libraries in Ruby, which are available via gem under the appium_lib and the appium_lib_core package names. The appium_lib_core inherits from the Selenium Ruby Binding, and the appium_lib inherits from the appium_lib_core, so installing these libraries include the selenium binding. We recommend <code>appium_lib_core</code> if you need a less complex client-side solution. The <code>appium_lib</code> has some useful methods the core does not have, but for the cost of greater complexity.</p> <pre><code>gem install appium_lib\n# or\ngem install appium_lib_core\n</code></pre> <p>The <code>appium_lib_core</code> is the main part as an Appium client. <code>appium_lib</code> has various helper methods, but the driver instance was ordinary designed to be used as a global variable. It could causes an issue to handle the instance. <code>appium_lib_core</code> does not have such a global variable.</p> <p>This example is by the <code>appium_lib_core</code> with <code>test-unit</code> gem module. Tes code in <code>appium_lib</code> should be similar.</p> test.py<pre><code>require 'appium_lib_core'\nrequire 'test/unit'\nCAPABILITIES = {\nplatformName: 'Android',\nautomationName: 'uiautomator2',\ndeviceName: 'Android',\nappPackage: 'com.android.settings',\nappActivity: '.Settings',\nlanguage: 'en',\nlocale: 'US'\n}\nSERVER_URL = 'http://localhost:4723'\nclass AppiumTest &lt; Test::Unit::TestCase\ndef setup\n@core = ::Appium::Core.for capabilities: CAPABILITIES\n@driver = @core.start_driver server_url: SERVER_URL\nend\ndef teardown\n@driver&amp;.quit\nend\ndef test_version\n@driver.wait { |d| d.find_element :xpath, '//*[@text=\"Battery\"]' }.click\nend\nend\n</code></pre> <p>Note</p> <p>It's not within the scope of this guide to give a complete run-down on the Ruby client library or everything that's happening here, so we'll leave the code itself unexplained in detail for now.</p> <ul> <li>You may want to read up particularly on Appium Capabilities.</li> <li>functional test code in the appium_lib_core GitHub repository should help to find more working example.</li> <li>Documentation appium_lib_core and appium_lib also helps to find available methods.</li> </ul> <p>Basically, this code is doing the following:</p> <ol> <li>Defining a set of \"Capabilities\" (parameters) to send to the Appium server so Appium knows what kind of thing you want to automate.</li> <li>Starting an Appium session on the built-in Android settings app.</li> <li>Finding the \"Battery\" list item and clicking it.</li> <li>Pausing for a moment purely for visual effect.</li> <li>Ending the Appium session.</li> </ol> <p>That's it! Let's give it a try. Before you run the test, make sure that you have an Appium server running in another terminal session, otherwise you'll get an error about not being able to connect to one. Then, you can execute the script:</p> <pre><code>bundle install\nbundle exec ruby test.rb\n</code></pre> <p>If all goes well, you'll see the Settings app open up and navigate to the \"Battery\" view before the app closes again.</p> <p>Congratulations, you've started your Appium journey! Read on for some next steps to explore.</p>"},{"location":"quickstart/uiauto2-driver/","title":"Install the UiAutomator2 Driver","text":"<p>You can't do much with Appium unless you have a driver, which is an interface that allows Appium to automate a particular platform.</p> <p>Info</p> <p>For this quickstart guide, we're going to be automating an app on the Android platform, because the system requirements for Android automation via Appium are the same as for Appium itself (whereas the iOS driver, for example, requires you to be using macOS).</p> <p>The driver we're going to use is called the UiAutomator2 Driver. It's worth visiting that driver's documentation and bookmarking it, because it will be an invaluable reference down the line.</p>"},{"location":"quickstart/uiauto2-driver/#set-up-android-automation-requirements","title":"Set up Android automation requirements","text":"<p>According to the driver, in addition to a working Appium server, we also need to do the following:</p> <ul> <li>Download Android SDK platform tools. You will probably want to download Android Studio and manage the SDK tools from within it for the easiest experience.</li> <li>Set an environment variable pointing to the directory on disk where the Android tools are installed. You can usually find the path to this directory in the Android Studio SDK manager. It will contain the <code>platform-tools</code> and other directories. We need to define and persist the environment variable as <code>ANDROID_HOME</code> (or alternatively <code>ANDROID_SDK_ROOT</code>).</li> <li>Use the Android SDK manager to download whichever Android platform we want to automate (for example, API level 30)</li> <li>Install the Java JDK (for the most recent Android API levels, JDK 9 is required, otherwise JDK 8 is required). It's easiest to use the OpenJDK packages. Make sure you get the JDK and not the JRE.</li> <li>When the JDK is installed, you'll need to find the path to the JDK home directory as it was installed on your system. This will be the directory that contains the <code>bin</code>, <code>include</code>, and other directories. The path must be persisted as an environment variable named <code>JAVA_HOME</code>, so that Appium can find the appropriate Java tooling that is required to work with the Android platform.</li> <li> <p>Use Android Studio to create and launch an Android Virtual Device (an AVD, otherwise known as an emulator). You may need to download the system images for the API level of the emulator you want to create. Using the AVD creation wizard in Android Studio is generally the easiest way to do all of this.</p> <p>Note</p> <p>You can also use a physical Android device, so long as it is configured for debugging and development</p> </li> <li> <p>With the emulator or device connected, you can run <code>adb devices</code> (via the binary located at <code>$ANDROID_HOME/platform-tools/adb</code>) to verify that your device shows up as connected.</p> </li> </ul> <p>Once your device shows up as connected in ADB, and you've verified that the environment variables are set up correctly in the terminal context where you are going to run Appium, you should be good to go! If you ran into problems with any of these steps, refer to the driver documentation, or the various Android or Java documentation sites as necessary.</p> <p>Also, congratulations: whether or not you intended to, you now have the Android developer toolchain set up on your system, so you can get busy making Android apps if you want!</p>"},{"location":"quickstart/uiauto2-driver/#install-the-driver-itself","title":"Install the driver itself","text":"<p>Since the UiAutomator2 driver is maintained by the core Appium team, it has an 'official' driver name that you can use to install it easily via the Appium Extension CLI:</p> <pre><code>appium driver install uiautomator2\n</code></pre> <p>It should produce output that looks something like:</p> <pre><code>Attempting to find and install driver 'uiautomator2'\n\u2714 Installing 'uiautomator2' using NPM install spec 'appium-uiautomator2-driver'\nDriver uiautomator2@2.0.5 successfully installed\n- automationName: UiAutomator2\n- platformNames: [\"Android\"]\n</code></pre> <p>Running this command will locate and install the latest version of the UiAutomator2 driver, making it available for automation. Note that when it is installed it tells you what platforms it is valid for (in this case, <code>Android</code>), and what automation name (the <code>appium:automationName</code> capability) must be used to select this driver for use during an Appium session (in this case, <code>UiAutomator2</code>).</p> <p>Note</p> <p>In this quickstart we have used the Extension CLI to install the UiAutomator2 driver, but if you are incorporating Appium into a Node.js project, you might prefer to use NPM to manage Appium and its connected drivers. To learn more about this technique, visit the guide on managing Appium extensions.</p> <p>Now, start the Appium server again (run <code>appium</code>), and you should see that the newly-installed driver is listed as available:</p> <pre><code>[Appium] Available drivers:\n[Appium]   - uiautomator2@2.0.5 (automationName 'UiAutomator2')\n</code></pre> <p>With the Android setup complete and the UiAutomator2 driver installed, you're ready to write your first test! So pick the language you're most comfortable with under the quickstart menu and give it a shot.</p>"},{"location":"reference/","title":"Index","text":""},{"location":"reference/#appium","title":"Appium","text":"<p>Appium is an open-source, cross-platform test automation tool for native, hybrid, mobile web and desktop apps. Initially created to automate iOS and Android mobile applications Appium has grown to a full-featured platform that provides WebDriver-based automation possibilities for the whole set of different mobile and desktop platforms. See the full list of officially-supported and third-party drivers for more details.</p> <p> The current Appium 2.0 documentation can be found here.</p> <p> Appium core team does not maintain Appium 1.x anymore since the 1st of January 2022. All recent versions of officially supported platform drivers are not compatible to Appium 1.x, and require Appium 2 to run. Please read the migration guide from 1.x to 2.0 to manage the Appium server.</p> <p> If you still use the deprecated Appium Desktop containing the built-in server then you won't be able to upgrade to Appium 2. Consider switching to Appium Inspector instead.</p>"},{"location":"reference/#requirements","title":"Requirements","text":"<ul> <li>macOS, Linux or Windows operating system</li> <li>Node.js 16+. Any relevant LTS release should work just fine.</li> <li>NPM (Node Package Manager) 8+</li> </ul> <p>These are only server requirements. Each driver might have its own requirements. Consider checking the corresponding driver tutorial for more details.</p>"},{"location":"reference/#server","title":"Server","text":"<p>To install Appium 2 server using Node Package Manager (npm) run the following command:</p> <pre><code>npm i --location=global appium\n</code></pre> <p>To update Appium 2 server using Node Package Manager (npm) run the following command:</p> <p>```bash npm install --location=global appium@latest <pre><code>:bangbang: Make sure Appium 1 is fully uninstalled before upgrading it to Appium 2 (`npm uninstall --location=global appium`). Unexpected errors might appear if this has not been done.\n\n### Drivers\n\nAppium supports app automation across a variety of platforms, like iOS,\nAndroid, and Windows. Each platform is supported by one or more \"drivers\",\nwhich know how to automate that particular platform. Since version 2.0\nall drivers have been isolated from the Appium server app and can\nbe managed independently using the [appium driver](https://appiumpro.com/editions/122-installing-appium-20-and-the-driver-and-plugins-cli) command line interface.\n\nIn general, the drivers management in Appium 2 is as simple as:\n\n```bash\n# To install a new driver from npm\nappium driver install --source=npm appium-xcuitest-driver[@&lt;version&gt;]\n# To install a driver from a local folder (useful for developers)\nappium driver install --source=local /Users/me/sources/appium-xcuitest-driver\n# To install a new driver from github (hm, maybe it's time to publish it to NPM?)\nappium driver install --source=github --package=appium-xcuitest-driver appium/appium-xcuitest-driver\n\n# To list already installed drivers\nappium driver list --installed\n\n# To update a driver (it must be already installed)\nappium driver update xcuitest\n\n# To uninstall a driver (it won't last forever, wouldn't it?)\nappium driver uninstall xcuitest\n</code></pre></p> <p>You can find a full list of officially-supported and third-party drivers at the current Appium 2.0 documentation.</p>"},{"location":"reference/#plugins","title":"Plugins","text":"<p>The concept of plugins is something new that has been added exclusively to Appium2. Plugins allow you to extend server functionality without changing the server code. Plugins could be managed similarly to drivers:</p> <pre><code># To install an officially supported plugin\nappium plugin install images\n# To install a plugin from a local folder (useful for developers)\nappium plugin install --source=local /Users/me/sources/images\n# To install a new plugin from npm\nappium plugin install --source=npm appium-device-farm\n\n# To list already installed plugins\nappium plugin list --installed\n\n# To update a plugins (it must be already installed)\nappium plugin update appium-device-farm\n\n# To uninstall a plugin\nappium plugin uninstall appium-device-farm\n</code></pre> <p>The main difference between drivers and plugins is that the latter must be explicitly enabled on server startup after it was installed (drivers are enabled by default after installation):</p> <pre><code>appium server --use-plugins=device-farm,images\n</code></pre> <p>You can find a full list of officially-supported and third-party plugins at the current Appium 2.0 documentation.</p>"},{"location":"reference/#server-command-line-interface","title":"Server Command Line Interface","text":"<p>In order to start sending commands to Appium over the wire it must be listening on the URL where your client library expects it to listen. Use the following commands to run and configure Appium server:</p> <pre><code># Start the server on the default port and host (e.g. http://0.0.0.0:4723/)\nappium server\n# Start the server on the given port, host and use the base path prefix (the default prefix is /)\nappium server -p 9000 -a 127.0.0.1 -pa /wd/hub\n\n# Get the list of all supported command line parameters.\n# This list would also include descriptions of driver-specific\n# command line arguments for all installed drivers.\n# Each driver and plugin must have their command line arguments\n# exposed in a special JSON schema declared as a part of the corresponding\n# package.json file.\nappium server --help\n</code></pre> <p>Appium supports execution of parallel server processes as well as parallel driver sessions within single server process. Refer the corresponding driver documentations regarding which mode is optimal for the particular driver or whether it supports parallel sessions.</p>"},{"location":"reference/#why-appium","title":"Why Appium?","text":"<ol> <li>You usually don't have to recompile your app or modify it in any way, due    to the use of standard automation APIs on all platforms.</li> <li>You can write tests with your favorite dev tools using any    WebDriver-compatible    language such as Java,    JavaScript, Python,    Ruby, C#    with the Selenium WebDriver API. There are also various third party    client implementations for other languages.</li> <li>You can use any testing framework.</li> <li>Some drivers, like xcuitest and uiautomator2 ones have built-in mobile web and    hybrid app support. Within the same script, you can switch seamlessly between native    app automation and webview automation, all using the WebDriver model that's already    the standard for web automation.</li> <li>You can run your automated tests locally and in a cloud. There are multiple    cloud providers that support various Appium drivers (mostly    targeting iOS and Android mobile automation).</li> <li>Appium Inspector allows    visual debugging of automated tests and could be extremely useful for    beginners.</li> </ol> <p>Investing in the WebDriver protocol means you are betting on a single, free, and open protocol for testing that has become a web standard. Don't lock yourself into a proprietary stack.</p> <p>For example, if you use Apple's XCUITest library without Appium you can only write tests using Obj-C/Swift, and you can only run tests through Xcode. Similarly, with Google's UiAutomator or Espresso, you can only write tests in Java/Kotlin. Appium opens up the possibility of true cross-platform native app automation, for mobile and beyond. Finally!</p> <p>If you're new to Appium or want a more comprehensive description of what this is all about, please read our Intro to Appium.</p>"},{"location":"reference/#quickstart","title":"Quickstart","text":"<p>Check out our Quickstart guide to get going with Appium.</p> <p>There is also a sample code that contains many examples of tests in a variety of different languages!</p>"},{"location":"reference/#documentation","title":"Documentation","text":"<p>For prettily-rendered docs, please visit Appium Documentation. You can always find the full list of Appium doc pages at Appium's GitHub Repo as well.</p>"},{"location":"reference/#contributing","title":"Contributing","text":"<p>Please take a look at our contribution documentation for instructions on how to build, test, and run Appium from the source.</p>"},{"location":"reference/#project-history-credits-inspiration","title":"Project History, Credits &amp; Inspiration","text":"<ul> <li>History</li> </ul>"},{"location":"reference/#user-forums","title":"User Forums","text":"<p>Announcements and debates often take place on the Discussion Group, be sure to sign up!</p>"},{"location":"reference/#troubleshooting","title":"Troubleshooting","text":"<p>Please find the troubleshooting guide at the corresponding driver repository/documentation.</p>"},{"location":"reference/#license","title":"License","text":""},{"location":"reference/modules/","title":"Appium","text":""},{"location":"reference/modules/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/#modules","title":"Modules","text":"<ul> <li>@appium/base-driver</li> <li>@appium/base-plugin</li> <li>@appium/driver-test-support</li> <li>@appium/execute-driver-plugin</li> <li>@appium/fake-driver</li> <li>@appium/images-plugin</li> <li>@appium/opencv</li> <li>@appium/plugin-test-support</li> <li>@appium/relaxed-caps-plugin</li> <li>@appium/schema</li> <li>@appium/strongbox</li> <li>@appium/test-support</li> <li>@appium/typedoc-plugin-appium</li> <li>@appium/types</li> <li>@appium/universal-xml-plugin</li> <li>appium</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/","title":"Class: BaseDriver&lt;C, CArgs, Settings, CreateResult, DeleteResult, SessionData&gt;","text":"<p>@appium/base-driver.BaseDriver</p> <p><code>BaseDriver</code> implements this.  It contains default behavior; external drivers are expected to implement ExternalDriver instead.</p> <p><code>C</code> should be the constraints of the driver. <code>CArgs</code> would be the shape of <code>cliArgs</code>. <code>Settings</code> is the shape of the raw device settings object (see IDeviceSettings)</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>CArgs</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>CreateResult</code> <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt; <code>DeleteResult</code> <code>DefaultDeleteSessionResult</code> <code>SessionData</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#hierarchy","title":"Hierarchy","text":"<ul> <li> <p><code>DriverCore</code>&lt;<code>C</code>, <code>Settings</code>&gt;</p> </li> <li> <p><code>IEventCommands</code></p> </li> <li> <p><code>IFindCommands</code></p> </li> <li> <p><code>ILogCommands</code></p> </li> <li> <p><code>ITimeoutCommands</code></p> </li> <li> <p><code>IExecuteCommands</code></p> </li> </ul> <p>\u21b3 <code>BaseDriver</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implements","title":"Implements","text":"<ul> <li><code>Driver</code>&lt;<code>C</code>, <code>CArgs</code>, <code>Settings</code>, <code>CreateResult</code>, <code>DeleteResult</code>, <code>SessionData</code>&gt;</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_base_driver.BaseDriver/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#properties","title":"Properties","text":"<ul> <li>_eventHistory</li> <li>_log</li> <li>allowInsecure</li> <li>basePath</li> <li>caps</li> <li>cliArgs</li> <li>commandsQueueGuard</li> <li>denyInsecure</li> <li>desiredCapConstraints</li> <li>eventEmitter</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>locatorStrategies</li> <li>managedDrivers</li> <li>newCommandTimeoutMs</li> <li>noCommandTimer</li> <li>opts</li> <li>originalCaps</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>server</li> <li>serverHost</li> <li>serverPath</li> <li>serverPort</li> <li>sessionId</li> <li>settings</li> <li>shouldValidateCaps</li> <li>shutdownUnexpectedly</li> <li>supportedLogTypes</li> <li>webLocatorStrategies</li> <li>baseVersion</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#accessors","title":"Accessors","text":"<ul> <li>_desiredCapConstraints</li> <li>driverData</li> <li>eventHistory</li> <li>isCommandsQueueEnabled</li> <li>log</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#methods","title":"Methods","text":"<ul> <li>addManagedDriver</li> <li>assertFeatureEnabled</li> <li>assignServer</li> <li>canProxy</li> <li>clearNewCommandTimeout</li> <li>createSession</li> <li>deleteSession</li> <li>driverForSession</li> <li>ensureFeatureEnabled</li> <li>executeCommand</li> <li>executeMethod</li> <li>findElOrEls</li> <li>findElOrElsWithProcessing</li> <li>findElement</li> <li>findElementFromElement</li> <li>findElementFromShadowRoot</li> <li>findElements</li> <li>findElementsFromElement</li> <li>findElementsFromShadowRoot</li> <li>getLog</li> <li>getLogEvents</li> <li>getLogTypes</li> <li>getManagedDrivers</li> <li>getPageSource</li> <li>getProxyAvoidList</li> <li>getSession</li> <li>getSessions</li> <li>getSettings</li> <li>getStatus</li> <li>getTimeouts</li> <li>implicitWait</li> <li>implicitWaitForCondition</li> <li>implicitWaitMJSONWP</li> <li>implicitWaitW3C</li> <li>isFeatureEnabled</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>logCustomEvent</li> <li>logEvent</li> <li>logExtraCaps</li> <li>newCommandTimeout</li> <li>onUnexpectedShutdown</li> <li>pageLoadTimeoutMJSONWP</li> <li>pageLoadTimeoutW3C</li> <li>parseTimeoutArgument</li> <li>proxyActive</li> <li>proxyRouteIsAvoided</li> <li>reset</li> <li>scriptTimeoutMJSONWP</li> <li>scriptTimeoutW3C</li> <li>sessionExists</li> <li>setImplicitWait</li> <li>setNewCommandTimeout</li> <li>setProtocolMJSONWP</li> <li>setProtocolW3C</li> <li>startNewCommandTimeout</li> <li>startUnexpectedShutdown</li> <li>timeouts</li> <li>updateSettings</li> <li>validateDesiredCaps</li> <li>validateLocatorStrategy</li> </ul>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_base_driver.BaseDriver/#constructor","title":"constructor","text":"<p>\u2022 new BaseDriver&lt;<code>C</code>, <code>CArgs</code>, <code>Settings</code>, <code>CreateResult</code>, <code>DeleteResult</code>, <code>SessionData</code>&gt;(<code>opts</code>, <code>shouldValidateCaps?</code>)</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#type-parameters_1","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>CArgs</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>CreateResult</code> <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt; <code>DeleteResult</code> <code>void</code> <code>SessionData</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters","title":"Parameters","text":"Name Type Default value <code>opts</code> <code>Object</code> <code>undefined</code> <code>opts.address</code> <code>string</code> <code>undefined</code> <code>opts.allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.allowInsecure</code> <code>AllowInsecureConfig</code> <code>undefined</code> <code>opts.basePath</code> <code>string</code> <code>undefined</code> <code>opts.callbackAddress</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.callbackPort</code> <code>number</code> <code>undefined</code> <code>opts.debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>undefined</code> <code>opts.denyInsecure</code> <code>DenyInsecureConfig</code> <code>undefined</code> <code>opts.driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>undefined</code> <code>opts.fastReset?</code> <code>boolean</code> <code>undefined</code> <code>opts.keepAliveTimeout</code> <code>number</code> <code>undefined</code> <code>opts.localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logFile</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>undefined</code> <code>opts.logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>undefined</code> <code>opts.longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>undefined</code> <code>opts.plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>undefined</code> <code>opts.port</code> <code>number</code> <code>undefined</code> <code>opts.relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.skipUninstall?</code> <code>boolean</code> <code>undefined</code> <code>opts.strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.tmpDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.traceDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.useDrivers</code> <code>UseDriversConfig</code> <code>undefined</code> <code>opts.usePlugins</code> <code>UsePluginsConfig</code> <code>undefined</code> <code>opts.webhook</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>shouldValidateCaps</code> <code>boolean</code> <code>true</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#overrides","title":"Overrides","text":"<p>DriverCore.constructor</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:54</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_base_driver.BaseDriver/#_eventhistory","title":"_eventHistory","text":"<p>\u2022 <code>Protected</code> _eventHistory: <code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from","title":"Inherited from","text":"<p>DriverCore._eventHistory</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:76</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#_log","title":"_log","text":"<p>\u2022 <code>Protected</code> _log: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_1","title":"Inherited from","text":"<p>DriverCore._log</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:84</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of","title":"Implementation of","text":"<p>Driver.allowInsecure</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_2","title":"Inherited from","text":"<p>DriverCore.allowInsecure</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:60</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p> <p>basePath is used for several purposes, for example in setting up proxying to other drivers, since we need to know what the base path of any incoming request might look like. We set it to the default initially but it is automatically updated during any actual program execution by the routeConfiguringFunction, which is necessarily run as the entrypoint for any Appium server</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_1","title":"Implementation of","text":"<p>Driver.basePath</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_3","title":"Inherited from","text":"<p>DriverCore.basePath</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:56</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#caps","title":"caps","text":"<p>\u2022 caps: <code>DriverCaps</code>&lt;<code>C</code>&gt;</p> <p>The processed capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_2","title":"Implementation of","text":"<p>Driver.caps</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_5","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:46</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>CArgs</code> &amp; <code>ServerArgs</code></p> <p>The set of command line arguments set for this driver</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_3","title":"Implementation of","text":"<p>Driver.cliArgs</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:45</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#commandsqueueguard","title":"commandsQueueGuard","text":"<p>\u2022 <code>Protected</code> commandsQueueGuard: <code>AsyncLock</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_4","title":"Inherited from","text":"<p>DriverCore.commandsQueueGuard</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_7","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:90</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_4","title":"Implementation of","text":"<p>Driver.denyInsecure</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_5","title":"Inherited from","text":"<p>DriverCore.denyInsecure</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:62</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#desiredcapconstraints","title":"desiredCapConstraints","text":"<p>\u2022 desiredCapConstraints: <code>C</code></p> <p>The constraints object used to validate capabilities</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_5","title":"Implementation of","text":"<p>Driver.desiredCapConstraints</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_9","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:48</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_6","title":"Implementation of","text":"<p>Driver.eventEmitter</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_6","title":"Inherited from","text":"<p>DriverCore.eventEmitter</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_10","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:79</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_7","title":"Implementation of","text":"<p>Driver.helpers</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_7","title":"Inherited from","text":"<p>DriverCore.helpers</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_11","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:46</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_8","title":"Implementation of","text":"<p>Driver.implicitWaitMs</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_8","title":"Inherited from","text":"<p>DriverCore.implicitWaitMs</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_12","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:66</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#type-declaration","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_9","title":"Implementation of","text":"<p>Driver.initialOpts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_9","title":"Inherited from","text":"<p>DriverCore.initialOpts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_13","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:44</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_10","title":"Implementation of","text":"<p>Driver.locatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_10","title":"Inherited from","text":"<p>DriverCore.locatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_14","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:68</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#manageddrivers","title":"managedDrivers","text":"<p>\u2022 managedDrivers: <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_11","title":"Inherited from","text":"<p>DriverCore.managedDrivers</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_15","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:72</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_11","title":"Implementation of","text":"<p>Driver.newCommandTimeoutMs</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_12","title":"Inherited from","text":"<p>DriverCore.newCommandTimeoutMs</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_16","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:64</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#nocommandtimer","title":"noCommandTimer","text":"<p>\u2022 noCommandTimer: <code>null</code> | <code>Timeout</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_13","title":"Inherited from","text":"<p>DriverCore.noCommandTimer</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_17","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:74</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_12","title":"Implementation of","text":"<p>Driver.opts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_14","title":"Inherited from","text":"<p>DriverCore.opts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_18","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:42</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#originalcaps","title":"originalCaps","text":"<p>\u2022 originalCaps: <code>W3CDriverCaps</code>&lt;<code>C</code>&gt;</p> <p>The original capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_13","title":"Implementation of","text":"<p>Driver.originalCaps</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_19","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:47</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_14","title":"Implementation of","text":"<p>Driver.protocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_15","title":"Inherited from","text":"<p>DriverCore.protocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_20","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:100</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_15","title":"Implementation of","text":"<p>Driver.relaxedSecurityEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_16","title":"Inherited from","text":"<p>DriverCore.relaxedSecurityEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_21","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:58</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#server","title":"server","text":"<p>\u2022 <code>Optional</code> server: <code>AppiumServer</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_16","title":"Implementation of","text":"<p>Driver.server</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_22","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:49</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#serverhost","title":"serverHost","text":"<p>\u2022 <code>Optional</code> serverHost: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_17","title":"Implementation of","text":"<p>Driver.serverHost</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_23","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:50</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#serverpath","title":"serverPath","text":"<p>\u2022 <code>Optional</code> serverPath: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_18","title":"Implementation of","text":"<p>Driver.serverPath</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_24","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:52</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#serverport","title":"serverPort","text":"<p>\u2022 <code>Optional</code> serverPort: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_19","title":"Implementation of","text":"<p>Driver.serverPort</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_25","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:51</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_20","title":"Implementation of","text":"<p>Driver.sessionId</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_17","title":"Inherited from","text":"<p>DriverCore.sessionId</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_26","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:40</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#settings","title":"settings","text":"<p>\u2022 settings: <code>DeviceSettings</code>&lt;<code>Settings</code>&gt;</p> <p>settings should be instantiated by drivers which extend BaseDriver, but we set it to an empty DeviceSettings instance here to make sure that the default settings are applied even if an extending driver doesn't utilize the settings functionality itself</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_21","title":"Implementation of","text":"<p>Driver.settings</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_18","title":"Inherited from","text":"<p>DriverCore.settings</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_27","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:98</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_22","title":"Implementation of","text":"<p>Driver.shouldValidateCaps</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_19","title":"Inherited from","text":"<p>DriverCore.shouldValidateCaps</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_28","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:88</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#shutdownunexpectedly","title":"shutdownUnexpectedly","text":"<p>\u2022 shutdownUnexpectedly: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_20","title":"Inherited from","text":"<p>DriverCore.shutdownUnexpectedly</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_29","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:86</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#supportedlogtypes","title":"supportedLogTypes","text":"<p>\u2022 supportedLogTypes: <code>Readonly</code>&lt;<code>LogDefRecord</code>&gt;</p> <p>Definition of the available log types</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_23","title":"Implementation of","text":"<p>Driver.supportedLogTypes</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_21","title":"Inherited from","text":"<p>ILogCommands.supportedLogTypes</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_30","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:269</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_24","title":"Implementation of","text":"<p>Driver.webLocatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_22","title":"Inherited from","text":"<p>DriverCore.webLocatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_31","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:70</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#baseversion","title":"baseVersion","text":"<p>\u25aa <code>Static</code> baseVersion: <code>string</code> = <code>BASEDRIVER_VER</code></p> <p>Make the basedriver version available so for any driver which inherits from this package, we know which version of basedriver it inherited from</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_23","title":"Inherited from","text":"<p>DriverCore.baseVersion</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_32","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:38</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#accessors_1","title":"Accessors","text":""},{"location":"reference/classes/appium_base_driver.BaseDriver/#_desiredcapconstraints","title":"_desiredCapConstraints","text":"<p>\u2022 <code>Protected</code> <code>get</code> _desiredCapConstraints(): <code>Readonly</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code>  } ; <code>autoLaunch</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>autoWebview</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>automationName</code>: { <code>isString</code>: <code>true</code>  } ; <code>eventTimings</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>fullReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>language</code>: { <code>isString</code>: <code>true</code>  } ; <code>locale</code>: { <code>isString</code>: <code>true</code>  } ; <code>newCommandTimeout</code>: { <code>isNumber</code>: <code>true</code>  } ; <code>noReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>orientation</code>: { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } ; <code>platformName</code>: { <code>isString</code>: <code>true</code> ; <code>presence</code>: <code>true</code>  } ; <code>platformVersion</code>: { <code>isString</code>: <code>true</code>  } ; <code>printPageSourceOnFindFailure</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>udid</code>: { <code>isString</code>: <code>true</code>  } ; <code>webSocketUrl</code>: { <code>isBoolean</code>: <code>true</code>  }  } &amp; <code>C</code>&gt;</p> <p>Contains the base constraints plus whatever the subclass wants to add.</p> <p>Subclasses shouldn't need to use this. If you need to use this, please create an issue:</p> <p><code>See</code></p> <p>https://github.com/appium/appium/issues/new</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns","title":"Returns","text":"<p><code>Readonly</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code>  } ; <code>autoLaunch</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>autoWebview</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>automationName</code>: { <code>isString</code>: <code>true</code>  } ; <code>eventTimings</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>fullReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>language</code>: { <code>isString</code>: <code>true</code>  } ; <code>locale</code>: { <code>isString</code>: <code>true</code>  } ; <code>newCommandTimeout</code>: { <code>isNumber</code>: <code>true</code>  } ; <code>noReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>orientation</code>: { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } ; <code>platformName</code>: { <code>isString</code>: <code>true</code> ; <code>presence</code>: <code>true</code>  } ; <code>platformVersion</code>: { <code>isString</code>: <code>true</code>  } ; <code>printPageSourceOnFindFailure</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>udid</code>: { <code>isString</code>: <code>true</code>  } ; <code>webSocketUrl</code>: { <code>isBoolean</code>: <code>true</code>  }  } &amp; <code>C</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_33","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:69</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#driverdata","title":"driverData","text":"<p>\u2022 <code>get</code> driverData(): <code>Object</code></p> <p>This property is used by AppiumDriver to store the data of the specific driver sessions. This data can be later used to adjust properties for driver instances running in parallel. Override it in inherited driver classes if necessary.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_1","title":"Returns","text":"<p><code>Object</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_25","title":"Implementation of","text":"<p>Driver.driverData</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_24","title":"Inherited from","text":"<p>DriverCore.driverData</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_34","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:160</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#eventhistory","title":"eventHistory","text":"<p>\u2022 <code>get</code> eventHistory(): <code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_2","title":"Returns","text":"<p><code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_26","title":"Implementation of","text":"<p>Driver.eventHistory</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_25","title":"Inherited from","text":"<p>DriverCore.eventHistory</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_35","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:183</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 <code>get</code> isCommandsQueueEnabled(): <code>boolean</code></p> <p>This property controls the way the <code>executeCommand</code> method handles new driver commands received from the client. Override it for inherited classes only in special cases.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p>If the returned value is true (default) then all the commands   received by the particular driver instance are going to be put into the queue,   so each following command will not be executed until the previous command   execution is completed. False value disables that queue, so each driver command   is executed independently and does not wait for anything.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_27","title":"Implementation of","text":"<p>Driver.isCommandsQueueEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_26","title":"Inherited from","text":"<p>DriverCore.isCommandsQueueEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_36","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:175</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#log","title":"log","text":"<p>\u2022 <code>get</code> log(): <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_4","title":"Returns","text":"<p><code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_28","title":"Implementation of","text":"<p>Driver.log</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_27","title":"Inherited from","text":"<p>DriverCore.log</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_37","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:137</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_base_driver.BaseDriver/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_1","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_29","title":"Implementation of","text":"<p>Driver.addManagedDriver</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_28","title":"Inherited from","text":"<p>DriverCore.addManagedDriver</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_38","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:365</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_2","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_30","title":"Implementation of","text":"<p>Driver.assertFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_29","title":"Inherited from","text":"<p>DriverCore.assertFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_39","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:290</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#assignserver","title":"assignServer","text":"<p>\u25b8 assignServer(<code>server</code>, <code>host</code>, <code>port</code>, <code>path</code>): <code>void</code></p> <p>A helper function used to assign server information to the driver instance so the driver knows where the server is Running</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_3","title":"Parameters","text":"Name Type Description <code>server</code> <code>AppiumServer</code> the server object <code>host</code> <code>string</code> the server hostname <code>port</code> <code>number</code> the server port <code>path</code> <code>string</code> the server base url"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_31","title":"Implementation of","text":"<p>Driver.assignServer</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_40","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:184</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(<code>sessionId</code>): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_4","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_8","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_32","title":"Implementation of","text":"<p>Driver.canProxy</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_30","title":"Inherited from","text":"<p>DriverCore.canProxy</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_41","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:324</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_33","title":"Implementation of","text":"<p>Driver.clearNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_31","title":"Inherited from","text":"<p>DriverCore.clearNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_42","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:373</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>w3cCapabilities1</code>, <code>w3cCapabilities2?</code>, <code>w3cCapabilities?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>Historically the first two arguments were reserved for JSONWP capabilities. Appium 2 has dropped the support of these, so now we only accept capability objects in W3C format and thus allow any of the three arguments to represent the latter.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_5","title":"Parameters","text":"Name Type <code>w3cCapabilities1</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; <code>w3cCapabilities2?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; <code>w3cCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; <code>driverData?</code> <code>DriverData</code>[]"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>CreateResult</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_34","title":"Implementation of","text":"<p>Driver.createSession</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_43","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:232</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#deletesession","title":"deleteSession","text":"<p>\u25b8 deleteSession(<code>sessionId?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Stop an automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_6","title":"Parameters","text":"Name Type Description <code>sessionId?</code> <code>null</code> | <code>string</code> the id of the session that is to be deleted"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_35","title":"Implementation of","text":"<p>Driver.deleteSession</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_44","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:340</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p> <p>method required by MJSONWP in order to determine if the command should be proxied directly to the driver</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_7","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_12","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_36","title":"Implementation of","text":"<p>Driver.driverForSession</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_32","title":"Inherited from","text":"<p>DriverCore.driverForSession</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_45","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:227</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#ensurefeatureenabled","title":"ensureFeatureEnabled","text":"<p>\u25b8 ensureFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_8","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_33","title":"Inherited from","text":"<p>DriverCore.ensureFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_46","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:280</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#executecommand","title":"executeCommand","text":"<p>\u25b8 executeCommand&lt;<code>T</code>&gt;(<code>cmd</code>, <code>...args</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p> <p>This is the main command handler for the driver. It wraps command execution with timeout logic, checking that we have a valid session, and ensuring that we execute commands one at a time. This method is called by MJSONWP's express router.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#type-parameters_2","title":"Type parameters","text":"Name Type <code>T</code> <code>unknown</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_9","title":"Parameters","text":"Name Type <code>cmd</code> <code>string</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_37","title":"Implementation of","text":"<p>Driver.executeCommand</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_47","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:79</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>TArgs</code>, <code>TReturn</code>&gt;(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Call an <code>Execute Method</code> by its name with the given arguments. This method will check that the driver has registered the method matching the name, and send it the arguments.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#type-parameters_3","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;] = <code>unknown</code>[] <code>TReturn</code> <code>unknown</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_10","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the name of the Execute Method <code>args</code> <code>TArgs</code> a singleton array containing an arguments object"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>The result of calling the Execute Method</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_38","title":"Implementation of","text":"<p>Driver.executeMethod</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_34","title":"Inherited from","text":"<p>IExecuteCommands.executeMethod</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_48","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:148</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelorels","title":"findElOrEls","text":"<p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A helper method that returns one or more UI elements based on the search criteria</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_11","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_16","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_39","title":"Implementation of","text":"<p>Driver.findElOrEls</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_35","title":"Inherited from","text":"<p>IFindCommands.findElOrEls</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_49","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:242</p> <p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_12","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_40","title":"Implementation of","text":"<p>Driver.findElOrEls</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_36","title":"Inherited from","text":"<p>IFindCommands.findElOrEls</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_50","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:243</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelorelswithprocessing","title":"findElOrElsWithProcessing","text":"<p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>This is a wrapper for <code>findElOrEls</code> that validates locator strategies and implements the <code>appium:printPageSourceOnFindFailure</code> capability</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_13","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_18","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_41","title":"Implementation of","text":"<p>Driver.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_37","title":"Inherited from","text":"<p>IFindCommands.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_51","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:255</p> <p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_14","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_19","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_42","title":"Implementation of","text":"<p>Driver.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_38","title":"Inherited from","text":"<p>IFindCommands.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_52","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:256</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_15","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_43","title":"Implementation of","text":"<p>Driver.findElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_39","title":"Inherited from","text":"<p>IFindCommands.findElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_53","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:176</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelementfromelement","title":"findElementFromElement","text":"<p>\u25b8 findElementFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_16","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_21","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_44","title":"Implementation of","text":"<p>Driver.findElementFromElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_40","title":"Inherited from","text":"<p>IFindCommands.findElementFromElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_54","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:199</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelementfromshadowroot","title":"findElementFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_17","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_22","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_45","title":"Implementation of","text":"<p>Driver.findElementFromShadowRoot</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_41","title":"Inherited from","text":"<p>IFindCommands.findElementFromShadowRoot</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_55","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:221</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_18","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_23","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_46","title":"Implementation of","text":"<p>Driver.findElements</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_42","title":"Inherited from","text":"<p>IFindCommands.findElements</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_56","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:186</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelementsfromelement","title":"findElementsFromElement","text":"<p>\u25b8 findElementsFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_19","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_24","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_47","title":"Implementation of","text":"<p>Driver.findElementsFromElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_43","title":"Inherited from","text":"<p>IFindCommands.findElementsFromElement</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_57","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:211</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#findelementsfromshadowroot","title":"findElementsFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementsFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_20","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_25","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_48","title":"Implementation of","text":"<p>Driver.findElementsFromShadowRoot</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_44","title":"Inherited from","text":"<p>IFindCommands.findElementsFromShadowRoot</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_58","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:231</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getlog","title":"getLog","text":"<p>\u25b8 getLog(<code>logType</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the log for a given log type.</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_21","title":"Parameters","text":"Name Type Description <code>logType</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_26","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_49","title":"Implementation of","text":"<p>Driver.getLog</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_45","title":"Inherited from","text":"<p>ILogCommands.getLog</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_59","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:279</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getlogevents","title":"getLogEvents","text":"<p>\u25b8 getLogEvents(<code>type?</code>): <code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_22","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_27","title":"Returns","text":"<p><code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>The event history for the session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_50","title":"Implementation of","text":"<p>Driver.getLogEvents</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_46","title":"Inherited from","text":"<p>IEventCommands.getLogEvents</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_60","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:136</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getlogtypes","title":"getLogTypes","text":"<p>\u25b8 getLogTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get available log types as a list of strings</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_28","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_51","title":"Implementation of","text":"<p>Driver.getLogTypes</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_47","title":"Inherited from","text":"<p>ILogCommands.getLogTypes</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_61","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:273</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_29","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_52","title":"Implementation of","text":"<p>Driver.getManagedDrivers</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_48","title":"Inherited from","text":"<p>DriverCore.getManagedDrivers</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_62","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:369</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_30","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_53","title":"Implementation of","text":"<p>Driver.getPageSource</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_49","title":"Inherited from","text":"<p>IFindCommands.getPageSource</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_63","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:263</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_23","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_31","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_54","title":"Implementation of","text":"<p>Driver.getProxyAvoidList</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_50","title":"Inherited from","text":"<p>DriverCore.getProxyAvoidList</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_64","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:320</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getsession","title":"getSession","text":"<p>\u25b8 getSession(): <code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_32","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_55","title":"Implementation of","text":"<p>Driver.getSession</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_65","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:333</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getsessions","title":"getSessions","text":"<p>\u25b8 getSessions(): <code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>C</code>&gt;[]&gt;</p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_33","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>C</code>&gt;[]&gt;</p> <p>A list of session data objects</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_56","title":"Implementation of","text":"<p>Driver.getSessions</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_66","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:317</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>Get the current settings for the session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_34","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>The settings object</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_57","title":"Implementation of","text":"<p>Driver.getSettings</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_67","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:394</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_35","title":"Returns","text":"<p><code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_58","title":"Implementation of","text":"<p>Driver.getStatus</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_51","title":"Inherited from","text":"<p>DriverCore.getStatus</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_68","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:210</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#gettimeouts","title":"getTimeouts","text":"<p>\u25b8 getTimeouts(): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get the current timeouts</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-timeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_36","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>A map of timeout names to ms values</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_59","title":"Implementation of","text":"<p>Driver.getTimeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_52","title":"Inherited from","text":"<p>ITimeoutCommands.getTimeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_69","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:66</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implicitwait","title":"implicitWait","text":"<p>\u25b8 implicitWait(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_24","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_37","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_60","title":"Implementation of","text":"<p>Driver.implicitWait</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_53","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWait</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_70","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:45</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implicitwaitforcondition","title":"implicitWaitForCondition","text":"<p>\u25b8 implicitWaitForCondition(<code>condition</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Periodically retry an async function up until the currently set implicit wait timeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_25","title":"Parameters","text":"Name Type Description <code>condition</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>Promise</code>&lt;<code>any</code>&gt; the behaviour to retry until it returns truthy"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_38","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the condition</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_61","title":"Implementation of","text":"<p>Driver.implicitWaitForCondition</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_54","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitForCondition</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_71","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:59</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implicitwaitmjsonwp","title":"implicitWaitMJSONWP","text":"<p>\u25b8 implicitWaitMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_26","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_39","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_62","title":"Implementation of","text":"<p>Driver.implicitWaitMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_55","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_72","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:79</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implicitwaitw3c","title":"implicitWaitW3C","text":"<p>\u25b8 implicitWaitW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_27","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_40","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_63","title":"Implementation of","text":"<p>Driver.implicitWaitW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_56","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_73","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:72</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p> <p>Check whether a given feature is enabled via its name</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_28","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_41","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_64","title":"Implementation of","text":"<p>Driver.isFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_57","title":"Inherited from","text":"<p>DriverCore.isFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_74","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:252</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_42","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_65","title":"Implementation of","text":"<p>Driver.isMjsonwpProtocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_58","title":"Inherited from","text":"<p>DriverCore.isMjsonwpProtocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_75","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:231</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_43","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_66","title":"Implementation of","text":"<p>Driver.isW3CProtocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_59","title":"Inherited from","text":"<p>DriverCore.isW3CProtocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_76","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:235</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#logcustomevent","title":"logCustomEvent","text":"<p>\u25b8 logCustomEvent(<code>vendor</code>, <code>event</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_29","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_44","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_67","title":"Implementation of","text":"<p>Driver.logCustomEvent</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_60","title":"Inherited from","text":"<p>IEventCommands.logCustomEvent</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_77","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:128</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p> <p>API method for driver developers to log timings for important events</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_30","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_45","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_68","title":"Implementation of","text":"<p>Driver.logEvent</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_61","title":"Inherited from","text":"<p>DriverCore.logEvent</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_78","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:190</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#logextracaps","title":"logExtraCaps","text":"<p>\u25b8 logExtraCaps(<code>caps</code>): <code>void</code></p> <p>A helper function to log unrecognized capabilities to the console</p> <p><code>Params</code></p> <p>caps - the capabilities</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_31","title":"Parameters","text":"Name Type <code>caps</code> <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_46","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_79","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:354</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#newcommandtimeout","title":"newCommandTimeout","text":"<p>\u25b8 newCommandTimeout(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set Appium's new command timeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_32","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_47","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_69","title":"Implementation of","text":"<p>Driver.newCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_62","title":"Inherited from","text":"<p>ITimeoutCommands.newCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_80","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:111</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p> <p>Set a callback handler if needed to execute a custom piece of code when the driver is shut down unexpectedly. Multiple calls to this method will cause the handler to be executed mutiple times</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_33","title":"Parameters","text":"Name Type Description <code>handler</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> The code to be executed on unexpected shutdown. The function may accept one argument, which is the actual error instance, which caused the driver to shut down."},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_48","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_70","title":"Implementation of","text":"<p>Driver.onUnexpectedShutdown</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_63","title":"Inherited from","text":"<p>DriverCore.onUnexpectedShutdown</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_81","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:150</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#pageloadtimeoutmjsonwp","title":"pageLoadTimeoutMJSONWP","text":"<p>\u25b8 pageLoadTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_34","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_49","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_71","title":"Implementation of","text":"<p>Driver.pageLoadTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_64","title":"Inherited from","text":"<p>ITimeoutCommands.pageLoadTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_82","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:92</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#pageloadtimeoutw3c","title":"pageLoadTimeoutW3C","text":"<p>\u25b8 pageLoadTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_35","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_50","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_72","title":"Implementation of","text":"<p>Driver.pageLoadTimeoutW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_65","title":"Inherited from","text":"<p>ITimeoutCommands.pageLoadTimeoutW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_83","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:85</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parsetimeoutargument","title":"parseTimeoutArgument","text":"<p>\u25b8 parseTimeoutArgument(<code>ms</code>): <code>number</code></p> <p>Get a timeout value from a number or a string</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_36","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout value as a number or a string"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_51","title":"Returns","text":"<p><code>number</code></p> <p>The timeout as a number in ms</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_73","title":"Implementation of","text":"<p>Driver.parseTimeoutArgument</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_66","title":"Inherited from","text":"<p>ITimeoutCommands.parseTimeoutArgument</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_84","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:119</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(<code>sessionId</code>): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_37","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_52","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_74","title":"Implementation of","text":"<p>Driver.proxyActive</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_67","title":"Inherited from","text":"<p>DriverCore.proxyActive</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_85","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:316</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p> <p>Whether a given command route (expressed as method and url) should not be proxied according to this driver</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_38","title":"Parameters","text":"Name Type Description <code>sessionId</code> <code>string</code> the current sessionId (in case the driver runs multiple session ids and requires it). This is not used in this method but should be made available to overridden methods. <code>method</code> <code>HTTPMethod</code> HTTP method of the route <code>url</code> <code>string</code> url of the route <code>body?</code> <code>any</code> webdriver request body"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_53","title":"Returns","text":"<p><code>boolean</code></p> <p>whether the route should be avoided</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_75","title":"Implementation of","text":"<p>Driver.proxyRouteIsAvoided</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_68","title":"Inherited from","text":"<p>DriverCore.proxyRouteIsAvoided</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_86","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:341</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#reset","title":"reset","text":"<p>\u25b8 reset(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_54","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_76","title":"Implementation of","text":"<p>Driver.reset</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_87","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:195</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#scripttimeoutmjsonwp","title":"scriptTimeoutMJSONWP","text":"<p>\u25b8 scriptTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_39","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_55","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_77","title":"Implementation of","text":"<p>Driver.scriptTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_69","title":"Inherited from","text":"<p>ITimeoutCommands.scriptTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_88","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:105</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#scripttimeoutw3c","title":"scriptTimeoutW3C","text":"<p>\u25b8 scriptTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_40","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_56","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_78","title":"Implementation of","text":"<p>Driver.scriptTimeoutW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_70","title":"Inherited from","text":"<p>ITimeoutCommands.scriptTimeoutW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_89","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:98</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId</code>): <code>boolean</code></p> <p>method required by MJSONWP in order to determine whether it should respond with an invalid session response</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_41","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_57","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_79","title":"Implementation of","text":"<p>Driver.sessionExists</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_71","title":"Inherited from","text":"<p>DriverCore.sessionExists</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_90","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:218</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#setimplicitwait","title":"setImplicitWait","text":"<p>\u25b8 setImplicitWait(<code>ms</code>): <code>void</code></p> <p>A helper method (not a command) used to set the implicit wait value</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_42","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the implicit wait in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_58","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_80","title":"Implementation of","text":"<p>Driver.setImplicitWait</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_72","title":"Inherited from","text":"<p>ITimeoutCommands.setImplicitWait</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_91","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:51</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#setnewcommandtimeout","title":"setNewCommandTimeout","text":"<p>\u25b8 setNewCommandTimeout(<code>ms</code>): <code>void</code></p> <p>Set the new command timeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_43","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_59","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_81","title":"Implementation of","text":"<p>Driver.setNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_73","title":"Inherited from","text":"<p>ITimeoutCommands.setNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_92","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:36</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#setprotocolmjsonwp","title":"setProtocolMJSONWP","text":"<p>\u25b8 setProtocolMJSONWP(): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_60","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_74","title":"Inherited from","text":"<p>DriverCore.setProtocolMJSONWP</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_93","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:239</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#setprotocolw3c","title":"setProtocolW3C","text":"<p>\u25b8 setProtocolW3C(): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_61","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_75","title":"Inherited from","text":"<p>DriverCore.setProtocolW3C</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_94","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:243</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#startnewcommandtimeout","title":"startNewCommandTimeout","text":"<p>\u25b8 startNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Start the timer for the New Command Timeout, which when it runs out, will stop the current session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_62","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_82","title":"Implementation of","text":"<p>Driver.startNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_95","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:163</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#startunexpectedshutdown","title":"startUnexpectedShutdown","text":"<p>\u25b8 startUnexpectedShutdown(<code>err?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Signify to any owning processes that this driver encountered an error which should cause the session to terminate immediately (for example an upstream service failed)</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_44","title":"Parameters","text":"Name Type Description <code>err</code> <code>Error</code> the Error object which is causing the shutdown"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_63","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_83","title":"Implementation of","text":"<p>Driver.startUnexpectedShutdown</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_96","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:149</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#timeouts","title":"timeouts","text":"<p>\u25b8 timeouts(<code>type</code>, <code>ms</code>, <code>script?</code>, <code>pageLoad?</code>, <code>implicit?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_45","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_64","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_84","title":"Implementation of","text":"<p>Driver.timeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_76","title":"Inherited from","text":"<p>ITimeoutCommands.timeouts</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_97","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:30</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#updatesettings","title":"updateSettings","text":"<p>\u25b8 updateSettings(<code>newSettings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_46","title":"Parameters","text":"Name Type Description <code>newSettings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_65","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_85","title":"Implementation of","text":"<p>Driver.updateSettings</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_98","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:387</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#validatedesiredcaps","title":"validateDesiredCaps","text":"<p>\u25b8 validateDesiredCaps(<code>caps</code>): caps is DriverCaps&lt;C&gt;</p> <p>Validate the capabilities used to start a session</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_47","title":"Parameters","text":"Name Type Description <code>caps</code> <code>any</code> the capabilities"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_66","title":"Returns","text":"<p>caps is DriverCaps&lt;C&gt;</p> <p>Whether or not the capabilities are valid</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_99","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/driver.ts:366</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#parameters_48","title":"Parameters","text":"Name Type Default value <code>strategy</code> <code>string</code> <code>undefined</code> <code>webContext</code> <code>boolean</code> <code>false</code>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#returns_67","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#implementation-of_86","title":"Implementation of","text":"<p>Driver.validateLocatorStrategy</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#inherited-from_77","title":"Inherited from","text":"<p>DriverCore.validateLocatorStrategy</p>"},{"location":"reference/classes/appium_base_driver.BaseDriver/#defined-in_100","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:301</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/","title":"Class: DeviceSettings&lt;T&gt;","text":"<p>@appium/base-driver.DeviceSettings</p> <p><code>Implements</code></p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_base_driver.DeviceSettings/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#properties","title":"Properties","text":"<ul> <li>_onSettingsUpdate</li> <li>_settings</li> </ul>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#methods","title":"Methods","text":"<ul> <li>getSettings</li> <li>update</li> </ul>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_base_driver.DeviceSettings/#constructor","title":"constructor","text":"<p>\u2022 new DeviceSettings&lt;<code>T</code>&gt;(<code>defaultSettings?</code>, <code>onSettingsUpdate?</code>)</p> <p>Creates a shallow copy of the <code>defaultSettings</code> parameter!</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends <code>StringRecord</code>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#parameters","title":"Parameters","text":"Name Type <code>defaultSettings?</code> <code>T</code> <code>onSettingsUpdate?</code> <code>SettingsUpdateListener</code>&lt;<code>T</code>&gt;"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/device-settings.js:33</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_base_driver.DeviceSettings/#_onsettingsupdate","title":"_onSettingsUpdate","text":"<p>\u2022 <code>Protected</code> _onSettingsUpdate: <code>SettingsUpdateListener</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/device-settings.js:26</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#_settings","title":"_settings","text":"<p>\u2022 <code>Protected</code> _settings: <code>T</code></p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/device-settings.js:20</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_base_driver.DeviceSettings/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>T</code></p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/device-settings.js:69</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#update","title":"update","text":"<p>\u25b8 update(<code>newSettings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>calls updateSettings from implementing driver every time a setting is changed.</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#parameters_1","title":"Parameters","text":"Name Type <code>newSettings</code> <code>T</code>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DeviceSettings/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/device-settings.js:42</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/","title":"Class: DriverCore&lt;C, Settings&gt;","text":"<p>@appium/base-driver.DriverCore</p> <p>Methods and properties which both <code>AppiumDriver</code> and <code>BaseDriver</code> inherit.</p> <p>This should not be used directly by external code.</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>DriverCore</code></li> </ul> <p>\u21b3 <code>BaseDriver</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implements","title":"Implements","text":"<ul> <li><code>Core</code>&lt;<code>C</code>, <code>Settings</code>&gt;</li> </ul>"},{"location":"reference/classes/appium_base_driver.DriverCore/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_base_driver.DriverCore/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_base_driver.DriverCore/#properties","title":"Properties","text":"<ul> <li>_eventHistory</li> <li>_log</li> <li>allowInsecure</li> <li>basePath</li> <li>commandsQueueGuard</li> <li>denyInsecure</li> <li>eventEmitter</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>locatorStrategies</li> <li>managedDrivers</li> <li>newCommandTimeoutMs</li> <li>noCommandTimer</li> <li>opts</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>sessionId</li> <li>settings</li> <li>shouldValidateCaps</li> <li>shutdownUnexpectedly</li> <li>webLocatorStrategies</li> <li>baseVersion</li> </ul>"},{"location":"reference/classes/appium_base_driver.DriverCore/#accessors","title":"Accessors","text":"<ul> <li>driverData</li> <li>eventHistory</li> <li>isCommandsQueueEnabled</li> <li>log</li> </ul>"},{"location":"reference/classes/appium_base_driver.DriverCore/#methods","title":"Methods","text":"<ul> <li>addManagedDriver</li> <li>assertFeatureEnabled</li> <li>canProxy</li> <li>clearNewCommandTimeout</li> <li>driverForSession</li> <li>ensureFeatureEnabled</li> <li>getManagedDrivers</li> <li>getProxyAvoidList</li> <li>getStatus</li> <li>isFeatureEnabled</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>logEvent</li> <li>onUnexpectedShutdown</li> <li>proxyActive</li> <li>proxyRouteIsAvoided</li> <li>sessionExists</li> <li>setProtocolMJSONWP</li> <li>setProtocolW3C</li> <li>validateLocatorStrategy</li> </ul>"},{"location":"reference/classes/appium_base_driver.DriverCore/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_base_driver.DriverCore/#constructor","title":"constructor","text":"<p>\u2022 new DriverCore&lt;<code>C</code>, <code>Settings</code>&gt;(<code>opts?</code>, <code>shouldValidateCaps?</code>)</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#type-parameters_1","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters","title":"Parameters","text":"Name Type Default value <code>opts</code> <code>Object</code> <code>undefined</code> <code>opts.address</code> <code>string</code> <code>undefined</code> <code>opts.allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.allowInsecure</code> <code>AllowInsecureConfig</code> <code>undefined</code> <code>opts.basePath</code> <code>string</code> <code>undefined</code> <code>opts.callbackAddress</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.callbackPort</code> <code>number</code> <code>undefined</code> <code>opts.debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>undefined</code> <code>opts.denyInsecure</code> <code>DenyInsecureConfig</code> <code>undefined</code> <code>opts.driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>undefined</code> <code>opts.fastReset?</code> <code>boolean</code> <code>undefined</code> <code>opts.keepAliveTimeout</code> <code>number</code> <code>undefined</code> <code>opts.localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logFile</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>undefined</code> <code>opts.logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>undefined</code> <code>opts.longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>undefined</code> <code>opts.plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>undefined</code> <code>opts.port</code> <code>number</code> <code>undefined</code> <code>opts.relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.skipUninstall?</code> <code>boolean</code> <code>undefined</code> <code>opts.strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.tmpDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.traceDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.useDrivers</code> <code>UseDriversConfig</code> <code>undefined</code> <code>opts.usePlugins</code> <code>UsePluginsConfig</code> <code>undefined</code> <code>opts.webhook</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>shouldValidateCaps</code> <code>boolean</code> <code>true</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:102</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_base_driver.DriverCore/#_eventhistory","title":"_eventHistory","text":"<p>\u2022 <code>Protected</code> _eventHistory: <code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:76</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#_log","title":"_log","text":"<p>\u2022 <code>Protected</code> _log: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:84</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of","title":"Implementation of","text":"<p>Core.allowInsecure</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:60</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p> <p>basePath is used for several purposes, for example in setting up proxying to other drivers, since we need to know what the base path of any incoming request might look like. We set it to the default initially but it is automatically updated during any actual program execution by the routeConfiguringFunction, which is necessarily run as the entrypoint for any Appium server</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_1","title":"Implementation of","text":"<p>Core.basePath</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:56</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#commandsqueueguard","title":"commandsQueueGuard","text":"<p>\u2022 <code>Protected</code> commandsQueueGuard: <code>AsyncLock</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_5","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:90</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_2","title":"Implementation of","text":"<p>Core.denyInsecure</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:62</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_3","title":"Implementation of","text":"<p>Core.eventEmitter</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_7","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:79</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_4","title":"Implementation of","text":"<p>Core.helpers</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:46</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_5","title":"Implementation of","text":"<p>Core.implicitWaitMs</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_9","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:66</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#type-declaration","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_6","title":"Implementation of","text":"<p>Core.initialOpts</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_10","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:44</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_7","title":"Implementation of","text":"<p>Core.locatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_11","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:68</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#manageddrivers","title":"managedDrivers","text":"<p>\u2022 managedDrivers: <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_12","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:72</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_8","title":"Implementation of","text":"<p>Core.newCommandTimeoutMs</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_13","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:64</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#nocommandtimer","title":"noCommandTimer","text":"<p>\u2022 noCommandTimer: <code>null</code> | <code>Timeout</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_14","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:74</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_9","title":"Implementation of","text":"<p>Core.opts</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_15","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:42</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_10","title":"Implementation of","text":"<p>Core.protocol</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_16","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:100</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_11","title":"Implementation of","text":"<p>Core.relaxedSecurityEnabled</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_17","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:58</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_12","title":"Implementation of","text":"<p>Core.sessionId</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_18","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:40</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#settings","title":"settings","text":"<p>\u2022 settings: <code>DeviceSettings</code>&lt;<code>Settings</code>&gt;</p> <p>settings should be instantiated by drivers which extend BaseDriver, but we set it to an empty DeviceSettings instance here to make sure that the default settings are applied even if an extending driver doesn't utilize the settings functionality itself</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_13","title":"Implementation of","text":"<p>Core.settings</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_19","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:98</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_14","title":"Implementation of","text":"<p>Core.shouldValidateCaps</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_20","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:88</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#shutdownunexpectedly","title":"shutdownUnexpectedly","text":"<p>\u2022 shutdownUnexpectedly: <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_21","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:86</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_15","title":"Implementation of","text":"<p>Core.webLocatorStrategies</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_22","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:70</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#baseversion","title":"baseVersion","text":"<p>\u25aa <code>Static</code> baseVersion: <code>string</code> = <code>BASEDRIVER_VER</code></p> <p>Make the basedriver version available so for any driver which inherits from this package, we know which version of basedriver it inherited from</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_23","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:38</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#accessors_1","title":"Accessors","text":""},{"location":"reference/classes/appium_base_driver.DriverCore/#driverdata","title":"driverData","text":"<p>\u2022 <code>get</code> driverData(): <code>Object</code></p> <p>This property is used by AppiumDriver to store the data of the specific driver sessions. This data can be later used to adjust properties for driver instances running in parallel. Override it in inherited driver classes if necessary.</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns","title":"Returns","text":"<p><code>Object</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_16","title":"Implementation of","text":"<p>Core.driverData</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_24","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:160</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#eventhistory","title":"eventHistory","text":"<p>\u2022 <code>get</code> eventHistory(): <code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_1","title":"Returns","text":"<p><code>EventHistory</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_17","title":"Implementation of","text":"<p>Core.eventHistory</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_25","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:183</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 <code>get</code> isCommandsQueueEnabled(): <code>boolean</code></p> <p>This property controls the way the <code>executeCommand</code> method handles new driver commands received from the client. Override it for inherited classes only in special cases.</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_2","title":"Returns","text":"<p><code>boolean</code></p> <p>If the returned value is true (default) then all the commands   received by the particular driver instance are going to be put into the queue,   so each following command will not be executed until the previous command   execution is completed. False value disables that queue, so each driver command   is executed independently and does not wait for anything.</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_18","title":"Implementation of","text":"<p>Core.isCommandsQueueEnabled</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_26","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:175</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#log","title":"log","text":"<p>\u2022 <code>get</code> log(): <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_3","title":"Returns","text":"<p><code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_19","title":"Implementation of","text":"<p>Core.log</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_27","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:137</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_base_driver.DriverCore/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_1","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_20","title":"Implementation of","text":"<p>Core.addManagedDriver</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_28","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:365</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_2","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_21","title":"Implementation of","text":"<p>Core.assertFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_29","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:290</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(<code>sessionId</code>): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_3","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_6","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_22","title":"Implementation of","text":"<p>Core.canProxy</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_30","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:324</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_23","title":"Implementation of","text":"<p>Core.clearNewCommandTimeout</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_31","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:373</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p> <p>method required by MJSONWP in order to determine if the command should be proxied directly to the driver</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_4","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_8","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_24","title":"Implementation of","text":"<p>Core.driverForSession</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_32","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:227</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#ensurefeatureenabled","title":"ensureFeatureEnabled","text":"<p>\u25b8 ensureFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_5","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_33","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:280</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_10","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_25","title":"Implementation of","text":"<p>Core.getManagedDrivers</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_34","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:369</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_6","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_11","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_26","title":"Implementation of","text":"<p>Core.getProxyAvoidList</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_35","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:320</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_27","title":"Implementation of","text":"<p>Core.getStatus</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_36","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:210</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p> <p>Check whether a given feature is enabled via its name</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_7","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_13","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_28","title":"Implementation of","text":"<p>Core.isFeatureEnabled</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_37","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:252</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_14","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_29","title":"Implementation of","text":"<p>Core.isMjsonwpProtocol</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_38","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:231</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_15","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_30","title":"Implementation of","text":"<p>Core.isW3CProtocol</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_39","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:235</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p> <p>API method for driver developers to log timings for important events</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_8","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_31","title":"Implementation of","text":"<p>Core.logEvent</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_40","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:190</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p> <p>Set a callback handler if needed to execute a custom piece of code when the driver is shut down unexpectedly. Multiple calls to this method will cause the handler to be executed mutiple times</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_9","title":"Parameters","text":"Name Type Description <code>handler</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> The code to be executed on unexpected shutdown. The function may accept one argument, which is the actual error instance, which caused the driver to shut down."},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_32","title":"Implementation of","text":"<p>Core.onUnexpectedShutdown</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_41","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:150</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(<code>sessionId</code>): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_10","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_18","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_33","title":"Implementation of","text":"<p>Core.proxyActive</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_42","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:316</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p> <p>Whether a given command route (expressed as method and url) should not be proxied according to this driver</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_11","title":"Parameters","text":"Name Type Description <code>sessionId</code> <code>string</code> the current sessionId (in case the driver runs multiple session ids and requires it). This is not used in this method but should be made available to overridden methods. <code>method</code> <code>HTTPMethod</code> HTTP method of the route <code>url</code> <code>string</code> url of the route <code>body?</code> <code>any</code> webdriver request body"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_19","title":"Returns","text":"<p><code>boolean</code></p> <p>whether the route should be avoided</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_34","title":"Implementation of","text":"<p>Core.proxyRouteIsAvoided</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_43","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:341</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId</code>): <code>boolean</code></p> <p>method required by MJSONWP in order to determine whether it should respond with an invalid session response</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_12","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_20","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_35","title":"Implementation of","text":"<p>Core.sessionExists</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_44","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:218</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#setprotocolmjsonwp","title":"setProtocolMJSONWP","text":"<p>\u25b8 setProtocolMJSONWP(): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_21","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_45","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:239</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#setprotocolw3c","title":"setProtocolW3C","text":"<p>\u25b8 setProtocolW3C(): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_46","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:243</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#parameters_13","title":"Parameters","text":"Name Type Default value <code>strategy</code> <code>string</code> <code>undefined</code> <code>webContext</code> <code>boolean</code> <code>false</code>"},{"location":"reference/classes/appium_base_driver.DriverCore/#returns_23","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#implementation-of_36","title":"Implementation of","text":"<p>Core.validateLocatorStrategy</p>"},{"location":"reference/classes/appium_base_driver.DriverCore/#defined-in_47","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/core.ts:301</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/","title":"Class: JWProxy","text":"<p>@appium/base-driver.JWProxy</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_base_driver.JWProxy/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_base_driver.JWProxy/#properties","title":"Properties","text":"<ul> <li>_activeRequests</li> <li>_downstreamProtocol</li> <li>_log</li> <li>base</li> <li>httpAgent</li> <li>httpsAgent</li> <li>port</li> <li>protocolConverter</li> <li>reqBasePath</li> <li>scheme</li> <li>server</li> <li>sessionId</li> <li>timeout</li> </ul>"},{"location":"reference/classes/appium_base_driver.JWProxy/#accessors","title":"Accessors","text":"<ul> <li>downstreamProtocol</li> <li>log</li> </ul>"},{"location":"reference/classes/appium_base_driver.JWProxy/#methods","title":"Methods","text":"<ul> <li>cancelActiveRequests</li> <li>command</li> <li>endpointRequiresSessionId</li> <li>getActiveRequestsCount</li> <li>getProtocolFromResBody</li> <li>getSessionIdFromUrl</li> <li>getUrlForProxy</li> <li>proxy</li> <li>proxyCommand</li> <li>proxyReqRes</li> <li>request</li> <li>requestToCommandName</li> </ul>"},{"location":"reference/classes/appium_base_driver.JWProxy/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_base_driver.JWProxy/#constructor","title":"constructor","text":"<p>\u2022 new JWProxy(<code>opts?</code>)</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters","title":"Parameters","text":"Name Type <code>opts</code> <code>Object</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:53</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_base_driver.JWProxy/#_activerequests","title":"_activeRequests","text":"<p>\u2022 _activeRequests: <code>any</code>[]</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:70</p> <p>packages/base-driver/lib/jsonwp-proxy/proxy.js:111</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#_downstreamprotocol","title":"_downstreamProtocol","text":"<p>\u2022 _downstreamProtocol: <code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:71</p> <p>packages/base-driver/lib/jsonwp-proxy/proxy.js:119</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#_log","title":"_log","text":"<p>\u2022 _log: <code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:80</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#base","title":"base","text":"<p>\u2022 base: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:45</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#httpagent","title":"httpAgent","text":"<p>\u2022 httpAgent: <code>Agent</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_5","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:77</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#httpsagent","title":"httpsAgent","text":"<p>\u2022 httpsAgent: <code>Agent</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:78</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#port","title":"port","text":"<p>\u2022 port: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_7","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:43</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#protocolconverter","title":"protocolConverter","text":"<p>\u2022 protocolConverter: <code>ProtocolConverter</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:79</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#reqbasepath","title":"reqBasePath","text":"<p>\u2022 reqBasePath: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_9","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:47</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#scheme","title":"scheme","text":"<p>\u2022 scheme: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_10","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:39</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#server","title":"server","text":"<p>\u2022 server: <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_11","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:41</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_12","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:49</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#timeout","title":"timeout","text":"<p>\u2022 timeout: <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_13","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:51</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#accessors_1","title":"Accessors","text":""},{"location":"reference/classes/appium_base_driver.JWProxy/#downstreamprotocol","title":"downstreamProtocol","text":"<p>\u2022 <code>get</code> downstreamProtocol(): <code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_14","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:123</p> <p>\u2022 <code>set</code> downstreamProtocol(<code>value</code>): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_1","title":"Parameters","text":"Name Type <code>value</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_15","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:118</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#log","title":"log","text":"<p>\u2022 <code>get</code> log(): <code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_16","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:83</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_base_driver.JWProxy/#cancelactiverequests","title":"cancelActiveRequests","text":"<p>\u25b8 cancelActiveRequests(): <code>void</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_17","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:110</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#command","title":"command","text":"<p>\u25b8 command(<code>url</code>, <code>method</code>, <code>body?</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_2","title":"Parameters","text":"Name Type Default value <code>url</code> <code>string</code> <code>undefined</code> <code>method</code> <code>HTTPMethod</code> <code>undefined</code> <code>body</code> <code>any</code> <code>null</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_18","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:346</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#endpointrequiressessionid","title":"endpointRequiresSessionId","text":"<p>\u25b8 endpointRequiresSessionId(<code>endpoint</code>): <code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_3","title":"Parameters","text":"Name Type <code>endpoint</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_5","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_19","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:114</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#getactiverequestscount","title":"getActiveRequestsCount","text":"<p>\u25b8 getActiveRequestsCount(): <code>number</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_6","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_20","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:106</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#getprotocolfromresbody","title":"getProtocolFromResBody","text":"<p>\u25b8 getProtocolFromResBody(<code>resObj</code>): <code>undefined</code> | <code>\"MJSONWP\"</code> | <code>\"W3C\"</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_4","title":"Parameters","text":"Name Type <code>resObj</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_7","title":"Returns","text":"<p><code>undefined</code> | <code>\"MJSONWP\"</code> | <code>\"W3C\"</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_21","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:284</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#getsessionidfromurl","title":"getSessionIdFromUrl","text":"<p>\u25b8 getSessionIdFromUrl(<code>url</code>): <code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_5","title":"Parameters","text":"Name Type <code>url</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_8","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_22","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:398</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#geturlforproxy","title":"getUrlForProxy","text":"<p>\u25b8 getUrlForProxy(<code>url</code>): <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_6","title":"Parameters","text":"Name Type <code>url</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_9","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_23","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:127</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#proxy","title":"proxy","text":"<p>\u25b8 proxy(<code>url</code>, <code>method</code>, <code>body?</code>): <code>Promise</code>&lt;<code>any</code>[]&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_7","title":"Parameters","text":"Name Type Default value <code>url</code> <code>any</code> <code>undefined</code> <code>method</code> <code>any</code> <code>undefined</code> <code>body</code> <code>null</code> <code>null</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>[]&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_24","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:185</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#proxycommand","title":"proxyCommand","text":"<p>\u25b8 proxyCommand(<code>url</code>, <code>method</code>, <code>body?</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_8","title":"Parameters","text":"Name Type Default value <code>url</code> <code>string</code> <code>undefined</code> <code>method</code> <code>HTTPMethod</code> <code>undefined</code> <code>body</code> <code>any</code> <code>null</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_25","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:329</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#proxyreqres","title":"proxyReqRes","text":"<p>\u25b8 proxyReqRes(<code>req</code>, <code>res</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_9","title":"Parameters","text":"Name Type <code>req</code> <code>any</code> <code>res</code> <code>any</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_26","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:403</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#request","title":"request","text":"<p>\u25b8 <code>Private</code> request(<code>requestConfig</code>): <code>Promise</code>&lt;<code>AxiosResponse</code>&lt;<code>any</code>, <code>any</code>&gt;&gt;</p> <p>Performs requests to the downstream server</p> <ul> <li>Do not call this method directly, it uses client-specific arguments and responses!</li> </ul>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_10","title":"Parameters","text":"Name Type <code>requestConfig</code> <code>RawAxiosRequestConfig</code>&lt;<code>any</code>&gt;"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AxiosResponse</code>&lt;<code>any</code>, <code>any</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_27","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:96</p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#requesttocommandname","title":"requestToCommandName","text":"<p>\u25b8 requestToCommandName(<code>url</code>, <code>method</code>): <code>undefined</code> | <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#parameters_11","title":"Parameters","text":"Name Type <code>url</code> <code>string</code> <code>method</code> <code>HTTPMethod</code>"},{"location":"reference/classes/appium_base_driver.JWProxy/#returns_14","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"reference/classes/appium_base_driver.JWProxy/#defined-in_28","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-proxy/proxy.js:299</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/","title":"Class: BasePlugin","text":"<p>@appium/base-plugin.BasePlugin</p> <p><code>Implements</code></p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_base_plugin.BasePlugin/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#properties","title":"Properties","text":"<ul> <li>cliArgs</li> <li>logger</li> <li>name</li> <li>executeMethodMap</li> <li>newMethodMap</li> </ul>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#methods","title":"Methods","text":"<ul> <li>executeMethod</li> </ul>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_base_plugin.BasePlugin/#constructor","title":"constructor","text":"<p>\u2022 new BasePlugin(<code>name</code>, <code>cliArgs?</code>)</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#parameters","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>cliArgs?</code> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:47</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_base_plugin.BasePlugin/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_1","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:49</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#logger","title":"logger","text":"<p>\u2022 logger: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_2","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:50</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_3","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:48</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#executemethodmap","title":"executeMethodMap","text":"<p>\u25aa <code>Static</code> executeMethodMap: <code>Object</code> = <code>{}</code></p> <p>Subclasses should use type <code>import('@appium/types').ExecuteMethodMap&lt;SubclassName&gt;</code>.</p> <p>Building up this map allows the use of the convenience function <code>executeMethod</code>, which basically does verification of names and parameters for execute methods implemented by this plugin.</p> <pre><code>static executeMethodMap = {\n'foo: bar': {\ncommand: 'commandName',\nparams: {required: ['thing1', 'thing2'], optional: ['thing3']},\n},\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_4","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:41</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#newmethodmap","title":"newMethodMap","text":"<p>\u25aa <code>Static</code> newMethodMap: <code>Object</code> = <code>{}</code></p> <p>Subclasses should use type <code>import('@appium/types').MethodMap&lt;SubclassName&gt;</code>.</p> <p>This will verify that the commands in the <code>newMethodMap</code> property are valid.  It is impossible to use a generic type param here; the type of this should really be something like <code>MethodMap&lt;T extends BasePlugin&gt;</code> but that isn't a thing TS does.</p> <pre><code>static newMethodMap = {\n'/session/:sessionId/fake_data': {\nGET: {command: 'getFakeSessionData', neverProxy: true},\n}\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_5","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:23</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_base_plugin.BasePlugin/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>C</code>&gt;(<code>next</code>, <code>driver</code>, <code>script</code>, <code>protoArgs</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>A convenience method that can be called by plugins who implement their own <code>executeMethodMap</code>. Only useful if your plugin has defined <code>executeMethodMap</code>. This helper requires passing in the <code>next</code> and <code>driver</code> objects since naturally we'd want to make sure to trigger the driver's own <code>executeMethod</code> call if an execute method is not found on the plugin itself.</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#parameters_1","title":"Parameters","text":"Name Type <code>next</code> <code>NextPluginCallback</code> <code>driver</code> <code>Driver</code>&lt;<code>C</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt; <code>script</code> <code>string</code> <code>protoArgs</code> readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;]"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_base_plugin.BasePlugin/#defined-in_6","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:65</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/","title":"Class: ExecuteDriverPlugin","text":"<p>@appium/execute-driver-plugin.ExecuteDriverPlugin</p> <p><code>Implements</code></p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BasePlugin</code></li> </ul> <p>\u21b3 <code>ExecuteDriverPlugin</code></p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#properties","title":"Properties","text":"<ul> <li>cliArgs</li> <li>logger</li> <li>name</li> <li>executeMethodMap</li> <li>newMethodMap</li> </ul>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#methods","title":"Methods","text":"<ul> <li>executeDriverScript</li> <li>executeMethod</li> </ul>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#constructor","title":"constructor","text":"<p>\u2022 new ExecuteDriverPlugin(<code>name</code>, <code>cliArgs?</code>)</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#parameters","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>cliArgs?</code> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from","title":"Inherited from","text":"<p>BasePlugin.constructor</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:47</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from_1","title":"Inherited from","text":"<p>BasePlugin.cliArgs</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_1","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:49</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#logger","title":"logger","text":"<p>\u2022 logger: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from_2","title":"Inherited from","text":"<p>BasePlugin.logger</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_2","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:50</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from_3","title":"Inherited from","text":"<p>BasePlugin.name</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_3","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:48</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#executemethodmap","title":"executeMethodMap","text":"<p>\u25aa <code>Static</code> executeMethodMap: <code>Object</code></p> <p>Subclasses should use type <code>import('@appium/types').ExecuteMethodMap&lt;SubclassName&gt;</code>.</p> <p>Building up this map allows the use of the convenience function <code>executeMethod</code>, which basically does verification of names and parameters for execute methods implemented by this plugin.</p> <pre><code>static executeMethodMap = {\n'foo: bar': {\ncommand: 'commandName',\nparams: {required: ['thing1', 'thing2'], optional: ['thing3']},\n},\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from_4","title":"Inherited from","text":"<p>BasePlugin.executeMethodMap</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_4","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:42</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#newmethodmap","title":"newMethodMap","text":"<p>\u25aa <code>Static</code> newMethodMap: <code>Object</code></p> <p>Subclasses should use type <code>import('@appium/types').MethodMap&lt;SubclassName&gt;</code>.</p> <p>This will verify that the commands in the <code>newMethodMap</code> property are valid.  It is impossible to use a generic type param here; the type of this should really be something like <code>MethodMap&lt;T extends BasePlugin&gt;</code> but that isn't a thing TS does.</p> <pre><code>static newMethodMap = {\n'/session/:sessionId/fake_data': {\nGET: {command: 'getFakeSessionData', neverProxy: true},\n}\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#type-declaration","title":"Type declaration","text":"Name Type <code>/session/:sessionId/appium/execute_driver</code> { <code>POST</code>: { <code>command</code>: <code>\"executeDriverScript\"</code> = 'executeDriverScript'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"timeout\"</code>] ; <code>required</code>: readonly [<code>\"script\"</code>]  }  }  } <code>/session/:sessionId/appium/execute_driver.POST</code> { <code>command</code>: <code>\"executeDriverScript\"</code> = 'executeDriverScript'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"timeout\"</code>] ; <code>required</code>: readonly [<code>\"script\"</code>]  }  } <code>/session/:sessionId/appium/execute_driver.POST.command</code> <code>\"executeDriverScript\"</code> <code>/session/:sessionId/appium/execute_driver.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"timeout\"</code>] ; <code>required</code>: readonly [<code>\"script\"</code>]  } <code>/session/:sessionId/appium/execute_driver.POST.payloadParams.optional</code> readonly [<code>\"type\"</code>, <code>\"timeout\"</code>] <code>/session/:sessionId/appium/execute_driver.POST.payloadParams.required</code> readonly [<code>\"script\"</code>]"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#overrides","title":"Overrides","text":"<p>BasePlugin.newMethodMap</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_5","title":"Defined in","text":"<p>packages/execute-driver-plugin/lib/plugin.js:12</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#executedriverscript","title":"executeDriverScript","text":"<p>\u25b8 executeDriverScript(<code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Implementation of a command within a plugin</p> <p>At minimum, <code>D</code> must be <code>ExternalDriver</code>, but a plugin can be more narrow about which drivers it supports.</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#parameters_1","title":"Parameters","text":"Name Type <code>next</code> <code>NextPluginCallback</code>&lt;<code>unknown</code>&gt; <code>driver</code> <code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt; <code>...args</code> [script: string, scriptType: string, timeoutMs: number]"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_6","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:100</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>C</code>&gt;(<code>next</code>, <code>driver</code>, <code>script</code>, <code>protoArgs</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>A convenience method that can be called by plugins who implement their own <code>executeMethodMap</code>. Only useful if your plugin has defined <code>executeMethodMap</code>. This helper requires passing in the <code>next</code> and <code>driver</code> objects since naturally we'd want to make sure to trigger the driver's own <code>executeMethod</code> call if an execute method is not found on the plugin itself.</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#parameters_2","title":"Parameters","text":"Name Type <code>next</code> <code>NextPluginCallback</code> <code>driver</code> <code>Driver</code>&lt;<code>C</code>, <code>StringRecord</code>&lt;<code>any</code>&gt;, <code>StringRecord</code>&lt;<code>any</code>&gt;, <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt;, <code>void</code>, <code>StringRecord</code>&lt;<code>any</code>&gt;&gt; <code>script</code> <code>string</code> <code>protoArgs</code> readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;]"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#inherited-from_5","title":"Inherited from","text":"<p>BasePlugin.executeMethod</p>"},{"location":"reference/classes/appium_execute_driver_plugin.ExecuteDriverPlugin/#defined-in_7","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:63</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/","title":"Class: FakeDriver&lt;Thing&gt;","text":"<p>@appium/fake-driver.FakeDriver</p> <p><code>Implements</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-parameters","title":"Type parameters","text":"Name Type <code>Thing</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#hierarchy","title":"Hierarchy","text":"<ul> <li> <p><code>BaseDriver</code></p> </li> <li> <p><code>FakeDriverAlertMixin</code></p> </li> <li> <p><code>FakeDriverContextsMixin</code></p> </li> <li> <p><code>FakeDriverElementsMixin</code></p> </li> <li> <p><code>FakeDriverFindMixin</code></p> </li> <li> <p><code>FakeDriverGeneralMixin</code></p> </li> </ul> <p>\u21b3 <code>FakeDriver</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_fake_driver.FakeDriver/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#properties","title":"Properties","text":"<ul> <li>_eventHistory</li> <li>_log</li> <li>_proxyActive</li> <li>allowInsecure</li> <li>appModel</li> <li>basePath</li> <li>caps</li> <li>cliArgs</li> <li>commandsQueueGuard</li> <li>curContext</li> <li>denyInsecure</li> <li>desiredCapConstraints</li> <li>elMap</li> <li>eventEmitter</li> <li>fakeThing</li> <li>focusedElId</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>locatorStrategies</li> <li>managedDrivers</li> <li>maxElId</li> <li>newCommandTimeoutMs</li> <li>noCommandTimer</li> <li>opts</li> <li>originalCaps</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>server</li> <li>serverHost</li> <li>serverPath</li> <li>serverPort</li> <li>sessionId</li> <li>settings</li> <li>shook</li> <li>shouldValidateCaps</li> <li>shutdownUnexpectedly</li> <li>supportedLogTypes</li> <li>webLocatorStrategies</li> <li>baseVersion</li> <li>executeMethodMap</li> <li>newMethodMap</li> </ul>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#accessors","title":"Accessors","text":"<ul> <li>_desiredCapConstraints</li> <li>driverData</li> <li>eventHistory</li> <li>isCommandsQueueEnabled</li> <li>log</li> </ul>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#methods","title":"Methods","text":"<ul> <li>addManagedDriver</li> <li>assertAlert</li> <li>assertFeatureEnabled</li> <li>assertNoAlert</li> <li>assertWebviewContext</li> <li>assignServer</li> <li>callDeprecatedCommand</li> <li>canProxy</li> <li>clear</li> <li>clearNewCommandTimeout</li> <li>click</li> <li>createSession</li> <li>deleteSession</li> <li>doubleClick</li> <li>driverForSession</li> <li>elementDisplayed</li> <li>elementEnabled</li> <li>elementSelected</li> <li>ensureFeatureEnabled</li> <li>equalsElement</li> <li>execute</li> <li>executeCommand</li> <li>executeMethod</li> <li>fakeAddition</li> <li>findElOrEls</li> <li>findElOrElsWithProcessing</li> <li>findElement</li> <li>findElementFromElement</li> <li>findElementFromShadowRoot</li> <li>findElements</li> <li>findElementsFromElement</li> <li>findElementsFromShadowRoot</li> <li>getAlertText</li> <li>getAttribute</li> <li>getContexts</li> <li>getCssProperty</li> <li>getCurrentContext</li> <li>getDeprecatedCommandsCalled</li> <li>getElement</li> <li>getElementRect</li> <li>getElements</li> <li>getExistingElementForNode</li> <li>getFakeDriverArgs</li> <li>getFakeThing</li> <li>getGeoLocation</li> <li>getLocation</li> <li>getLocationInView</li> <li>getLog</li> <li>getLogEvents</li> <li>getLogTypes</li> <li>getManagedDrivers</li> <li>getName</li> <li>getOrientation</li> <li>getPageSource</li> <li>getProxyAvoidList</li> <li>getRawContexts</li> <li>getScreenshot</li> <li>getSession</li> <li>getSessions</li> <li>getSettings</li> <li>getSize</li> <li>getStatus</li> <li>getText</li> <li>getTimeouts</li> <li>getWindowRect</li> <li>getWindowSize</li> <li>implicitWait</li> <li>implicitWaitForCondition</li> <li>implicitWaitMJSONWP</li> <li>implicitWaitW3C</li> <li>isFeatureEnabled</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>keys</li> <li>logCustomEvent</li> <li>logEvent</li> <li>logExtraCaps</li> <li>mobileShake</li> <li>newCommandTimeout</li> <li>onUnexpectedShutdown</li> <li>pageLoadTimeoutMJSONWP</li> <li>pageLoadTimeoutW3C</li> <li>parseTimeoutArgument</li> <li>performActions</li> <li>postAcceptAlert</li> <li>postDismissAlert</li> <li>proxyActive</li> <li>proxyCommand</li> <li>proxyReqRes</li> <li>proxyRouteIsAvoided</li> <li>releaseActions</li> <li>reset</li> <li>scriptTimeoutMJSONWP</li> <li>scriptTimeoutW3C</li> <li>sessionExists</li> <li>setAlertText</li> <li>setContext</li> <li>setFakeThing</li> <li>setFrame</li> <li>setGeoLocation</li> <li>setImplicitWait</li> <li>setNewCommandTimeout</li> <li>setOrientation</li> <li>setProtocolMJSONWP</li> <li>setProtocolW3C</li> <li>setValue</li> <li>startNewCommandTimeout</li> <li>startUnexpectedShutdown</li> <li>timeouts</li> <li>title</li> <li>updateSettings</li> <li>validateDesiredCaps</li> <li>validateLocatorStrategy</li> <li>wrapNewEl</li> <li>fakeRoute</li> <li>updateServer</li> </ul>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_fake_driver.FakeDriver/#constructor","title":"constructor","text":"<p>\u2022 new FakeDriver&lt;<code>Thing</code>&gt;(<code>opts?</code>, <code>shouldValidateCaps?</code>)</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-parameters_1","title":"Type parameters","text":"Name Type <code>Thing</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters","title":"Parameters","text":"Name Type Default value <code>opts</code> <code>Object</code> <code>undefined</code> <code>opts.address</code> <code>string</code> <code>undefined</code> <code>opts.allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.allowInsecure</code> <code>AllowInsecureConfig</code> <code>undefined</code> <code>opts.basePath</code> <code>string</code> <code>undefined</code> <code>opts.callbackAddress</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.callbackPort</code> <code>number</code> <code>undefined</code> <code>opts.debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>undefined</code> <code>opts.denyInsecure</code> <code>DenyInsecureConfig</code> <code>undefined</code> <code>opts.driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>undefined</code> <code>opts.fastReset?</code> <code>boolean</code> <code>undefined</code> <code>opts.keepAliveTimeout</code> <code>number</code> <code>undefined</code> <code>opts.localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logFile</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>undefined</code> <code>opts.logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>undefined</code> <code>opts.longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>undefined</code> <code>opts.plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>undefined</code> <code>opts.port</code> <code>number</code> <code>undefined</code> <code>opts.relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.skipUninstall?</code> <code>boolean</code> <code>undefined</code> <code>opts.strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>undefined</code> <code>opts.tmpDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.traceDir</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>opts.useDrivers</code> <code>UseDriversConfig</code> <code>undefined</code> <code>opts.usePlugins</code> <code>UsePluginsConfig</code> <code>undefined</code> <code>opts.webhook</code> <code>undefined</code> | <code>string</code> <code>undefined</code> <code>shouldValidateCaps</code> <code>boolean</code> <code>true</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides","title":"Overrides","text":"<p>BaseDriver.constructor</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:57</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_fake_driver.FakeDriver/#_eventhistory","title":"_eventHistory","text":"<p>\u2022 <code>Protected</code> _eventHistory: <code>EventHistory</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from","title":"Inherited from","text":"<p>BaseDriver._eventHistory</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:35</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#_log","title":"_log","text":"<p>\u2022 <code>Protected</code> _log: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_1","title":"Inherited from","text":"<p>BaseDriver._log</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:40</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#_proxyactive","title":"_proxyActive","text":"<p>\u2022 _proxyActive: <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_3","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:40</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_2","title":"Inherited from","text":"<p>BaseDriver.allowInsecure</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:27</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#appmodel","title":"appModel","text":"<p>\u2022 appModel: <code>FakeApp</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_5","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:37</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p> <p>basePath is used for several purposes, for example in setting up proxying to other drivers, since we need to know what the base path of any incoming request might look like. We set it to the default initially but it is automatically updated during any actual program execution by the routeConfiguringFunction, which is necessarily run as the entrypoint for any Appium server</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_3","title":"Inherited from","text":"<p>BaseDriver.basePath</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:25</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#caps","title":"caps","text":"<p>\u2022 caps: <code>DriverCaps</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;</p> <p>The processed capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_4","title":"Inherited from","text":"<p>BaseDriver.caps</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_7","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:125</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>StringRecord</code> &amp; <code>ServerArgs</code></p> <p>The set of command line arguments set for this driver</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_5","title":"Inherited from","text":"<p>BaseDriver.cliArgs</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:4</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#commandsqueueguard","title":"commandsQueueGuard","text":"<p>\u2022 <code>Protected</code> commandsQueueGuard: <code>AsyncLock</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_6","title":"Inherited from","text":"<p>BaseDriver.commandsQueueGuard</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_9","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:43</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#curcontext","title":"curContext","text":"<p>\u2022 curContext: <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_10","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:34</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_7","title":"Inherited from","text":"<p>BaseDriver.denyInsecure</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_11","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:28</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#desiredcapconstraints","title":"desiredCapConstraints","text":"<p>\u2022 <code>Readonly</code> desiredCapConstraints: <code>Object</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-declaration","title":"Type declaration","text":"Name Type <code>app</code> { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } <code>app.isString</code> <code>true</code> <code>app.presence</code> <code>true</code> <code>uniqueApp</code> { <code>isBoolean</code>: <code>true</code> = true } <code>uniqueApp.isBoolean</code> <code>true</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides_1","title":"Overrides","text":"<p>BaseDriver.desiredCapConstraints</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_12","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:31</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#elmap","title":"elMap","text":"<p>\u2022 elMap: <code>Record</code>&lt;<code>string</code>, <code>FakeElement</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_13","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:55</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_8","title":"Inherited from","text":"<p>BaseDriver.eventEmitter</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_14","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:36</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#fakething","title":"fakeThing","text":"<p>\u2022 fakeThing: <code>null</code> | <code>Thing</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_15","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:49</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#focusedelid","title":"focusedElId","text":"<p>\u2022 focusedElId: <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_16","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:46</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_9","title":"Inherited from","text":"<p>BaseDriver.helpers</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_17","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:16</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_10","title":"Inherited from","text":"<p>BaseDriver.implicitWaitMs</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_18","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:30</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-declaration_1","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_11","title":"Inherited from","text":"<p>BaseDriver.initialOpts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_19","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:15</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_12","title":"Inherited from","text":"<p>BaseDriver.locatorStrategies</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_20","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:31</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#manageddrivers","title":"managedDrivers","text":"<p>\u2022 managedDrivers: <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_13","title":"Inherited from","text":"<p>BaseDriver.managedDrivers</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_21","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:33</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#maxelid","title":"maxElId","text":"<p>\u2022 maxElId: <code>number</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_22","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:52</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_14","title":"Inherited from","text":"<p>BaseDriver.newCommandTimeoutMs</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_23","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:29</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#nocommandtimer","title":"noCommandTimer","text":"<p>\u2022 noCommandTimer: <code>null</code> | <code>Timeout</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_15","title":"Inherited from","text":"<p>BaseDriver.noCommandTimer</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_24","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:34</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_16","title":"Inherited from","text":"<p>BaseDriver.opts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_25","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:14</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#originalcaps","title":"originalCaps","text":"<p>\u2022 originalCaps: <code>W3CDriverCaps</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;</p> <p>The original capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_17","title":"Inherited from","text":"<p>BaseDriver.originalCaps</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_26","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:6</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_18","title":"Inherited from","text":"<p>BaseDriver.protocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_27","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:51</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_19","title":"Inherited from","text":"<p>BaseDriver.relaxedSecurityEnabled</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_28","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:26</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#server","title":"server","text":"<p>\u2022 <code>Optional</code> server: <code>AppiumServer</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_20","title":"Inherited from","text":"<p>BaseDriver.server</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_29","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:8</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#serverhost","title":"serverHost","text":"<p>\u2022 <code>Optional</code> serverHost: <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_21","title":"Inherited from","text":"<p>BaseDriver.serverHost</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_30","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:9</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#serverpath","title":"serverPath","text":"<p>\u2022 <code>Optional</code> serverPath: <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_22","title":"Inherited from","text":"<p>BaseDriver.serverPath</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_31","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:11</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#serverport","title":"serverPort","text":"<p>\u2022 <code>Optional</code> serverPort: <code>number</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_23","title":"Inherited from","text":"<p>BaseDriver.serverPort</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_32","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:10</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_24","title":"Inherited from","text":"<p>BaseDriver.sessionId</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_33","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:13</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#settings","title":"settings","text":"<p>\u2022 settings: <code>DeviceSettings</code>&lt;<code>StringRecord</code>&gt;</p> <p>settings should be instantiated by drivers which extend BaseDriver, but we set it to an empty DeviceSettings instance here to make sure that the default settings are applied even if an extending driver doesn't utilize the settings functionality itself</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_25","title":"Inherited from","text":"<p>BaseDriver.settings</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_34","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:50</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#shook","title":"shook","text":"<p>\u2022 shook: <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_35","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:43</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_26","title":"Inherited from","text":"<p>BaseDriver.shouldValidateCaps</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_36","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:42</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#shutdownunexpectedly","title":"shutdownUnexpectedly","text":"<p>\u2022 shutdownUnexpectedly: <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_27","title":"Inherited from","text":"<p>BaseDriver.shutdownUnexpectedly</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_37","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:41</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#supportedlogtypes","title":"supportedLogTypes","text":"<p>\u2022 supportedLogTypes: <code>Readonly</code>&lt;<code>LogDefRecord</code>&gt;</p> <p>Definition of the available log types</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_28","title":"Inherited from","text":"<p>BaseDriver.supportedLogTypes</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_38","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:269</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_29","title":"Inherited from","text":"<p>BaseDriver.webLocatorStrategies</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_39","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:32</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#baseversion","title":"baseVersion","text":"<p>\u25aa <code>Static</code> baseVersion: <code>string</code></p> <p>Make the basedriver version available so for any driver which inherits from this package, we know which version of basedriver it inherited from</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_30","title":"Inherited from","text":"<p>BaseDriver.baseVersion</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_40","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:12</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#executemethodmap","title":"executeMethodMap","text":"<p>\u25aa <code>Static</code> executeMethodMap: <code>Object</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-declaration_2","title":"Type declaration","text":"Name Type Description <code>fake: addition</code> { <code>command</code>: <code>\"fakeAddition\"</code> = 'fakeAddition'; <code>params</code>: { <code>optional</code>: readonly [<code>\"num3\"</code>] ; <code>required</code>: readonly [<code>\"num1\"</code>, <code>\"num2\"</code>]  }  } - <code>fake: addition.command</code> <code>\"fakeAddition\"</code> - <code>fake: addition.params</code> { <code>optional</code>: readonly [<code>\"num3\"</code>] ; <code>required</code>: readonly [<code>\"num1\"</code>, <code>\"num2\"</code>]  } - <code>fake: addition.params.optional</code> readonly [<code>\"num3\"</code>] - <code>fake: addition.params.required</code> readonly [<code>\"num1\"</code>, <code>\"num2\"</code>] - <code>fake: getDeprecatedCommandsCalled</code> { <code>command</code>: <code>\"getDeprecatedCommandsCalled\"</code> = 'getDeprecatedCommandsCalled' } - <code>fake: getDeprecatedCommandsCalled.command</code> <code>\"getDeprecatedCommandsCalled\"</code> - <code>fake: getThing</code> { <code>command</code>: <code>\"getFakeThing\"</code> = 'getFakeThing' } Gets a thing (a fake thing) <code>fake: getThing.command</code> <code>\"getFakeThing\"</code> - <code>fake: setThing</code> { <code>command</code>: <code>\"setFakeThing\"</code> = 'setFakeThing'; <code>params</code>: { <code>required</code>: readonly [<code>\"thing\"</code>]  }  } - <code>fake: setThing.command</code> <code>\"setFakeThing\"</code> - <code>fake: setThing.params</code> { <code>required</code>: readonly [<code>\"thing\"</code>]  } - <code>fake: setThing.params.required</code> readonly [<code>\"thing\"</code>] -"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_41","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:202</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#newmethodmap","title":"newMethodMap","text":"<p>\u25aa <code>Static</code> newMethodMap: <code>Object</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-declaration_3","title":"Type declaration","text":"Name Type <code>/session/:sessionId/deprecated</code> { <code>POST</code>: { <code>command</code>: <code>\"callDeprecatedCommand\"</code> = 'callDeprecatedCommand'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/deprecated.POST</code> { <code>command</code>: <code>\"callDeprecatedCommand\"</code> = 'callDeprecatedCommand'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/deprecated.POST.command</code> <code>\"callDeprecatedCommand\"</code> <code>/session/:sessionId/deprecated.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/doubleclick</code> { <code>POST</code>: { <code>command</code>: <code>\"doubleClick\"</code> = 'doubleClick' }  } <code>/session/:sessionId/doubleclick.POST</code> { <code>command</code>: <code>\"doubleClick\"</code> = 'doubleClick' } <code>/session/:sessionId/doubleclick.POST.command</code> <code>\"doubleClick\"</code> <code>/session/:sessionId/fakedriver</code> { <code>GET</code>: { <code>command</code>: <code>\"getFakeThing\"</code> = 'getFakeThing' } ; <code>POST</code>: { <code>command</code>: <code>\"setFakeThing\"</code> = 'setFakeThing'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"thing\"</code>]  }  }  } <code>/session/:sessionId/fakedriver.GET</code> { <code>command</code>: <code>\"getFakeThing\"</code> = 'getFakeThing' } <code>/session/:sessionId/fakedriver.GET.command</code> <code>\"getFakeThing\"</code> <code>/session/:sessionId/fakedriver.POST</code> { <code>command</code>: <code>\"setFakeThing\"</code> = 'setFakeThing'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"thing\"</code>]  }  } <code>/session/:sessionId/fakedriver.POST.command</code> <code>\"setFakeThing\"</code> <code>/session/:sessionId/fakedriver.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"thing\"</code>]  } <code>/session/:sessionId/fakedriver.POST.payloadParams.required</code> readonly [<code>\"thing\"</code>] <code>/session/:sessionId/fakedriverargs</code> { <code>GET</code>: { <code>command</code>: <code>\"getFakeDriverArgs\"</code> = 'getFakeDriverArgs' }  } <code>/session/:sessionId/fakedriverargs.GET</code> { <code>command</code>: <code>\"getFakeDriverArgs\"</code> = 'getFakeDriverArgs' } <code>/session/:sessionId/fakedriverargs.GET.command</code> <code>\"getFakeDriverArgs\"</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_42","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:182</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#accessors_1","title":"Accessors","text":""},{"location":"reference/classes/appium_fake_driver.FakeDriver/#_desiredcapconstraints","title":"_desiredCapConstraints","text":"<p>\u2022 <code>Protected</code> <code>get</code> _desiredCapConstraints(): <code>Readonly</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code>  } ; <code>autoLaunch</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>autoWebview</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>automationName</code>: { <code>isString</code>: <code>true</code>  } ; <code>eventTimings</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>fullReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>language</code>: { <code>isString</code>: <code>true</code>  } ; <code>locale</code>: { <code>isString</code>: <code>true</code>  } ; <code>newCommandTimeout</code>: { <code>isNumber</code>: <code>true</code>  } ; <code>noReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>orientation</code>: { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } ; <code>platformName</code>: { <code>isString</code>: <code>true</code> ; <code>presence</code>: <code>true</code>  } ; <code>platformVersion</code>: { <code>isString</code>: <code>true</code>  } ; <code>printPageSourceOnFindFailure</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>udid</code>: { <code>isString</code>: <code>true</code>  } ; <code>webSocketUrl</code>: { <code>isBoolean</code>: <code>true</code>  }  } &amp; <code>C</code>&gt;</p> <p>Contains the base constraints plus whatever the subclass wants to add.</p> <p>Subclasses shouldn't need to use this. If you need to use this, please create an issue:</p> <p><code>See</code></p> <p>https://github.com/appium/appium/issues/new</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns","title":"Returns","text":"<p><code>Readonly</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code>  } ; <code>autoLaunch</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>autoWebview</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>automationName</code>: { <code>isString</code>: <code>true</code>  } ; <code>eventTimings</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>fullReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>language</code>: { <code>isString</code>: <code>true</code>  } ; <code>locale</code>: { <code>isString</code>: <code>true</code>  } ; <code>newCommandTimeout</code>: { <code>isNumber</code>: <code>true</code>  } ; <code>noReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>orientation</code>: { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } ; <code>platformName</code>: { <code>isString</code>: <code>true</code> ; <code>presence</code>: <code>true</code>  } ; <code>platformVersion</code>: { <code>isString</code>: <code>true</code>  } ; <code>printPageSourceOnFindFailure</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>udid</code>: { <code>isString</code>: <code>true</code>  } ; <code>webSocketUrl</code>: { <code>isBoolean</code>: <code>true</code>  }  } &amp; <code>C</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_31","title":"Inherited from","text":"<p>BaseDriver._desiredCapConstraints</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_43","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:20</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#driverdata","title":"driverData","text":"<p>\u2022 <code>get</code> driverData(): <code>Object</code></p> <p>This property is used by AppiumDriver to store the data of the specific driver sessions. This data can be later used to adjust properties for driver instances running in parallel. Override it in inherited driver classes if necessary.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_1","title":"Returns","text":"<p><code>Object</code></p> Name Type <code>isUnique</code> <code>boolean</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides_2","title":"Overrides","text":"<p>BaseDriver.driverData</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_44","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:130</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#eventhistory","title":"eventHistory","text":"<p>\u2022 <code>get</code> eventHistory(): <code>EventHistory</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_2","title":"Returns","text":"<p><code>EventHistory</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_32","title":"Inherited from","text":"<p>BaseDriver.eventHistory</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_45","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:83</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 <code>get</code> isCommandsQueueEnabled(): <code>boolean</code></p> <p>This property controls the way the <code>executeCommand</code> method handles new driver commands received from the client. Override it for inherited classes only in special cases.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_3","title":"Returns","text":"<p><code>boolean</code></p> <p>If the returned value is true (default) then all the commands   received by the particular driver instance are going to be put into the queue,   so each following command will not be executed until the previous command   execution is completed. False value disables that queue, so each driver command   is executed independently and does not wait for anything.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_33","title":"Inherited from","text":"<p>BaseDriver.isCommandsQueueEnabled</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_46","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:82</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#log","title":"log","text":"<p>\u2022 <code>get</code> log(): <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_4","title":"Returns","text":"<p><code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_34","title":"Inherited from","text":"<p>BaseDriver.log</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_47","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:53</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_fake_driver.FakeDriver/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_1","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_35","title":"Inherited from","text":"<p>BaseDriver.addManagedDriver</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_48","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:150</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#assertalert","title":"assertAlert","text":"<p>\u25b8 assertAlert(): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_49","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:7</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_2","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_36","title":"Inherited from","text":"<p>BaseDriver.assertFeatureEnabled</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_50","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:127</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#assertnoalert","title":"assertNoAlert","text":"<p>\u25b8 assertNoAlert(): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_51","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:6</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#assertwebviewcontext","title":"assertWebviewContext","text":"<p>\u25b8 assertWebviewContext(): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_9","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_52","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:7</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#assignserver","title":"assignServer","text":"<p>\u25b8 assignServer(<code>server</code>, <code>host</code>, <code>port</code>, <code>path</code>): <code>void</code></p> <p>A helper function used to assign server information to the driver instance so the driver knows where the server is Running</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_3","title":"Parameters","text":"Name Type Description <code>server</code> <code>AppiumServer</code> the server object <code>host</code> <code>string</code> the server hostname <code>port</code> <code>number</code> the server port <code>path</code> <code>string</code> the server base url"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_37","title":"Inherited from","text":"<p>BaseDriver.assignServer</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_53","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:30</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#calldeprecatedcommand","title":"callDeprecatedCommand","text":"<p>\u25b8 callDeprecatedCommand(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>This is a command that exists just to be an example of a deprecated command</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_54","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:178</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(): <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_12","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides_3","title":"Overrides","text":"<p>BaseDriver.canProxy</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_55","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:77</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#clear","title":"clear","text":"<p>\u25b8 clear(<code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_4","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_56","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:17</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_38","title":"Inherited from","text":"<p>BaseDriver.clearNewCommandTimeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_57","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:152</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#click","title":"click","text":"<p>\u25b8 click(<code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_5","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_58","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:18</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>w3cCapabilities1</code>, <code>w3cCapabilities2?</code>, <code>w3cCapabilities3?</code>, <code>driverData?</code>): <code>Promise</code>&lt;[<code>string</code>, <code>FakeDriverCaps</code>]&gt;</p> <p>Comment for <code>createSession</code> in <code>FakeDriver</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_6","title":"Parameters","text":"Name Type Default value Description <code>w3cCapabilities1</code> <code>W3CFakeDriverCaps</code> <code>undefined</code> W3C Capabilities <code>w3cCapabilities2?</code> <code>W3CFakeDriverCaps</code> <code>undefined</code> W3C Capabilities <code>w3cCapabilities3?</code> <code>W3CFakeDriverCaps</code> <code>undefined</code> W3C Capabilities <code>driverData?</code> <code>DriverData</code>[] <code>[]</code> Other session data"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_16","title":"Returns","text":"<p><code>Promise</code>&lt;[<code>string</code>, <code>FakeDriverCaps</code>]&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides_4","title":"Overrides","text":"<p>BaseDriver.createSession</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_59","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:107</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#deletesession","title":"deleteSession","text":"<p>\u25b8 deleteSession(<code>sessionId?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Stop an automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_7","title":"Parameters","text":"Name Type Description <code>sessionId?</code> <code>null</code> | <code>string</code> the id of the session that is to be deleted"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_39","title":"Inherited from","text":"<p>BaseDriver.deleteSession</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_60","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:45</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#doubleclick","title":"doubleClick","text":"<p>\u25b8 doubleClick(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_18","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_61","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:22</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p> <p>method required by MJSONWP in order to determine if the command should be proxied directly to the driver</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_8","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_19","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_40","title":"Inherited from","text":"<p>BaseDriver.driverForSession</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_62","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:102</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#elementdisplayed","title":"elementDisplayed","text":"<p>\u25b8 elementDisplayed(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_9","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_63","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:12</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#elementenabled","title":"elementEnabled","text":"<p>\u25b8 elementEnabled(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_10","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_21","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_64","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:13</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#elementselected","title":"elementSelected","text":"<p>\u25b8 elementSelected(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_11","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_22","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_65","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:14</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#ensurefeatureenabled","title":"ensureFeatureEnabled","text":"<p>\u25b8 ensureFeatureEnabled(<code>name</code>): <code>void</code></p> <p>Assert that a given feature is enabled and throw a helpful error if it's not</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_12","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_23","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_41","title":"Inherited from","text":"<p>BaseDriver.ensureFeatureEnabled</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_66","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:120</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#equalselement","title":"equalsElement","text":"<p>\u25b8 equalsElement(<code>elementId</code>, <code>otherElementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_13","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code> <code>otherElementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_24","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_67","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:23</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#execute","title":"execute","text":"<p>\u25b8 execute(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_14","title":"Parameters","text":"Name Type <code>script</code> <code>string</code> <code>args</code> <code>any</code>[]"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_25","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_68","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:23</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#executecommand","title":"executeCommand","text":"<p>\u25b8 executeCommand&lt;<code>T</code>&gt;(<code>cmd</code>, <code>...args</code>): <code>Promise</code>&lt;<code>T</code>&gt;</p> <p>This is the main command handler for the driver. It wraps command execution with timeout logic, checking that we have a valid session, and ensuring that we execute commands one at a time. This method is called by MJSONWP's express router.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-parameters_2","title":"Type parameters","text":"Name Type <code>T</code> <code>unknown</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_15","title":"Parameters","text":"Name Type <code>cmd</code> <code>string</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_26","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_42","title":"Inherited from","text":"<p>BaseDriver.executeCommand</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_69","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:27</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>TArgs</code>, <code>TReturn</code>&gt;(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Call an <code>Execute Method</code> by its name with the given arguments. This method will check that the driver has registered the method matching the name, and send it the arguments.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-parameters_3","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;] = <code>unknown</code>[] <code>TReturn</code> <code>unknown</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_16","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the name of the Execute Method <code>args</code> <code>TArgs</code> a singleton array containing an arguments object"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_27","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>The result of calling the Execute Method</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_43","title":"Inherited from","text":"<p>BaseDriver.executeMethod</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_70","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:148</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#fakeaddition","title":"fakeAddition","text":"<p>\u25b8 fakeAddition(<code>a</code>, <code>b</code>, <code>c?</code>): <code>Promise</code>&lt;<code>number</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_17","title":"Parameters","text":"Name Type <code>a</code> <code>number</code> <code>b</code> <code>number</code> <code>c?</code> <code>number</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_28","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_71","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:24</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelorels","title":"findElOrEls","text":"<p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A helper method that returns one or more UI elements based on the search criteria</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_18","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_29","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_44","title":"Inherited from","text":"<p>BaseDriver.findElOrEls</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_72","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:242</p> <p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_19","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_30","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_45","title":"Inherited from","text":"<p>BaseDriver.findElOrEls</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_73","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:243</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelorelswithprocessing","title":"findElOrElsWithProcessing","text":"<p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>This is a wrapper for <code>findElOrEls</code> that validates locator strategies and implements the <code>appium:printPageSourceOnFindFailure</code> capability</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_20","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_31","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_46","title":"Inherited from","text":"<p>BaseDriver.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_74","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:255</p> <p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_21","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_32","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_47","title":"Inherited from","text":"<p>BaseDriver.findElOrElsWithProcessing</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_75","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:256</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_22","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_33","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_48","title":"Inherited from","text":"<p>BaseDriver.findElement</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_76","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:176</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelementfromelement","title":"findElementFromElement","text":"<p>\u25b8 findElementFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_23","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_34","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_49","title":"Inherited from","text":"<p>BaseDriver.findElementFromElement</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_77","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:199</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelementfromshadowroot","title":"findElementFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_24","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_35","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_50","title":"Inherited from","text":"<p>BaseDriver.findElementFromShadowRoot</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_78","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:221</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_25","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_36","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_51","title":"Inherited from","text":"<p>BaseDriver.findElements</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_79","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:186</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelementsfromelement","title":"findElementsFromElement","text":"<p>\u25b8 findElementsFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_26","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_37","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_52","title":"Inherited from","text":"<p>BaseDriver.findElementsFromElement</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_80","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:211</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#findelementsfromshadowroot","title":"findElementsFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementsFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_27","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_38","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_53","title":"Inherited from","text":"<p>BaseDriver.findElementsFromShadowRoot</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_81","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:231</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getalerttext","title":"getAlertText","text":"<p>\u25b8 getAlertText(): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_39","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_82","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:9</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getattribute","title":"getAttribute","text":"<p>\u25b8 getAttribute(<code>elementId</code>, <code>attributeName</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_28","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code> <code>attributeName</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_40","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_83","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:20</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getcontexts","title":"getContexts","text":"<p>\u25b8 getContexts(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_41","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_84","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:9</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getcssproperty","title":"getCssProperty","text":"<p>\u25b8 getCssProperty(<code>elementId</code>, <code>propertyName</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_29","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code> <code>propertyName</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_42","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_85","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:24</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getcurrentcontext","title":"getCurrentContext","text":"<p>\u25b8 getCurrentContext(): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_43","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_86","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:8</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getdeprecatedcommandscalled","title":"getDeprecatedCommandsCalled","text":"<p>\u25b8 getDeprecatedCommandsCalled(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>This is a command that will return a list of deprecated command names called</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_44","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_87","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:168</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getelement","title":"getElement","text":"<p>\u25b8 getElement(<code>elementId</code>): <code>FakeElement</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_30","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_45","title":"Returns","text":"<p><code>FakeElement</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_88","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:10</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getelementrect","title":"getElementRect","text":"<p>\u25b8 getElementRect(<code>elementId</code>): <code>Promise</code>&lt;<code>Rect</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_31","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_46","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_89","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:21</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getelements","title":"getElements","text":"<p>\u25b8 getElements(<code>elementIds</code>): <code>FakeElement</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_32","title":"Parameters","text":"Name Type <code>elementIds</code> <code>string</code>[]"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_47","title":"Returns","text":"<p><code>FakeElement</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_90","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:9</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getexistingelementfornode","title":"getExistingElementForNode","text":"<p>\u25b8 getExistingElementForNode(<code>node</code>): <code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_33","title":"Parameters","text":"Name Type <code>node</code> <code>FakeElement</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_48","title":"Returns","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_91","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/find.ts:69</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getfakedriverargs","title":"getFakeDriverArgs","text":"<p>\u25b8 getFakeDriverArgs(): <code>Promise</code>&lt;<code>StringRecord</code> &amp; <code>ServerArgs</code>&gt;</p> <p>Get the driver args that were sent in via the CLI</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_49","title":"Returns","text":"<p><code>Promise</code>&lt;<code>StringRecord</code> &amp; <code>ServerArgs</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_92","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:158</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getfakething","title":"getFakeThing","text":"<p>\u25b8 getFakeThing(): <code>Promise</code>&lt;<code>null</code> | <code>Thing</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_50","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>Thing</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_93","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:136</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getgeolocation","title":"getGeoLocation","text":"<p>\u25b8 getGeoLocation(): <code>Promise</code>&lt;<code>Location</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_51","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Location</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_94","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:12</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getlocation","title":"getLocation","text":"<p>\u25b8 getLocation(<code>elementId</code>): <code>Promise</code>&lt;<code>Position</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_34","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_52","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Position</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_95","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:25</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getlocationinview","title":"getLocationInView","text":"<p>\u25b8 getLocationInView(<code>elementId</code>): <code>Promise</code>&lt;<code>Position</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_35","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_53","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Position</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_96","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:26</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getlog","title":"getLog","text":"<p>\u25b8 getLog(<code>logType</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the log for a given log type.</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_36","title":"Parameters","text":"Name Type Description <code>logType</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_54","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_54","title":"Inherited from","text":"<p>BaseDriver.getLog</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_97","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:279</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getlogevents","title":"getLogEvents","text":"<p>\u25b8 getLogEvents(<code>type?</code>): <code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_37","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_55","title":"Returns","text":"<p><code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>The event history for the session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_55","title":"Inherited from","text":"<p>BaseDriver.getLogEvents</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_98","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:136</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getlogtypes","title":"getLogTypes","text":"<p>\u25b8 getLogTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get available log types as a list of strings</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_56","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_56","title":"Inherited from","text":"<p>BaseDriver.getLogTypes</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_99","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:273</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_57","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_57","title":"Inherited from","text":"<p>BaseDriver.getManagedDrivers</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_100","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:151</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getname","title":"getName","text":"<p>\u25b8 getName(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_38","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_58","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_101","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:11</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getorientation","title":"getOrientation","text":"<p>\u25b8 getOrientation(): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_59","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_102","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:14</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_60","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_58","title":"Inherited from","text":"<p>BaseDriver.getPageSource</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_103","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:263</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_39","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_61","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_59","title":"Inherited from","text":"<p>BaseDriver.getProxyAvoidList</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_104","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:130</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getrawcontexts","title":"getRawContexts","text":"<p>\u25b8 getRawContexts(): <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_62","title":"Returns","text":"<p><code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_105","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:6</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getscreenshot","title":"getScreenshot","text":"<p>\u25b8 getScreenshot(): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_63","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_106","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:16</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getsession","title":"getSession","text":"<p>\u25b8 getSession(): <code>Promise</code>&lt;<code>SingularSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }, <code>StringRecord</code>&gt;&gt;</p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_64","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SingularSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }, <code>StringRecord</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_60","title":"Inherited from","text":"<p>BaseDriver.getSession</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_107","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:44</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getsessions","title":"getSessions","text":"<p>\u25b8 getSessions(): <code>Promise</code>&lt;<code>MultiSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;[]&gt;</p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_65","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MultiSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;[]&gt;</p> <p>A list of session data objects</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_61","title":"Inherited from","text":"<p>BaseDriver.getSessions</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_108","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:40</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>Promise</code>&lt;<code>StringRecord</code>&gt;</p> <p>Get the current settings for the session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_66","title":"Returns","text":"<p><code>Promise</code>&lt;<code>StringRecord</code>&gt;</p> <p>The settings object</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_62","title":"Inherited from","text":"<p>BaseDriver.getSettings</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_109","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:49</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getsize","title":"getSize","text":"<p>\u25b8 getSize(<code>elementId</code>): <code>Promise</code>&lt;<code>Size</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_40","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_67","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Size</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_110","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:22</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_68","title":"Returns","text":"<p><code>Promise</code>&lt;{}&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_63","title":"Inherited from","text":"<p>BaseDriver.getStatus</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_111","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:92</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#gettext","title":"getText","text":"<p>\u25b8 getText(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_41","title":"Parameters","text":"Name Type <code>elementId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_69","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_112","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:16</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#gettimeouts","title":"getTimeouts","text":"<p>\u25b8 getTimeouts(): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get the current timeouts</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-timeouts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_70","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>A map of timeout names to ms values</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_64","title":"Inherited from","text":"<p>BaseDriver.getTimeouts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_113","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:66</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getwindowrect","title":"getWindowRect","text":"<p>\u25b8 getWindowRect(): <code>Promise</code>&lt;<code>Rect</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_71","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_114","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:18</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#getwindowsize","title":"getWindowSize","text":"<p>\u25b8 getWindowSize(): <code>Promise</code>&lt;<code>Size</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_72","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Size</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_115","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:17</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#implicitwait","title":"implicitWait","text":"<p>\u25b8 implicitWait(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_42","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_73","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_65","title":"Inherited from","text":"<p>BaseDriver.implicitWait</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_116","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:45</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#implicitwaitforcondition","title":"implicitWaitForCondition","text":"<p>\u25b8 implicitWaitForCondition(<code>condition</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Periodically retry an async function up until the currently set implicit wait timeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_43","title":"Parameters","text":"Name Type Description <code>condition</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>Promise</code>&lt;<code>any</code>&gt; the behaviour to retry until it returns truthy"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_74","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the condition</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_66","title":"Inherited from","text":"<p>BaseDriver.implicitWaitForCondition</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_117","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:59</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#implicitwaitmjsonwp","title":"implicitWaitMJSONWP","text":"<p>\u25b8 implicitWaitMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_44","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_75","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_67","title":"Inherited from","text":"<p>BaseDriver.implicitWaitMJSONWP</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_118","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:79</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#implicitwaitw3c","title":"implicitWaitW3C","text":"<p>\u25b8 implicitWaitW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_45","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_76","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_68","title":"Inherited from","text":"<p>BaseDriver.implicitWaitW3C</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_119","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:72</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p> <p>Check whether a given feature is enabled via its name</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_46","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> name of feature/command"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_77","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_69","title":"Inherited from","text":"<p>BaseDriver.isFeatureEnabled</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_120","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:112</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_78","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_70","title":"Inherited from","text":"<p>BaseDriver.isMjsonwpProtocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_121","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:103</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_79","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_71","title":"Inherited from","text":"<p>BaseDriver.isW3CProtocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_122","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:104</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#keys","title":"keys","text":"<p>\u25b8 keys(<code>value</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_47","title":"Parameters","text":"Name Type <code>value</code> <code>string</code> | <code>string</code>[]"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_80","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_123","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:10</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#logcustomevent","title":"logCustomEvent","text":"<p>\u25b8 logCustomEvent(<code>vendor</code>, <code>event</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_48","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_81","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_72","title":"Inherited from","text":"<p>BaseDriver.logCustomEvent</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_124","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:128</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p> <p>API method for driver developers to log timings for important events</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_49","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_82","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_73","title":"Inherited from","text":"<p>BaseDriver.logEvent</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_125","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:87</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#logextracaps","title":"logExtraCaps","text":"<p>\u25b8 logExtraCaps(<code>caps</code>): <code>void</code></p> <p>A helper function to log unrecognized capabilities to the console</p> <p><code>Params</code></p> <p>caps - the capabilities</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_50","title":"Parameters","text":"Name Type <code>caps</code> <code>ConstraintsToCaps</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_83","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_74","title":"Inherited from","text":"<p>BaseDriver.logExtraCaps</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_126","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:46</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#mobileshake","title":"mobileShake","text":"<p>\u25b8 mobileShake(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_84","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_127","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:21</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#newcommandtimeout","title":"newCommandTimeout","text":"<p>\u25b8 newCommandTimeout(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set Appium's new command timeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_51","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_85","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_75","title":"Inherited from","text":"<p>BaseDriver.newCommandTimeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_128","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:111</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p> <p>Set a callback handler if needed to execute a custom piece of code when the driver is shut down unexpectedly. Multiple calls to this method will cause the handler to be executed mutiple times</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_52","title":"Parameters","text":"Name Type Description <code>handler</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> The code to be executed on unexpected shutdown. The function may accept one argument, which is the actual error instance, which caused the driver to shut down."},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_86","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_76","title":"Inherited from","text":"<p>BaseDriver.onUnexpectedShutdown</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_129","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:63</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#pageloadtimeoutmjsonwp","title":"pageLoadTimeoutMJSONWP","text":"<p>\u25b8 pageLoadTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_53","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_87","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_77","title":"Inherited from","text":"<p>BaseDriver.pageLoadTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_130","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:92</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#pageloadtimeoutw3c","title":"pageLoadTimeoutW3C","text":"<p>\u25b8 pageLoadTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_54","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_88","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_78","title":"Inherited from","text":"<p>BaseDriver.pageLoadTimeoutW3C</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_131","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:85</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parsetimeoutargument","title":"parseTimeoutArgument","text":"<p>\u25b8 parseTimeoutArgument(<code>ms</code>): <code>number</code></p> <p>Get a timeout value from a number or a string</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_55","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout value as a number or a string"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_89","title":"Returns","text":"<p><code>number</code></p> <p>The timeout as a number in ms</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_79","title":"Inherited from","text":"<p>BaseDriver.parseTimeoutArgument</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_132","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:119</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#performactions","title":"performActions","text":"<p>\u25b8 performActions(<code>actions</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_56","title":"Parameters","text":"Name Type <code>actions</code> <code>ActionSequence</code>[]"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_90","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_133","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:19</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#postacceptalert","title":"postAcceptAlert","text":"<p>\u25b8 postAcceptAlert(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_91","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_134","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:13</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#postdismissalert","title":"postDismissAlert","text":"<p>\u25b8 postDismissAlert(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_92","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_135","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:14</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(): <code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_93","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#overrides_5","title":"Overrides","text":"<p>BaseDriver.proxyActive</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_136","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:73</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#proxycommand","title":"proxyCommand","text":"<p>\u25b8 proxyCommand&lt;<code>T</code>&gt;(): <code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#type-parameters_4","title":"Type parameters","text":"Name Type <code>T</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_94","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_137","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:94</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#proxyreqres","title":"proxyReqRes","text":"<p>\u25b8 proxyReqRes(<code>req</code>, <code>res</code>): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_57","title":"Parameters","text":"Name Type <code>req</code> <code>any</code> <code>res</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_95","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_138","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:81</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p> <p>Whether a given command route (expressed as method and url) should not be proxied according to this driver</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_58","title":"Parameters","text":"Name Type Description <code>sessionId</code> <code>string</code> the current sessionId (in case the driver runs multiple session ids and requires it). This is not used in this method but should be made available to overridden methods. <code>method</code> <code>HTTPMethod</code> HTTP method of the route <code>url</code> <code>string</code> url of the route <code>body?</code> <code>any</code> webdriver request body"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_96","title":"Returns","text":"<p><code>boolean</code></p> <p>whether the route should be avoided</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_80","title":"Inherited from","text":"<p>BaseDriver.proxyRouteIsAvoided</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_139","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:145</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#releaseactions","title":"releaseActions","text":"<p>\u25b8 releaseActions(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_97","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_140","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:20</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#reset","title":"reset","text":"<p>\u25b8 reset(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_98","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_81","title":"Inherited from","text":"<p>BaseDriver.reset</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_141","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:31</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#scripttimeoutmjsonwp","title":"scriptTimeoutMJSONWP","text":"<p>\u25b8 scriptTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_59","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_99","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_82","title":"Inherited from","text":"<p>BaseDriver.scriptTimeoutMJSONWP</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_142","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:105</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#scripttimeoutw3c","title":"scriptTimeoutW3C","text":"<p>\u25b8 scriptTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_60","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_100","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_83","title":"Inherited from","text":"<p>BaseDriver.scriptTimeoutW3C</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_143","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:98</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId</code>): <code>boolean</code></p> <p>method required by MJSONWP in order to determine whether it should respond with an invalid session response</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_61","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_101","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_84","title":"Inherited from","text":"<p>BaseDriver.sessionExists</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_144","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:97</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setalerttext","title":"setAlertText","text":"<p>\u25b8 setAlertText(<code>text</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_62","title":"Parameters","text":"Name Type <code>text</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_102","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_145","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/alert.ts:11</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setcontext","title":"setContext","text":"<p>\u25b8 setContext(<code>context</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_63","title":"Parameters","text":"Name Type <code>context</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_103","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_146","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:10</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setfakething","title":"setFakeThing","text":"<p>\u25b8 setFakeThing(<code>thing</code>): <code>Promise</code>&lt;<code>null</code>&gt;</p> <p>Set the 'thing' value (so that it can be retrieved later)</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_64","title":"Parameters","text":"Name Type <code>thing</code> <code>Thing</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_104","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_147","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:147</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setframe","title":"setFrame","text":"<p>\u25b8 setFrame(<code>frame</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_65","title":"Parameters","text":"Name Type <code>frame</code> <code>null</code> | <code>number</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_105","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_148","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/contexts.ts:11</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setgeolocation","title":"setGeoLocation","text":"<p>\u25b8 setGeoLocation(<code>location</code>): <code>Promise</code>&lt;<code>Location</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_66","title":"Parameters","text":"Name Type <code>location</code> <code>Location</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_106","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Location</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_149","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:11</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setimplicitwait","title":"setImplicitWait","text":"<p>\u25b8 setImplicitWait(<code>ms</code>): <code>void</code></p> <p>A helper method (not a command) used to set the implicit wait value</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_67","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the implicit wait in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_107","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_85","title":"Inherited from","text":"<p>BaseDriver.setImplicitWait</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_150","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:51</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setnewcommandtimeout","title":"setNewCommandTimeout","text":"<p>\u25b8 setNewCommandTimeout(<code>ms</code>): <code>void</code></p> <p>Set the new command timeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_68","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_108","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_86","title":"Inherited from","text":"<p>BaseDriver.setNewCommandTimeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_151","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:36</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setorientation","title":"setOrientation","text":"<p>\u25b8 setOrientation(<code>orientation</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_69","title":"Parameters","text":"Name Type <code>orientation</code> <code>Orientation</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_109","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_152","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:15</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setprotocolmjsonwp","title":"setProtocolMJSONWP","text":"<p>\u25b8 setProtocolMJSONWP(): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_110","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_87","title":"Inherited from","text":"<p>BaseDriver.setProtocolMJSONWP</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_153","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:105</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setprotocolw3c","title":"setProtocolW3C","text":"<p>\u25b8 setProtocolW3C(): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_111","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_88","title":"Inherited from","text":"<p>BaseDriver.setProtocolW3C</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_154","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:106</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#setvalue","title":"setValue","text":"<p>\u25b8 setValue(<code>keys</code>, <code>value</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_70","title":"Parameters","text":"Name Type <code>keys</code> <code>string</code> | <code>string</code>[] <code>value</code> <code>string</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_112","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_155","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/element.ts:15</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#startnewcommandtimeout","title":"startNewCommandTimeout","text":"<p>\u25b8 startNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Start the timer for the New Command Timeout, which when it runs out, will stop the current session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_113","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_89","title":"Inherited from","text":"<p>BaseDriver.startNewCommandTimeout</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_156","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:29</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#startunexpectedshutdown","title":"startUnexpectedShutdown","text":"<p>\u25b8 startUnexpectedShutdown(<code>err?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Signify to any owning processes that this driver encountered an error which should cause the session to terminate immediately (for example an upstream service failed)</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_71","title":"Parameters","text":"Name Type Description <code>err?</code> <code>Error</code> the Error object which is causing the shutdown"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_114","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_90","title":"Inherited from","text":"<p>BaseDriver.startUnexpectedShutdown</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_157","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:28</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#timeouts","title":"timeouts","text":"<p>\u25b8 timeouts(<code>type</code>, <code>ms</code>, <code>script?</code>, <code>pageLoad?</code>, <code>implicit?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_72","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_115","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_91","title":"Inherited from","text":"<p>BaseDriver.timeouts</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_158","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:30</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#title","title":"title","text":"<p>\u25b8 title(): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_116","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_159","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/general.ts:9</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#updatesettings","title":"updateSettings","text":"<p>\u25b8 updateSettings(<code>newSettings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_73","title":"Parameters","text":"Name Type Description <code>newSettings</code> <code>StringRecord</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_117","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_92","title":"Inherited from","text":"<p>BaseDriver.updateSettings</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_160","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:48</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#validatedesiredcaps","title":"validateDesiredCaps","text":"<p>\u25b8 validateDesiredCaps(<code>caps</code>): caps is DriverCaps&lt;Object&gt;</p> <p>Validate the capabilities used to start a session</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_74","title":"Parameters","text":"Name Type Description <code>caps</code> <code>any</code> the capabilities"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_118","title":"Returns","text":"<p>caps is DriverCaps&lt;Object&gt;</p> <p>Whether or not the capabilities are valid</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_93","title":"Inherited from","text":"<p>BaseDriver.validateDesiredCaps</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_161","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/driver.d.ts:47</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_75","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>webContext?</code> <code>boolean</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_119","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#inherited-from_94","title":"Inherited from","text":"<p>BaseDriver.validateLocatorStrategy</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_162","title":"Defined in","text":"<p>packages/base-driver/build/lib/basedriver/core.d.ts:128</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#wrapnewel","title":"wrapNewEl","text":"<p>\u25b8 wrapNewEl(<code>obj</code>): <code>Element</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_76","title":"Parameters","text":"Name Type <code>obj</code> <code>FakeElement</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_120","title":"Returns","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_163","title":"Defined in","text":"<p>packages/fake-driver/lib/commands/find.ts:70</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#fakeroute","title":"fakeRoute","text":"<p>\u25b8 <code>Static</code> fakeRoute(<code>req</code>, <code>res</code>): <code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_77","title":"Parameters","text":"Name Type <code>req</code> <code>any</code> <code>res</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_121","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_164","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:222</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#updateserver","title":"updateServer","text":"<p>\u25b8 <code>Static</code> updateServer(<code>expressApp</code>, <code>httpServer</code>, <code>cliArgs</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#parameters_78","title":"Parameters","text":"Name Type <code>expressApp</code> <code>any</code> <code>httpServer</code> <code>any</code> <code>cliArgs</code> <code>any</code>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#returns_122","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_fake_driver.FakeDriver/#defined-in_165","title":"Defined in","text":"<p>packages/fake-driver/lib/driver.js:226</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/","title":"Class: ImageElementPlugin","text":"<p>@appium/images-plugin.ImageElementPlugin</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>\"/Users/jlipps/Code/gh/appium/appium/packages/appium/plugin\"</code></li> </ul> <p>\u21b3 <code>ImageElementPlugin</code></p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#properties","title":"Properties","text":"<ul> <li>finder</li> <li>newMethodMap</li> </ul>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#methods","title":"Methods","text":"<ul> <li>_find</li> <li>compareImages</li> <li>findElement</li> <li>findElements</li> <li>handle</li> </ul>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#constructor","title":"constructor","text":"<p>\u2022 new ImageElementPlugin(<code>pluginName</code>)</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters","title":"Parameters","text":"Name Type <code>pluginName</code> <code>any</code>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#overrides","title":"Overrides","text":"<p>BasePlugin.constructor</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:16</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#finder","title":"finder","text":"<p>\u2022 finder: <code>default</code></p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_1","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:18</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#newmethodmap","title":"newMethodMap","text":"<p>\u25aa <code>Static</code> newMethodMap: <code>Object</code></p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#type-declaration","title":"Type declaration","text":"Name Type <code>/session/:sessionId/appium/compare_images</code> { <code>POST</code>: { <code>command</code>: <code>\"compareImages\"</code> = 'compareImages'; <code>neverProxy</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"mode\"</code>, <code>\"firstImage\"</code>, <code>\"secondImage\"</code>]  }  }  } <code>/session/:sessionId/appium/compare_images.POST</code> { <code>command</code>: <code>\"compareImages\"</code> = 'compareImages'; <code>neverProxy</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"mode\"</code>, <code>\"firstImage\"</code>, <code>\"secondImage\"</code>]  }  } <code>/session/:sessionId/appium/compare_images.POST.command</code> <code>\"compareImages\"</code> <code>/session/:sessionId/appium/compare_images.POST.neverProxy</code> <code>true</code> <code>/session/:sessionId/appium/compare_images.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"mode\"</code>, <code>\"firstImage\"</code>, <code>\"secondImage\"</code>]  } <code>/session/:sessionId/appium/compare_images.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/compare_images.POST.payloadParams.required</code> readonly [<code>\"mode\"</code>, <code>\"firstImage\"</code>, <code>\"secondImage\"</code>]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_2","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:22</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#_find","title":"_find","text":"<p>\u25b8 _find(<code>multiple</code>, <code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters_1","title":"Parameters","text":"Name Type <code>multiple</code> <code>any</code> <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_3","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:47</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#compareimages","title":"compareImages","text":"<p>\u25b8 compareImages(<code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters_2","title":"Parameters","text":"Name Type <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_4","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:35</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters_3","title":"Parameters","text":"Name Type <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_5","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:39</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters_4","title":"Parameters","text":"Name Type <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_6","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:43</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#handle","title":"handle","text":"<p>\u25b8 handle(<code>next</code>, <code>driver</code>, <code>cmdName</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#parameters_5","title":"Parameters","text":"Name Type <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>cmdName</code> <code>any</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_images_plugin.ImageElementPlugin/#defined-in_7","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:58</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/","title":"Class: RelaxedCapsPlugin","text":"<p>@appium/relaxed-caps-plugin.RelaxedCapsPlugin</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>\"/Users/jlipps/Code/gh/appium/appium/packages/appium/plugin\"</code></li> </ul> <p>\u21b3 <code>RelaxedCapsPlugin</code></p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#methods","title":"Methods","text":"<ul> <li>createSession</li> <li>transformCaps</li> </ul>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#constructor","title":"constructor","text":"<p>\u2022 new RelaxedCapsPlugin()</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#inherited-from","title":"Inherited from","text":"<p>BasePlugin.constructor</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>next</code>, <code>driver</code>, <code>jwpDesCaps</code>, <code>jwpReqCaps</code>, <code>caps</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#parameters","title":"Parameters","text":"Name Type <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>jwpDesCaps</code> <code>any</code> <code>jwpReqCaps</code> <code>any</code> <code>caps</code> <code>any</code>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#defined-in","title":"Defined in","text":"<p>packages/relaxed-caps-plugin/lib/plugin.js:50</p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#transformcaps","title":"transformCaps","text":"<p>\u25b8 transformCaps(<code>caps</code>): <code>any</code></p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#parameters_1","title":"Parameters","text":"Name Type <code>caps</code> <code>any</code>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#returns_1","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/classes/appium_relaxed_caps_plugin.RelaxedCapsPlugin/#defined-in_1","title":"Defined in","text":"<p>packages/relaxed-caps-plugin/lib/plugin.js:22</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/","title":"Class: BaseItem&lt;T, U&gt;","text":"<p>@appium/strongbox.BaseItem</p> <p>Base item implementation</p> <p><code>Remarks</code></p> <p>This class is not intended to be instantiated directly</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#type-parameters","title":"Type parameters","text":"Name Type Description <code>T</code> extends <code>Value</code> Type of data stored in the <code>Item</code> <code>U</code> extends <code>Strongbox</code> = <code>Strongbox</code> -"},{"location":"reference/classes/appium_strongbox.BaseItem/#implements","title":"Implements","text":"<ul> <li><code>Item</code>&lt;<code>T</code>&gt;</li> </ul>"},{"location":"reference/classes/appium_strongbox.BaseItem/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_strongbox.BaseItem/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_strongbox.BaseItem/#properties","title":"Properties","text":"<ul> <li>_value</li> <li>container</li> <li>encoding</li> <li>id</li> <li>name</li> <li>value</li> </ul>"},{"location":"reference/classes/appium_strongbox.BaseItem/#methods","title":"Methods","text":"<ul> <li>clear</li> <li>read</li> <li>write</li> </ul>"},{"location":"reference/classes/appium_strongbox.BaseItem/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_strongbox.BaseItem/#constructor","title":"constructor","text":"<p>\u2022 new BaseItem&lt;<code>T</code>, <code>U</code>&gt;(<code>name</code>, <code>parent</code>, <code>encoding?</code>)</p> <p>Slugifies the name</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Value</code> <code>U</code> extends <code>Strongbox</code>&lt;<code>StrongboxOpts</code>, <code>U</code>&gt; = <code>Strongbox</code>&lt;<code>StrongboxOpts</code>&gt;"},{"location":"reference/classes/appium_strongbox.BaseItem/#parameters","title":"Parameters","text":"Name Type Default value Description <code>name</code> <code>string</code> <code>undefined</code> Name of instance <code>parent</code> <code>U</code> <code>undefined</code> Parent Strongbox <code>encoding</code> <code>ItemEncoding</code> <code>'utf8'</code> Defaults to <code>utf8</code>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:37</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_strongbox.BaseItem/#_value","title":"_value","text":"<p>\u2022 <code>Protected</code> <code>Optional</code> _value: <code>T</code></p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_1","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:16</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#container","title":"container","text":"<p>\u2022 <code>Readonly</code> container: <code>string</code></p> <p>Parent Strongbox instance</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_2","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:21</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#encoding","title":"encoding","text":"<p>\u2022 <code>Readonly</code> encoding: <code>ItemEncoding</code> = <code>'utf8'</code></p> <p>Defaults to <code>utf8</code></p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of","title":"Implementation of","text":"<p>Item.encoding</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_3","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:40</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#id","title":"id","text":"<p>\u2022 <code>Readonly</code> id: <code>string</code></p> <p>Unique slugified identifier</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_1","title":"Implementation of","text":"<p>Item.id</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_4","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:25</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#name","title":"name","text":"<p>\u2022 <code>Readonly</code> name: <code>string</code></p> <p>Name of instance</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_2","title":"Implementation of","text":"<p>Item.name</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_5","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:38</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#value","title":"value","text":"<p>\u2022 <code>Readonly</code> value: <code>undefined</code> | <code>T</code></p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_3","title":"Implementation of","text":"<p>Item.value</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_6","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:29</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_strongbox.BaseItem/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_4","title":"Implementation of","text":"<p>Item.clear</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_7","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:61</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#read","title":"read","text":"<p>\u25b8 read(): <code>Promise</code>&lt;<code>undefined</code> | <code>T</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>undefined</code> | <code>T</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_5","title":"Implementation of","text":"<p>Item.read</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_8","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:75</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#write","title":"write","text":"<p>\u25b8 write(<code>value</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#parameters_1","title":"Parameters","text":"Name Type <code>value</code> <code>T</code>"},{"location":"reference/classes/appium_strongbox.BaseItem/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#implementation-of_6","title":"Implementation of","text":"<p>Item.write</p>"},{"location":"reference/classes/appium_strongbox.BaseItem/#defined-in_9","title":"Defined in","text":"<p>packages/strongbox/lib/base-item.ts:91</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/","title":"Class: Strongbox&lt;Options&gt;","text":"<p>@appium/strongbox.Strongbox</p> <p>Main entry point for use of this module</p> <p>Manages multiple <code>Item</code>s.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters","title":"Type parameters","text":"Name Type <code>Options</code> extends <code>StrongboxOpts</code> = <code>StrongboxOpts</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_strongbox.Strongbox/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_strongbox.Strongbox/#properties","title":"Properties","text":"<ul> <li>container</li> <li>defaultItemCtor</li> <li>id</li> <li>items</li> <li>name</li> <li>suffix</li> </ul>"},{"location":"reference/classes/appium_strongbox.Strongbox/#methods","title":"Methods","text":"<ul> <li>checkOptions</li> <li>clearAll</li> <li>createItem</li> <li>createItemWithValue</li> <li>getItem</li> <li>setDefaultOptions</li> <li>create</li> </ul>"},{"location":"reference/classes/appium_strongbox.Strongbox/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_strongbox.Strongbox/#constructor","title":"constructor","text":"<p>\u2022 <code>Protected</code> new Strongbox&lt;<code>Options</code>&gt;(<code>name</code>, <code>opts?</code>)</p> <p>Slugifies the name &amp; determines the directory</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_1","title":"Type parameters","text":"Name Type <code>Options</code> extends <code>StrongboxOpts</code> = <code>StrongboxOpts</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> Name of instance <code>opts</code> <code>Partial</code>&lt;<code>Options</code>&gt; Options"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:140</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_strongbox.Strongbox/#container","title":"container","text":"<p>\u2022 <code>Readonly</code> container: <code>string</code></p> <p>Override the directory of this container.</p> <p>If this is present, <code>suffix</code> is ignored.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_1","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:125</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defaultitemctor","title":"defaultItemCtor","text":"<p>\u2022 <code>Protected</code> defaultItemCtor: <code>ItemCtor</code>&lt;<code>any</code>, <code>StrongboxOpts</code>, <code>Strongbox</code>&lt;<code>StrongboxOpts</code>&gt;&gt;</p> <p>Default <code>ItemCtor</code> to use when creating new <code>Item</code>s</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_2","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:113</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#id","title":"id","text":"<p>\u2022 <code>Readonly</code> id: <code>string</code></p> <p>Slugified name of this instance; corresponds to the directory name.</p> <p>If <code>dir</code> is provided, this value is unused. If <code>suffix</code> is provided, then this will be the parent directory of <code>suffix</code>.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_3","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:132</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#items","title":"items","text":"<p>\u2022 <code>Protected</code> items: <code>Map</code>&lt;<code>string</code>, <code>WeakRef</code>&lt;<code>Item</code>&lt;<code>any</code>&gt;&gt;&gt;</p> <p>Store of known <code>Item</code>s</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_4","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:118</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#name","title":"name","text":"<p>\u2022 <code>Readonly</code> name: <code>string</code></p> <p>Name of instance</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_5","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:140</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#suffix","title":"suffix","text":"<p>\u2022 <code>Readonly</code> suffix: <code>string</code></p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_6","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:133</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_strongbox.Strongbox/#checkoptions","title":"checkOptions","text":"<p>\u25b8 <code>Protected</code> checkOptions(<code>opts</code>): <code>Options</code></p> <p>Performs runtime validation (and optionally transformation) of options.</p> <p>Should not set defaults.</p> <p>The default implementation slugifies any custom container name and suffix.</p> <p>Subclasses should override this method to perform additional validation as needed.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_1","title":"Parameters","text":"Name Type Description <code>opts</code> <code>Options</code> Options"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns","title":"Returns","text":"<p><code>Options</code></p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_7","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:275</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#clearall","title":"clearAll","text":"<p>\u25b8 clearAll(<code>force?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Clears all items.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_2","title":"Parameters","text":"Name Type Default value Description <code>force</code> <code>boolean</code> <code>false</code> If <code>true</code>, will rimraf the container. Otherwise, will only delete individual items."},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_8","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:170</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#createitem","title":"createItem","text":"<p>\u25b8 createItem&lt;<code>T</code>&gt;(<code>name</code>, <code>ctor?</code>, <code>encoding?</code>): <code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p> <p>Create a new <code>Item</code>.</p> <p>Reads the item, if it is already persisted. Does not throw if missing.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_2","title":"Type parameters","text":"Name Type Description <code>T</code> extends <code>Value</code> Type of data stored in the <code>Item</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_3","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> Unique name of item <code>ctor?</code> <code>ItemCtor</code>&lt;<code>T</code>, <code>StrongboxOpts</code>, <code>Strongbox</code>&lt;<code>StrongboxOpts</code>&gt;&gt; - <code>encoding?</code> <code>ItemEncoding</code> Encoding of item; defaults to <code>utf8</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p> <p>New <code>Item</code></p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_9","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:187</p> <p>\u25b8 createItem&lt;<code>T</code>&gt;(<code>name</code>, <code>encoding?</code>): <code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_3","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Value</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_4","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>encoding?</code> <code>ItemEncoding</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_10","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:192</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#createitemwithvalue","title":"createItemWithValue","text":"<p>\u25b8 createItemWithValue&lt;<code>T</code>&gt;(<code>name</code>, <code>value</code>, <code>ctor</code>, <code>encoding?</code>): <code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p> <p>Creates a <code>Item</code> then immediately writes value to it.</p> <p>If it exists already, it will be overwritten.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_4","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Value</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_5","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> Name of <code>Item</code> <code>value</code> <code>T</code> File value to write <code>ctor</code> <code>ItemCtor</code>&lt;<code>T</code>, <code>StrongboxOpts</code>, <code>Strongbox</code>&lt;<code>StrongboxOpts</code>&gt;&gt; Specific <code>ItemCtor</code> to use <code>encoding?</code> <code>ItemEncoding</code> File encoding"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p> <p>New <code>Item</code> w/ value of <code>value</code></p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_11","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:231</p> <p>\u25b8 createItemWithValue&lt;<code>T</code>&gt;(<code>name</code>, <code>value</code>, <code>encoding?</code>): <code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_5","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Value</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_6","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>value</code> <code>T</code> <code>encoding?</code> <code>ItemEncoding</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Item</code>&lt;<code>T</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_12","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:237</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#getitem","title":"getItem","text":"<p>\u25b8 getItem(<code>id</code>): <code>undefined</code> | <code>Item</code>&lt;<code>any</code>&gt;</p> <p>Attempts to retrieve an <code>Item</code> by its <code>id</code>.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_7","title":"Parameters","text":"Name Type Description <code>id</code> <code>string</code> ID of item"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_6","title":"Returns","text":"<p><code>undefined</code> | <code>Item</code>&lt;<code>any</code>&gt;</p> <p>An <code>Item</code>, if found</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_13","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:260</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#setdefaultoptions","title":"setDefaultOptions","text":"<p>\u25b8 <code>Protected</code> setDefaultOptions(<code>opts?</code>): <code>Options</code></p> <p>Sets defaults for options.</p> <p>Subclasses should override as necessary.</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_8","title":"Parameters","text":"Name Type Description <code>opts</code> <code>Partial</code>&lt;<code>Options</code>&gt; Options"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_7","title":"Returns","text":"<p><code>Options</code></p> <p>Options with defaults applied</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_14","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:295</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#create","title":"create","text":"<p>\u25b8 <code>Static</code> create&lt;<code>Options</code>&gt;(<code>name</code>, <code>opts?</code>): <code>Strongbox</code>&lt;<code>Options</code>&gt;</p> <p>Creates a new <code>Strongbox</code></p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#type-parameters_6","title":"Type parameters","text":"Name Type <code>Options</code> extends <code>StrongboxOpts</code> = <code>StrongboxOpts</code>"},{"location":"reference/classes/appium_strongbox.Strongbox/#parameters_9","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> Name of instance <code>opts?</code> <code>Partial</code>&lt;<code>Options</code>&gt; Options"},{"location":"reference/classes/appium_strongbox.Strongbox/#returns_8","title":"Returns","text":"<p><code>Strongbox</code>&lt;<code>Options</code>&gt;</p> <p>New instance</p>"},{"location":"reference/classes/appium_strongbox.Strongbox/#defined-in_15","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:158</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/","title":"Class: AppiumPluginLogger","text":"<p>@appium/typedoc-plugin-appium.AppiumPluginLogger</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Logger</code></li> </ul> <p>\u21b3 <code>AppiumPluginLogger</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#properties","title":"Properties","text":"<ul> <li>#logThroughParent</li> <li>#parent</li> <li>errorCount</li> <li>level</li> <li>ns</li> <li>warningCount</li> <li>createChildLogger</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#methods","title":"Methods","text":"<ul> <li>#formatMessage</li> <li>#log</li> <li>#logThrough</li> <li>addContext</li> <li>createChildLogger</li> <li>deprecated</li> <li>diagnostic</li> <li>diagnostics</li> <li>error</li> <li>hasErrors</li> <li>hasWarnings</li> <li>info</li> <li>log</li> <li>resetErrors</li> <li>resetWarnings</li> <li>verbose</li> <li>warn</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#constructor","title":"constructor","text":"<p>\u2022 new AppiumPluginLogger(<code>logger</code>, <code>ns</code>, <code>logThroughParent?</code>)</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters","title":"Parameters","text":"Name Type <code>logger</code> <code>Logger</code> <code>ns</code> <code>string</code> <code>logThroughParent?</code> <code>AppiumPluginParentLogger</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides","title":"Overrides","text":"<p>Logger.constructor</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:61</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#logthroughparent","title":"#logThroughParent","text":"<p>\u2022 <code>Private</code> <code>Optional</code> <code>Readonly</code> #logThroughParent: <code>AppiumPluginParentLogger</code></p> <p>Function provided by <code>AppiumPluginLogger</code> parent loggers to log through them.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:50</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parent","title":"#parent","text":"<p>\u2022 <code>Private</code> <code>Readonly</code> #parent: <code>Logger</code></p> <p>Parent logger</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_2","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:54</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#errorcount","title":"errorCount","text":"<p>\u2022 errorCount: <code>number</code></p> <p>How many error messages have been logged?</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from","title":"Inherited from","text":"<p>Logger.errorCount</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_3","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:22</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#level","title":"level","text":"<p>\u2022 level: <code>LogLevel</code></p> <p>The minimum logging level to print.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_1","title":"Inherited from","text":"<p>Logger.level</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_4","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:32</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#ns","title":"ns","text":"<p>\u2022 <code>Readonly</code> ns: <code>string</code></p> <p>Namespace to prepend to log messages</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_5","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:59</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#warningcount","title":"warningCount","text":"<p>\u2022 warningCount: <code>number</code></p> <p>How many warning messages have been logged?</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_2","title":"Inherited from","text":"<p>Logger.warningCount</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_6","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:26</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#createchildlogger","title":"createChildLogger","text":"<p>\u25aa <code>Static</code> createChildLogger: (<code>parent</code>: <code>AppiumPluginLogger</code>, <code>ns</code>: <code>string</code>) =&gt; <code>AppiumPluginLogger</code> &amp; <code>MemoizedFunction</code></p> <p>Creates or retrieves a child logger for the given namespace</p> <p><code>Param</code></p> <p>Parent logger</p> <p><code>Param</code></p> <p>Namespace</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_7","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:75</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#formatmessage","title":"#formatMessage","text":"<p>\u25b8 <code>Private</code> #formatMessage(<code>ns</code>, <code>message</code>, <code>...args</code>): <code>string</code></p> <p>Format the given message.</p> <p>Uses the <code>util.format</code> function to format the message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_1","title":"Parameters","text":"Name Type Description <code>ns</code> <code>string</code> Namespace <code>message</code> <code>string</code> The message to format. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns","title":"Returns","text":"<p><code>string</code></p> <p>the formatted message;</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_8","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:155</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#log","title":"#log","text":"<p>\u25b8 <code>Private</code> #log(<code>level</code>, <code>text</code>, <code>...args</code>): <code>void</code></p> <p>Print a log message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_2","title":"Parameters","text":"Name Type Description <code>level</code> <code>LogLevel</code> The urgency of the log message. <code>text</code> <code>string</code> The message itself. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_9","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:165</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#logthrough","title":"#logThrough","text":"<p>\u25b8 <code>Private</code> #logThrough(<code>level</code>, <code>ns</code>, <code>message</code>, <code>...args</code>): <code>void</code></p> <p>Pass a log message to the parent.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_3","title":"Parameters","text":"Name Type Description <code>level</code> <code>LogLevel</code> The urgency of the log message. <code>ns</code> <code>string</code> - <code>message</code> <code>string</code> The message itself. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_10","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:178</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#addcontext","title":"addContext","text":"<p>\u25b8 <code>Protected</code> addContext(<code>message</code>, <code>_level</code>, <code>..._args</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_4","title":"Parameters","text":"Name Type <code>message</code> <code>string</code> <code>_level</code> <code>LogLevel</code> <code>..._args</code> [Node?] | [<code>number</code>, <code>MinimalSourceFile</code>]"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_3","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_3","title":"Inherited from","text":"<p>Logger.addContext</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_11","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:95</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#createchildlogger_1","title":"createChildLogger","text":"<p>\u25b8 createChildLogger(<code>ns</code>): <code>AppiumPluginLogger</code></p> <p>Create a new AppiumPluginLogger for the given context.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_5","title":"Parameters","text":"Name Type Description <code>ns</code> <code>string</code> New sub-namespace; will be appended to the current namespace."},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_4","title":"Returns","text":"<p><code>AppiumPluginLogger</code></p> <p>the new logger.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_12","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:94</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#deprecated","title":"deprecated","text":"<p>\u25b8 deprecated(<code>text</code>, <code>addStack?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_6","title":"Parameters","text":"Name Type <code>text</code> <code>string</code> <code>addStack?</code> <code>boolean</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_4","title":"Inherited from","text":"<p>Logger.deprecated</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_13","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:75</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#diagnostic","title":"diagnostic","text":"<p>\u25b8 diagnostic(<code>diagnostic</code>): <code>void</code></p> <p>Print the given TypeScript log message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_7","title":"Parameters","text":"Name Type Description <code>diagnostic</code> <code>Diagnostic</code> The TypeScript message that should be logged."},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_5","title":"Inherited from","text":"<p>Logger.diagnostic</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_14","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:94</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#diagnostics","title":"diagnostics","text":"<p>\u25b8 diagnostics(<code>diagnostics</code>): <code>void</code></p> <p>Print the given TypeScript log messages.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_8","title":"Parameters","text":"Name Type Description <code>diagnostics</code> readonly <code>Diagnostic</code>[] The TypeScript messages that should be logged."},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_6","title":"Inherited from","text":"<p>Logger.diagnostics</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_15","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:88</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#error","title":"error","text":"<p>\u25b8 error(<code>text</code>, <code>...args</code>): <code>void</code></p> <p>Log the given error message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_9","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> The error that should be logged. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides_1","title":"Overrides","text":"<p>Logger.error</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_16","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:103</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#haserrors","title":"hasErrors","text":"<p>\u25b8 hasErrors(): <code>boolean</code></p> <p>Has an error been raised through the log method?</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_9","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_7","title":"Inherited from","text":"<p>Logger.hasErrors</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_17","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:36</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#haswarnings","title":"hasWarnings","text":"<p>\u25b8 hasWarnings(): <code>boolean</code></p> <p>Has a warning been raised through the log method?</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_10","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_8","title":"Inherited from","text":"<p>Logger.hasWarnings</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_18","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:40</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#info","title":"info","text":"<p>\u25b8 info(<code>text</code>, <code>...args</code>): <code>void</code></p> <p>Log the given info message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_10","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> The message that should be logged. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides_2","title":"Overrides","text":"<p>Logger.info</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_19","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:112</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#log_1","title":"log","text":"<p>\u25b8 log(<code>text</code>, <code>level</code>): <code>void</code></p> <p>Print a log message.</p> <p>Does not support <code>printf</code>-style syntax for compatibility with Logger.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_11","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> The message itself. <code>level</code> <code>LogLevel</code> The urgency of the log message."},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides_3","title":"Overrides","text":"<p>Logger.log</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_20","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:124</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#reseterrors","title":"resetErrors","text":"<p>\u25b8 resetErrors(): <code>void</code></p> <p>Reset the error counter.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_13","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_9","title":"Inherited from","text":"<p>Logger.resetErrors</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_21","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:44</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#resetwarnings","title":"resetWarnings","text":"<p>\u25b8 resetWarnings(): <code>void</code></p> <p>Reset the warning counter.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_14","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#inherited-from_10","title":"Inherited from","text":"<p>Logger.resetWarnings</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_22","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/loggers.d.ts:48</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#verbose","title":"verbose","text":"<p>\u25b8 verbose(<code>text</code>, <code>...args</code>): <code>void</code></p> <p>Log the given verbose message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_12","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> The message that should be logged. <code>...args</code> <code>any</code> -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_15","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides_4","title":"Overrides","text":"<p>Logger.verbose</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_23","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:133</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#warn","title":"warn","text":"<p>\u25b8 warn(<code>text</code>, <code>...args</code>): <code>void</code></p> <p>Log the given warning message.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#parameters_13","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> The warning that should be logged. <code>...args</code> <code>any</code>[] -"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#overrides_5","title":"Overrides","text":"<p>Logger.warn</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginLogger/#defined-in_24","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:142</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/","title":"Class: AppiumPluginOptionsReader","text":"<p>@appium/typedoc-plugin-appium.AppiumPluginOptionsReader</p> <p>This befouls the options.</p> <p>It can do what has been undone and undo what has been done. It can make real your dreams... or nightmares.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#implements","title":"Implements","text":"<ul> <li><code>OptionsReader</code></li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#properties","title":"Properties","text":"<ul> <li>#log</li> <li>name</li> <li>priority</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#methods","title":"Methods","text":"<ul> <li>#configureEntryPointStrategy</li> <li>#configureEntryPoints</li> <li>#configurePackages</li> <li>#configureTheme</li> <li>read</li> <li>getTitleFromPackageJson</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#constructor","title":"constructor","text":"<p>\u2022 new AppiumPluginOptionsReader(<code>logger</code>)</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters","title":"Parameters","text":"Name Type <code>logger</code> <code>AppiumPluginLogger</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:41</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#log","title":"#log","text":"<p>\u2022 <code>Private</code> <code>Readonly</code> #log: <code>AppiumPluginLogger</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:30</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#name","title":"name","text":"<p>\u2022 <code>Readonly</code> name: <code>\"naughty-appium-options-reader\"</code></p> <p>I don't know the point of <code>name</code>, but the interface requires it, so here.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#implementation-of","title":"Implementation of","text":"<p>OptionsReader.name</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_2","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:35</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#priority","title":"priority","text":"<p>\u2022 <code>Readonly</code> priority: <code>2000</code></p> <p>This needs to be higher than the value in <code>MarkdownOptionsReader</code>.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#implementation-of_1","title":"Implementation of","text":"<p>OptionsReader.priority</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_3","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:39</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#configureentrypointstrategy","title":"#configureEntryPointStrategy","text":"<p>\u25b8 <code>Private</code> #configureEntryPointStrategy(<code>container</code>): <code>void</code></p> <p>Forces the <code>entryPointStrategy</code> option to be EntryPointStrategy.Packages</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_1","title":"Parameters","text":"Name Type Description <code>container</code> <code>Options</code> Options"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_4","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:74</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#configureentrypoints","title":"#configureEntryPoints","text":"<p>\u25b8 <code>Private</code> #configureEntryPoints(<code>container</code>): <code>void</code></p> <p>Adds required packages to the <code>entryPoints</code> option.</p> <p>If the <code>entryPoints</code> option already contains something that looks like a REQUIRED_PACKAGES required package, then it is validated via <code>require.resolve</code>. If this fails, it is replaced with the proper package path.</p> <p>If a required package cannot be resolved, an error occurs</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_2","title":"Parameters","text":"Name Type Description <code>container</code> <code>Options</code> Options"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_5","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:92</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#configurepackages","title":"#configurePackages","text":"<p>\u25b8 <code>Private</code> #configurePackages(<code>container</code>): <code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_3","title":"Parameters","text":"Name Type <code>container</code> <code>Options</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_6","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:131</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#configuretheme","title":"#configureTheme","text":"<p>\u25b8 <code>Private</code> #configureTheme(<code>container</code>): <code>void</code></p> <p>Forces the theme to be <code>THEME_NAME</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_4","title":"Parameters","text":"Name Type Description <code>container</code> <code>Options</code> Options"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_7","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:167</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#read","title":"read","text":"<p>\u25b8 read(<code>container</code>): <code>void</code></p> <p>Calls various private methods to override option values or provide defaults.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_5","title":"Parameters","text":"Name Type Description <code>container</code> <code>Options</code> Options container"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#implementation-of_2","title":"Implementation of","text":"<p>OptionsReader.read</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_8","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:63</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#gettitlefrompackagejson","title":"getTitleFromPackageJson","text":"<p>\u25b8 <code>Static</code> getTitleFromPackageJson(<code>pkgJsonPath</code>): <code>undefined</code> | <code>string</code></p> <p>Attempts to derive a title (for use in theme output) from a package's <code>package.json</code> if that package is an Appium extension</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#parameters_6","title":"Parameters","text":"Name Type Description <code>pkgJsonPath</code> <code>string</code> Path to a <code>package.json</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#returns_5","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumPluginOptionsReader/#defined-in_9","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/reader.ts:49</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/","title":"Class: AppiumTheme","text":"<p>@appium/typedoc-plugin-appium.AppiumTheme</p> <p>This theme uses everything from <code>MarkdownTheme</code> and adds a new section for commands.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>MarkdownTheme</code></li> </ul> <p>\u21b3 <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#properties","title":"Properties","text":"<ul> <li>#extensionTemplateRenderer</li> <li>#log</li> <li>#opts</li> <li>allReflectionsHaveOwnDocument</li> <li>anchorMap</li> <li>componentName</li> <li>entryDocument</li> <li>entryPoints</li> <li>filenameSeparator</li> <li>hideBreadcrumbs</li> <li>hideInPageTOC</li> <li>hideMembersSymbol</li> <li>hidePageTitle</li> <li>includes</li> <li>indexTitle</li> <li>location</li> <li>mediaDirectory</li> <li>namedAnchors</li> <li>objectLiteralTypeDeclarationStyle</li> <li>out</li> <li>preserveAnchorCasing</li> <li>project</li> <li>publicPath</li> <li>readme</li> <li>reflection</li> <li>URL_PREFIX</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#accessors","title":"Accessors","text":"<ul> <li>_listenId</li> <li>application</li> <li>globalsFile</li> <li>mappings</li> <li>owner</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#methods","title":"Methods","text":"<ul> <li>#createTemplateRenderer</li> <li>applyAnchorUrl</li> <li>bubble</li> <li>buildUrls</li> <li>getIndexTemplate</li> <li>getNavigation</li> <li>getOption</li> <li>getReflectionMemberTemplate</li> <li>getReflectionTemplate</li> <li>getRelativeUrl</li> <li>getUrl</li> <li>getUrls</li> <li>initialize</li> <li>listenTo</li> <li>listenToOnce</li> <li>off</li> <li>on</li> <li>onBeginPage</li> <li>onBeginRenderer</li> <li>once</li> <li>render</li> <li>stopListening</li> <li>toAnchorRef</li> <li>toUrl</li> <li>trigger</li> </ul>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#constructor","title":"constructor","text":"<p>\u2022 new AppiumTheme(<code>renderer</code>)</p> <p>Creates template renderers and registers all Handlebars helpers.</p> <p><code>Todo</code></p> <p>Use declaration merging to add an instance of <code>AppiumPluginLogger</code> to <code>Application</code>, which we can then reference here.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters","title":"Parameters","text":"Name Type Description <code>renderer</code> <code>Renderer</code> TypeDoc renderer"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#overrides","title":"Overrides","text":"<p>MarkdownTheme.constructor</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:47</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#extensiontemplaterenderer","title":"#extensionTemplateRenderer","text":"<p>\u2022 <code>Private</code> #extensionTemplateRenderer: <code>TemplateRenderer</code></p> <p>A template renderer for <code>CommandReflection</code>s</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:29</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#log","title":"#log","text":"<p>\u2022 <code>Private</code> #log: <code>AppiumPluginLogger</code></p> <p>Custom logger.  This is not the same as the one created by the plugin loader.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_2","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:33</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#opts","title":"#opts","text":"<p>\u2022 <code>Private</code> #opts: <code>AppiumPluginOptions</code></p> <p>Options specific to this plugin</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_3","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:38</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#allreflectionshaveowndocument","title":"allReflectionsHaveOwnDocument","text":"<p>\u2022 allReflectionsHaveOwnDocument: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from","title":"Inherited from","text":"<p>MarkdownTheme.allReflectionsHaveOwnDocument</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_4","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:5</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#anchormap","title":"anchorMap","text":"<p>\u2022 anchorMap: <code>Record</code>&lt;<code>string</code>, <code>string</code>[]&gt;</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_1","title":"Inherited from","text":"<p>MarkdownTheme.anchorMap</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_5","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:25</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#componentname","title":"componentName","text":"<p>\u2022 componentName: <code>string</code></p> <p>The name of this component as set by the</p> <p><code>Component</code></p> <p>decorator.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_2","title":"Inherited from","text":"<p>MarkdownTheme.componentName</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_6","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/component.d.ts:48</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#entrydocument","title":"entryDocument","text":"<p>\u2022 entryDocument: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_3","title":"Inherited from","text":"<p>MarkdownTheme.entryDocument</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_7","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:6</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#entrypoints","title":"entryPoints","text":"<p>\u2022 entryPoints: <code>string</code>[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_4","title":"Inherited from","text":"<p>MarkdownTheme.entryPoints</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_8","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:7</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#filenameseparator","title":"filenameSeparator","text":"<p>\u2022 filenameSeparator: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_5","title":"Inherited from","text":"<p>MarkdownTheme.filenameSeparator</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_9","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:8</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#hidebreadcrumbs","title":"hideBreadcrumbs","text":"<p>\u2022 hideBreadcrumbs: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_6","title":"Inherited from","text":"<p>MarkdownTheme.hideBreadcrumbs</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_10","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:9</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#hideinpagetoc","title":"hideInPageTOC","text":"<p>\u2022 hideInPageTOC: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_7","title":"Inherited from","text":"<p>MarkdownTheme.hideInPageTOC</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_11","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:10</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#hidememberssymbol","title":"hideMembersSymbol","text":"<p>\u2022 hideMembersSymbol: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_8","title":"Inherited from","text":"<p>MarkdownTheme.hideMembersSymbol</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_12","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:12</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#hidepagetitle","title":"hidePageTitle","text":"<p>\u2022 hidePageTitle: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_9","title":"Inherited from","text":"<p>MarkdownTheme.hidePageTitle</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_13","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:11</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#includes","title":"includes","text":"<p>\u2022 includes: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_10","title":"Inherited from","text":"<p>MarkdownTheme.includes</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_14","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:13</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#indextitle","title":"indexTitle","text":"<p>\u2022 indexTitle: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_11","title":"Inherited from","text":"<p>MarkdownTheme.indexTitle</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_15","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:14</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#location","title":"location","text":"<p>\u2022 location: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_12","title":"Inherited from","text":"<p>MarkdownTheme.location</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_16","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:24</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#mediadirectory","title":"mediaDirectory","text":"<p>\u2022 mediaDirectory: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_13","title":"Inherited from","text":"<p>MarkdownTheme.mediaDirectory</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_17","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:15</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#namedanchors","title":"namedAnchors","text":"<p>\u2022 namedAnchors: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_14","title":"Inherited from","text":"<p>MarkdownTheme.namedAnchors</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_18","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:16</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#objectliteraltypedeclarationstyle","title":"objectLiteralTypeDeclarationStyle","text":"<p>\u2022 objectLiteralTypeDeclarationStyle: <code>ObjectLiteralDeclarationStyle</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_15","title":"Inherited from","text":"<p>MarkdownTheme.objectLiteralTypeDeclarationStyle</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_19","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:21</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#out","title":"out","text":"<p>\u2022 out: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_16","title":"Inherited from","text":"<p>MarkdownTheme.out</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_20","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:18</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#preserveanchorcasing","title":"preserveAnchorCasing","text":"<p>\u2022 preserveAnchorCasing: <code>boolean</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_17","title":"Inherited from","text":"<p>MarkdownTheme.preserveAnchorCasing</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_21","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:20</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#project","title":"project","text":"<p>\u2022 <code>Optional</code> project: <code>ProjectReflection</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_18","title":"Inherited from","text":"<p>MarkdownTheme.project</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_22","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:22</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#publicpath","title":"publicPath","text":"<p>\u2022 publicPath: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_19","title":"Inherited from","text":"<p>MarkdownTheme.publicPath</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_23","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:19</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#readme","title":"readme","text":"<p>\u2022 readme: <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_20","title":"Inherited from","text":"<p>MarkdownTheme.readme</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_24","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:17</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#reflection","title":"reflection","text":"<p>\u2022 <code>Optional</code> reflection: <code>DeclarationReflection</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_21","title":"Inherited from","text":"<p>MarkdownTheme.reflection</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_25","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:23</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#url_prefix","title":"URL_PREFIX","text":"<p>\u25aa <code>Static</code> URL_PREFIX: <code>RegExp</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_22","title":"Inherited from","text":"<p>MarkdownTheme.URL_PREFIX</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_26","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:26</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#accessors_1","title":"Accessors","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#_listenid","title":"_listenId","text":"<p>\u2022 <code>Private</code> <code>get</code> _listenId(): <code>any</code></p> <p>A unique id that identifies this instance.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_23","title":"Inherited from","text":"<p>MarkdownTheme._listenId</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_27","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:70</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#application","title":"application","text":"<p>\u2022 <code>get</code> application(): <code>Application</code></p> <p>Return the application / root component instance.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_1","title":"Returns","text":"<p><code>Application</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_24","title":"Inherited from","text":"<p>MarkdownTheme.application</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_28","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/component.d.ts:61</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#globalsfile","title":"globalsFile","text":"<p>\u2022 <code>get</code> globalsFile(): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_2","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_25","title":"Inherited from","text":"<p>MarkdownTheme.globalsFile</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_29","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:49</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#mappings","title":"mappings","text":"<p>\u2022 <code>get</code> mappings(): <code>TemplateMapping</code>[]</p> <p>/**  * A lookup of ReflectionKinds to templates.  It also controls in which directory the output files live.  *  * This is part of MarkdownTheme and adds a new template.  *  * If <code>isLeaf</code> is <code>false</code>, the model gets its own document.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_3","title":"Returns","text":"<p><code>TemplateMapping</code>[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#overrides_1","title":"Overrides","text":"<p>MarkdownTheme.mappings</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_30","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:91</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#owner","title":"owner","text":"<p>\u2022 <code>get</code> owner(): <code>O</code></p> <p>Return the owner of this component.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_4","title":"Returns","text":"<p><code>O</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_26","title":"Inherited from","text":"<p>MarkdownTheme.owner</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_31","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/component.d.ts:65</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#createtemplaterenderer","title":"#createTemplateRenderer","text":"<p>\u25b8 <code>Private</code> #createTemplateRenderer(<code>template</code>): <code>TemplateRenderer</code></p> <p>Given a <code>AppiumThemeTemplate</code> return a function which will render the template given some data.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_1","title":"Parameters","text":"Name Type Description <code>template</code> <code>Extension</code> Template to render"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_5","title":"Returns","text":"<p><code>TemplateRenderer</code></p> <p>Rendering function</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_32","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:109</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#applyanchorurl","title":"applyAnchorUrl","text":"<p>\u25b8 applyAnchorUrl(<code>reflection</code>, <code>container</code>, <code>isSymbol?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_2","title":"Parameters","text":"Name Type <code>reflection</code> <code>Reflection</code> <code>container</code> <code>Reflection</code> <code>isSymbol?</code> <code>boolean</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_27","title":"Inherited from","text":"<p>MarkdownTheme.applyAnchorUrl</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_33","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:34</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#bubble","title":"bubble","text":"<p>\u25b8 <code>Protected</code> bubble(<code>name</code>, <code>...args</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_3","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> | <code>Event</code> | <code>EventMap</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_7","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_28","title":"Inherited from","text":"<p>MarkdownTheme.bubble</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_34","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/component.d.ts:57</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#buildurls","title":"buildUrls","text":"<p>\u25b8 buildUrls(<code>reflection</code>, <code>urls</code>): <code>UrlMapping</code>&lt;<code>any</code>&gt;[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_4","title":"Parameters","text":"Name Type <code>reflection</code> <code>DeclarationReflection</code> <code>urls</code> <code>UrlMapping</code>&lt;<code>any</code>&gt;[]"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_8","title":"Returns","text":"<p><code>UrlMapping</code>&lt;<code>any</code>&gt;[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_29","title":"Inherited from","text":"<p>MarkdownTheme.buildUrls</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_35","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:31</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getindextemplate","title":"getIndexTemplate","text":"<p>\u25b8 getIndexTemplate(): (<code>pageEvent</code>: <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;) =&gt; <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_9","title":"Returns","text":"<p><code>fn</code></p> <p>\u25b8 (<code>pageEvent</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_5","title":"Parameters","text":"Name Type <code>pageEvent</code> <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_10","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_30","title":"Inherited from","text":"<p>MarkdownTheme.getIndexTemplate</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_36","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:39</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getnavigation","title":"getNavigation","text":"<p>\u25b8 getNavigation(<code>project</code>): <code>NavigationItem</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_6","title":"Parameters","text":"Name Type <code>project</code> <code>ProjectReflection</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_11","title":"Returns","text":"<p><code>NavigationItem</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_31","title":"Inherited from","text":"<p>MarkdownTheme.getNavigation</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_37","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:40</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getoption","title":"getOption","text":"<p>\u25b8 getOption(<code>key</code>): <code>unknown</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_7","title":"Parameters","text":"Name Type <code>key</code> <code>string</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_12","title":"Returns","text":"<p><code>unknown</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_32","title":"Inherited from","text":"<p>MarkdownTheme.getOption</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_38","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:29</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getreflectionmembertemplate","title":"getReflectionMemberTemplate","text":"<p>\u25b8 getReflectionMemberTemplate(): (<code>pageEvent</code>: <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;) =&gt; <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_13","title":"Returns","text":"<p><code>fn</code></p> <p>\u25b8 (<code>pageEvent</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_8","title":"Parameters","text":"Name Type <code>pageEvent</code> <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_14","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_33","title":"Inherited from","text":"<p>MarkdownTheme.getReflectionMemberTemplate</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_39","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:38</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getreflectiontemplate","title":"getReflectionTemplate","text":"<p>\u25b8 getReflectionTemplate(): (<code>pageEvent</code>: <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;) =&gt; <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_15","title":"Returns","text":"<p><code>fn</code></p> <p>\u25b8 (<code>pageEvent</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_9","title":"Parameters","text":"Name Type <code>pageEvent</code> <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_16","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_34","title":"Inherited from","text":"<p>MarkdownTheme.getReflectionTemplate</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_40","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:37</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#getrelativeurl","title":"getRelativeUrl","text":"<p>\u25b8 getRelativeUrl(<code>absolute</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_10","title":"Parameters","text":"Name Type <code>absolute</code> <code>string</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_17","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_35","title":"Inherited from","text":"<p>MarkdownTheme.getRelativeUrl</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_41","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:36</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#geturl","title":"getUrl","text":"<p>\u25b8 getUrl(<code>reflection</code>): <code>string</code></p> <p>Special-cases <code>ExtensionReflection</code> instances to make the filename shorter and thus better suitable for <code>mkdocs</code>.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_11","title":"Parameters","text":"Name Type Description <code>reflection</code> <code>Reflection</code> Reflection to get URL for"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_18","title":"Returns","text":"<p><code>string</code></p> <p>String URL</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#overrides_2","title":"Overrides","text":"<p>MarkdownTheme.getUrl</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_42","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:75</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#geturls","title":"getUrls","text":"<p>\u25b8 getUrls(<code>project</code>): <code>UrlMapping</code>&lt;<code>any</code>&gt;[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_12","title":"Parameters","text":"Name Type <code>project</code> <code>ProjectReflection</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_19","title":"Returns","text":"<p><code>UrlMapping</code>&lt;<code>any</code>&gt;[]</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_36","title":"Inherited from","text":"<p>MarkdownTheme.getUrls</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_43","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:30</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#initialize","title":"initialize","text":"<p>\u25b8 <code>Protected</code> initialize(): <code>void</code></p> <p>Initialize this component.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_20","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_37","title":"Inherited from","text":"<p>MarkdownTheme.initialize</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_44","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/component.d.ts:56</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#listento","title":"listenTo","text":"<p>\u25b8 listenTo(<code>obj</code>, <code>name</code>, <code>callback?</code>, <code>priority?</code>): <code>AppiumTheme</code></p> <p>Inversion-of-control versions of <code>on</code>. Tell this object to listen to an event in another object... keeping track of what it's listening to for easier unbinding later.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_13","title":"Parameters","text":"Name Type <code>obj</code> <code>EventDispatcher</code> <code>name</code> <code>string</code> | <code>EventMap</code> <code>callback?</code> <code>EventCallback</code> <code>priority?</code> <code>number</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_21","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_38","title":"Inherited from","text":"<p>MarkdownTheme.listenTo</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_45","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:105</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#listentoonce","title":"listenToOnce","text":"<p>\u25b8 listenToOnce(<code>obj</code>, <code>eventMap</code>): <code>AppiumTheme</code></p> <p>Inversion-of-control versions of <code>once</code>.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_14","title":"Parameters","text":"Name Type <code>obj</code> <code>EventDispatcher</code> <code>eventMap</code> <code>EventMap</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_22","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_39","title":"Inherited from","text":"<p>MarkdownTheme.listenToOnce</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_46","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:109</p> <p>\u25b8 listenToOnce(<code>obj</code>, <code>name</code>, <code>callback</code>, <code>priority?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_15","title":"Parameters","text":"Name Type <code>obj</code> <code>EventDispatcher</code> <code>name</code> <code>string</code> <code>callback</code> <code>EventCallback</code> <code>priority?</code> <code>number</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_23","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_40","title":"Inherited from","text":"<p>MarkdownTheme.listenToOnce</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_47","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:110</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#off","title":"off","text":"<p>\u25b8 off(): <code>AppiumTheme</code></p> <p>Remove one or many callbacks. If <code>context</code> is null, removes all callbacks with that function. If <code>callback</code> is null, removes all callbacks for the event. If <code>name</code> is null, removes all bound callbacks for all events.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_24","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_41","title":"Inherited from","text":"<p>MarkdownTheme.off</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_48","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:97</p> <p>\u25b8 off(<code>eventMap</code>, <code>context?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_16","title":"Parameters","text":"Name Type <code>eventMap</code> <code>undefined</code> | <code>EventMap</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_25","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_42","title":"Inherited from","text":"<p>MarkdownTheme.off</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_49","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:98</p> <p>\u25b8 off(<code>name</code>, <code>callback?</code>, <code>context?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_17","title":"Parameters","text":"Name Type <code>name</code> <code>undefined</code> | <code>string</code> <code>callback?</code> <code>EventCallback</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_26","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_43","title":"Inherited from","text":"<p>MarkdownTheme.off</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_50","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:99</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#on","title":"on","text":"<p>\u25b8 on(<code>eventMap</code>, <code>context?</code>): <code>AppiumTheme</code></p> <p>Bind an event to a <code>callback</code> function. Passing <code>\"all\"</code> will bind the callback to all events fired.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_18","title":"Parameters","text":"Name Type <code>eventMap</code> <code>EventMap</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_27","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_44","title":"Inherited from","text":"<p>MarkdownTheme.on</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_51","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:76</p> <p>\u25b8 on(<code>eventMap</code>, <code>callback?</code>, <code>context?</code>, <code>priority?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_19","title":"Parameters","text":"Name Type <code>eventMap</code> <code>EventMap</code> <code>callback?</code> <code>EventCallback</code> <code>context?</code> <code>any</code> <code>priority?</code> <code>number</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_28","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_45","title":"Inherited from","text":"<p>MarkdownTheme.on</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_52","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:77</p> <p>\u25b8 on(<code>name</code>, <code>callback</code>, <code>context?</code>, <code>priority?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_20","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>callback</code> <code>EventCallback</code> <code>context?</code> <code>any</code> <code>priority?</code> <code>number</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_29","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_46","title":"Inherited from","text":"<p>MarkdownTheme.on</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_53","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:78</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#onbeginpage","title":"onBeginPage","text":"<p>\u25b8 <code>Protected</code> onBeginPage(<code>page</code>): <code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_21","title":"Parameters","text":"Name Type <code>page</code> <code>PageEvent</code>&lt;<code>unknown</code>&gt;"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_30","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_47","title":"Inherited from","text":"<p>MarkdownTheme.onBeginPage</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_54","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:48</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#onbeginrenderer","title":"onBeginRenderer","text":"<p>\u25b8 <code>Protected</code> onBeginRenderer(<code>event</code>): <code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_22","title":"Parameters","text":"Name Type <code>event</code> <code>RendererEvent</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_31","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_48","title":"Inherited from","text":"<p>MarkdownTheme.onBeginRenderer</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_55","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:47</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#once","title":"once","text":"<p>\u25b8 once(<code>eventMap</code>, <code>context?</code>): <code>AppiumTheme</code></p> <p>Bind an event to only be triggered a single time. After the first time the callback is invoked, its listener will be removed. If multiple events are passed in using the space-separated syntax, the handler will fire once for each event, not once for a combination of all events.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_23","title":"Parameters","text":"Name Type <code>eventMap</code> <code>EventMap</code> <code>context?</code> <code>any</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_32","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_49","title":"Inherited from","text":"<p>MarkdownTheme.once</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_56","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:89</p> <p>\u25b8 once(<code>name</code>, <code>callback</code>, <code>context?</code>, <code>priority?</code>): <code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_24","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>callback</code> <code>EventCallback</code> <code>context?</code> <code>any</code> <code>priority?</code> <code>any</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_33","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_50","title":"Inherited from","text":"<p>MarkdownTheme.once</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_57","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:90</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#render","title":"render","text":"<p>\u25b8 render(<code>page</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_25","title":"Parameters","text":"Name Type <code>page</code> <code>PageEvent</code>&lt;<code>Reflection</code>&gt;"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_34","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_51","title":"Inherited from","text":"<p>MarkdownTheme.render</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_58","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:28</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#stoplistening","title":"stopListening","text":"<p>\u25b8 stopListening(<code>obj?</code>, <code>name?</code>, <code>callback?</code>): <code>AppiumTheme</code></p> <p>Tell this object to stop listening to either specific events ... or to every object it's currently listening to.</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_26","title":"Parameters","text":"Name Type <code>obj?</code> <code>EventDispatcher</code> <code>name?</code> <code>string</code> | <code>EventMap</code> <code>callback?</code> <code>EventCallback</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_35","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_52","title":"Inherited from","text":"<p>MarkdownTheme.stopListening</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_59","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:115</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#toanchorref","title":"toAnchorRef","text":"<p>\u25b8 toAnchorRef(<code>reflectionId</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_27","title":"Parameters","text":"Name Type <code>reflectionId</code> <code>string</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_36","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_53","title":"Inherited from","text":"<p>MarkdownTheme.toAnchorRef</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_60","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:35</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#tourl","title":"toUrl","text":"<p>\u25b8 toUrl(<code>mapping</code>, <code>reflection</code>): <code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_28","title":"Parameters","text":"Name Type <code>mapping</code> <code>any</code> <code>reflection</code> <code>DeclarationReflection</code>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_37","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_54","title":"Inherited from","text":"<p>MarkdownTheme.toUrl</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_61","title":"Defined in","text":"<p>node_modules/typedoc-plugin-markdown/dist/theme.d.ts:32</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#trigger","title":"trigger","text":"<p>\u25b8 trigger(<code>name</code>, <code>...args</code>): <code>AppiumTheme</code></p> <p>Trigger one or many events, firing all bound callbacks. Callbacks are passed the same arguments as <code>trigger</code> is, apart from the event name (unless you're listening on <code>\"all\"</code>, which will cause your callback to receive the true name of the event as the first argument).</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#parameters_29","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> | <code>Event</code> | <code>EventMap</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#returns_38","title":"Returns","text":"<p><code>AppiumTheme</code></p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#inherited-from_55","title":"Inherited from","text":"<p>MarkdownTheme.trigger</p>"},{"location":"reference/classes/appium_typedoc_plugin_appium.AppiumTheme/#defined-in_62","title":"Defined in","text":"<p>node_modules/typedoc/dist/lib/utils/events.d.ts:122</p>"},{"location":"reference/classes/appium_types.WSServer/","title":"Class: WSServer&lt;T, U&gt;","text":"<p>@appium/types.WSServer</p>"},{"location":"reference/classes/appium_types.WSServer/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends typeof <code>WebSocket.WebSocket</code> = typeof <code>WebSocket.WebSocket</code> <code>U</code> extends typeof <code>IncomingMessage</code> = typeof <code>IncomingMessage</code>"},{"location":"reference/classes/appium_types.WSServer/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>EventEmitter</code></li> </ul> <p>\u21b3 <code>WSServer</code></p>"},{"location":"reference/classes/appium_types.WSServer/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_types.WSServer/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_types.WSServer/#properties","title":"Properties","text":"<ul> <li>clients</li> <li>options</li> <li>path</li> <li>captureRejectionSymbol</li> <li>captureRejections</li> <li>defaultMaxListeners</li> <li>errorMonitor</li> </ul>"},{"location":"reference/classes/appium_types.WSServer/#methods","title":"Methods","text":"<ul> <li>addListener</li> <li>address</li> <li>close</li> <li>emit</li> <li>eventNames</li> <li>getMaxListeners</li> <li>handleUpgrade</li> <li>listenerCount</li> <li>listeners</li> <li>off</li> <li>on</li> <li>once</li> <li>prependListener</li> <li>prependOnceListener</li> <li>rawListeners</li> <li>removeAllListeners</li> <li>removeListener</li> <li>setMaxListeners</li> <li>shouldHandle</li> <li>getEventListeners</li> <li>listenerCount</li> <li>on</li> <li>once</li> <li>setMaxListeners</li> </ul>"},{"location":"reference/classes/appium_types.WSServer/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_types.WSServer/#constructor","title":"constructor","text":"<p>\u2022 new WSServer&lt;<code>T</code>, <code>U</code>&gt;(<code>options?</code>, <code>callback?</code>)</p>"},{"location":"reference/classes/appium_types.WSServer/#type-parameters_1","title":"Type parameters","text":"Name Type <code>T</code> extends typeof <code>WebSocket</code> = typeof <code>WebSocket</code> <code>U</code> extends typeof <code>IncomingMessage</code> = typeof <code>IncomingMessage</code>"},{"location":"reference/classes/appium_types.WSServer/#parameters","title":"Parameters","text":"Name Type <code>options?</code> <code>ServerOptions</code>&lt;<code>T</code>, <code>U</code>&gt; <code>callback?</code> () =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#overrides","title":"Overrides","text":"<p>EventEmitter.constructor</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:358</p>"},{"location":"reference/classes/appium_types.WSServer/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_types.WSServer/#clients","title":"clients","text":"<p>\u2022 clients: <code>Set</code>&lt;<code>InstanceType</code>&lt;<code>T</code>&gt;&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_1","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:356</p>"},{"location":"reference/classes/appium_types.WSServer/#options","title":"options","text":"<p>\u2022 options: <code>ServerOptions</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_2","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:354</p>"},{"location":"reference/classes/appium_types.WSServer/#path","title":"path","text":"<p>\u2022 path: <code>string</code></p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_3","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:355</p>"},{"location":"reference/classes/appium_types.WSServer/#capturerejectionsymbol","title":"captureRejectionSymbol","text":"<p>\u25aa <code>Static</code> <code>Readonly</code> captureRejectionSymbol: typeof <code>captureRejectionSymbol</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from","title":"Inherited from","text":"<p>EventEmitter.captureRejectionSymbol</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_4","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:328</p>"},{"location":"reference/classes/appium_types.WSServer/#capturerejections","title":"captureRejections","text":"<p>\u25aa <code>Static</code> captureRejections: <code>boolean</code></p> <p>Sets or gets the default captureRejection value for all emitters.</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_1","title":"Inherited from","text":"<p>EventEmitter.captureRejections</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_5","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:333</p>"},{"location":"reference/classes/appium_types.WSServer/#defaultmaxlisteners","title":"defaultMaxListeners","text":"<p>\u25aa <code>Static</code> defaultMaxListeners: <code>number</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_2","title":"Inherited from","text":"<p>EventEmitter.defaultMaxListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_6","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:334</p>"},{"location":"reference/classes/appium_types.WSServer/#errormonitor","title":"errorMonitor","text":"<p>\u25aa <code>Static</code> <code>Readonly</code> errorMonitor: typeof <code>errorMonitor</code></p> <p>This symbol shall be used to install a listener for only monitoring <code>'error'</code> events. Listeners installed using this symbol are called before the regular <code>'error'</code> listeners are called.</p> <p>Installing a listener using this symbol does not change the behavior once an <code>'error'</code> event is emitted, therefore the process will still crash if no regular <code>'error'</code> listener is installed.</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_3","title":"Inherited from","text":"<p>EventEmitter.errorMonitor</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_7","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:327</p>"},{"location":"reference/classes/appium_types.WSServer/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_types.WSServer/#addlistener","title":"addListener","text":"<p>\u25b8 addListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_1","title":"Parameters","text":"Name Type <code>event</code> <code>\"connection\"</code> <code>cb</code> (<code>client</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_1","title":"Overrides","text":"<p>EventEmitter.addListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_8","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:389</p> <p>\u25b8 addListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_2","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>cb</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_1","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_2","title":"Overrides","text":"<p>EventEmitter.addListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_9","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:390</p> <p>\u25b8 addListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_3","title":"Parameters","text":"Name Type <code>event</code> <code>\"headers\"</code> <code>cb</code> (<code>headers</code>: <code>string</code>[], <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_2","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_3","title":"Overrides","text":"<p>EventEmitter.addListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_10","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:391</p> <p>\u25b8 addListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_4","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> | <code>\"listening\"</code> <code>cb</code> () =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_3","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_4","title":"Overrides","text":"<p>EventEmitter.addListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_11","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:392</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_5","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_4","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_5","title":"Overrides","text":"<p>EventEmitter.addListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_12","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:393</p>"},{"location":"reference/classes/appium_types.WSServer/#address","title":"address","text":"<p>\u25b8 address(): <code>string</code> | <code>AddressInfo</code></p>"},{"location":"reference/classes/appium_types.WSServer/#returns_5","title":"Returns","text":"<p><code>string</code> | <code>AddressInfo</code></p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_13","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:360</p>"},{"location":"reference/classes/appium_types.WSServer/#close","title":"close","text":"<p>\u25b8 close(<code>cb?</code>): <code>void</code></p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_6","title":"Parameters","text":"Name Type <code>cb?</code> (<code>err?</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_14","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:361</p>"},{"location":"reference/classes/appium_types.WSServer/#emit","title":"emit","text":"<p>\u25b8 emit(<code>eventName</code>, <code>...args</code>): <code>boolean</code></p> <p>Synchronously calls each of the listeners registered for the event named<code>eventName</code>, in the order they were registered, passing the supplied arguments to each.</p> <p>Returns <code>true</code> if the event had listeners, <code>false</code> otherwise.</p> <pre><code>const EventEmitter = require('events');\nconst myEmitter = new EventEmitter();\n// First listener\nmyEmitter.on('event', function firstListener() {\nconsole.log('Helloooo! first listener');\n});\n// Second listener\nmyEmitter.on('event', function secondListener(arg1, arg2) {\nconsole.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n});\n// Third listener\nmyEmitter.on('event', function thirdListener(...args) {\nconst parameters = args.join(', ');\nconsole.log(`event with parameters ${parameters} in third listener`);\n});\nconsole.log(myEmitter.listeners('event'));\nmyEmitter.emit('event', 1, 2, 3, 4, 5);\n// Prints:\n// [\n//   [Function: firstListener],\n//   [Function: secondListener],\n//   [Function: thirdListener]\n// ]\n// Helloooo! first listener\n// event with parameters 1, 2 in second listener\n// event with parameters 1, 2, 3, 4, 5 in third listener\n</code></pre> <p><code>Since</code></p> <p>v0.1.26</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_7","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_types.WSServer/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_4","title":"Inherited from","text":"<p>EventEmitter.emit</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_15","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:610</p>"},{"location":"reference/classes/appium_types.WSServer/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): (<code>string</code> | <code>symbol</code>)[]</p> <p>Returns an array listing the events for which the emitter has registered listeners. The values in the array are strings or <code>Symbol</code>s.</p> <pre><code>const EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () =&gt; {});\nmyEE.on('bar', () =&gt; {});\nconst sym = Symbol('symbol');\nmyEE.on(sym, () =&gt; {});\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n</code></pre> <p><code>Since</code></p> <p>v6.0.0</p>"},{"location":"reference/classes/appium_types.WSServer/#returns_8","title":"Returns","text":"<p>(<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_5","title":"Inherited from","text":"<p>EventEmitter.eventNames</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_16","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:673</p>"},{"location":"reference/classes/appium_types.WSServer/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p> <p>Returns the current max listener value for the <code>EventEmitter</code> which is either set by <code>emitter.setMaxListeners(n)</code> or defaults to defaultMaxListeners.</p> <p><code>Since</code></p> <p>v1.0.0</p>"},{"location":"reference/classes/appium_types.WSServer/#returns_9","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_6","title":"Inherited from","text":"<p>EventEmitter.getMaxListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_17","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:526</p>"},{"location":"reference/classes/appium_types.WSServer/#handleupgrade","title":"handleUpgrade","text":"<p>\u25b8 handleUpgrade(<code>request</code>, <code>socket</code>, <code>upgradeHead</code>, <code>callback</code>): <code>void</code></p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_8","title":"Parameters","text":"Name Type <code>request</code> <code>InstanceType</code>&lt;<code>U</code>&gt; <code>socket</code> <code>Duplex</code> <code>upgradeHead</code> <code>Buffer</code> <code>callback</code> (<code>client</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_10","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_18","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:362</p>"},{"location":"reference/classes/appium_types.WSServer/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount(<code>eventName</code>, <code>listener?</code>): <code>number</code></p> <p>Returns the number of listeners listening to the event named <code>eventName</code>.</p> <p>If <code>listener</code> is provided, it will return how many times the listener is found in the list of the listeners of the event.</p> <p><code>Since</code></p> <p>v3.2.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_9","title":"Parameters","text":"Name Type Description <code>eventName</code> <code>string</code> | <code>symbol</code> The name of the event being listened for <code>listener?</code> <code>Function</code> The event handler function"},{"location":"reference/classes/appium_types.WSServer/#returns_11","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_7","title":"Inherited from","text":"<p>EventEmitter.listenerCount</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_19","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:620</p>"},{"location":"reference/classes/appium_types.WSServer/#listeners","title":"listeners","text":"<p>\u25b8 listeners(<code>eventName</code>): <code>Function</code>[]</p> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p> <pre><code>server.on('connection', (stream) =&gt; {\nconsole.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n</code></pre> <p><code>Since</code></p> <p>v0.1.26</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_10","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_12","title":"Returns","text":"<p><code>Function</code>[]</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_8","title":"Inherited from","text":"<p>EventEmitter.listeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_20","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:539</p>"},{"location":"reference/classes/appium_types.WSServer/#off","title":"off","text":"<p>\u25b8 off(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_11","title":"Parameters","text":"Name Type <code>event</code> <code>\"connection\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>socket</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_13","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_6","title":"Overrides","text":"<p>EventEmitter.off</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_21","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:383</p> <p>\u25b8 off(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_12","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>error</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_14","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_7","title":"Overrides","text":"<p>EventEmitter.off</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_22","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:384</p> <p>\u25b8 off(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_13","title":"Parameters","text":"Name Type <code>event</code> <code>\"headers\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>headers</code>: <code>string</code>[], <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_15","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_8","title":"Overrides","text":"<p>EventEmitter.off</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_23","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:385</p> <p>\u25b8 off(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_14","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> | <code>\"listening\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_16","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_9","title":"Overrides","text":"<p>EventEmitter.off</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_24","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:386</p> <p>\u25b8 off(<code>event</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_15","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, ...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_17","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_10","title":"Overrides","text":"<p>EventEmitter.off</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_25","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:387</p>"},{"location":"reference/classes/appium_types.WSServer/#on","title":"on","text":"<p>\u25b8 on(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_16","title":"Parameters","text":"Name Type <code>event</code> <code>\"connection\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>socket</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_18","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_11","title":"Overrides","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_26","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:371</p> <p>\u25b8 on(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_17","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>error</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_19","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_12","title":"Overrides","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_27","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:372</p> <p>\u25b8 on(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_18","title":"Parameters","text":"Name Type <code>event</code> <code>\"headers\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>headers</code>: <code>string</code>[], <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_20","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_13","title":"Overrides","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_28","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:373</p> <p>\u25b8 on(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_19","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> | <code>\"listening\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_21","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_14","title":"Overrides","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_29","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:374</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_20","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, ...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_22","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_15","title":"Overrides","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_30","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:375</p>"},{"location":"reference/classes/appium_types.WSServer/#once","title":"once","text":"<p>\u25b8 once(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_21","title":"Parameters","text":"Name Type <code>event</code> <code>\"connection\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>socket</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_23","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_16","title":"Overrides","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_31","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:377</p> <p>\u25b8 once(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_22","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>error</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_24","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_17","title":"Overrides","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_32","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:378</p> <p>\u25b8 once(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_23","title":"Parameters","text":"Name Type <code>event</code> <code>\"headers\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, <code>headers</code>: <code>string</code>[], <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_25","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_18","title":"Overrides","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_33","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:379</p> <p>\u25b8 once(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_24","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> | <code>\"listening\"</code> <code>cb</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_26","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_19","title":"Overrides","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_34","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:380</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_25","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (<code>this</code>: <code>WSServer</code>&lt;<code>T</code>, typeof <code>IncomingMessage</code>&gt;, ...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_27","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_20","title":"Overrides","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_35","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:381</p>"},{"location":"reference/classes/appium_types.WSServer/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener(<code>eventName</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p> <p>Adds the <code>listener</code> function to the beginning of the listeners array for the event named <code>eventName</code>. No checks are made to see if the <code>listener</code> has already been added. Multiple calls passing the same combination of <code>eventName</code>and <code>listener</code> will result in the <code>listener</code> being added, and called, multiple times.</p> <pre><code>server.prependListener('connection', (stream) =&gt; {\nconsole.log('someone connected!');\n});\n</code></pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v6.0.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_26","title":"Parameters","text":"Name Type Description <code>eventName</code> <code>string</code> | <code>symbol</code> The name of the event. <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> The callback function"},{"location":"reference/classes/appium_types.WSServer/#returns_28","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_9","title":"Inherited from","text":"<p>EventEmitter.prependListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_36","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:638</p>"},{"location":"reference/classes/appium_types.WSServer/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener(<code>eventName</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p> <p>Adds a one-time<code>listener</code> function for the event named <code>eventName</code> to the beginning of the listeners array. The next time <code>eventName</code> is triggered, this listener is removed, and then invoked.</p> <pre><code>server.prependOnceListener('connection', (stream) =&gt; {\nconsole.log('Ah, we have our first user!');\n});\n</code></pre> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v6.0.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_27","title":"Parameters","text":"Name Type Description <code>eventName</code> <code>string</code> | <code>symbol</code> The name of the event. <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> The callback function"},{"location":"reference/classes/appium_types.WSServer/#returns_29","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_10","title":"Inherited from","text":"<p>EventEmitter.prependOnceListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_37","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:654</p>"},{"location":"reference/classes/appium_types.WSServer/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners(<code>eventName</code>): <code>Function</code>[]</p> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>, including any wrappers (such as those created by <code>.once()</code>).</p> <pre><code>const emitter = new EventEmitter();\nemitter.once('log', () =&gt; console.log('log once'));\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\nemitter.on('log', () =&gt; console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n</code></pre> <p><code>Since</code></p> <p>v9.4.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_28","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_30","title":"Returns","text":"<p><code>Function</code>[]</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_11","title":"Inherited from","text":"<p>EventEmitter.rawListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_38","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:569</p>"},{"location":"reference/classes/appium_types.WSServer/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners(<code>event?</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p> <p>Removes all listeners, or those of the specified <code>eventName</code>.</p> <p>It is bad practice to remove listeners added elsewhere in the code, particularly when the <code>EventEmitter</code> instance was created by some other component or module (e.g. sockets or file streams).</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v0.1.26</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_29","title":"Parameters","text":"Name Type <code>event?</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_31","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_12","title":"Inherited from","text":"<p>EventEmitter.removeAllListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_39","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:510</p>"},{"location":"reference/classes/appium_types.WSServer/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_30","title":"Parameters","text":"Name Type <code>event</code> <code>\"connection\"</code> <code>cb</code> (<code>client</code>: <code>InstanceType</code>&lt;<code>T</code>&gt;, <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_32","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_21","title":"Overrides","text":"<p>EventEmitter.removeListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_40","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:395</p> <p>\u25b8 removeListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_31","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>cb</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_33","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_22","title":"Overrides","text":"<p>EventEmitter.removeListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_41","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:396</p> <p>\u25b8 removeListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_32","title":"Parameters","text":"Name Type <code>event</code> <code>\"headers\"</code> <code>cb</code> (<code>headers</code>: <code>string</code>[], <code>request</code>: <code>InstanceType</code>&lt;<code>U</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_34","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_23","title":"Overrides","text":"<p>EventEmitter.removeListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_42","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:397</p> <p>\u25b8 removeListener(<code>event</code>, <code>cb</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_33","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> | <code>\"listening\"</code> <code>cb</code> () =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_35","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_24","title":"Overrides","text":"<p>EventEmitter.removeListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_43","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:398</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_34","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_36","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#overrides_25","title":"Overrides","text":"<p>EventEmitter.removeListener</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_44","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:399</p>"},{"location":"reference/classes/appium_types.WSServer/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>n</code>): <code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p> <p>By default <code>EventEmitter</code>s will print a warning if more than <code>10</code> listeners are added for a particular event. This is a useful default that helps finding memory leaks. The <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this specific <code>EventEmitter</code> instance. The value can be set to<code>Infinity</code> (or <code>0</code>) to indicate an unlimited number of listeners.</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v0.3.5</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_35","title":"Parameters","text":"Name Type <code>n</code> <code>number</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_37","title":"Returns","text":"<p><code>WSServer</code>&lt;<code>T</code>, <code>U</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_13","title":"Inherited from","text":"<p>EventEmitter.setMaxListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_45","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:520</p>"},{"location":"reference/classes/appium_types.WSServer/#shouldhandle","title":"shouldHandle","text":"<p>\u25b8 shouldHandle(<code>request</code>): <code>boolean</code> | <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_36","title":"Parameters","text":"Name Type <code>request</code> <code>InstanceType</code>&lt;<code>U</code>&gt;"},{"location":"reference/classes/appium_types.WSServer/#returns_38","title":"Returns","text":"<p><code>boolean</code> | <code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_46","title":"Defined in","text":"<p>node_modules/@types/ws/index.d.ts:368</p>"},{"location":"reference/classes/appium_types.WSServer/#geteventlisteners","title":"getEventListeners","text":"<p>\u25b8 <code>Static</code> getEventListeners(<code>emitter</code>, <code>name</code>): <code>Function</code>[]</p> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p> <p>For <code>EventEmitter</code>s this behaves exactly the same as calling <code>.listeners</code> on the emitter.</p> <p>For <code>EventTarget</code>s this is the only way to get the event listeners for the event target. This is useful for debugging and diagnostic purposes.</p> <pre><code>const { getEventListeners, EventEmitter } = require('events');\n{\nconst ee = new EventEmitter();\nconst listener = () =&gt; console.log('Events are fun');\nee.on('foo', listener);\ngetEventListeners(ee, 'foo'); // [listener]\n}\n{\nconst et = new EventTarget();\nconst listener = () =&gt; console.log('Events are fun');\net.addEventListener('foo', listener);\ngetEventListeners(et, 'foo'); // [listener]\n}\n</code></pre> <p><code>Since</code></p> <p>v15.2.0, v14.17.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_37","title":"Parameters","text":"Name Type <code>emitter</code> <code>EventEmitter</code> | <code>_DOMEventTarget</code> <code>name</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_39","title":"Returns","text":"<p><code>Function</code>[]</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_14","title":"Inherited from","text":"<p>EventEmitter.getEventListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_47","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:299</p>"},{"location":"reference/classes/appium_types.WSServer/#listenercount_1","title":"listenerCount","text":"<p>\u25b8 <code>Static</code> listenerCount(<code>emitter</code>, <code>eventName</code>): <code>number</code></p> <p>A class method that returns the number of listeners for the given <code>eventName</code>registered on the given <code>emitter</code>.</p> <pre><code>const { EventEmitter, listenerCount } = require('events');\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () =&gt; {});\nmyEmitter.on('event', () =&gt; {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n</code></pre> <p><code>Since</code></p> <p>v0.9.12</p> <p><code>Deprecated</code></p> <p>Since v3.2.0 - Use <code>listenerCount</code> instead.</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_38","title":"Parameters","text":"Name Type Description <code>emitter</code> <code>EventEmitter</code> The emitter to query <code>eventName</code> <code>string</code> | <code>symbol</code> The event name"},{"location":"reference/classes/appium_types.WSServer/#returns_40","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_15","title":"Inherited from","text":"<p>EventEmitter.listenerCount</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_48","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:271</p>"},{"location":"reference/classes/appium_types.WSServer/#on_1","title":"on","text":"<p>\u25b8 <code>Static</code> on(<code>emitter</code>, <code>eventName</code>, <code>options?</code>): <code>AsyncIterableIterator</code>&lt;<code>any</code>&gt;</p> <pre><code>const { on, EventEmitter } = require('events');\n(async () =&gt; {\nconst ee = new EventEmitter();\n// Emit later on\nprocess.nextTick(() =&gt; {\nee.emit('foo', 'bar');\nee.emit('foo', 42);\n});\nfor await (const event of on(ee, 'foo')) {\n// The execution of this inner block is synchronous and it\n// processes one event at a time (even with await). Do not use\n// if concurrent execution is required.\nconsole.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n})();\n</code></pre> <p>Returns an <code>AsyncIterator</code> that iterates <code>eventName</code> events. It will throw if the <code>EventEmitter</code> emits <code>'error'</code>. It removes all listeners when exiting the loop. The <code>value</code> returned by each iteration is an array composed of the emitted event arguments.</p> <p>An <code>AbortSignal</code> can be used to cancel waiting on events:</p> <pre><code>const { on, EventEmitter } = require('events');\nconst ac = new AbortController();\n(async () =&gt; {\nconst ee = new EventEmitter();\n// Emit later on\nprocess.nextTick(() =&gt; {\nee.emit('foo', 'bar');\nee.emit('foo', 42);\n});\nfor await (const event of on(ee, 'foo', { signal: ac.signal })) {\n// The execution of this inner block is synchronous and it\n// processes one event at a time (even with await). Do not use\n// if concurrent execution is required.\nconsole.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n})();\nprocess.nextTick(() =&gt; ac.abort());\n</code></pre> <p><code>Since</code></p> <p>v13.6.0, v12.16.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_39","title":"Parameters","text":"Name Type Description <code>emitter</code> <code>EventEmitter</code> - <code>eventName</code> <code>string</code> The name of the event being listened for <code>options?</code> <code>StaticEventEmitterOptions</code> -"},{"location":"reference/classes/appium_types.WSServer/#returns_41","title":"Returns","text":"<p><code>AsyncIterableIterator</code>&lt;<code>any</code>&gt;</p> <p>that iterates <code>eventName</code> events emitted by the <code>emitter</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_16","title":"Inherited from","text":"<p>EventEmitter.on</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_49","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:254</p>"},{"location":"reference/classes/appium_types.WSServer/#once_1","title":"once","text":"<p>\u25b8 <code>Static</code> once(<code>emitter</code>, <code>eventName</code>, <code>options?</code>): <code>Promise</code>&lt;<code>any</code>[]&gt;</p> <p>Creates a <code>Promise</code> that is fulfilled when the <code>EventEmitter</code> emits the given event or that is rejected if the <code>EventEmitter</code> emits <code>'error'</code> while waiting. The <code>Promise</code> will resolve with an array of all the arguments emitted to the given event.</p> <p>This method is intentionally generic and works with the web platform EventTarget interface, which has no special<code>'error'</code> event semantics and does not listen to the <code>'error'</code> event.</p> <pre><code>const { once, EventEmitter } = require('events');\nasync function run() {\nconst ee = new EventEmitter();\nprocess.nextTick(() =&gt; {\nee.emit('myevent', 42);\n});\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\nconst err = new Error('kaboom');\nprocess.nextTick(() =&gt; {\nee.emit('error', err);\n});\ntry {\nawait once(ee, 'myevent');\n} catch (err) {\nconsole.log('error happened', err);\n}\n}\nrun();\n</code></pre> <p>The special handling of the <code>'error'</code> event is only used when <code>events.once()</code>is used to wait for another event. If <code>events.once()</code> is used to wait for the '<code>error'</code> event itself, then it is treated as any other kind of event without special handling:</p> <pre><code>const { EventEmitter, once } = require('events');\nconst ee = new EventEmitter();\nonce(ee, 'error')\n.then(([err]) =&gt; console.log('ok', err.message))\n.catch((err) =&gt; console.log('error', err.message));\nee.emit('error', new Error('boom'));\n// Prints: ok boom\n</code></pre> <p>An <code>AbortSignal</code> can be used to cancel waiting for the event:</p> <pre><code>const { EventEmitter, once } = require('events');\nconst ee = new EventEmitter();\nconst ac = new AbortController();\nasync function foo(emitter, event, signal) {\ntry {\nawait once(emitter, event, { signal });\nconsole.log('event emitted!');\n} catch (error) {\nif (error.name === 'AbortError') {\nconsole.error('Waiting for the event was canceled!');\n} else {\nconsole.error('There was an error', error.message);\n}\n}\n}\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n</code></pre> <p><code>Since</code></p> <p>v11.13.0, v10.16.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_40","title":"Parameters","text":"Name Type <code>emitter</code> <code>_NodeEventTarget</code> <code>eventName</code> <code>string</code> | <code>symbol</code> <code>options?</code> <code>StaticEventEmitterOptions</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_42","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>[]&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_17","title":"Inherited from","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_50","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:194</p> <p>\u25b8 <code>Static</code> once(<code>emitter</code>, <code>eventName</code>, <code>options?</code>): <code>Promise</code>&lt;<code>any</code>[]&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_41","title":"Parameters","text":"Name Type <code>emitter</code> <code>_DOMEventTarget</code> <code>eventName</code> <code>string</code> <code>options?</code> <code>StaticEventEmitterOptions</code>"},{"location":"reference/classes/appium_types.WSServer/#returns_43","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>[]&gt;</p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_18","title":"Inherited from","text":"<p>EventEmitter.once</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_51","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:195</p>"},{"location":"reference/classes/appium_types.WSServer/#setmaxlisteners_1","title":"setMaxListeners","text":"<p>\u25b8 <code>Static</code> setMaxListeners(<code>n?</code>, <code>...eventTargets</code>): <code>void</code></p> <pre><code>const {\nsetMaxListeners,\nEventEmitter\n} = require('events');\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\nsetMaxListeners(5, target, emitter);\n</code></pre> <p><code>Since</code></p> <p>v15.4.0</p>"},{"location":"reference/classes/appium_types.WSServer/#parameters_42","title":"Parameters","text":"Name Type Description <code>n?</code> <code>number</code> A non-negative number. The maximum number of listeners per <code>EventTarget</code> event. <code>...eventTargets</code> (<code>EventEmitter</code> | <code>_DOMEventTarget</code>)[] -"},{"location":"reference/classes/appium_types.WSServer/#returns_44","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/classes/appium_types.WSServer/#inherited-from_19","title":"Inherited from","text":"<p>EventEmitter.setMaxListeners</p>"},{"location":"reference/classes/appium_types.WSServer/#defined-in_52","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:317</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/","title":"Class: UniversalXMLPlugin","text":"<p>@appium/universal-xml-plugin.UniversalXMLPlugin</p> <p><code>Implements</code></p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BasePlugin</code></li> </ul> <p>\u21b3 <code>UniversalXMLPlugin</code></p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#constructors","title":"Constructors","text":"<ul> <li>constructor</li> </ul>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#properties","title":"Properties","text":"<ul> <li>cliArgs</li> <li>logger</li> <li>name</li> <li>executeMethodMap</li> <li>newMethodMap</li> </ul>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#methods","title":"Methods","text":"<ul> <li>_find</li> <li>executeMethod</li> <li>findElement</li> <li>findElements</li> <li>getPageSource</li> </ul>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#constructors_1","title":"Constructors","text":""},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#constructor","title":"constructor","text":"<p>\u2022 new UniversalXMLPlugin(<code>name</code>, <code>cliArgs?</code>)</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>cliArgs?</code> <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from","title":"Inherited from","text":"<p>BasePlugin.constructor</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:47</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#properties_1","title":"Properties","text":""},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_1","title":"Inherited from","text":"<p>BasePlugin.cliArgs</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_1","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:49</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#logger","title":"logger","text":"<p>\u2022 logger: <code>AppiumLogger</code></p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_2","title":"Inherited from","text":"<p>BasePlugin.logger</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_2","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:50</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_3","title":"Inherited from","text":"<p>BasePlugin.name</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_3","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:48</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#executemethodmap","title":"executeMethodMap","text":"<p>\u25aa <code>Static</code> executeMethodMap: <code>Object</code></p> <p>Subclasses should use type <code>import('@appium/types').ExecuteMethodMap&lt;SubclassName&gt;</code>.</p> <p>Building up this map allows the use of the convenience function <code>executeMethod</code>, which basically does verification of names and parameters for execute methods implemented by this plugin.</p> <pre><code>static executeMethodMap = {\n'foo: bar': {\ncommand: 'commandName',\nparams: {required: ['thing1', 'thing2'], optional: ['thing3']},\n},\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_4","title":"Inherited from","text":"<p>BasePlugin.executeMethodMap</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_4","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:42</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#newmethodmap","title":"newMethodMap","text":"<p>\u25aa <code>Static</code> newMethodMap: <code>Object</code></p> <p>Subclasses should use type <code>import('@appium/types').MethodMap&lt;SubclassName&gt;</code>.</p> <p>This will verify that the commands in the <code>newMethodMap</code> property are valid.  It is impossible to use a generic type param here; the type of this should really be something like <code>MethodMap&lt;T extends BasePlugin&gt;</code> but that isn't a thing TS does.</p> <pre><code>static newMethodMap = {\n'/session/:sessionId/fake_data': {\nGET: {command: 'getFakeSessionData', neverProxy: true},\n}\n} as const;\n</code></pre>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_5","title":"Inherited from","text":"<p>BasePlugin.newMethodMap</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_5","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:25</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#methods_1","title":"Methods","text":""},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#_find","title":"_find","text":"<p>\u25b8 _find(<code>multiple</code>, <code>next</code>, <code>driver</code>, <code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters_1","title":"Parameters","text":"Name Type <code>multiple</code> <code>any</code> <code>next</code> <code>any</code> <code>driver</code> <code>any</code> <code>strategy</code> <code>any</code> <code>selector</code> <code>any</code>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_6","title":"Defined in","text":"<p>packages/universal-xml-plugin/lib/plugin.js:48</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>C</code>&gt;(<code>next</code>, <code>driver</code>, <code>script</code>, <code>protoArgs</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>A convenience method that can be called by plugins who implement their own <code>executeMethodMap</code>. Only useful if your plugin has defined <code>executeMethodMap</code>. This helper requires passing in the <code>next</code> and <code>driver</code> objects since naturally we'd want to make sure to trigger the driver's own <code>executeMethod</code> call if an execute method is not found on the plugin itself.</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters_2","title":"Parameters","text":"Name Type <code>next</code> <code>NextPluginCallback</code> <code>driver</code> <code>Driver</code>&lt;<code>C</code>, <code>StringRecord</code>&lt;<code>any</code>&gt;, <code>StringRecord</code>&lt;<code>any</code>&gt;, <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt;, <code>void</code>, <code>StringRecord</code>&lt;<code>any</code>&gt;&gt; <code>script</code> <code>string</code> <code>protoArgs</code> readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;]"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#inherited-from_6","title":"Inherited from","text":"<p>BasePlugin.executeMethod</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_7","title":"Defined in","text":"<p>packages/base-plugin/build/lib/plugin.d.ts:63</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters_3","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_8","title":"Defined in","text":"<p>packages/universal-xml-plugin/lib/plugin.js:40</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters_4","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_9","title":"Defined in","text":"<p>packages/universal-xml-plugin/lib/plugin.js:44</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(<code>next</code>, <code>driver</code>, <code>sessId</code>, <code>addIndexPath?</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#parameters_5","title":"Parameters","text":"Name Type Default value <code>next</code> <code>any</code> <code>undefined</code> <code>driver</code> <code>any</code> <code>undefined</code> <code>sessId</code> <code>any</code> <code>undefined</code> <code>addIndexPath</code> <code>boolean</code> <code>false</code>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/classes/appium_universal_xml_plugin.UniversalXMLPlugin/#defined-in_10","title":"Defined in","text":"<p>packages/universal-xml-plugin/lib/plugin.js:10</p>"},{"location":"reference/commands/base-driver/","title":"@appium/base-driver Commands","text":""},{"location":"reference/commands/base-driver/#commands","title":"Commands","text":""},{"location":"reference/commands/base-driver/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Historically the first two arguments were reserved for JSONWP capabilities. Appium 2 has dropped the support of these, so now we only accept capability objects in W3C format and thus allow any of the three arguments to represent the latter.</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/commands/base-driver/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>requiredCapabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined)"},{"location":"reference/commands/base-driver/#response","title":"Response","text":"<p><code>CreateResult</code></p> <p>The capabilities object representing the created session</p>"},{"location":"reference/commands/base-driver/#deletesession","title":"<code>deleteSession</code>","text":"<p><code>DELETE</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/commands/base-driver/#response_1","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"reference/commands/base-driver/#getsession","title":"<code>getSession</code>","text":"<p><code>GET</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/commands/base-driver/#response_2","title":"Response","text":"<p><code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;</p> <p>A session data object</p>"},{"location":"reference/commands/base-driver/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/commands/base-driver/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/commands/base-driver/#response_3","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/base-driver/#findelementfromelement","title":"<code>findElementFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/commands/base-driver/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/commands/base-driver/#response_4","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/base-driver/#findelementfromshadowroot","title":"<code>findElementFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/element</code></p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/commands/base-driver/#parameters_3","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/base-driver/#response_5","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/commands/base-driver/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/commands/base-driver/#parameters_4","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/base-driver/#response_6","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/base-driver/#findelementsfromelement","title":"<code>findElementsFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/commands/base-driver/#parameters_5","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/base-driver/#response_7","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/base-driver/#findelementsfromshadowroot","title":"<code>findElementsFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/elements</code></p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/commands/base-driver/#parameters_6","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/base-driver/#response_8","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/commands/base-driver/#getlog","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"reference/commands/base-driver/#parameters_7","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/commands/base-driver/#response_9","title":"Response","text":"<p><code>any</code></p>"},{"location":"reference/commands/base-driver/#getlog_1","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/se/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"reference/commands/base-driver/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/commands/base-driver/#response_10","title":"Response","text":"<p><code>any</code></p>"},{"location":"reference/commands/base-driver/#getlogevents","title":"<code>getLogEvents</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/events</code></p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/commands/base-driver/#parameters_9","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/commands/base-driver/#response_11","title":"Response","text":"<p><code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;</p> <p>The event history for the session</p>"},{"location":"reference/commands/base-driver/#getlogtypes","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"reference/commands/base-driver/#response_12","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"reference/commands/base-driver/#getlogtypes_1","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/se/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"reference/commands/base-driver/#response_13","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"reference/commands/base-driver/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/commands/base-driver/#response_14","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/commands/base-driver/#getsessions","title":"<code>getSessions</code>","text":"<p><code>GET</code> <code>/sessions</code></p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/commands/base-driver/#response_15","title":"Response","text":"<p><code>MultiSessionData</code>&lt;<code>C</code>&gt;[]</p> <p>A list of session data objects</p>"},{"location":"reference/commands/base-driver/#getsettings","title":"<code>getSettings</code>","text":"<p><code>GET</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/commands/base-driver/#response_16","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#updatesettings","title":"<code>updateSettings</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/commands/base-driver/#parameters_10","title":"Parameters","text":"Name Type Description <code>settings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/commands/base-driver/#response_17","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#getstatus","title":"<code>getStatus</code>","text":"<p><code>GET</code> <code>/status</code></p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p>"},{"location":"reference/commands/base-driver/#examples","title":"Examples","text":""},{"location":"reference/commands/base-driver/#javascript","title":"JavaScript","text":"<pre><code>// webdriver.io example\nawait driver.status();\n</code></pre>"},{"location":"reference/commands/base-driver/#python","title":"Python","text":"<pre><code>driver.get_status()\n</code></pre>"},{"location":"reference/commands/base-driver/#java","title":"Java","text":"<pre><code>driver.getStatus();\n</code></pre>"},{"location":"reference/commands/base-driver/#ruby","title":"Ruby","text":"<pre><code># ruby_lib example\nremote_status\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"reference/commands/base-driver/#response_18","title":"Response","text":"<p><code>Object</code></p>"},{"location":"reference/commands/base-driver/#gettimeouts","title":"<code>getTimeouts</code>","text":"<p><code>GET</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/commands/base-driver/#response_19","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#timeouts","title":"<code>timeouts</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/commands/base-driver/#parameters_11","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms?</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/commands/base-driver/#response_20","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#implicitwait","title":"<code>implicitWait</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts/implicit_wait</code></p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/commands/base-driver/#parameters_12","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/commands/base-driver/#response_21","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#logcustomevent","title":"<code>logCustomEvent</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/log_event</code></p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/commands/base-driver/#parameters_13","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/commands/base-driver/#response_22","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/base-driver/#reset","title":"<code>reset</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/app/reset</code></p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/commands/base-driver/#response_23","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/execute-driver-plugin/","title":"Plugin: execute-driver","text":""},{"location":"reference/commands/execute-driver-plugin/#command","title":"Command","text":""},{"location":"reference/commands/execute-driver-plugin/#executedriverscript","title":"<code>executeDriverScript</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/execute_driver</code></p> <p>Implementation of a command within a plugin</p> <p>At minimum, <code>D</code> must be <code>ExternalDriver</code>, but a plugin can be more narrow about which drivers it supports.</p>"},{"location":"reference/commands/execute-driver-plugin/#parameters","title":"Parameters","text":"Name Type <code>script</code> [script: string, scriptType: string, timeoutMs: number] <code>type?</code> [script: string, scriptType: string, timeoutMs: number]"},{"location":"reference/commands/execute-driver-plugin/#response","title":"Response","text":"<p><code>unknown</code></p>"},{"location":"reference/commands/fake-driver/","title":"Driver: fake","text":""},{"location":"reference/commands/fake-driver/#commands","title":"Commands","text":""},{"location":"reference/commands/fake-driver/#calldeprecatedcommand","title":"<code>callDeprecatedCommand</code>","text":"<p><code>POST</code> <code>/session/:sessionId/deprecated</code></p> <p>This is a command that exists just to be an example of a deprecated command</p>"},{"location":"reference/commands/fake-driver/#response","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#doubleclick","title":"<code>doubleClick</code>","text":"<p><code>POST</code> <code>/session/:sessionId/doubleclick</code></p> <p>Double-click the current mouse location</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/commands/fake-driver/#response_1","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#getfakething","title":"<code>getFakeThing</code>","text":"<p><code>GET</code> <code>/session/:sessionId/fakedriver</code></p>"},{"location":"reference/commands/fake-driver/#response_2","title":"Response","text":"<p><code>null</code> | <code>Thing</code></p>"},{"location":"reference/commands/fake-driver/#setfakething","title":"<code>setFakeThing</code>","text":"<p><code>POST</code> <code>/session/:sessionId/fakedriver</code></p> <p>Set the 'thing' value (so that it can be retrieved later)</p>"},{"location":"reference/commands/fake-driver/#parameters","title":"Parameters","text":"Name Type <code>thing</code> <code>Thing</code>"},{"location":"reference/commands/fake-driver/#response_3","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#getfakedriverargs","title":"<code>getFakeDriverArgs</code>","text":"<p><code>GET</code> <code>/session/:sessionId/fakedriverargs</code></p> <p>Get the driver args that were sent in via the CLI</p>"},{"location":"reference/commands/fake-driver/#response_4","title":"Response","text":"<p><code>StringRecord</code> &amp; <code>ServerArgs</code></p>"},{"location":"reference/commands/fake-driver/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Comment for <code>createSession</code> in <code>FakeDriver</code></p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/commands/fake-driver/#parameters_1","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>W3CFakeDriverCaps</code> W3C Capabilities <code>requiredCapabilities?</code> <code>W3CFakeDriverCaps</code> W3C Capabilities <code>capabilities?</code> <code>W3CFakeDriverCaps</code> W3C Capabilities"},{"location":"reference/commands/fake-driver/#response_5","title":"Response","text":"<p>[<code>string</code>, <code>FakeDriverCaps</code>]</p> <p>The capabilities object representing the created session</p>"},{"location":"reference/commands/fake-driver/#deletesession","title":"<code>deleteSession</code>","text":"<p><code>DELETE</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/commands/fake-driver/#response_6","title":"Response","text":"<p><code>SingularSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }, <code>StringRecord</code>&gt;</p> <p>A session data object</p>"},{"location":"reference/commands/fake-driver/#getsession","title":"<code>getSession</code>","text":"<p><code>GET</code> <code>/session/:sessionId</code></p> <p>Returns capabilities for the session and event history (if applicable)</p>"},{"location":"reference/commands/fake-driver/#response_7","title":"Response","text":"<p><code>SingularSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }, <code>StringRecord</code>&gt;</p> <p>A session data object</p>"},{"location":"reference/commands/fake-driver/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/commands/fake-driver/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/commands/fake-driver/#response_8","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/fake-driver/#findelementfromelement","title":"<code>findElementFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/commands/fake-driver/#parameters_3","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/commands/fake-driver/#response_9","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/fake-driver/#findelementfromshadowroot","title":"<code>findElementFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/element</code></p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/commands/fake-driver/#parameters_4","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/fake-driver/#response_10","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/commands/fake-driver/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/commands/fake-driver/#parameters_5","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/fake-driver/#response_11","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/fake-driver/#findelementsfromelement","title":"<code>findElementsFromElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element/:elementId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/commands/fake-driver/#parameters_6","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/fake-driver/#response_12","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/fake-driver/#findelementsfromshadowroot","title":"<code>findElementsFromShadowRoot</code>","text":"<p><code>POST</code> <code>/session/:sessionId/shadow/:shadowId/elements</code></p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/commands/fake-driver/#parameters_7","title":"Parameters","text":"Name Type Description <code>using</code> <code>string</code> the locator strategy <code>value</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/fake-driver/#response_13","title":"Response","text":"<p><code>Element</code>&lt;<code>string</code>&gt;[]</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/commands/fake-driver/#getlog","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"reference/commands/fake-driver/#parameters_8","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/commands/fake-driver/#response_14","title":"Response","text":"<p><code>any</code></p>"},{"location":"reference/commands/fake-driver/#getlog_1","title":"<code>getLog</code>","text":"<p><code>POST</code> <code>/session/:sessionId/se/log</code></p> <p>Get the log for a given log type.</p>"},{"location":"reference/commands/fake-driver/#parameters_9","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> Name/key of log type as defined in ILogCommands.supportedLogTypes."},{"location":"reference/commands/fake-driver/#response_15","title":"Response","text":"<p><code>any</code></p>"},{"location":"reference/commands/fake-driver/#getlogevents","title":"<code>getLogEvents</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/events</code></p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/commands/fake-driver/#parameters_10","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/commands/fake-driver/#response_16","title":"Response","text":"<p><code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;</p> <p>The event history for the session</p>"},{"location":"reference/commands/fake-driver/#getlogtypes","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"reference/commands/fake-driver/#response_17","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"reference/commands/fake-driver/#getlogtypes_1","title":"<code>getLogTypes</code>","text":"<p><code>GET</code> <code>/session/:sessionId/se/log/types</code></p> <p>Get available log types as a list of strings</p>"},{"location":"reference/commands/fake-driver/#response_18","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"reference/commands/fake-driver/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/commands/fake-driver/#response_19","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/commands/fake-driver/#getsessions","title":"<code>getSessions</code>","text":"<p><code>GET</code> <code>/sessions</code></p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/commands/fake-driver/#response_20","title":"Response","text":"<p><code>MultiSessionData</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } ; <code>uniqueApp</code>: { <code>isBoolean</code>: <code>true</code> = true }  }&gt;[]</p> <p>A list of session data objects</p>"},{"location":"reference/commands/fake-driver/#getsettings","title":"<code>getSettings</code>","text":"<p><code>GET</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/commands/fake-driver/#response_21","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#updatesettings","title":"<code>updateSettings</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/settings</code></p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/commands/fake-driver/#parameters_11","title":"Parameters","text":"Name Type Description <code>settings</code> <code>StringRecord</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/commands/fake-driver/#response_22","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#getstatus","title":"<code>getStatus</code>","text":"<p><code>GET</code> <code>/status</code></p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p>"},{"location":"reference/commands/fake-driver/#examples","title":"Examples","text":""},{"location":"reference/commands/fake-driver/#javascript","title":"JavaScript","text":"<pre><code>// webdriver.io example\nawait driver.status();\n</code></pre>"},{"location":"reference/commands/fake-driver/#python","title":"Python","text":"<pre><code>driver.get_status()\n</code></pre>"},{"location":"reference/commands/fake-driver/#java","title":"Java","text":"<pre><code>driver.getStatus();\n</code></pre>"},{"location":"reference/commands/fake-driver/#ruby","title":"Ruby","text":"<pre><code># ruby_lib example\nremote_status\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"reference/commands/fake-driver/#response_23","title":"Response","text":"<p><code>Object</code></p>"},{"location":"reference/commands/fake-driver/#gettimeouts","title":"<code>getTimeouts</code>","text":"<p><code>GET</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/commands/fake-driver/#response_24","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#timeouts","title":"<code>timeouts</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts</code></p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/commands/fake-driver/#parameters_12","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms?</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/commands/fake-driver/#response_25","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#implicitwait","title":"<code>implicitWait</code>","text":"<p><code>POST</code> <code>/session/:sessionId/timeouts/implicit_wait</code></p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/commands/fake-driver/#parameters_13","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/commands/fake-driver/#response_26","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#logcustomevent","title":"<code>logCustomEvent</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/log_event</code></p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/commands/fake-driver/#parameters_14","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/commands/fake-driver/#response_27","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#reset","title":"<code>reset</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/app/reset</code></p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/commands/fake-driver/#response_28","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/fake-driver/#execute-methods","title":"Execute Methods","text":""},{"location":"reference/commands/fake-driver/#fake-addition","title":"<code>fake: addition</code>","text":""},{"location":"reference/commands/fake-driver/#route","title":"Route","text":"<p><code>POST /session/:sessionId/execute</code></p>"},{"location":"reference/commands/fake-driver/#parameters_15","title":"Parameters","text":"Name Type <code>num1</code> <code>number</code> <code>num2</code> <code>number</code> <code>num3?</code> <code>number</code>"},{"location":"reference/commands/fake-driver/#response_29","title":"Response","text":"<p><code>number</code></p>"},{"location":"reference/commands/fake-driver/#fake-getdeprecatedcommandscalled","title":"<code>fake: getDeprecatedCommandsCalled</code>","text":"<p>This is a command that will return a list of deprecated command names called</p>"},{"location":"reference/commands/fake-driver/#route_1","title":"Route","text":"<p><code>POST /session/:sessionId/execute</code></p>"},{"location":"reference/commands/fake-driver/#response_30","title":"Response","text":"<p><code>string</code>[]</p>"},{"location":"reference/commands/fake-driver/#fake-getthing","title":"<code>fake: getThing</code>","text":"<p>Gets a thing (a fake thing)</p>"},{"location":"reference/commands/fake-driver/#route_2","title":"Route","text":"<p><code>POST /session/:sessionId/execute</code></p>"},{"location":"reference/commands/fake-driver/#response_31","title":"Response","text":"<p><code>null</code> | <code>Thing</code></p>"},{"location":"reference/commands/fake-driver/#fake-setthing","title":"<code>fake: setThing</code>","text":"<p>Set the 'thing' value (so that it can be retrieved later)</p>"},{"location":"reference/commands/fake-driver/#route_3","title":"Route","text":"<p><code>POST /session/:sessionId/execute</code></p>"},{"location":"reference/commands/fake-driver/#parameters_16","title":"Parameters","text":"Name Type <code>thing</code> <code>Thing</code>"},{"location":"reference/commands/fake-driver/#response_32","title":"Response","text":"<p><code>null</code></p>"},{"location":"reference/commands/images-plugin/","title":"Plugin: images","text":""},{"location":"reference/commands/images-plugin/#commands","title":"Commands","text":""},{"location":"reference/commands/images-plugin/#compareimages","title":"<code>compareImages</code>","text":"<p><code>POST</code> <code>/session/:sessionId/appium/compare_images</code></p>"},{"location":"reference/commands/images-plugin/#parameters","title":"Parameters","text":"Name Type <code>mode</code> <code>any</code>[] <code>options?</code> <code>any</code>[]"},{"location":"reference/commands/images-plugin/#response","title":"Response","text":"<p><code>unknown</code></p>"},{"location":"reference/commands/images-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/commands/images-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/commands/images-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/images-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/commands/images-plugin/#parameters_2","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code> the locator strategy <code>value</code> <code>any</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/commands/images-plugin/#response_2","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/relaxed-caps-plugin/","title":"Plugin: relaxed-caps","text":""},{"location":"reference/commands/relaxed-caps-plugin/#command","title":"Command","text":""},{"location":"reference/commands/relaxed-caps-plugin/#createsession","title":"<code>createSession</code>","text":"<p><code>POST</code> <code>/session</code></p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/commands/relaxed-caps-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>desiredCapabilities?</code> <code>any</code> the new session capabilities <code>requiredCapabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined) <code>capabilities?</code> <code>any</code> another place the new session capabilities could be sent (typically left undefined)"},{"location":"reference/commands/relaxed-caps-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The capabilities object representing the created session</p>"},{"location":"reference/commands/universal-xml-plugin/","title":"Plugin: universal-xml","text":""},{"location":"reference/commands/universal-xml-plugin/#commands","title":"Commands","text":""},{"location":"reference/commands/universal-xml-plugin/#findelement","title":"<code>findElement</code>","text":"<p><code>POST</code> <code>/session/:sessionId/element</code></p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/commands/universal-xml-plugin/#parameters","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"reference/commands/universal-xml-plugin/#response","title":"Response","text":"<p><code>any</code></p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/commands/universal-xml-plugin/#findelements","title":"<code>findElements</code>","text":"<p><code>POST</code> <code>/session/:sessionId/elements</code></p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/commands/universal-xml-plugin/#parameters_1","title":"Parameters","text":"Name Type Description <code>using</code> <code>any</code>[] the locator strategy"},{"location":"reference/commands/universal-xml-plugin/#response_1","title":"Response","text":"<p><code>any</code></p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/commands/universal-xml-plugin/#getpagesource","title":"<code>getPageSource</code>","text":"<p><code>GET</code> <code>/session/:sessionId/source</code></p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/commands/universal-xml-plugin/#response_2","title":"Response","text":"<p><code>string</code></p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/","title":"Enumeration: AppiumThemeTemplate","text":"<p>@appium/typedoc-plugin-appium.AppiumThemeTemplate</p> <p>Enum of all available templates</p>"},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/#enumeration-members","title":"Enumeration Members","text":"<ul> <li>Extension</li> </ul>"},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/#enumeration-members_1","title":"Enumeration Members","text":""},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/#extension","title":"Extension","text":"<p>\u2022 Extension = <code>\"extension.hbs\"</code></p> <p>Template to render a list of commands</p>"},{"location":"reference/enums/appium_typedoc_plugin_appium.AppiumThemeTemplate/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/template.ts:41</p>"},{"location":"reference/enums/appium_types.Key/","title":"Enumeration: Key","text":"<p>@appium/types.Key</p>"},{"location":"reference/enums/appium_types.Key/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/enums/appium_types.Key/#enumeration-members","title":"Enumeration Members","text":"<ul> <li>ADD</li> <li>ALT</li> <li>BACKSPACE</li> <li>CANCEL</li> <li>CLEAR</li> <li>CONTROL</li> <li>DECIMAL</li> <li>DELETE</li> <li>DIVIDE</li> <li>DOWN</li> <li>END</li> <li>ENTER</li> <li>EQUALS</li> <li>ESCAPE</li> <li>F1</li> <li>F10</li> <li>F11</li> <li>F12</li> <li>F2</li> <li>F3</li> <li>F4</li> <li>F5</li> <li>F6</li> <li>F7</li> <li>F8</li> <li>F9</li> <li>HELP</li> <li>HOME</li> <li>INSERT</li> <li>LEFT</li> <li>META</li> <li>MULTIPLY</li> <li>NULL</li> <li>NUMPAD0</li> <li>NUMPAD1</li> <li>NUMPAD2</li> <li>NUMPAD3</li> <li>NUMPAD4</li> <li>NUMPAD5</li> <li>NUMPAD6</li> <li>NUMPAD7</li> <li>NUMPAD8</li> <li>NUMPAD9</li> <li>PAGE_DOWN</li> <li>PAGE_UP</li> <li>PAUSE</li> <li>RETURN</li> <li>RIGHT</li> <li>R_ALT</li> <li>R_ARROWDOWN</li> <li>R_ARROWLEFT</li> <li>R_ARROWRIGHT</li> <li>R_ARROWUP</li> <li>R_CONTROL</li> <li>R_DELETE</li> <li>R_END</li> <li>R_HOME</li> <li>R_INSERT</li> <li>R_META</li> <li>R_PAGEDOWN</li> <li>R_PAGEUP</li> <li>R_SHIFT</li> <li>SEMICOLON</li> <li>SEPARATOR</li> <li>SHIFT</li> <li>SPACE</li> <li>SUBTRACT</li> <li>TAB</li> <li>UP</li> <li>ZENKAKUHANKAKU</li> </ul>"},{"location":"reference/enums/appium_types.Key/#enumeration-members_1","title":"Enumeration Members","text":""},{"location":"reference/enums/appium_types.Key/#add","title":"ADD","text":"<p>\u2022 ADD = <code>\"\ue025\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in","title":"Defined in","text":"<p>packages/types/lib/action.ts:156</p>"},{"location":"reference/enums/appium_types.Key/#alt","title":"ALT","text":"<p>\u2022 ALT = <code>\"\ue00a\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/action.ts:129</p>"},{"location":"reference/enums/appium_types.Key/#backspace","title":"BACKSPACE","text":"<p>\u2022 BACKSPACE = <code>\"\ue003\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/action.ts:122</p>"},{"location":"reference/enums/appium_types.Key/#cancel","title":"CANCEL","text":"<p>\u2022 CANCEL = <code>\"\ue001\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/action.ts:120</p>"},{"location":"reference/enums/appium_types.Key/#clear","title":"CLEAR","text":"<p>\u2022 CLEAR = <code>\"\ue005\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/action.ts:124</p>"},{"location":"reference/enums/appium_types.Key/#control","title":"CONTROL","text":"<p>\u2022 CONTROL = <code>\"\ue009\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/action.ts:128</p>"},{"location":"reference/enums/appium_types.Key/#decimal","title":"DECIMAL","text":"<p>\u2022 DECIMAL = <code>\"\ue028\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/action.ts:159</p>"},{"location":"reference/enums/appium_types.Key/#delete","title":"DELETE","text":"<p>\u2022 DELETE = <code>\"\ue017\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/action.ts:142</p>"},{"location":"reference/enums/appium_types.Key/#divide","title":"DIVIDE","text":"<p>\u2022 DIVIDE = <code>\"\ue029\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/action.ts:160</p>"},{"location":"reference/enums/appium_types.Key/#down","title":"DOWN","text":"<p>\u2022 DOWN = <code>\"\ue015\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/action.ts:140</p>"},{"location":"reference/enums/appium_types.Key/#end","title":"END","text":"<p>\u2022 END = <code>\"\ue010\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/action.ts:135</p>"},{"location":"reference/enums/appium_types.Key/#enter","title":"ENTER","text":"<p>\u2022 ENTER = <code>\"\ue007\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/action.ts:126</p>"},{"location":"reference/enums/appium_types.Key/#equals","title":"EQUALS","text":"<p>\u2022 EQUALS = <code>\"\ue019\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/action.ts:144</p>"},{"location":"reference/enums/appium_types.Key/#escape","title":"ESCAPE","text":"<p>\u2022 ESCAPE = <code>\"\ue00c\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/action.ts:131</p>"},{"location":"reference/enums/appium_types.Key/#f1","title":"F1","text":"<p>\u2022 F1 = <code>\"\ue031\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/action.ts:161</p>"},{"location":"reference/enums/appium_types.Key/#f10","title":"F10","text":"<p>\u2022 F10 = <code>\"\ue03a\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/action.ts:170</p>"},{"location":"reference/enums/appium_types.Key/#f11","title":"F11","text":"<p>\u2022 F11 = <code>\"\ue03b\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/action.ts:171</p>"},{"location":"reference/enums/appium_types.Key/#f12","title":"F12","text":"<p>\u2022 F12 = <code>\"\ue03c\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/action.ts:172</p>"},{"location":"reference/enums/appium_types.Key/#f2","title":"F2","text":"<p>\u2022 F2 = <code>\"\ue032\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/action.ts:162</p>"},{"location":"reference/enums/appium_types.Key/#f3","title":"F3","text":"<p>\u2022 F3 = <code>\"\ue033\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/action.ts:163</p>"},{"location":"reference/enums/appium_types.Key/#f4","title":"F4","text":"<p>\u2022 F4 = <code>\"\ue034\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/action.ts:164</p>"},{"location":"reference/enums/appium_types.Key/#f5","title":"F5","text":"<p>\u2022 F5 = <code>\"\ue035\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/action.ts:165</p>"},{"location":"reference/enums/appium_types.Key/#f6","title":"F6","text":"<p>\u2022 F6 = <code>\"\ue036\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/action.ts:166</p>"},{"location":"reference/enums/appium_types.Key/#f7","title":"F7","text":"<p>\u2022 F7 = <code>\"\ue037\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/action.ts:167</p>"},{"location":"reference/enums/appium_types.Key/#f8","title":"F8","text":"<p>\u2022 F8 = <code>\"\ue038\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/action.ts:168</p>"},{"location":"reference/enums/appium_types.Key/#f9","title":"F9","text":"<p>\u2022 F9 = <code>\"\ue039\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/action.ts:169</p>"},{"location":"reference/enums/appium_types.Key/#help","title":"HELP","text":"<p>\u2022 HELP = <code>\"\ue002\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/action.ts:121</p>"},{"location":"reference/enums/appium_types.Key/#home","title":"HOME","text":"<p>\u2022 HOME = <code>\"\ue011\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/action.ts:136</p>"},{"location":"reference/enums/appium_types.Key/#insert","title":"INSERT","text":"<p>\u2022 INSERT = <code>\"\ue016\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/action.ts:141</p>"},{"location":"reference/enums/appium_types.Key/#left","title":"LEFT","text":"<p>\u2022 LEFT = <code>\"\ue012\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/action.ts:137</p>"},{"location":"reference/enums/appium_types.Key/#meta","title":"META","text":"<p>\u2022 META = <code>\"\ue03d\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_30","title":"Defined in","text":"<p>packages/types/lib/action.ts:173</p>"},{"location":"reference/enums/appium_types.Key/#multiply","title":"MULTIPLY","text":"<p>\u2022 MULTIPLY = <code>\"\ue024\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_31","title":"Defined in","text":"<p>packages/types/lib/action.ts:155</p>"},{"location":"reference/enums/appium_types.Key/#null","title":"NULL","text":"<p>\u2022 NULL = <code>\"\ue000\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_32","title":"Defined in","text":"<p>packages/types/lib/action.ts:119</p>"},{"location":"reference/enums/appium_types.Key/#numpad0","title":"NUMPAD0","text":"<p>\u2022 NUMPAD0 = <code>\"\ue01a\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_33","title":"Defined in","text":"<p>packages/types/lib/action.ts:145</p>"},{"location":"reference/enums/appium_types.Key/#numpad1","title":"NUMPAD1","text":"<p>\u2022 NUMPAD1 = <code>\"\ue01b\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_34","title":"Defined in","text":"<p>packages/types/lib/action.ts:146</p>"},{"location":"reference/enums/appium_types.Key/#numpad2","title":"NUMPAD2","text":"<p>\u2022 NUMPAD2 = <code>\"\ue01c\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_35","title":"Defined in","text":"<p>packages/types/lib/action.ts:147</p>"},{"location":"reference/enums/appium_types.Key/#numpad3","title":"NUMPAD3","text":"<p>\u2022 NUMPAD3 = <code>\"\ue01d\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_36","title":"Defined in","text":"<p>packages/types/lib/action.ts:148</p>"},{"location":"reference/enums/appium_types.Key/#numpad4","title":"NUMPAD4","text":"<p>\u2022 NUMPAD4 = <code>\"\ue01e\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_37","title":"Defined in","text":"<p>packages/types/lib/action.ts:149</p>"},{"location":"reference/enums/appium_types.Key/#numpad5","title":"NUMPAD5","text":"<p>\u2022 NUMPAD5 = <code>\"\ue01f\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_38","title":"Defined in","text":"<p>packages/types/lib/action.ts:150</p>"},{"location":"reference/enums/appium_types.Key/#numpad6","title":"NUMPAD6","text":"<p>\u2022 NUMPAD6 = <code>\"\ue020\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_39","title":"Defined in","text":"<p>packages/types/lib/action.ts:151</p>"},{"location":"reference/enums/appium_types.Key/#numpad7","title":"NUMPAD7","text":"<p>\u2022 NUMPAD7 = <code>\"\ue021\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_40","title":"Defined in","text":"<p>packages/types/lib/action.ts:152</p>"},{"location":"reference/enums/appium_types.Key/#numpad8","title":"NUMPAD8","text":"<p>\u2022 NUMPAD8 = <code>\"\ue022\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_41","title":"Defined in","text":"<p>packages/types/lib/action.ts:153</p>"},{"location":"reference/enums/appium_types.Key/#numpad9","title":"NUMPAD9","text":"<p>\u2022 NUMPAD9 = <code>\"\ue023\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_42","title":"Defined in","text":"<p>packages/types/lib/action.ts:154</p>"},{"location":"reference/enums/appium_types.Key/#page_down","title":"PAGE_DOWN","text":"<p>\u2022 PAGE_DOWN = <code>\"\ue00f\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_43","title":"Defined in","text":"<p>packages/types/lib/action.ts:134</p>"},{"location":"reference/enums/appium_types.Key/#page_up","title":"PAGE_UP","text":"<p>\u2022 PAGE_UP = <code>\"\ue00e\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_44","title":"Defined in","text":"<p>packages/types/lib/action.ts:133</p>"},{"location":"reference/enums/appium_types.Key/#pause","title":"PAUSE","text":"<p>\u2022 PAUSE = <code>\"\ue00b\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_45","title":"Defined in","text":"<p>packages/types/lib/action.ts:130</p>"},{"location":"reference/enums/appium_types.Key/#return","title":"RETURN","text":"<p>\u2022 RETURN = <code>\"\ue006\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_46","title":"Defined in","text":"<p>packages/types/lib/action.ts:125</p>"},{"location":"reference/enums/appium_types.Key/#right","title":"RIGHT","text":"<p>\u2022 RIGHT = <code>\"\ue014\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_47","title":"Defined in","text":"<p>packages/types/lib/action.ts:139</p>"},{"location":"reference/enums/appium_types.Key/#r_alt","title":"R_ALT","text":"<p>\u2022 R_ALT = <code>\"\ue052\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_48","title":"Defined in","text":"<p>packages/types/lib/action.ts:177</p>"},{"location":"reference/enums/appium_types.Key/#r_arrowdown","title":"R_ARROWDOWN","text":"<p>\u2022 R_ARROWDOWN = <code>\"\ue05b\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_49","title":"Defined in","text":"<p>packages/types/lib/action.ts:186</p>"},{"location":"reference/enums/appium_types.Key/#r_arrowleft","title":"R_ARROWLEFT","text":"<p>\u2022 R_ARROWLEFT = <code>\"\ue058\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_50","title":"Defined in","text":"<p>packages/types/lib/action.ts:183</p>"},{"location":"reference/enums/appium_types.Key/#r_arrowright","title":"R_ARROWRIGHT","text":"<p>\u2022 R_ARROWRIGHT = <code>\"\ue05a\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_51","title":"Defined in","text":"<p>packages/types/lib/action.ts:185</p>"},{"location":"reference/enums/appium_types.Key/#r_arrowup","title":"R_ARROWUP","text":"<p>\u2022 R_ARROWUP = <code>\"\ue059\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_52","title":"Defined in","text":"<p>packages/types/lib/action.ts:184</p>"},{"location":"reference/enums/appium_types.Key/#r_control","title":"R_CONTROL","text":"<p>\u2022 R_CONTROL = <code>\"\ue051\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_53","title":"Defined in","text":"<p>packages/types/lib/action.ts:176</p>"},{"location":"reference/enums/appium_types.Key/#r_delete","title":"R_DELETE","text":"<p>\u2022 R_DELETE = <code>\"\ue05d\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_54","title":"Defined in","text":"<p>packages/types/lib/action.ts:188</p>"},{"location":"reference/enums/appium_types.Key/#r_end","title":"R_END","text":"<p>\u2022 R_END = <code>\"\ue056\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_55","title":"Defined in","text":"<p>packages/types/lib/action.ts:181</p>"},{"location":"reference/enums/appium_types.Key/#r_home","title":"R_HOME","text":"<p>\u2022 R_HOME = <code>\"\ue057\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_56","title":"Defined in","text":"<p>packages/types/lib/action.ts:182</p>"},{"location":"reference/enums/appium_types.Key/#r_insert","title":"R_INSERT","text":"<p>\u2022 R_INSERT = <code>\"\ue05c\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_57","title":"Defined in","text":"<p>packages/types/lib/action.ts:187</p>"},{"location":"reference/enums/appium_types.Key/#r_meta","title":"R_META","text":"<p>\u2022 R_META = <code>\"\ue053\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_58","title":"Defined in","text":"<p>packages/types/lib/action.ts:178</p>"},{"location":"reference/enums/appium_types.Key/#r_pagedown","title":"R_PAGEDOWN","text":"<p>\u2022 R_PAGEDOWN = <code>\"\ue055\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_59","title":"Defined in","text":"<p>packages/types/lib/action.ts:180</p>"},{"location":"reference/enums/appium_types.Key/#r_pageup","title":"R_PAGEUP","text":"<p>\u2022 R_PAGEUP = <code>\"\ue054\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_60","title":"Defined in","text":"<p>packages/types/lib/action.ts:179</p>"},{"location":"reference/enums/appium_types.Key/#r_shift","title":"R_SHIFT","text":"<p>\u2022 R_SHIFT = <code>\"\ue050\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_61","title":"Defined in","text":"<p>packages/types/lib/action.ts:175</p>"},{"location":"reference/enums/appium_types.Key/#semicolon","title":"SEMICOLON","text":"<p>\u2022 SEMICOLON = <code>\"\ue018\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_62","title":"Defined in","text":"<p>packages/types/lib/action.ts:143</p>"},{"location":"reference/enums/appium_types.Key/#separator","title":"SEPARATOR","text":"<p>\u2022 SEPARATOR = <code>\"\ue026\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_63","title":"Defined in","text":"<p>packages/types/lib/action.ts:157</p>"},{"location":"reference/enums/appium_types.Key/#shift","title":"SHIFT","text":"<p>\u2022 SHIFT = <code>\"\ue008\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_64","title":"Defined in","text":"<p>packages/types/lib/action.ts:127</p>"},{"location":"reference/enums/appium_types.Key/#space","title":"SPACE","text":"<p>\u2022 SPACE = <code>\"\ue00d\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_65","title":"Defined in","text":"<p>packages/types/lib/action.ts:132</p>"},{"location":"reference/enums/appium_types.Key/#subtract","title":"SUBTRACT","text":"<p>\u2022 SUBTRACT = <code>\"\ue027\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_66","title":"Defined in","text":"<p>packages/types/lib/action.ts:158</p>"},{"location":"reference/enums/appium_types.Key/#tab","title":"TAB","text":"<p>\u2022 TAB = <code>\"\ue004\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_67","title":"Defined in","text":"<p>packages/types/lib/action.ts:123</p>"},{"location":"reference/enums/appium_types.Key/#up","title":"UP","text":"<p>\u2022 UP = <code>\"\ue013\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_68","title":"Defined in","text":"<p>packages/types/lib/action.ts:138</p>"},{"location":"reference/enums/appium_types.Key/#zenkakuhankaku","title":"ZENKAKUHANKAKU","text":"<p>\u2022 ZENKAKUHANKAKU = <code>\"\ue040\"</code></p>"},{"location":"reference/enums/appium_types.Key/#defined-in_69","title":"Defined in","text":"<p>packages/types/lib/action.ts:174</p>"},{"location":"reference/interfaces/appium.ServerInitData/","title":"Interface: ServerInitData&lt;&gt;","text":"<p>appium.ServerInitData</p>"},{"location":"reference/interfaces/appium.ServerInitData/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium.ServerInitData/#properties","title":"Properties","text":"<ul> <li>appiumDriver</li> <li>parsedArgs</li> </ul>"},{"location":"reference/interfaces/appium.ServerInitData/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium.ServerInitData/#appiumdriver","title":"appiumDriver","text":"<p>\u2022 appiumDriver: <code>AppiumDriver</code></p> <p>The Appium driver</p>"},{"location":"reference/interfaces/appium.ServerInitData/#defined-in","title":"Defined in","text":"<p>packages/appium/lib/main.js:498</p>"},{"location":"reference/interfaces/appium.ServerInitData/#parsedargs","title":"parsedArgs","text":"<p>\u2022 parsedArgs: <code>ParsedArgs</code>&lt;<code>\"server\"</code>, <code>void</code>&gt;</p> <p>The parsed arguments</p>"},{"location":"reference/interfaces/appium.ServerInitData/#defined-in_1","title":"Defined in","text":"<p>packages/appium/lib/main.js:499</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/","title":"Interface: ServerOpts&lt;&gt;","text":"<p>@appium/base-driver.ServerOpts</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#properties","title":"Properties","text":"<ul> <li>allowCors</li> <li>basePath</li> <li>cliArgs</li> <li>extraMethodMap</li> <li>hostname</li> <li>keepAliveTimeout</li> <li>port</li> <li>routeConfiguringFunction</li> <li>serverUpdaters</li> </ul>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#allowcors","title":"allowCors","text":"<p>\u2022 allowCors: <code>undefined</code> | <code>boolean</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:304</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>undefined</code> | <code>string</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:305</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>undefined</code> | <code>ServerArgs</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:302</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#extramethodmap","title":"extraMethodMap","text":"<p>\u2022 extraMethodMap: <code>undefined</code> | <code>Readonly</code>&lt;<code>DriverMethodMap</code>&lt;<code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;&gt;&gt;</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:306</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#hostname","title":"hostname","text":"<p>\u2022 hostname: <code>undefined</code> | <code>string</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:303</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#keepalivetimeout","title":"keepAliveTimeout","text":"<p>\u2022 keepAliveTimeout: <code>undefined</code> | <code>number</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_5","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:308</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#port","title":"port","text":"<p>\u2022 port: <code>number</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:301</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#routeconfiguringfunction","title":"routeConfiguringFunction","text":"<p>\u2022 routeConfiguringFunction: <code>RouteConfiguringFunction</code></p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_7","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:300</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#serverupdaters","title":"serverUpdaters","text":"<p>\u2022 serverUpdaters: <code>undefined</code> | <code>UpdateServerCallback</code>[]</p>"},{"location":"reference/interfaces/appium_base_driver.ServerOpts/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:307</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/","title":"Interface: Plugin","text":"<p>@appium/base-plugin.Plugin</p> <p>An instance of a \"plugin\" extension.</p> <p>Likewise, the <code>prototype</code> of a PluginClass <code>Plugin</code> class.</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_base_plugin.Plugin/#properties","title":"Properties","text":"<ul> <li>cliArgs</li> <li>handle</li> <li>logger</li> <li>name</li> <li>onUnexpectedShutdown</li> </ul>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_base_plugin.Plugin/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p> <p>CLI args for this plugin (if any are accepted and provided).</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#defined-in","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:67</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#handle","title":"handle","text":"<p>\u2022 <code>Optional</code> handle: <code>PluginCommand</code>&lt;<code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;, [cmdName: string, ...args: any[]], <code>void</code>, <code>unknown</code>&gt;</p> <p>Handle an Appium command, optionally running and using or throwing away the value of the original Appium behavior (or the behavior of the next plugin in a plugin chain).</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#defined-in_1","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:76</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#logger","title":"logger","text":"<p>\u2022 logger: <code>AppiumLogger</code></p> <p>A logger with prefix identifying the plugin</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#defined-in_2","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:63</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p> <p>Name of the plugin.  Derived from the metadata.</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#defined-in_3","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:59</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u2022 <code>Optional</code> onUnexpectedShutdown: (<code>driver</code>: <code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;, <code>cause</code>: <code>string</code> | <code>Error</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>driver</code>, <code>cause</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Listener for unexpected server shutdown, which allows a plugin to do cleanup or take custom actions.</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#parameters","title":"Parameters","text":"Name Type <code>driver</code> <code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt; <code>cause</code> <code>string</code> | <code>Error</code>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_base_plugin.Plugin/#defined-in_4","title":"Defined in","text":"<p>packages/types/build/lib/plugin.d.ts:71</p>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/","title":"Interface: W3CCapabilities&lt;C&gt;","text":"<p>@appium/driver-test-support.W3CCapabilities</p> <p>Like Capabilities, except W3C-style.</p> <p>Does not contain BaseCapabilities; see W3CDriverCaps.</p>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#properties","title":"Properties","text":"<ul> <li>alwaysMatch</li> <li>firstMatch</li> </ul>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#alwaysmatch","title":"alwaysMatch","text":"<p>\u2022 alwaysMatch: <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#defined-in","title":"Defined in","text":"<p>packages/types/build/lib/capabilities.d.ts:74</p>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#firstmatch","title":"firstMatch","text":"<p>\u2022 firstMatch: <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;[]</p>"},{"location":"reference/interfaces/appium_driver_test_support.W3CCapabilities/#defined-in_1","title":"Defined in","text":"<p>packages/types/build/lib/capabilities.d.ts:75</p>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/","title":"Interface: MatchComputationResult&lt;&gt;","text":"<p>@appium/opencv.MatchComputationResult</p>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#properties","title":"Properties","text":"<ul> <li>descriptor</li> <li>keyPoints</li> </ul>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#descriptor","title":"descriptor","text":"<p>\u2022 descriptor: <code>any</code></p> <p>OpenCV match descriptor</p>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:99</p>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#keypoints","title":"keyPoints","text":"<p>\u2022 keyPoints: <code>any</code></p> <p>The array of key points</p>"},{"location":"reference/interfaces/appium_opencv.MatchComputationResult/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:100</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/","title":"Interface: MatchingOptions&lt;&gt;","text":"<p>@appium/opencv.MatchingOptions</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#properties","title":"Properties","text":"<ul> <li>detectorName</li> <li>goodMatchesFactor</li> <li>matchFunc</li> <li>visualize</li> </ul>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#detectorname","title":"detectorName","text":"<p>\u2022 detectorName: <code>string</code></p> <p>['ORB'] One of possible OpenCV feature detector names from keys of the <code>AVAILABLE_DETECTORS</code> object. Some of these methods (FAST, AGAST, GFTT, FAST, SIFT and MSER) are not available in the default OpenCV installation and have to be enabled manually before library compilation.</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:194</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#goodmatchesfactor","title":"goodMatchesFactor","text":"<p>\u2022 goodMatchesFactor: <code>null</code> | <code>number</code> | <code>Function</code></p> <p>The maximum count of \"good\" matches (e. g. with minimal distances) or a function, which accepts 3 arguments: the current distance, minimal distance, maximum distance and returns true or false to include or exclude the match.</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:201</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#matchfunc","title":"matchFunc","text":"<p>\u2022 matchFunc: <code>string</code></p> <p>['BruteForce'] The name of the matching function. Should be one of the keys of the <code>AVAILABLE_MATCHING_FUNCTIONS</code> object.</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:199</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#visualize","title":"visualize","text":"<p>\u2022 visualize: <code>null</code> | <code>boolean</code></p> <p>[false] Whether to return the resulting visalization as an image (useful for debugging purposes)</p>"},{"location":"reference/interfaces/appium_opencv.MatchingOptions/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:204</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/","title":"Interface: MatchingResult&lt;&gt;","text":"<p>@appium/opencv.MatchingResult</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.MatchingResult/#properties","title":"Properties","text":"<ul> <li>count</li> <li>points1</li> <li>points2</li> <li>rect1</li> <li>rect2</li> <li>totalCount</li> <li>visualization</li> </ul>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.MatchingResult/#count","title":"count","text":"<p>\u2022 count: <code>number</code></p> <p>The count of matched edges on both images. The more matching edges there are no both images the more similar they are.</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:210</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#points1","title":"points1","text":"<p>\u2022 points1: <code>Point</code>[]</p> <p>The array of matching points on the first image</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:219</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#points2","title":"points2","text":"<p>\u2022 points2: <code>Point</code>[]</p> <p>The array of matching points on the second image</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:222</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#rect1","title":"rect1","text":"<p>\u2022 rect1: <code>Rect</code></p> <p>The bounding rect for the <code>matchedPoints1</code> set or a zero rect if not enough matching points are found</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:220</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#rect2","title":"rect2","text":"<p>\u2022 rect2: <code>Rect</code></p> <p>The bounding rect for the <code>matchedPoints2</code> set or a zero rect if not enough matching points are found</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_4","title":"Defined in","text":"<p>packages/opencv/lib/index.js:223</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#totalcount","title":"totalCount","text":"<p>\u2022 totalCount: <code>number</code></p> <p>The total count of matched edges on both images. It is equal to <code>count</code> if <code>goodMatchesFactor</code> does not limit the matches, otherwise it contains the total count of matches before <code>goodMatchesFactor</code> is applied.</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_5","title":"Defined in","text":"<p>packages/opencv/lib/index.js:212</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#visualization","title":"visualization","text":"<p>\u2022 visualization: <code>null</code> | <code>Buffer</code></p> <p>The visualization of the matching result represented as PNG image buffer. This visualization looks like https://user-images.githubusercontent.com/31125521/29702731-c79e3142-8972-11e7-947e-db109d415469.jpg</p>"},{"location":"reference/interfaces/appium_opencv.MatchingResult/#defined-in_6","title":"Defined in","text":"<p>packages/opencv/lib/index.js:216</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/","title":"Interface: OccurrenceOptions&lt;&gt;","text":"<p>@appium/opencv.OccurrenceOptions</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#properties","title":"Properties","text":"<ul> <li>matchNeighbourThreshold</li> <li>multiple</li> <li>threshold</li> <li>visualize</li> </ul>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#matchneighbourthreshold","title":"matchNeighbourThreshold","text":"<p>\u2022 matchNeighbourThreshold: <code>undefined</code> | <code>number</code></p> <p>The pixel distance between matches we consider to be part of the same template match</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:459</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#multiple","title":"multiple","text":"<p>\u2022 multiple: <code>undefined</code> | <code>number</code> | <code>boolean</code></p> <p>find multiple matches in the image</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:458</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#threshold","title":"threshold","text":"<p>\u2022 threshold: <code>undefined</code> | <code>number</code></p> <p>At what normalized threshold to reject a match</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:456</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#visualize","title":"visualize","text":"<p>\u2022 visualize: <code>undefined</code> | <code>boolean</code></p> <p>Whether to return the resulting visalization as an image (useful for debugging purposes)</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceOptions/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:454</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/","title":"Interface: OccurrenceResult&lt;&gt;","text":"<p>@appium/opencv.OccurrenceResult</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#properties","title":"Properties","text":"<ul> <li>method</li> <li>multiple</li> <li>rect</li> <li>score</li> <li>visualization</li> </ul>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#method","title":"method","text":"<p>\u2022 method: <code>undefined</code> | <code>OccurrenceResultMethod</code></p> <p>The name of the template matching method. Acceptable values are: - <code>TM_CCOEFF</code> - <code>TM_CCOEFF_NORMED</code> (default) - <code>TM_CCORR</code> - <code>TM_CCORR_NORMED</code> - <code>TM_SQDIFF</code> - <code>TM_SQDIFF_NORMED</code> Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html for more details.</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:479</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#multiple","title":"multiple","text":"<p>\u2022 multiple: <code>OccurrenceResult</code>[]</p> <p>The array of matching OccurenceResults - only when multiple option is passed</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:477</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#rect","title":"rect","text":"<p>\u2022 rect: <code>Rect</code></p> <p>The region of the partial image occurence on the full image</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:469</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#score","title":"score","text":"<p>\u2022 score: <code>number</code></p> <p>The similarity score as a float number in range [0.0, 1.0]. 1.0 is the highest score (means both images are totally equal).</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:475</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#visualization","title":"visualization","text":"<p>\u2022 visualization: <code>Buffer</code></p> <p>The visualization of the matching result represented as PNG image buffer. On this image the matching region is highlighted with a rectangle. If the multiple option is passed, all results are highlighted here.</p>"},{"location":"reference/interfaces/appium_opencv.OccurrenceResult/#defined-in_4","title":"Defined in","text":"<p>packages/opencv/lib/index.js:471</p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/","title":"Interface: OpenCVBindings&lt;&gt;","text":"<p>@appium/opencv.OpenCVBindings</p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#properties","title":"Properties","text":"<ul> <li>FeatureDetector</li> <li>KeyPointVector</li> <li>Mat</li> </ul>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#featuredetector","title":"FeatureDetector","text":"<p>\u2022 FeatureDetector: <code>any</code></p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:676</p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#keypointvector","title":"KeyPointVector","text":"<p>\u2022 KeyPointVector: <code>any</code></p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:675</p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#mat","title":"Mat","text":"<p>\u2022 Mat: <code>any</code></p>"},{"location":"reference/interfaces/appium_opencv.OpenCVBindings/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:674</p>"},{"location":"reference/interfaces/appium_opencv.Point/","title":"Interface: Point&lt;&gt;","text":"<p>@appium/opencv.Point</p>"},{"location":"reference/interfaces/appium_opencv.Point/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.Point/#properties","title":"Properties","text":"<ul> <li>x</li> <li>y</li> </ul>"},{"location":"reference/interfaces/appium_opencv.Point/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.Point/#x","title":"x","text":"<p>\u2022 x: <code>number</code></p> <p>The x coordinate</p>"},{"location":"reference/interfaces/appium_opencv.Point/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:20</p>"},{"location":"reference/interfaces/appium_opencv.Point/#y","title":"y","text":"<p>\u2022 y: <code>number</code></p> <p>The y coordinate</p>"},{"location":"reference/interfaces/appium_opencv.Point/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:21</p>"},{"location":"reference/interfaces/appium_opencv.Rect/","title":"Interface: Rect&lt;&gt;","text":"<p>@appium/opencv.Rect</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.Rect/#properties","title":"Properties","text":"<ul> <li>height</li> <li>width</li> <li>x</li> <li>y</li> </ul>"},{"location":"reference/interfaces/appium_opencv.Rect/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.Rect/#height","title":"height","text":"<p>\u2022 height: <code>number</code></p> <p>The height</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:29</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#width","title":"width","text":"<p>\u2022 width: <code>number</code></p> <p>The width</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:28</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#x","title":"x","text":"<p>\u2022 x: <code>number</code></p> <p>The top left coordinate</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:26</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#y","title":"y","text":"<p>\u2022 y: <code>number</code></p> <p>The bottom right coordinate</p>"},{"location":"reference/interfaces/appium_opencv.Rect/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:27</p>"},{"location":"reference/interfaces/appium_opencv.Region/","title":"Interface: Region&lt;&gt;","text":"<p>@appium/opencv.Region</p>"},{"location":"reference/interfaces/appium_opencv.Region/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.Region/#properties","title":"Properties","text":"<ul> <li>height</li> <li>left</li> <li>top</li> <li>width</li> </ul>"},{"location":"reference/interfaces/appium_opencv.Region/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.Region/#height","title":"height","text":"<p>\u2022 height: <code>number</code></p> <p>The height</p>"},{"location":"reference/interfaces/appium_opencv.Region/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:15</p>"},{"location":"reference/interfaces/appium_opencv.Region/#left","title":"left","text":"<p>\u2022 left: <code>number</code></p> <p>The offset from the left side</p>"},{"location":"reference/interfaces/appium_opencv.Region/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:12</p>"},{"location":"reference/interfaces/appium_opencv.Region/#top","title":"top","text":"<p>\u2022 top: <code>number</code></p> <p>The offset from the top</p>"},{"location":"reference/interfaces/appium_opencv.Region/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:13</p>"},{"location":"reference/interfaces/appium_opencv.Region/#width","title":"width","text":"<p>\u2022 width: <code>number</code></p> <p>The width</p>"},{"location":"reference/interfaces/appium_opencv.Region/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:14</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/","title":"Interface: SimilarityOptions&lt;&gt;","text":"<p>@appium/opencv.SimilarityOptions</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#properties","title":"Properties","text":"<ul> <li>method</li> <li>visualize</li> </ul>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#method","title":"method","text":"<p>\u2022 method: <code>string</code></p> <p>[TM_CCOEFF_NORMED] The name of the template matching method. Acceptable values are: - <code>TM_CCOEFF</code> - <code>TM_CCOEFF_NORMED</code> (default) - <code>TM_CCORR</code> - <code>TM_CCORR_NORMED</code> - <code>TM_SQDIFF</code> - <code>TM_SQDIFF_NORMED</code> Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html for more details.</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:361</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#visualize","title":"visualize","text":"<p>\u2022 visualize: <code>null</code> | <code>boolean</code></p> <p>[false] Whether to return the resulting visalization as an image (useful for debugging purposes)</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityOptions/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:359</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/","title":"Interface: SimilarityResult&lt;&gt;","text":"<p>@appium/opencv.SimilarityResult</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#properties","title":"Properties","text":"<ul> <li>score</li> <li>visualization</li> </ul>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#score","title":"score","text":"<p>\u2022 score: <code>number</code></p> <p>The similarity score as a float number in range [0.0, 1.0]. 1.0 is the highest score (means both images are totally equal).</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:375</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#visualization","title":"visualization","text":"<p>\u2022 visualization: <code>null</code> | <code>Buffer</code></p> <p>The visualization of the matching result represented as PNG image buffer. This image includes both input pictures where difference regions are highlighted with rectangles.</p>"},{"location":"reference/interfaces/appium_opencv.SimilarityResult/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:377</p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/","title":"Interface: AppiumEnv","text":"<p>@appium/plugin-test-support.AppiumEnv</p> <p>Known environment variables concerning Appium</p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ProcessEnv</code></li> </ul> <p>\u21b3 <code>AppiumEnv</code></p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#properties","title":"Properties","text":"<ul> <li>APPIUM_HOME</li> <li>TZ</li> </ul>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#appium_home","title":"APPIUM_HOME","text":"<p>\u2022 <code>Optional</code> APPIUM_HOME: <code>string</code></p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#defined-in","title":"Defined in","text":"<p>packages/appium/types/index.ts:10</p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#tz","title":"TZ","text":"<p>\u2022 <code>Optional</code> TZ: <code>string</code></p> <p>Can be used to change the default timezone at runtime</p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#inherited-from","title":"Inherited from","text":"<p>NodeJS.ProcessEnv.TZ</p>"},{"location":"reference/interfaces/appium_plugin_test_support.AppiumEnv/#defined-in_1","title":"Defined in","text":"<p>node_modules/@types/node/process.d.ts:116</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/","title":"Interface: E2ESetupOpts&lt;&gt;","text":"<p>@appium/plugin-test-support.E2ESetupOpts</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#properties","title":"Properties","text":"<ul> <li>after</li> <li>appiumHome</li> <li>before</li> <li>driverName</li> <li>driverPackage</li> <li>driverSource</li> <li>driverSpec</li> <li>host</li> <li>pluginName</li> <li>pluginPackage</li> <li>pluginSource</li> <li>pluginSpec</li> <li>port</li> <li>serverArgs</li> </ul>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#after","title":"after","text":"<p>\u2022 after: <code>HookFunction</code></p> <p>Mocha \"after all\" hook function</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:143</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#appiumhome","title":"appiumHome","text":"<p>\u2022 appiumHome: <code>undefined</code> | <code>string</code></p> <p>Path to Appium home directory</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_1","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:141</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#before","title":"before","text":"<p>\u2022 before: <code>HookFunction</code></p> <p>Mocha \"before all\" hook function</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_2","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:142</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#drivername","title":"driverName","text":"<p>\u2022 driverName: <code>string</code></p> <p>Name of driver to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_3","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:147</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#driverpackage","title":"driverPackage","text":"<p>\u2022 driverPackage: <code>undefined</code> | <code>string</code></p> <p>Package name of driver to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_4","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:146</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#driversource","title":"driverSource","text":"<p>\u2022 driverSource: <code>\"npm\"</code> | <code>\"git\"</code> | <code>\"local\"</code> | <code>\"github\"</code> | <code>\"dev\"</code></p> <p>Source of driver to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_5","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:145</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#driverspec","title":"driverSpec","text":"<p>\u2022 driverSpec: <code>string</code></p> <p>Spec of driver to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_6","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:148</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#host","title":"host","text":"<p>\u2022 host: <code>undefined</code> | <code>string</code></p> <p>Host to use for Appium server</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_7","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:154</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#pluginname","title":"pluginName","text":"<p>\u2022 pluginName: <code>string</code></p> <p>Name of plugin to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_8","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:152</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#pluginpackage","title":"pluginPackage","text":"<p>\u2022 pluginPackage: <code>undefined</code> | <code>string</code></p> <p>Package name of plugin to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_9","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:150</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#pluginsource","title":"pluginSource","text":"<p>\u2022 pluginSource: <code>\"npm\"</code> | <code>\"git\"</code> | <code>\"local\"</code> | <code>\"github\"</code> | <code>\"dev\"</code></p> <p>Source of plugin to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_10","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:149</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#pluginspec","title":"pluginSpec","text":"<p>\u2022 pluginSpec: <code>string</code></p> <p>Spec of plugin to install</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_11","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:151</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#port","title":"port","text":"<p>\u2022 port: <code>undefined</code> | <code>number</code></p> <p>Port to use for Appium server</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_12","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:153</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#serverargs","title":"serverArgs","text":"<p>\u2022 serverArgs: <code>undefined</code> | <code>Partial</code>&lt;{ <code>address</code>: <code>undefined</code> | <code>string</code> ; <code>allowCors</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>allowInsecure</code>: <code>undefined</code> | <code>AllowInsecureConfig</code> ; <code>appiumHome?</code>: <code>string</code> ; <code>basePath</code>: <code>undefined</code> | <code>string</code> ; <code>callbackAddress</code>: <code>undefined</code> | <code>string</code> ; <code>callbackPort</code>: <code>undefined</code> | <code>number</code> ; <code>configFile?</code>: <code>string</code> ; <code>debugLogSpacing</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>defaultCapabilities</code>: <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> ; <code>denyInsecure</code>: <code>undefined</code> | <code>DenyInsecureConfig</code> ; <code>driver</code>: <code>undefined</code> | <code>DriverConfig</code> ; <code>keepAliveTimeout</code>: <code>undefined</code> | <code>number</code> ; <code>localTimezone</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>logFile</code>: <code>undefined</code> | <code>string</code> ; <code>logFilters</code>: <code>undefined</code> | <code>LogFiltersConfig</code> ; <code>logHandler?</code>: (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> ; <code>logNoColors</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>logTimestamp</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>loglevel</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; ; <code>longStacktrace</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>noPermsCheck</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>nodeconfig</code>: <code>undefined</code> | <code>NodeconfigConfig</code> ; <code>plugin</code>: <code>undefined</code> | <code>PluginConfig</code> ; <code>port</code>: <code>undefined</code> | <code>number</code> ; <code>relaxedSecurityEnabled</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>sessionOverride</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>shell?</code>: <code>boolean</code> ; <code>showBuildInfo?</code>: <code>boolean</code> ; <code>showConfig?</code>: <code>boolean</code> ; <code>strictCaps</code>: <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; ; <code>subcommand?</code>: <code>CliCommand</code> ; <code>throwInsteadOfExit?</code>: <code>boolean</code> ; <code>tmpDir</code>: <code>undefined</code> | <code>string</code> ; <code>traceDir</code>: <code>undefined</code> | <code>string</code> ; <code>useDrivers</code>: <code>undefined</code> | <code>UseDriversConfig</code> ; <code>usePlugins</code>: <code>undefined</code> | <code>UsePluginsConfig</code> ; <code>webhook</code>: <code>undefined</code> | <code>string</code>  }&gt;</p> <p>Arguments to pass to Appium server</p>"},{"location":"reference/interfaces/appium_plugin_test_support.E2ESetupOpts/#defined-in_13","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:144</p>"},{"location":"reference/interfaces/appium_strongbox.Item/","title":"Interface: Item&lt;T&gt;","text":"<p>@appium/strongbox.Item</p> <p>An object representing a persisted item containing something of type <code>T</code> (which can be a Buffer or an encoded string; see <code>ItemEncoding</code>).</p> <p>A <code>Item</code> does not know anything about where it is stored, or how it is stored.</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#type-parameters","title":"Type parameters","text":"Name Type Description <code>T</code> extends <code>Value</code> Type of data stored in the item"},{"location":"reference/interfaces/appium_strongbox.Item/#implemented-by","title":"Implemented by","text":"<ul> <li><code>BaseItem</code></li> </ul>"},{"location":"reference/interfaces/appium_strongbox.Item/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_strongbox.Item/#properties","title":"Properties","text":"<ul> <li>encoding</li> <li>id</li> <li>name</li> <li>value</li> </ul>"},{"location":"reference/interfaces/appium_strongbox.Item/#methods","title":"Methods","text":"<ul> <li>clear</li> <li>read</li> <li>write</li> </ul>"},{"location":"reference/interfaces/appium_strongbox.Item/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_strongbox.Item/#encoding","title":"encoding","text":"<p>\u2022 encoding: <code>ItemEncoding</code></p> <p>Encoding of underlying value</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:29</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#id","title":"id","text":"<p>\u2022 id: <code>string</code></p> <p>Slugified name</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_1","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:33</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p> <p>Name of item</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_2","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:37</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#value","title":"value","text":"<p>\u2022 <code>Optional</code> value: <code>T</code></p> <p>Last known value (stored in memory)</p> <p><code>Remarks</code></p> <p>A custom <code>Item</code> meant to handle very large files should probably not implement this.</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_3","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:43</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_strongbox.Item/#clear","title":"clear","text":"<p>\u25b8 clear(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Deletes the item.</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_4","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:48</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#read","title":"read","text":"<p>\u25b8 read(): <code>Promise</code>&lt;<code>undefined</code> | <code>T</code>&gt;</p> <p>Reads value</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>undefined</code> | <code>T</code>&gt;</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_5","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:52</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#write","title":"write","text":"<p>\u25b8 write(<code>value</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Writes value</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#parameters","title":"Parameters","text":"Name Type Description <code>value</code> <code>T</code> New value"},{"location":"reference/interfaces/appium_strongbox.Item/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_strongbox.Item/#defined-in_6","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:57</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/","title":"Interface: StrongboxOpts","text":"<p>@appium/strongbox.StrongboxOpts</p> <p>Options for <code>strongbox</code></p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#properties","title":"Properties","text":"<ul> <li>container</li> <li>defaultItemCtor</li> <li>suffix</li> </ul>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#container","title":"container","text":"<p>\u2022 container: <code>string</code></p> <p>Override default container, which is chosen according to environment.</p> <p>This must be a writable path.</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#defined-in","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:312</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#defaultitemctor","title":"defaultItemCtor","text":"<p>\u2022 defaultItemCtor: <code>ItemCtor</code>&lt;<code>any</code>, <code>StrongboxOpts</code>, <code>Strongbox</code>&lt;<code>StrongboxOpts</code>&gt;&gt;</p> <p>Default <code>Item</code> constructor.</p> <p>Unless a constructor is specified when calling <code>createItem</code> or <code>createItemWithValue</code>, this will be used.</p> <p><code>Default Value</code></p> <p>BaseItem</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#defined-in_1","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:319</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#suffix","title":"suffix","text":"<p>\u2022 suffix: <code>string</code></p> <p>Extra subdir to append to the auto-generated file directory hierarchy.</p> <p>This is ignored if <code>container</code> is provided.</p> <p><code>Default Value</code></p> <p>'strongbox'</p>"},{"location":"reference/interfaces/appium_strongbox.StrongboxOpts/#defined-in_2","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:326</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/","title":"Interface: ConvertResult","text":"<p>@appium/typedoc-plugin-appium.ConvertResult</p> <p>Resolved value of <code>convert</code></p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#properties","title":"Properties","text":"<ul> <li>ctx</li> <li>extensionReflections</li> <li>projectCommands</li> </ul>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#ctx","title":"ctx","text":"<p>\u2022 ctx: <code>Context</code></p> <p>Context at time of Context.EVENT_RESOLVE_END</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:100</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#extensionreflections","title":"extensionReflections","text":"<p>\u2022 <code>Optional</code> extensionReflections: <code>ExtensionReflection</code>[]</p> <p>List of custom reflections created by the plugin</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:108</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#projectcommands","title":"projectCommands","text":"<p>\u2022 <code>Optional</code> projectCommands: <code>ProjectCommands</code></p> <p>Raw data structure containing everything about commands in the project</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.ConvertResult/#defined-in_2","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:104</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/","title":"Interface: PostProcessResult","text":"<p>@appium/typedoc-plugin-appium.PostProcessResult</p> <p>Result of <code>postProcess</code></p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#properties","title":"Properties","text":"<ul> <li>ctx</li> <li>removed</li> </ul>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#ctx","title":"ctx","text":"<p>\u2022 ctx: <code>Context</code></p> <p>Context at time of Context.EVENT_RESOLVE_END</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:153</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#removed","title":"removed","text":"<p>\u2022 <code>Optional</code> removed: <code>Set</code>&lt;<code>DeclarationReflection</code>&gt;</p> <p>A list of DeclarationReflection DeclarationReflections which were removed from the project, if any.</p>"},{"location":"reference/interfaces/appium_typedoc_plugin_appium.PostProcessResult/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:149</p>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/","title":"Interface: AppiumConfiguration","text":"<p>@appium/types.AppiumConfiguration</p> <p>A schema for Appium configuration files</p>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#properties","title":"Properties","text":"<ul> <li>$schema</li> <li>server</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#schema","title":"$schema","text":"<p>\u2022 <code>Optional</code> $schema: <code>string</code></p> <p>The JSON schema for this file</p>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#defined-in","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:156</p>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#server","title":"server","text":"<p>\u2022 <code>Optional</code> server: <code>ServerConfig</code></p>"},{"location":"reference/interfaces/appium_types.AppiumConfiguration/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:157</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/","title":"Interface: AppiumLogger","text":"<p>@appium/types.AppiumLogger</p> <p>Describes the <code>npmlog</code>-based internal logger.</p> <p><code>See</code></p> <p>https://npm.im/npmlog</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.AppiumLogger/#properties","title":"Properties","text":"<ul> <li>level</li> <li>levels</li> <li>prefix</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#methods","title":"Methods","text":"<ul> <li>debug</li> <li>error</li> <li>errorAndThrow</li> <li>http</li> <li>info</li> <li>silly</li> <li>unwrap</li> <li>verbose</li> <li>warn</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.AppiumLogger/#level","title":"level","text":"<p>\u2022 level: <code>AppiumLoggerLevel</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in","title":"Defined in","text":"<p>packages/types/lib/logger.ts:27</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#levels","title":"levels","text":"<p>\u2022 levels: <code>AppiumLoggerLevel</code>[]</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/logger.ts:28</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#prefix","title":"prefix","text":"<p>\u2022 <code>Optional</code> prefix: <code>AppiumLoggerPrefix</code></p> <p>Log prefix, if applicable.</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/logger.ts:32</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.AppiumLogger/#debug","title":"debug","text":"<p>\u25b8 debug(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/logger.ts:33</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#error","title":"error","text":"<p>\u25b8 error(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_1","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/logger.ts:36</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#errorandthrow","title":"errorAndThrow","text":"<p>\u25b8 errorAndThrow(<code>...args</code>): <code>never</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_2","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_2","title":"Returns","text":"<p><code>never</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/logger.ts:40</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#http","title":"http","text":"<p>\u25b8 http(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_3","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/logger.ts:39</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#info","title":"info","text":"<p>\u25b8 info(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_4","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/logger.ts:34</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#silly","title":"silly","text":"<p>\u25b8 silly(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_5","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/logger.ts:38</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#unwrap","title":"unwrap","text":"<p>\u25b8 unwrap(): <code>Logger</code></p> <p>Returns the underlying <code>npmlog</code> Logger.</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_6","title":"Returns","text":"<p><code>Logger</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/logger.ts:26</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#verbose","title":"verbose","text":"<p>\u25b8 verbose(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_6","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/logger.ts:37</p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#warn","title":"warn","text":"<p>\u25b8 warn(<code>...args</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#parameters_7","title":"Parameters","text":"Name Type <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumLogger/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumLogger/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/logger.ts:35</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/","title":"Interface: AppiumServerExtension","text":"<p>@appium/types.AppiumServerExtension</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#properties","title":"Properties","text":"<ul> <li>webSocketsMapping</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#methods","title":"Methods","text":"<ul> <li>addWebSocketHandler</li> <li>close</li> <li>getWebSocketHandlers</li> <li>removeAllWebSocketHandlers</li> <li>removeWebSocketHandler</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#websocketsmapping","title":"webSocketsMapping","text":"<p>\u2022 webSocketsMapping: <code>Record</code>&lt;<code>string</code>, <code>WSServer</code>&lt;typeof <code>WebSocket</code>, typeof <code>IncomingMessage</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in","title":"Defined in","text":"<p>packages/types/lib/server.ts:47</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#addwebsockethandler","title":"addWebSocketHandler","text":"<p>\u25b8 addWebSocketHandler(<code>this</code>, <code>handlerPathname</code>, <code>handlerServer</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Adds websocket handler to an <code>AppiumServer</code>.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#parameters","title":"Parameters","text":"Name Type Description <code>this</code> <code>AppiumServer</code> - <code>handlerPathname</code> <code>string</code> Web socket endpoint path starting with a single slash character. It is recommended to always prepend <code>/ws</code> to all web socket pathnames. <code>handlerServer</code> <code>WSServer</code>&lt;typeof <code>WebSocket</code>, typeof <code>IncomingMessage</code>&gt; WebSocket server instance. See https://github.com/websockets/ws/pull/885 for more details on how to configure the handler properly."},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/server.ts:19</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#close","title":"close","text":"<p>\u25b8 close(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/server.ts:13</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#getwebsockethandlers","title":"getWebSocketHandlers","text":"<p>\u25b8 getWebSocketHandlers(<code>this</code>, <code>keysFilter?</code>): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>WSServer</code>&lt;typeof <code>WebSocket</code>, typeof <code>IncomingMessage</code>&gt;&gt;&gt;</p> <p>Returns web socket handlers registered for the given server instance.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#parameters_1","title":"Parameters","text":"Name Type Description <code>this</code> <code>AppiumServer</code> - <code>keysFilter?</code> <code>null</code> | <code>string</code> Only include pathnames with given value if set. All pairs will be included by default."},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>WSServer</code>&lt;typeof <code>WebSocket</code>, typeof <code>IncomingMessage</code>&gt;&gt;&gt;</p> <p>Pathnames to WS server instances mapping matching the search criteria, if any found.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/server.ts:43</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#removeallwebsockethandlers","title":"removeAllWebSocketHandlers","text":"<p>\u25b8 removeAllWebSocketHandlers(<code>this</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Removes all existing WebSocket handlers from the server instance.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#parameters_2","title":"Parameters","text":"Name Type <code>this</code> <code>AppiumServer</code>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p><code>true</code> if at least one handler was deleted; <code>false</code> otherwise.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/server.ts:36</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#removewebsockethandler","title":"removeWebSocketHandler","text":"<p>\u25b8 removeWebSocketHandler(<code>this</code>, <code>handlerPathname</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Removes existing WebSocket handler from the server instance.</p> <p>The call is ignored if the given <code>handlerPathname</code> handler is not present in the handlers list.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#parameters_3","title":"Parameters","text":"Name Type Description <code>this</code> <code>AppiumServer</code> - <code>handlerPathname</code> <code>string</code> WebSocket endpoint path"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p><code>true</code> if the <code>handlerPathname</code> was found and deleted; <code>false</code> otherwise.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerExtension/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/server.ts:31</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/","title":"Interface: AppiumServerSocket","text":"<p>@appium/types.AppiumServerSocket</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Socket</code></li> </ul> <p>\u21b3 <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#properties","title":"Properties","text":"<ul> <li>_openReqCount</li> <li>allowHalfOpen</li> <li>bufferSize</li> <li>bytesRead</li> <li>bytesWritten</li> <li>closed</li> <li>connecting</li> <li>destroyed</li> <li>errored</li> <li>localAddress</li> <li>localFamily</li> <li>localPort</li> <li>pending</li> <li>readable</li> <li>readableAborted</li> <li>readableDidRead</li> <li>readableEncoding</li> <li>readableEnded</li> <li>readableFlowing</li> <li>readableHighWaterMark</li> <li>readableLength</li> <li>readableObjectMode</li> <li>readyState</li> <li>remoteAddress</li> <li>remoteFamily</li> <li>remotePort</li> <li>timeout</li> <li>writable</li> <li>writableCorked</li> <li>writableEnded</li> <li>writableFinished</li> <li>writableHighWaterMark</li> <li>writableLength</li> <li>writableNeedDrain</li> <li>writableObjectMode</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#methods","title":"Methods","text":"<ul> <li>[asyncIterator]</li> <li>_construct</li> <li>_destroy</li> <li>_final</li> <li>_read</li> <li>_write</li> <li>_writev</li> <li>addListener</li> <li>address</li> <li>connect</li> <li>cork</li> <li>destroy</li> <li>emit</li> <li>end</li> <li>eventNames</li> <li>getMaxListeners</li> <li>isPaused</li> <li>listenerCount</li> <li>listeners</li> <li>off</li> <li>on</li> <li>once</li> <li>pause</li> <li>pipe</li> <li>prependListener</li> <li>prependOnceListener</li> <li>push</li> <li>rawListeners</li> <li>read</li> <li>ref</li> <li>removeAllListeners</li> <li>removeListener</li> <li>resetAndDestroy</li> <li>resume</li> <li>setDefaultEncoding</li> <li>setEncoding</li> <li>setKeepAlive</li> <li>setMaxListeners</li> <li>setNoDelay</li> <li>setTimeout</li> <li>uncork</li> <li>unpipe</li> <li>unref</li> <li>unshift</li> <li>wrap</li> <li>write</li> </ul>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_openreqcount","title":"_openReqCount","text":"<p>\u2022 _openReqCount: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in","title":"Defined in","text":"<p>packages/types/lib/server.ts:51</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#allowhalfopen","title":"allowHalfOpen","text":"<p>\u2022 allowHalfOpen: <code>boolean</code></p> <p>If <code>false</code> then the stream will automatically end the writable side when the readable side ends. Set initially by the <code>allowHalfOpen</code> constructor option, which defaults to <code>false</code>.</p> <p>This can be changed manually to change the half-open behavior of an existing<code>Duplex</code> stream instance, but must be changed before the <code>'end'</code> event is emitted.</p> <p><code>Since</code></p> <p>v0.9.4</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from","title":"Inherited from","text":"<p>Socket.allowHalfOpen</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_1","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:873</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#buffersize","title":"bufferSize","text":"<p>\u2022 <code>Readonly</code> bufferSize: <code>number</code></p> <p>This property shows the number of characters buffered for writing. The buffer may contain strings whose length after encoding is not yet known. So this number is only an approximation of the number of bytes in the buffer.</p> <p><code>net.Socket</code> has the property that <code>socket.write()</code> always works. This is to help users get up and running quickly. The computer cannot always keep up with the amount of data that is written to a socket. The network connection simply might be too slow. Node.js will internally queue up the data written to a socket and send it out over the wire when it is possible.</p> <p>The consequence of this internal buffering is that memory may grow. Users who experience large or growing <code>bufferSize</code> should attempt to \"throttle\" the data flows in their program with <code>socket.pause()</code> and <code>socket.resume()</code>.</p> <p><code>Since</code></p> <p>v0.3.8</p> <p><code>Deprecated</code></p> <p>Since v14.6.0 - Use <code>writableLength</code> instead.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_1","title":"Inherited from","text":"<p>Socket.bufferSize</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_2","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:253</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#bytesread","title":"bytesRead","text":"<p>\u2022 <code>Readonly</code> bytesRead: <code>number</code></p> <p>The amount of received bytes.</p> <p><code>Since</code></p> <p>v0.5.3</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_2","title":"Inherited from","text":"<p>Socket.bytesRead</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_3","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:258</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#byteswritten","title":"bytesWritten","text":"<p>\u2022 <code>Readonly</code> bytesWritten: <code>number</code></p> <p>The amount of bytes sent.</p> <p><code>Since</code></p> <p>v0.5.3</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_3","title":"Inherited from","text":"<p>Socket.bytesWritten</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_4","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:263</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#closed","title":"closed","text":"<p>\u2022 <code>Readonly</code> closed: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_4","title":"Inherited from","text":"<p>Socket.closed</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_5","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:862</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#connecting","title":"connecting","text":"<p>\u2022 <code>Readonly</code> connecting: <code>boolean</code></p> <p>If <code>true</code>,<code>socket.connect(options[, connectListener])</code> was called and has not yet finished. It will stay <code>true</code> until the socket becomes connected, then it is set to <code>false</code> and the <code>'connect'</code> event is emitted. Note that the <code>socket.connect(options[, connectListener])</code> callback is a listener for the <code>'connect'</code> event.</p> <p><code>Since</code></p> <p>v6.1.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_5","title":"Inherited from","text":"<p>Socket.connecting</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_6","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:271</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#destroyed","title":"destroyed","text":"<p>\u2022 <code>Readonly</code> destroyed: <code>boolean</code></p> <p>See <code>writable.destroyed</code> for further details.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_6","title":"Inherited from","text":"<p>Socket.destroyed</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_7","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:281</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#errored","title":"errored","text":"<p>\u2022 <code>Readonly</code> errored: <code>null</code> | <code>Error</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_7","title":"Inherited from","text":"<p>Socket.errored</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_8","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:863</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#localaddress","title":"localAddress","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> localAddress: <code>string</code></p> <p>The string representation of the local IP address the remote client is connecting on. For example, in a server listening on <code>'0.0.0.0'</code>, if a client connects on <code>'192.168.1.1'</code>, the value of <code>socket.localAddress</code> would be<code>'192.168.1.1'</code>.</p> <p><code>Since</code></p> <p>v0.9.6</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_8","title":"Inherited from","text":"<p>Socket.localAddress</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_9","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:288</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#localfamily","title":"localFamily","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> localFamily: <code>string</code></p> <p>The string representation of the local IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p> <p><code>Since</code></p> <p>v18.8.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_9","title":"Inherited from","text":"<p>Socket.localFamily</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_10","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:298</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#localport","title":"localPort","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> localPort: <code>number</code></p> <p>The numeric representation of the local port. For example, <code>80</code> or <code>21</code>.</p> <p><code>Since</code></p> <p>v0.9.6</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_10","title":"Inherited from","text":"<p>Socket.localPort</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_11","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:293</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#pending","title":"pending","text":"<p>\u2022 <code>Readonly</code> pending: <code>boolean</code></p> <p>This is <code>true</code> if the socket is not connected yet, either because <code>.connect()</code> has not yet been called or because it is still in the process of connecting (see <code>socket.connecting</code>).</p> <p><code>Since</code></p> <p>v10.16.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_11","title":"Inherited from","text":"<p>Socket.pending</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_12","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:277</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readable","title":"readable","text":"<p>\u2022 readable: <code>boolean</code></p> <p>Is <code>true</code> if it is safe to call <code>readable.read()</code>, which means the stream has not been destroyed or emitted <code>'error'</code> or <code>'end'</code>.</p> <p><code>Since</code></p> <p>v11.4.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_12","title":"Inherited from","text":"<p>Socket.readable</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_13","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:85</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readableaborted","title":"readableAborted","text":"<p>\u2022 <code>Readonly</code> readableAborted: <code>boolean</code></p> <p>Returns whether the stream was destroyed or errored before emitting <code>'end'</code>.</p> <p><code>Since</code></p> <p>v16.8.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_13","title":"Inherited from","text":"<p>Socket.readableAborted</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_14","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:79</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readabledidread","title":"readableDidRead","text":"<p>\u2022 <code>Readonly</code> readableDidRead: <code>boolean</code></p> <p>Returns whether <code>'data'</code> has been emitted.</p> <p><code>Since</code></p> <p>v16.7.0, v14.18.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_14","title":"Inherited from","text":"<p>Socket.readableDidRead</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_15","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:91</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readableencoding","title":"readableEncoding","text":"<p>\u2022 <code>Readonly</code> readableEncoding: <code>null</code> | <code>BufferEncoding</code></p> <p>Getter for the property <code>encoding</code> of a given <code>Readable</code> stream. The <code>encoding</code>property can be set using the <code>readable.setEncoding()</code> method.</p> <p><code>Since</code></p> <p>v12.7.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_15","title":"Inherited from","text":"<p>Socket.readableEncoding</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_16","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:96</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readableended","title":"readableEnded","text":"<p>\u2022 <code>Readonly</code> readableEnded: <code>boolean</code></p> <p>Becomes <code>true</code> when <code>'end'</code> event is emitted.</p> <p><code>Since</code></p> <p>v12.9.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_16","title":"Inherited from","text":"<p>Socket.readableEnded</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_17","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:101</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readableflowing","title":"readableFlowing","text":"<p>\u2022 <code>Readonly</code> readableFlowing: <code>null</code> | <code>boolean</code></p> <p>This property reflects the current state of a <code>Readable</code> stream as described in the <code>Three states</code> section.</p> <p><code>Since</code></p> <p>v9.4.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_17","title":"Inherited from","text":"<p>Socket.readableFlowing</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_18","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:107</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readablehighwatermark","title":"readableHighWaterMark","text":"<p>\u2022 <code>Readonly</code> readableHighWaterMark: <code>number</code></p> <p>Returns the value of <code>highWaterMark</code> passed when creating this <code>Readable</code>.</p> <p><code>Since</code></p> <p>v9.3.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_18","title":"Inherited from","text":"<p>Socket.readableHighWaterMark</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_19","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:112</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readablelength","title":"readableLength","text":"<p>\u2022 <code>Readonly</code> readableLength: <code>number</code></p> <p>This property contains the number of bytes (or objects) in the queue ready to be read. The value provides introspection data regarding the status of the <code>highWaterMark</code>.</p> <p><code>Since</code></p> <p>v9.4.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_19","title":"Inherited from","text":"<p>Socket.readableLength</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_20","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:119</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readableobjectmode","title":"readableObjectMode","text":"<p>\u2022 <code>Readonly</code> readableObjectMode: <code>boolean</code></p> <p>Getter for the property <code>objectMode</code> of a given <code>Readable</code> stream.</p> <p><code>Since</code></p> <p>v12.3.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_20","title":"Inherited from","text":"<p>Socket.readableObjectMode</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_21","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:124</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#readystate","title":"readyState","text":"<p>\u2022 <code>Readonly</code> readyState: <code>SocketReadyState</code></p> <p>This property represents the state of the connection as a string.</p> <p><code>See</code></p> <p><code>Since</code></p> <p>v0.5.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_21","title":"Inherited from","text":"<p>Socket.readyState</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_22","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:304</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#remoteaddress","title":"remoteAddress","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> remoteAddress: <code>string</code></p> <p>The string representation of the remote IP address. For example,<code>'74.125.127.100'</code> or <code>'2001:4860:a005::68'</code>. Value may be <code>undefined</code> if the socket is destroyed (for example, if the client disconnected).</p> <p><code>Since</code></p> <p>v0.5.10</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_22","title":"Inherited from","text":"<p>Socket.remoteAddress</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_23","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:310</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#remotefamily","title":"remoteFamily","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> remoteFamily: <code>string</code></p> <p>The string representation of the remote IP family. <code>'IPv4'</code> or <code>'IPv6'</code>.</p> <p><code>Since</code></p> <p>v0.11.14</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_23","title":"Inherited from","text":"<p>Socket.remoteFamily</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_24","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:315</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#remoteport","title":"remotePort","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> remotePort: <code>number</code></p> <p>The numeric representation of the remote port. For example, <code>80</code> or <code>21</code>.</p> <p><code>Since</code></p> <p>v0.5.10</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_24","title":"Inherited from","text":"<p>Socket.remotePort</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_25","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:320</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#timeout","title":"timeout","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> timeout: <code>number</code></p> <p>The socket timeout in milliseconds as set by socket.setTimeout(). It is undefined if a timeout has not been set.</p> <p><code>Since</code></p> <p>v10.7.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_25","title":"Inherited from","text":"<p>Socket.timeout</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_26","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:325</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writable","title":"writable","text":"<p>\u2022 <code>Readonly</code> writable: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_26","title":"Inherited from","text":"<p>Socket.writable</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_27","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:854</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writablecorked","title":"writableCorked","text":"<p>\u2022 <code>Readonly</code> writableCorked: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_27","title":"Inherited from","text":"<p>Socket.writableCorked</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_28","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:860</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writableended","title":"writableEnded","text":"<p>\u2022 <code>Readonly</code> writableEnded: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_28","title":"Inherited from","text":"<p>Socket.writableEnded</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_29","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:855</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writablefinished","title":"writableFinished","text":"<p>\u2022 <code>Readonly</code> writableFinished: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_29","title":"Inherited from","text":"<p>Socket.writableFinished</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_30","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:856</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writablehighwatermark","title":"writableHighWaterMark","text":"<p>\u2022 <code>Readonly</code> writableHighWaterMark: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_30","title":"Inherited from","text":"<p>Socket.writableHighWaterMark</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_31","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:857</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writablelength","title":"writableLength","text":"<p>\u2022 <code>Readonly</code> writableLength: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_31","title":"Inherited from","text":"<p>Socket.writableLength</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_32","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:858</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writableneeddrain","title":"writableNeedDrain","text":"<p>\u2022 <code>Readonly</code> writableNeedDrain: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_32","title":"Inherited from","text":"<p>Socket.writableNeedDrain</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_33","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:861</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#writableobjectmode","title":"writableObjectMode","text":"<p>\u2022 <code>Readonly</code> writableObjectMode: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_33","title":"Inherited from","text":"<p>Socket.writableObjectMode</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_34","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:859</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#asynciterator","title":"[asyncIterator]","text":"<p>\u25b8 [asyncIterator](): <code>AsyncIterableIterator</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns","title":"Returns","text":"<p><code>AsyncIterableIterator</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_34","title":"Inherited from","text":"<p>Socket.__@asyncIterator@26319</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_35","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:503</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_construct","title":"_construct","text":"<p>\u25b8 <code>Optional</code> _construct(<code>callback</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters","title":"Parameters","text":"Name Type <code>callback</code> (<code>error?</code>: <code>null</code> | <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_35","title":"Inherited from","text":"<p>Socket._construct</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_36","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:141</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_destroy","title":"_destroy","text":"<p>\u25b8 _destroy(<code>error</code>, <code>callback</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_1","title":"Parameters","text":"Name Type <code>error</code> <code>null</code> | <code>Error</code> <code>callback</code> (<code>error</code>: <code>null</code> | <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_36","title":"Inherited from","text":"<p>Socket._destroy</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_37","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:905</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_final","title":"_final","text":"<p>\u25b8 _final(<code>callback</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_2","title":"Parameters","text":"Name Type <code>callback</code> (<code>error?</code>: <code>null</code> | <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_37","title":"Inherited from","text":"<p>Socket._final</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_38","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:906</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_read","title":"_read","text":"<p>\u25b8 _read(<code>size</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_3","title":"Parameters","text":"Name Type <code>size</code> <code>number</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_38","title":"Inherited from","text":"<p>Socket._read</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_39","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:142</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_write","title":"_write","text":"<p>\u25b8 _write(<code>chunk</code>, <code>encoding</code>, <code>callback</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_4","title":"Parameters","text":"Name Type <code>chunk</code> <code>any</code> <code>encoding</code> <code>BufferEncoding</code> <code>callback</code> (<code>error?</code>: <code>null</code> | <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_39","title":"Inherited from","text":"<p>Socket._write</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_40","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:897</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#_writev","title":"_writev","text":"<p>\u25b8 <code>Optional</code> _writev(<code>chunks</code>, <code>callback</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_5","title":"Parameters","text":"Name Type <code>chunks</code> { <code>chunk</code>: <code>any</code> ; <code>encoding</code>: <code>BufferEncoding</code>  }[] <code>callback</code> (<code>error?</code>: <code>null</code> | <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_40","title":"Inherited from","text":"<p>Socket._writev</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_41","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:898</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#addlistener","title":"addListener","text":"<p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p> <p>events.EventEmitter   1. close   2. connect   3. data   4. drain   5. end   6. error   7. lookup   8. ready   9. timeout</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_6","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_7","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_41","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_42","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:351</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_7","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> (<code>hadError</code>: <code>boolean</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_8","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_42","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_43","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:352</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_8","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_9","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_43","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_44","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:353</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_9","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>data</code>: <code>Buffer</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_10","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_44","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_45","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:354</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_10","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_11","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_45","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_46","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:355</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_11","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_12","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_46","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_47","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:356</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_12","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_13","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_47","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_48","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:357</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_13","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>, <code>address</code>: <code>string</code>, <code>family</code>: <code>string</code> | <code>number</code>, <code>host</code>: <code>string</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_14","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_48","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_49","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:358</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_14","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_15","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_49","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_50","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:359</p> <p>\u25b8 addListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_15","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_16","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_50","title":"Inherited from","text":"<p>Socket.addListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_51","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:360</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#address","title":"address","text":"<p>\u25b8 address(): {} | <code>AddressInfo</code></p> <p>Returns the bound <code>address</code>, the address <code>family</code> name and <code>port</code> of the socket as reported by the operating system:<code>{ port: 12346, family: 'IPv4', address: '127.0.0.1' }</code></p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_17","title":"Returns","text":"<p>{} | <code>AddressInfo</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_51","title":"Inherited from","text":"<p>Socket.address</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_52","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:221</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#connect","title":"connect","text":"<p>\u25b8 connect(<code>options</code>, <code>connectionListener?</code>): <code>AppiumServerSocket</code></p> <p>Initiate a connection on a given socket.</p> <p>Possible signatures:</p> <ul> <li><code>socket.connect(options[, connectListener])</code></li> <li><code>socket.connect(path[, connectListener])</code> for <code>IPC</code> connections.</li> <li><code>socket.connect(port[, host][, connectListener])</code> for TCP connections.</li> <li>Returns: <code>net.Socket</code> The socket itself.</li> </ul> <p>This function is asynchronous. When the connection is established, the <code>'connect'</code> event will be emitted. If there is a problem connecting, instead of a <code>'connect'</code> event, an <code>'error'</code> event will be emitted with the error passed to the <code>'error'</code> listener. The last parameter <code>connectListener</code>, if supplied, will be added as a listener for the <code>'connect'</code> event once.</p> <p>This function should only be used for reconnecting a socket after<code>'close'</code> has been emitted or otherwise it may lead to undefined behavior.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_16","title":"Parameters","text":"Name Type <code>options</code> <code>SocketConnectOpts</code> <code>connectionListener?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_18","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_52","title":"Inherited from","text":"<p>Socket.connect</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_53","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:126</p> <p>\u25b8 connect(<code>port</code>, <code>host</code>, <code>connectionListener?</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_17","title":"Parameters","text":"Name Type <code>port</code> <code>number</code> <code>host</code> <code>string</code> <code>connectionListener?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_19","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_53","title":"Inherited from","text":"<p>Socket.connect</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_54","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:127</p> <p>\u25b8 connect(<code>port</code>, <code>connectionListener?</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_18","title":"Parameters","text":"Name Type <code>port</code> <code>number</code> <code>connectionListener?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_20","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_54","title":"Inherited from","text":"<p>Socket.connect</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_55","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:128</p> <p>\u25b8 connect(<code>path</code>, <code>connectionListener?</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_19","title":"Parameters","text":"Name Type <code>path</code> <code>string</code> <code>connectionListener?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_21","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_55","title":"Inherited from","text":"<p>Socket.connect</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_56","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:129</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#cork","title":"cork","text":"<p>\u25b8 cork(): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_22","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_56","title":"Inherited from","text":"<p>Socket.cork</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_57","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:913</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#destroy","title":"destroy","text":"<p>\u25b8 destroy(<code>error?</code>): <code>AppiumServerSocket</code></p> <p>Destroy the stream. Optionally emit an <code>'error'</code> event, and emit a <code>'close'</code>event (unless <code>emitClose</code> is set to <code>false</code>). After this call, the readable stream will release any internal resources and subsequent calls to <code>push()</code>will be ignored.</p> <p>Once <code>destroy()</code> has been called any further calls will be a no-op and no further errors except from <code>_destroy()</code> may be emitted as <code>'error'</code>.</p> <p>Implementors should not override this method, but instead implement <code>readable._destroy()</code>.</p> <p><code>Since</code></p> <p>v8.0.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_20","title":"Parameters","text":"Name Type Description <code>error?</code> <code>Error</code> Error which will be passed as payload in <code>'error'</code> event"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_23","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_57","title":"Inherited from","text":"<p>Socket.destroy</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_58","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:435</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#emit","title":"emit","text":"<p>\u25b8 emit(<code>event</code>, <code>...args</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_21","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_24","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_58","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_59","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:361</p> <p>\u25b8 emit(<code>event</code>, <code>hadError</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_22","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>hadError</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_25","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_59","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_60","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:362</p> <p>\u25b8 emit(<code>event</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_23","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_26","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_60","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_61","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:363</p> <p>\u25b8 emit(<code>event</code>, <code>data</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_24","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>data</code> <code>Buffer</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_27","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_61","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_62","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:364</p> <p>\u25b8 emit(<code>event</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_25","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_28","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_62","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_63","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:365</p> <p>\u25b8 emit(<code>event</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_26","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_29","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_63","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_64","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:366</p> <p>\u25b8 emit(<code>event</code>, <code>err</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_27","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>err</code> <code>Error</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_30","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_64","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_65","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:367</p> <p>\u25b8 emit(<code>event</code>, <code>err</code>, <code>address</code>, <code>family</code>, <code>host</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_28","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>err</code> <code>Error</code> <code>address</code> <code>string</code> <code>family</code> <code>string</code> | <code>number</code> <code>host</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_31","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_65","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_66","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:368</p> <p>\u25b8 emit(<code>event</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_29","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_32","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_66","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_67","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:369</p> <p>\u25b8 emit(<code>event</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_30","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_33","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_67","title":"Inherited from","text":"<p>Socket.emit</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_68","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:370</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#end","title":"end","text":"<p>\u25b8 end(<code>callback?</code>): <code>AppiumServerSocket</code></p> <p>Half-closes the socket. i.e., it sends a FIN packet. It is possible the server will still send some data.</p> <p>See <code>writable.end()</code> for further details.</p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_31","title":"Parameters","text":"Name Type Description <code>callback?</code> () =&gt; <code>void</code> Optional callback for when the socket is finished."},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_34","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_68","title":"Inherited from","text":"<p>Socket.end</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_69","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:336</p> <p>\u25b8 end(<code>buffer</code>, <code>callback?</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_32","title":"Parameters","text":"Name Type <code>buffer</code> <code>string</code> | <code>Uint8Array</code> <code>callback?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_35","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_69","title":"Inherited from","text":"<p>Socket.end</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_70","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:337</p> <p>\u25b8 end(<code>str</code>, <code>encoding?</code>, <code>callback?</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_33","title":"Parameters","text":"Name Type <code>str</code> <code>string</code> | <code>Uint8Array</code> <code>encoding?</code> <code>BufferEncoding</code> <code>callback?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_36","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_70","title":"Inherited from","text":"<p>Socket.end</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_71","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:338</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#eventnames","title":"eventNames","text":"<p>\u25b8 eventNames(): (<code>string</code> | <code>symbol</code>)[]</p> <p>Returns an array listing the events for which the emitter has registered listeners. The values in the array are strings or <code>Symbol</code>s.</p> <pre><code>const EventEmitter = require('events');\nconst myEE = new EventEmitter();\nmyEE.on('foo', () =&gt; {});\nmyEE.on('bar', () =&gt; {});\nconst sym = Symbol('symbol');\nmyEE.on(sym, () =&gt; {});\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n</code></pre> <p><code>Since</code></p> <p>v6.0.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_37","title":"Returns","text":"<p>(<code>string</code> | <code>symbol</code>)[]</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_71","title":"Inherited from","text":"<p>Socket.eventNames</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_72","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:673</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#getmaxlisteners","title":"getMaxListeners","text":"<p>\u25b8 getMaxListeners(): <code>number</code></p> <p>Returns the current max listener value for the <code>EventEmitter</code> which is either set by <code>emitter.setMaxListeners(n)</code> or defaults to defaultMaxListeners.</p> <p><code>Since</code></p> <p>v1.0.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_38","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_72","title":"Inherited from","text":"<p>Socket.getMaxListeners</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_73","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:526</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#ispaused","title":"isPaused","text":"<p>\u25b8 isPaused(): <code>boolean</code></p> <p>The <code>readable.isPaused()</code> method returns the current operating state of the<code>Readable</code>. This is used primarily by the mechanism that underlies the<code>readable.pipe()</code> method. In most typical cases, there will be no reason to use this method directly.</p> <pre><code>const readable = new stream.Readable();\nreadable.isPaused(); // === false\nreadable.pause();\nreadable.isPaused(); // === true\nreadable.resume();\nreadable.isPaused(); // === false\n</code></pre> <p><code>Since</code></p> <p>v0.11.14</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_39","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_73","title":"Inherited from","text":"<p>Socket.isPaused</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_74","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:302</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#listenercount","title":"listenerCount","text":"<p>\u25b8 listenerCount(<code>eventName</code>, <code>listener?</code>): <code>number</code></p> <p>Returns the number of listeners listening to the event named <code>eventName</code>.</p> <p>If <code>listener</code> is provided, it will return how many times the listener is found in the list of the listeners of the event.</p> <p><code>Since</code></p> <p>v3.2.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_34","title":"Parameters","text":"Name Type Description <code>eventName</code> <code>string</code> | <code>symbol</code> The name of the event being listened for <code>listener?</code> <code>Function</code> The event handler function"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_40","title":"Returns","text":"<p><code>number</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_74","title":"Inherited from","text":"<p>Socket.listenerCount</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_75","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:620</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#listeners","title":"listeners","text":"<p>\u25b8 listeners(<code>eventName</code>): <code>Function</code>[]</p> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>.</p> <pre><code>server.on('connection', (stream) =&gt; {\nconsole.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n</code></pre> <p><code>Since</code></p> <p>v0.1.26</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_35","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_41","title":"Returns","text":"<p><code>Function</code>[]</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_75","title":"Inherited from","text":"<p>Socket.listeners</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_76","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:539</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#off","title":"off","text":"<p>\u25b8 off(<code>eventName</code>, <code>listener</code>): <code>AppiumServerSocket</code></p> <p>Alias for <code>emitter.removeListener()</code>.</p> <p><code>Since</code></p> <p>v10.0.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_36","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_42","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_76","title":"Inherited from","text":"<p>Socket.off</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_77","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:499</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#on","title":"on","text":"<p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_37","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_43","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_77","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_78","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:371</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_38","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> (<code>hadError</code>: <code>boolean</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_44","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_78","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_79","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:372</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_39","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_45","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_79","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_80","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:373</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_40","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>data</code>: <code>Buffer</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_46","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_80","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_81","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:374</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_41","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_47","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_81","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_82","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:375</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_42","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_48","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_82","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_83","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:376</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_43","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_49","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_83","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_84","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:377</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_44","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>, <code>address</code>: <code>string</code>, <code>family</code>: <code>string</code> | <code>number</code>, <code>host</code>: <code>string</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_50","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_84","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_85","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:378</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_45","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_51","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_85","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_86","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:379</p> <p>\u25b8 on(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_46","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_52","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_86","title":"Inherited from","text":"<p>Socket.on</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_87","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:380</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#once","title":"once","text":"<p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_47","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_53","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_87","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_88","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:381</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_48","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> (<code>hadError</code>: <code>boolean</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_54","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_88","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_89","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:382</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_49","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_55","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_89","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_90","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:383</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_50","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>data</code>: <code>Buffer</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_56","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_90","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_91","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:384</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_51","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_57","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_91","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_92","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:385</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_52","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_58","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_92","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_93","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:386</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_53","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_59","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_93","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_94","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:387</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_54","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>, <code>address</code>: <code>string</code>, <code>family</code>: <code>string</code> | <code>number</code>, <code>host</code>: <code>string</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_60","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_94","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_95","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:388</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_55","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_61","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_95","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_96","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:389</p> <p>\u25b8 once(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_56","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_62","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_96","title":"Inherited from","text":"<p>Socket.once</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_97","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:390</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#pause","title":"pause","text":"<p>\u25b8 pause(): <code>AppiumServerSocket</code></p> <p>Pauses the reading of data. That is, <code>'data'</code> events will not be emitted. Useful to throttle back an upload.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_63","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_97","title":"Inherited from","text":"<p>Socket.pause</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_98","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:141</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#pipe","title":"pipe","text":"<p>\u25b8 pipe&lt;<code>T</code>&gt;(<code>destination</code>, <code>options?</code>): <code>T</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>WritableStream</code>&lt;<code>T</code>&gt;"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_57","title":"Parameters","text":"Name Type <code>destination</code> <code>T</code> <code>options?</code> <code>Object</code> <code>options.end?</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_64","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_98","title":"Inherited from","text":"<p>Socket.pipe</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_99","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:26</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#prependlistener","title":"prependListener","text":"<p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_58","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_65","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_99","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_100","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:391</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_59","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> (<code>hadError</code>: <code>boolean</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_66","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_100","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_101","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:392</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_60","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_67","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_101","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_102","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:393</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_61","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>data</code>: <code>Buffer</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_68","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_102","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_103","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:394</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_62","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_69","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_103","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_104","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:395</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_63","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_70","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_104","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_105","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:396</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_64","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_71","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_105","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_106","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:397</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_65","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>, <code>address</code>: <code>string</code>, <code>family</code>: <code>string</code> | <code>number</code>, <code>host</code>: <code>string</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_72","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_106","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_107","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:398</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_66","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_73","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_107","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_108","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:399</p> <p>\u25b8 prependListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_67","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_74","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_108","title":"Inherited from","text":"<p>Socket.prependListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_109","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:400</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#prependoncelistener","title":"prependOnceListener","text":"<p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_68","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_75","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_109","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_110","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:401</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_69","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> (<code>hadError</code>: <code>boolean</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_76","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_110","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_111","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:402</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_70","title":"Parameters","text":"Name Type <code>event</code> <code>\"connect\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_77","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_111","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_112","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:403</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_71","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>data</code>: <code>Buffer</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_78","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_112","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_113","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:404</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_72","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_79","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_113","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_114","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:405</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_73","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_80","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_114","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_115","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:406</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_74","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_81","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_115","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_116","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:407</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_75","title":"Parameters","text":"Name Type <code>event</code> <code>\"lookup\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>, <code>address</code>: <code>string</code>, <code>family</code>: <code>string</code> | <code>number</code>, <code>host</code>: <code>string</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_82","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_116","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_117","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:408</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_76","title":"Parameters","text":"Name Type <code>event</code> <code>\"ready\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_83","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_117","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_118","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:409</p> <p>\u25b8 prependOnceListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_77","title":"Parameters","text":"Name Type <code>event</code> <code>\"timeout\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_84","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_118","title":"Inherited from","text":"<p>Socket.prependOnceListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_119","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:410</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#push","title":"push","text":"<p>\u25b8 push(<code>chunk</code>, <code>encoding?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_78","title":"Parameters","text":"Name Type <code>chunk</code> <code>any</code> <code>encoding?</code> <code>BufferEncoding</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_85","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_119","title":"Inherited from","text":"<p>Socket.push</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_120","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:422</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#rawlisteners","title":"rawListeners","text":"<p>\u25b8 rawListeners(<code>eventName</code>): <code>Function</code>[]</p> <p>Returns a copy of the array of listeners for the event named <code>eventName</code>, including any wrappers (such as those created by <code>.once()</code>).</p> <pre><code>const emitter = new EventEmitter();\nemitter.once('log', () =&gt; console.log('log once'));\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\nemitter.on('log', () =&gt; console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n</code></pre> <p><code>Since</code></p> <p>v9.4.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_79","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_86","title":"Returns","text":"<p><code>Function</code>[]</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_120","title":"Inherited from","text":"<p>Socket.rawListeners</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_121","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:569</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#read","title":"read","text":"<p>\u25b8 read(<code>size?</code>): <code>any</code></p> <p>The <code>readable.read()</code> method reads data out of the internal buffer and returns it. If no data is available to be read, <code>null</code> is returned. By default, the data is returned as a <code>Buffer</code> object unless an encoding has been specified using the <code>readable.setEncoding()</code> method or the stream is operating in object mode.</p> <p>The optional <code>size</code> argument specifies a specific number of bytes to read. If<code>size</code> bytes are not available to be read, <code>null</code> will be returned _unless_the stream has ended, in which case all of the data remaining in the internal buffer will be returned.</p> <p>If the <code>size</code> argument is not specified, all of the data contained in the internal buffer will be returned.</p> <p>The <code>size</code> argument must be less than or equal to 1 GiB.</p> <p>The <code>readable.read()</code> method should only be called on <code>Readable</code> streams operating in paused mode. In flowing mode, <code>readable.read()</code> is called automatically until the internal buffer is fully drained.</p> <pre><code>const readable = getReadableStreamSomehow();\n// 'readable' may be triggered multiple times as data is buffered in\nreadable.on('readable', () =&gt; {\nlet chunk;\nconsole.log('Stream is readable (new data received in buffer)');\n// Use a loop to make sure we read all currently available data\nwhile (null !== (chunk = readable.read())) {\nconsole.log(`Read ${chunk.length} bytes of data...`);\n}\n});\n// 'end' will be triggered once when there is no more data available\nreadable.on('end', () =&gt; {\nconsole.log('Reached end of stream.');\n});\n</code></pre> <p>Each call to <code>readable.read()</code> returns a chunk of data, or <code>null</code>. The chunks are not concatenated. A <code>while</code> loop is necessary to consume all data currently in the buffer. When reading a large file <code>.read()</code> may return <code>null</code>, having consumed all buffered content so far, but there is still more data to come not yet buffered. In this case a new <code>'readable'</code> event will be emitted when there is more data in the buffer. Finally the <code>'end'</code> event will be emitted when there is no more data to come.</p> <p>Therefore to read a file's whole contents from a <code>readable</code>, it is necessary to collect chunks across multiple <code>'readable'</code> events:</p> <pre><code>const chunks = [];\nreadable.on('readable', () =&gt; {\nlet chunk;\nwhile (null !== (chunk = readable.read())) {\nchunks.push(chunk);\n}\n});\nreadable.on('end', () =&gt; {\nconst content = chunks.join('');\n});\n</code></pre> <p>A <code>Readable</code> stream in object mode will always return a single item from a call to <code>readable.read(size)</code>, regardless of the value of the<code>size</code> argument.</p> <p>If the <code>readable.read()</code> method returns a chunk of data, a <code>'data'</code> event will also be emitted.</p> <p>Calling read after the <code>'end'</code> event has been emitted will return <code>null</code>. No runtime error will be raised.</p> <p><code>Since</code></p> <p>v0.9.4</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_80","title":"Parameters","text":"Name Type Description <code>size?</code> <code>number</code> Optional argument to specify how much data to read."},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_87","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_121","title":"Inherited from","text":"<p>Socket.read</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_122","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:219</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#ref","title":"ref","text":"<p>\u25b8 ref(): <code>AppiumServerSocket</code></p> <p>Opposite of <code>unref()</code>, calling <code>ref()</code> on a previously <code>unref</code>ed socket will not let the program exit if it's the only socket left (the default behavior). If the socket is <code>ref</code>ed calling <code>ref</code> again will have no effect.</p> <p><code>Since</code></p> <p>v0.9.1</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_88","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_122","title":"Inherited from","text":"<p>Socket.ref</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_123","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:235</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#removealllisteners","title":"removeAllListeners","text":"<p>\u25b8 removeAllListeners(<code>event?</code>): <code>AppiumServerSocket</code></p> <p>Removes all listeners, or those of the specified <code>eventName</code>.</p> <p>It is bad practice to remove listeners added elsewhere in the code, particularly when the <code>EventEmitter</code> instance was created by some other component or module (e.g. sockets or file streams).</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v0.1.26</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_81","title":"Parameters","text":"Name Type <code>event?</code> <code>string</code> | <code>symbol</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_89","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_123","title":"Inherited from","text":"<p>Socket.removeAllListeners</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_124","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:510</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#removelistener","title":"removeListener","text":"<p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_82","title":"Parameters","text":"Name Type <code>event</code> <code>\"close\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_90","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_124","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_125","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1002</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_83","title":"Parameters","text":"Name Type <code>event</code> <code>\"data\"</code> <code>listener</code> (<code>chunk</code>: <code>any</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_91","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_125","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_126","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1003</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_84","title":"Parameters","text":"Name Type <code>event</code> <code>\"drain\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_92","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_126","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_127","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1004</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_85","title":"Parameters","text":"Name Type <code>event</code> <code>\"end\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_93","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_127","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_128","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1005</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_86","title":"Parameters","text":"Name Type <code>event</code> <code>\"error\"</code> <code>listener</code> (<code>err</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_94","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_128","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_129","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1006</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_87","title":"Parameters","text":"Name Type <code>event</code> <code>\"finish\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_95","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_129","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_130","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1007</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_88","title":"Parameters","text":"Name Type <code>event</code> <code>\"pause\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_96","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_130","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_131","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1008</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_89","title":"Parameters","text":"Name Type <code>event</code> <code>\"pipe\"</code> <code>listener</code> (<code>src</code>: <code>Readable</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_97","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_131","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_132","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1009</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_90","title":"Parameters","text":"Name Type <code>event</code> <code>\"readable\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_98","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_132","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_133","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1010</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_91","title":"Parameters","text":"Name Type <code>event</code> <code>\"resume\"</code> <code>listener</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_99","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_133","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_134","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1011</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_92","title":"Parameters","text":"Name Type <code>event</code> <code>\"unpipe\"</code> <code>listener</code> (<code>src</code>: <code>Readable</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_100","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_134","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_135","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1012</p> <p>\u25b8 removeListener(<code>event</code>, <code>listener</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_93","title":"Parameters","text":"Name Type <code>event</code> <code>string</code> | <code>symbol</code> <code>listener</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_101","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_135","title":"Inherited from","text":"<p>Socket.removeListener</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_136","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:1013</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#resetanddestroy","title":"resetAndDestroy","text":"<p>\u25b8 resetAndDestroy(): <code>AppiumServerSocket</code></p> <p>Close the TCP connection by sending an RST packet and destroy the stream. If this TCP socket is in connecting status, it will send an RST packet and destroy this TCP socket once it is connected. Otherwise, it will call <code>socket.destroy</code> with an <code>ERR_SOCKET_CLOSED</code> Error. If this is not a TCP socket (for example, a pipe), calling this method will immediately throw an <code>ERR_INVALID_HANDLE_TYPE</code> Error.</p> <p><code>Since</code></p> <p>v18.3.0</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_102","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_136","title":"Inherited from","text":"<p>Socket.resetAndDestroy</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_137","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:152</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#resume","title":"resume","text":"<p>\u25b8 resume(): <code>AppiumServerSocket</code></p> <p>Resumes reading after a call to <code>socket.pause()</code>.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_103","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_137","title":"Inherited from","text":"<p>Socket.resume</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_138","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:157</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#setdefaultencoding","title":"setDefaultEncoding","text":"<p>\u25b8 setDefaultEncoding(<code>encoding</code>): <code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_94","title":"Parameters","text":"Name Type <code>encoding</code> <code>BufferEncoding</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_104","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_138","title":"Inherited from","text":"<p>Socket.setDefaultEncoding</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_139","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:909</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#setencoding","title":"setEncoding","text":"<p>\u25b8 setEncoding(<code>encoding?</code>): <code>AppiumServerSocket</code></p> <p>Set the encoding for the socket as a <code>Readable Stream</code>. See <code>readable.setEncoding()</code> for more information.</p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_95","title":"Parameters","text":"Name Type <code>encoding?</code> <code>BufferEncoding</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_105","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_139","title":"Inherited from","text":"<p>Socket.setEncoding</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_140","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:135</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#setkeepalive","title":"setKeepAlive","text":"<p>\u25b8 setKeepAlive(<code>enable?</code>, <code>initialDelay?</code>): <code>AppiumServerSocket</code></p> <p>Enable/disable keep-alive functionality, and optionally set the initial delay before the first keepalive probe is sent on an idle socket.</p> <p>Set <code>initialDelay</code> (in milliseconds) to set the delay between the last data packet received and the first keepalive probe. Setting <code>0</code> for<code>initialDelay</code> will leave the value unchanged from the default (or previous) setting.</p> <p>Enabling the keep-alive functionality will set the following socket options:</p> <ul> <li><code>SO_KEEPALIVE=1</code></li> <li><code>TCP_KEEPIDLE=initialDelay</code></li> <li><code>TCP_KEEPCNT=10</code></li> <li><code>TCP_KEEPINTVL=1</code></li> </ul> <p><code>Since</code></p> <p>v0.1.92</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_96","title":"Parameters","text":"Name Type <code>enable?</code> <code>boolean</code> <code>initialDelay?</code> <code>number</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_106","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_140","title":"Inherited from","text":"<p>Socket.setKeepAlive</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_141","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:215</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#setmaxlisteners","title":"setMaxListeners","text":"<p>\u25b8 setMaxListeners(<code>n</code>): <code>AppiumServerSocket</code></p> <p>By default <code>EventEmitter</code>s will print a warning if more than <code>10</code> listeners are added for a particular event. This is a useful default that helps finding memory leaks. The <code>emitter.setMaxListeners()</code> method allows the limit to be modified for this specific <code>EventEmitter</code> instance. The value can be set to<code>Infinity</code> (or <code>0</code>) to indicate an unlimited number of listeners.</p> <p>Returns a reference to the <code>EventEmitter</code>, so that calls can be chained.</p> <p><code>Since</code></p> <p>v0.3.5</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_97","title":"Parameters","text":"Name Type <code>n</code> <code>number</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_107","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_141","title":"Inherited from","text":"<p>Socket.setMaxListeners</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_142","title":"Defined in","text":"<p>node_modules/@types/node/events.d.ts:520</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#setnodelay","title":"setNoDelay","text":"<p>\u25b8 setNoDelay(<code>noDelay?</code>): <code>AppiumServerSocket</code></p> <p>Enable/disable the use of Nagle's algorithm.</p> <p>When a TCP connection is created, it will have Nagle's algorithm enabled.</p> <p>Nagle's algorithm delays data before it is sent via the network. It attempts to optimize throughput at the expense of latency.</p> <p>Passing <code>true</code> for <code>noDelay</code> or not passing an argument will disable Nagle's algorithm for the socket. Passing <code>false</code> for <code>noDelay</code> will enable Nagle's algorithm.</p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_98","title":"Parameters","text":"Name Type <code>noDelay?</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_108","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_142","title":"Inherited from","text":"<p>Socket.setNoDelay</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_143","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:195</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#settimeout","title":"setTimeout","text":"<p>\u25b8 setTimeout(<code>timeout</code>, <code>callback?</code>): <code>AppiumServerSocket</code></p> <p>Sets the socket to timeout after <code>timeout</code> milliseconds of inactivity on the socket. By default <code>net.Socket</code> do not have a timeout.</p> <p>When an idle timeout is triggered the socket will receive a <code>'timeout'</code> event but the connection will not be severed. The user must manually call <code>socket.end()</code> or <code>socket.destroy()</code> to end the connection.</p> <pre><code>socket.setTimeout(3000);\nsocket.on('timeout', () =&gt; {\nconsole.log('socket timeout');\nsocket.end();\n});\n</code></pre> <p>If <code>timeout</code> is 0, then the existing idle timeout is disabled.</p> <p>The optional <code>callback</code> parameter will be added as a one-time listener for the <code>'timeout'</code> event.</p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_99","title":"Parameters","text":"Name Type <code>timeout</code> <code>number</code> <code>callback?</code> () =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_109","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_143","title":"Inherited from","text":"<p>Socket.setTimeout</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_144","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:179</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#uncork","title":"uncork","text":"<p>\u25b8 uncork(): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_110","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_144","title":"Inherited from","text":"<p>Socket.uncork</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_145","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:914</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#unpipe","title":"unpipe","text":"<p>\u25b8 unpipe(<code>destination?</code>): <code>AppiumServerSocket</code></p> <p>The <code>readable.unpipe()</code> method detaches a <code>Writable</code> stream previously attached using the pipe method.</p> <p>If the <code>destination</code> is not specified, then all pipes are detached.</p> <p>If the <code>destination</code> is specified, but no pipe is set up for it, then the method does nothing.</p> <pre><code>const fs = require('fs');\nconst readable = getReadableStreamSomehow();\nconst writable = fs.createWriteStream('file.txt');\n// All the data from readable goes into 'file.txt',\n// but only for the first second.\nreadable.pipe(writable);\nsetTimeout(() =&gt; {\nconsole.log('Stop writing to file.txt.');\nreadable.unpipe(writable);\nconsole.log('Manually close the file stream.');\nwritable.end();\n}, 1000);\n</code></pre> <p><code>Since</code></p> <p>v0.9.4</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_100","title":"Parameters","text":"Name Type Description <code>destination?</code> <code>WritableStream</code> Optional specific stream to unpipe"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_111","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_145","title":"Inherited from","text":"<p>Socket.unpipe</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_146","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:329</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#unref","title":"unref","text":"<p>\u25b8 unref(): <code>AppiumServerSocket</code></p> <p>Calling <code>unref()</code> on a socket will allow the program to exit if this is the only active socket in the event system. If the socket is already <code>unref</code>ed calling<code>unref()</code> again will have no effect.</p> <p><code>Since</code></p> <p>v0.9.1</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_112","title":"Returns","text":"<p><code>AppiumServerSocket</code></p> <p>The socket itself.</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_146","title":"Inherited from","text":"<p>Socket.unref</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_147","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:228</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#unshift","title":"unshift","text":"<p>\u25b8 unshift(<code>chunk</code>, <code>encoding?</code>): <code>void</code></p> <p>Passing <code>chunk</code> as <code>null</code> signals the end of the stream (EOF) and behaves the same as <code>readable.push(null)</code>, after which no more data can be written. The EOF signal is put at the end of the buffer and any buffered data will still be flushed.</p> <p>The <code>readable.unshift()</code> method pushes a chunk of data back into the internal buffer. This is useful in certain situations where a stream is being consumed by code that needs to \"un-consume\" some amount of data that it has optimistically pulled out of the source, so that the data can be passed on to some other party.</p> <p>The <code>stream.unshift(chunk)</code> method cannot be called after the <code>'end'</code> event has been emitted or a runtime error will be thrown.</p> <p>Developers using <code>stream.unshift()</code> often should consider switching to use of a <code>Transform</code> stream instead. See the <code>API for stream implementers</code> section for more information.</p> <pre><code>// Pull off a header delimited by \\n\\n.\n// Use unshift() if we get too much.\n// Call the callback with (error, header, stream).\nconst { StringDecoder } = require('string_decoder');\nfunction parseHeader(stream, callback) {\nstream.on('error', callback);\nstream.on('readable', onReadable);\nconst decoder = new StringDecoder('utf8');\nlet header = '';\nfunction onReadable() {\nlet chunk;\nwhile (null !== (chunk = stream.read())) {\nconst str = decoder.write(chunk);\nif (str.includes('\\n\\n')) {\n// Found the header boundary.\nconst split = str.split(/\\n\\n/);\nheader += split.shift();\nconst remaining = split.join('\\n\\n');\nconst buf = Buffer.from(remaining, 'utf8');\nstream.removeListener('error', callback);\n// Remove the 'readable' listener before unshifting.\nstream.removeListener('readable', onReadable);\nif (buf.length)\nstream.unshift(buf);\n// Now the body of the message can be read from the stream.\ncallback(null, header, stream);\nreturn;\n}\n// Still reading the header.\nheader += str;\n}\n}\n}\n</code></pre> <p>Unlike push, <code>stream.unshift(chunk)</code> will not end the reading process by resetting the internal reading state of the stream. This can cause unexpected results if <code>readable.unshift()</code> is called during a read (i.e. from within a _read implementation on a custom stream). Following the call to <code>readable.unshift()</code> with an immediate push will reset the reading state appropriately, however it is best to simply avoid calling <code>readable.unshift()</code> while in the process of performing a read.</p> <p><code>Since</code></p> <p>v0.9.11</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_101","title":"Parameters","text":"Name Type Description <code>chunk</code> <code>any</code> Chunk of data to unshift onto the read queue. For streams not operating in object mode, <code>chunk</code> must be a string, <code>Buffer</code>, <code>Uint8Array</code> or <code>null</code>. For object mode streams, <code>chunk</code> may be any JavaScript value. <code>encoding?</code> <code>BufferEncoding</code> Encoding of string chunks. Must be a valid <code>Buffer</code> encoding, such as <code>'utf8'</code> or <code>'ascii'</code>."},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_113","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_147","title":"Inherited from","text":"<p>Socket.unshift</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_148","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:395</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#wrap","title":"wrap","text":"<p>\u25b8 wrap(<code>stream</code>): <code>AppiumServerSocket</code></p> <p>Prior to Node.js 0.10, streams did not implement the entire <code>stream</code> module API as it is currently defined. (See <code>Compatibility</code> for more information.)</p> <p>When using an older Node.js library that emits <code>'data'</code> events and has a pause method that is advisory only, the<code>readable.wrap()</code> method can be used to create a <code>Readable</code> stream that uses the old stream as its data source.</p> <p>It will rarely be necessary to use <code>readable.wrap()</code> but the method has been provided as a convenience for interacting with older Node.js applications and libraries.</p> <pre><code>const { OldReader } = require('./old-api-module.js');\nconst { Readable } = require('stream');\nconst oreader = new OldReader();\nconst myReader = new Readable().wrap(oreader);\nmyReader.on('readable', () =&gt; {\nmyReader.read(); // etc.\n});\n</code></pre> <p><code>Since</code></p> <p>v0.9.4</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_102","title":"Parameters","text":"Name Type Description <code>stream</code> <code>ReadableStream</code> An \"old style\" readable stream"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_114","title":"Returns","text":"<p><code>AppiumServerSocket</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_148","title":"Inherited from","text":"<p>Socket.wrap</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_149","title":"Defined in","text":"<p>node_modules/@types/node/stream.d.ts:421</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#write","title":"write","text":"<p>\u25b8 write(<code>buffer</code>, <code>cb?</code>): <code>boolean</code></p> <p>Sends data on the socket. The second parameter specifies the encoding in the case of a string. It defaults to UTF8 encoding.</p> <p>Returns <code>true</code> if the entire data was flushed successfully to the kernel buffer. Returns <code>false</code> if all or part of the data was queued in user memory.<code>'drain'</code> will be emitted when the buffer is again free.</p> <p>The optional <code>callback</code> parameter will be executed when the data is finally written out, which may not be immediately.</p> <p>See <code>Writable</code> stream <code>write()</code> method for more information.</p> <p><code>Since</code></p> <p>v0.1.90</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_103","title":"Parameters","text":"Name Type <code>buffer</code> <code>string</code> | <code>Uint8Array</code> <code>cb?</code> (<code>err?</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_115","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_149","title":"Inherited from","text":"<p>Socket.write</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_150","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:105</p> <p>\u25b8 write(<code>str</code>, <code>encoding?</code>, <code>cb?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#parameters_104","title":"Parameters","text":"Name Type <code>str</code> <code>string</code> | <code>Uint8Array</code> <code>encoding?</code> <code>BufferEncoding</code> <code>cb?</code> (<code>err?</code>: <code>Error</code>) =&gt; <code>void</code>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#returns_116","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#inherited-from_150","title":"Inherited from","text":"<p>Socket.write</p>"},{"location":"reference/interfaces/appium_types.AppiumServerSocket/#defined-in_151","title":"Defined in","text":"<p>node_modules/@types/node/net.d.ts:106</p>"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/","title":"Interface: BaseExecuteMethodDef","text":"<p>@appium/types.BaseExecuteMethodDef</p> <p>Properties shared by execute method definitions in both plugins and drivers</p>"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseExecuteMethodDef</code></li> </ul> <p>\u21b3 <code>DriverExecuteMethodDef</code></p> <p>\u21b3 <code>PluginExecuteMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#properties","title":"Properties","text":"<ul> <li>params</li> </ul>"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#params","title":"params","text":"<p>\u2022 <code>Optional</code> params: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#type-declaration","title":"Type declaration","text":"Name Type <code>optional?</code> readonly <code>string</code>[] <code>required?</code> readonly <code>string</code>[]"},{"location":"reference/interfaces/appium_types.BaseExecuteMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:112</p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/","title":"Interface: BaseMethodDef","text":"<p>@appium/types.BaseMethodDef</p> <p>Both <code>DriverMethodDef</code> and <code>PluginMethodDef</code> share these properties.</p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseMethodDef</code></li> </ul> <p>\u21b3 <code>DriverMethodDef</code></p> <p>\u21b3 <code>PluginMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.BaseMethodDef/#properties","title":"Properties","text":"<ul> <li>neverProxy</li> <li>payloadParams</li> </ul>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.BaseMethodDef/#neverproxy","title":"neverProxy","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> neverProxy: <code>boolean</code></p> <p>If true, this <code>Method</code> will never proxy.</p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:57</p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#payloadparams","title":"payloadParams","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> payloadParams: <code>PayloadParams</code></p> <p>Specifies shape of payload</p>"},{"location":"reference/interfaces/appium_types.BaseMethodDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:61</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/","title":"Interface: CachedAppInfo","text":"<p>@appium/types.CachedAppInfo</p> <p>Information about a cached app instance.</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.CachedAppInfo/#properties","title":"Properties","text":"<ul> <li>fullPath</li> <li>immutable</li> <li>integrity</li> <li>lastModified</li> <li>maxAge</li> <li>packageHash</li> <li>timestamp</li> </ul>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.CachedAppInfo/#fullpath","title":"fullPath","text":"<p>\u2022 <code>Optional</code> fullPath: <code>string</code></p> <p>The full path to the cached app</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2088</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#immutable","title":"immutable","text":"<p>\u2022 <code>Optional</code> immutable: <code>boolean</code></p> <p><code>true</code> if the file contains an <code>immutable</code> mark in <code>Cache-control</code> header</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2071</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#integrity","title":"integrity","text":"<p>\u2022 <code>Optional</code> integrity: { <code>file?</code>: <code>string</code>  } | { <code>folder?</code>: <code>number</code>  }</p> <p>An object containing either <code>file</code> property with SHA1 hash of the file or <code>folder</code> property with total amount of cached files and subfolders</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2084</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#lastmodified","title":"lastModified","text":"<p>\u2022 <code>Optional</code> lastModified: <code>Date</code></p> <p>Date instance; the value of the file's <code>Last-Modified</code> header</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2067</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#maxage","title":"maxAge","text":"<p>\u2022 <code>Optional</code> maxAge: <code>number</code></p> <p>Integer representation of <code>maxAge</code> parameter in <code>Cache-control</code> header</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2075</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#packagehash","title":"packageHash","text":"<p>\u2022 packageHash: <code>string</code></p> <p>SHA1 hash of the package if it is a file (and not a folder)</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2063</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#timestamp","title":"timestamp","text":"<p>\u2022 <code>Optional</code> timestamp: <code>number</code></p> <p>The timestamp this item has been added to the cache (measured in Unix epoch milliseconds)</p>"},{"location":"reference/interfaces/appium_types.CachedAppInfo/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2079</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/","title":"Interface: ConfigureAppOptions","text":"<p>@appium/types.ConfigureAppOptions</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#properties","title":"Properties","text":"<ul> <li>onPostProcess</li> <li>supportedExtensions</li> </ul>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#onpostprocess","title":"onPostProcess","text":"<p>\u2022 <code>Optional</code> onPostProcess: (<code>obj</code>: <code>PostProcessOptions</code>&lt;<code>HTTPHeaders</code>&gt;) =&gt; <code>undefined</code> | <code>PostProcessResult</code> | <code>Promise</code>&lt;<code>undefined</code> | <code>PostProcessResult</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>obj</code>): <code>undefined</code> | <code>PostProcessResult</code> | <code>Promise</code>&lt;<code>undefined</code> | <code>PostProcessResult</code>&gt;</p> <p>Optional function, which should be applied to the application after it is downloaded/preprocessed.</p> <p>This function may be async and is expected to accept single object parameter. The function is expected to either return a falsy value, which means the app must not be cached and a fresh copy of it is downloaded each time, or if this function returns an object containing an <code>appPath</code> property, then the integrity of it will be verified and stored into the cache.</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#parameters","title":"Parameters","text":"Name Type <code>obj</code> <code>PostProcessOptions</code>&lt;<code>HTTPHeaders</code>&gt;"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#returns","title":"Returns","text":"<p><code>undefined</code> | <code>PostProcessResult</code> | <code>Promise</code>&lt;<code>undefined</code> | <code>PostProcessResult</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2129</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#supportedextensions","title":"supportedExtensions","text":"<p>\u2022 supportedExtensions: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.ConfigureAppOptions/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2132</p>"},{"location":"reference/interfaces/appium_types.Constraint/","title":"Interface: Constraint","text":"<p>@appium/types.Constraint</p>"},{"location":"reference/interfaces/appium_types.Constraint/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Constraint/#properties","title":"Properties","text":"<ul> <li>deprecated</li> <li>inclusion</li> <li>inclusionCaseInsensitive</li> <li>isArray</li> <li>isBoolean</li> <li>isNumber</li> <li>isObject</li> <li>isString</li> <li>presence</li> </ul>"},{"location":"reference/interfaces/appium_types.Constraint/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Constraint/#deprecated","title":"deprecated","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> deprecated: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:473</p>"},{"location":"reference/interfaces/appium_types.Constraint/#inclusion","title":"inclusion","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> inclusion: readonly [<code>string</code>, <code>string</code>]</p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:474</p>"},{"location":"reference/interfaces/appium_types.Constraint/#inclusioncaseinsensitive","title":"inclusionCaseInsensitive","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> inclusionCaseInsensitive: readonly [<code>string</code>, <code>string</code>]</p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:475</p>"},{"location":"reference/interfaces/appium_types.Constraint/#isarray","title":"isArray","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> isArray: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:472</p>"},{"location":"reference/interfaces/appium_types.Constraint/#isboolean","title":"isBoolean","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> isBoolean: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:470</p>"},{"location":"reference/interfaces/appium_types.Constraint/#isnumber","title":"isNumber","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> isNumber: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:469</p>"},{"location":"reference/interfaces/appium_types.Constraint/#isobject","title":"isObject","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> isObject: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:471</p>"},{"location":"reference/interfaces/appium_types.Constraint/#isstring","title":"isString","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> isString: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:468</p>"},{"location":"reference/interfaces/appium_types.Constraint/#presence","title":"presence","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> presence: <code>boolean</code> | <code>Readonly</code>&lt;{ <code>allowEmpty</code>: <code>boolean</code>  }&gt;</p>"},{"location":"reference/interfaces/appium_types.Constraint/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:467</p>"},{"location":"reference/interfaces/appium_types.Cookie/","title":"Interface: Cookie","text":"<p>@appium/types.Cookie</p>"},{"location":"reference/interfaces/appium_types.Cookie/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Cookie/#properties","title":"Properties","text":"<ul> <li>domain</li> <li>expiry</li> <li>httpOnly</li> <li>name</li> <li>path</li> <li>sameSite</li> <li>secure</li> <li>value</li> </ul>"},{"location":"reference/interfaces/appium_types.Cookie/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Cookie/#domain","title":"domain","text":"<p>\u2022 <code>Optional</code> domain: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:522</p>"},{"location":"reference/interfaces/appium_types.Cookie/#expiry","title":"expiry","text":"<p>\u2022 <code>Optional</code> expiry: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:525</p>"},{"location":"reference/interfaces/appium_types.Cookie/#httponly","title":"httpOnly","text":"<p>\u2022 <code>Optional</code> httpOnly: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:524</p>"},{"location":"reference/interfaces/appium_types.Cookie/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:519</p>"},{"location":"reference/interfaces/appium_types.Cookie/#path","title":"path","text":"<p>\u2022 <code>Optional</code> path: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:521</p>"},{"location":"reference/interfaces/appium_types.Cookie/#samesite","title":"sameSite","text":"<p>\u2022 <code>Optional</code> sameSite: <code>\"Lax\"</code> | <code>\"Strict\"</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:526</p>"},{"location":"reference/interfaces/appium_types.Cookie/#secure","title":"secure","text":"<p>\u2022 <code>Optional</code> secure: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:523</p>"},{"location":"reference/interfaces/appium_types.Cookie/#value","title":"value","text":"<p>\u2022 value: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Cookie/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:520</p>"},{"location":"reference/interfaces/appium_types.Core/","title":"Interface: Core&lt;C, Settings&gt;","text":"<p>@appium/types.Core</p> <p>Methods and properties which both <code>AppiumDriver</code> and <code>BaseDriver</code> inherit.</p> <p>This should not be used directly by external code.</p>"},{"location":"reference/interfaces/appium_types.Core/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/interfaces/appium_types.Core/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Core</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.Core/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Core/#properties","title":"Properties","text":"<ul> <li>allowInsecure</li> <li>basePath</li> <li>denyInsecure</li> <li>driverData</li> <li>eventEmitter</li> <li>eventHistory</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>isCommandsQueueEnabled</li> <li>locatorStrategies</li> <li>log</li> <li>newCommandTimeoutMs</li> <li>opts</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>sessionId</li> <li>settings</li> <li>shouldValidateCaps</li> <li>webLocatorStrategies</li> </ul>"},{"location":"reference/interfaces/appium_types.Core/#methods","title":"Methods","text":"<ul> <li>addManagedDriver</li> <li>assertFeatureEnabled</li> <li>canProxy</li> <li>clearNewCommandTimeout</li> <li>driverForSession</li> <li>getManagedDrivers</li> <li>getProxyAvoidList</li> <li>getStatus</li> <li>isFeatureEnabled</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>logEvent</li> <li>onUnexpectedShutdown</li> <li>proxyActive</li> <li>proxyRouteIsAvoided</li> <li>sessionExists</li> <li>validateLocatorStrategy</li> </ul>"},{"location":"reference/interfaces/appium_types.Core/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Core/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:587</p>"},{"location":"reference/interfaces/appium_types.Core/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:585</p>"},{"location":"reference/interfaces/appium_types.Core/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:588</p>"},{"location":"reference/interfaces/appium_types.Core/#driverdata","title":"driverData","text":"<p>\u2022 driverData: <code>DriverData</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:596</p>"},{"location":"reference/interfaces/appium_types.Core/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:593</p>"},{"location":"reference/interfaces/appium_types.Core/#eventhistory","title":"eventHistory","text":"<p>\u2022 eventHistory: <code>EventHistory</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:598</p>"},{"location":"reference/interfaces/appium_types.Core/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:584</p>"},{"location":"reference/interfaces/appium_types.Core/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:590</p>"},{"location":"reference/interfaces/appium_types.Core/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.Core/#type-declaration","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:582</p>"},{"location":"reference/interfaces/appium_types.Core/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 isCommandsQueueEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/driver.ts:597</p>"},{"location":"reference/interfaces/appium_types.Core/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/driver.ts:591</p>"},{"location":"reference/interfaces/appium_types.Core/#log","title":"log","text":"<p>\u2022 log: <code>AppiumLogger</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/driver.ts:595</p>"},{"location":"reference/interfaces/appium_types.Core/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/driver.ts:589</p>"},{"location":"reference/interfaces/appium_types.Core/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/driver.ts:581</p>"},{"location":"reference/interfaces/appium_types.Core/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/driver.ts:583</p>"},{"location":"reference/interfaces/appium_types.Core/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/driver.ts:586</p>"},{"location":"reference/interfaces/appium_types.Core/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/driver.ts:580</p>"},{"location":"reference/interfaces/appium_types.Core/#settings","title":"settings","text":"<p>\u2022 settings: <code>IDeviceSettings</code>&lt;<code>Settings</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/driver.ts:594</p>"},{"location":"reference/interfaces/appium_types.Core/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/driver.ts:579</p>"},{"location":"reference/interfaces/appium_types.Core/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/driver.ts:592</p>"},{"location":"reference/interfaces/appium_types.Core/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.Core/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/interfaces/appium_types.Core/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/driver.ts:642</p>"},{"location":"reference/interfaces/appium_types.Core/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_1","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/driver.ts:636</p>"},{"location":"reference/interfaces/appium_types.Core/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_2","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_2","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/driver.ts:640</p>"},{"location":"reference/interfaces/appium_types.Core/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/driver.ts:644</p>"},{"location":"reference/interfaces/appium_types.Core/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_3","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_4","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/driver.ts:646</p>"},{"location":"reference/interfaces/appium_types.Core/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.Core/#returns_5","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/driver.ts:643</p>"},{"location":"reference/interfaces/appium_types.Core/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId?</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_4","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_6","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/driver.ts:639</p>"},{"location":"reference/interfaces/appium_types.Core/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p> <p><code>Example</code></p> <pre><code>// webdriver.io example\nawait driver.status();\n</code></pre> <pre><code>driver.get_status()\n</code></pre> <pre><code>driver.getStatus();\n</code></pre> <pre><code># ruby_lib example\nremote_status\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"reference/interfaces/appium_types.Core/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/driver.ts:631</p>"},{"location":"reference/interfaces/appium_types.Core/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_5","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_8","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/driver.ts:635</p>"},{"location":"reference/interfaces/appium_types.Core/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#returns_9","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/driver.ts:634</p>"},{"location":"reference/interfaces/appium_types.Core/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#returns_10","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_30","title":"Defined in","text":"<p>packages/types/lib/driver.ts:633</p>"},{"location":"reference/interfaces/appium_types.Core/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_6","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_31","title":"Defined in","text":"<p>packages/types/lib/driver.ts:645</p>"},{"location":"reference/interfaces/appium_types.Core/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_7","title":"Parameters","text":"Name Type <code>handler</code> () =&gt; <code>any</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_32","title":"Defined in","text":"<p>packages/types/lib/driver.ts:599</p>"},{"location":"reference/interfaces/appium_types.Core/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_8","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_13","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_33","title":"Defined in","text":"<p>packages/types/lib/driver.ts:638</p>"},{"location":"reference/interfaces/appium_types.Core/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_9","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code> <code>method</code> <code>string</code> <code>url</code> <code>string</code> <code>body?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_14","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_34","title":"Defined in","text":"<p>packages/types/lib/driver.ts:641</p>"},{"location":"reference/interfaces/appium_types.Core/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_10","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_15","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_35","title":"Defined in","text":"<p>packages/types/lib/driver.ts:632</p>"},{"location":"reference/interfaces/appium_types.Core/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#parameters_11","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>webContext?</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.Core/#returns_16","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Core/#defined-in_36","title":"Defined in","text":"<p>packages/types/lib/driver.ts:637</p>"},{"location":"reference/interfaces/appium_types.Credential/","title":"Interface: Credential","text":"<p>@appium/types.Credential</p>"},{"location":"reference/interfaces/appium_types.Credential/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Credential/#properties","title":"Properties","text":"<ul> <li>credentialId</li> <li>isResidentCredential</li> <li>largeBlob</li> <li>privateKey</li> <li>rpId</li> <li>signCount</li> <li>userHandle</li> </ul>"},{"location":"reference/interfaces/appium_types.Credential/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Credential/#credentialid","title":"credentialId","text":"<p>\u2022 credentialId: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:549</p>"},{"location":"reference/interfaces/appium_types.Credential/#isresidentcredential","title":"isResidentCredential","text":"<p>\u2022 isResidentCredential: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:550</p>"},{"location":"reference/interfaces/appium_types.Credential/#largeblob","title":"largeBlob","text":"<p>\u2022 <code>Optional</code> largeBlob: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:555</p>"},{"location":"reference/interfaces/appium_types.Credential/#privatekey","title":"privateKey","text":"<p>\u2022 privateKey: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:552</p>"},{"location":"reference/interfaces/appium_types.Credential/#rpid","title":"rpId","text":"<p>\u2022 rpId: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:551</p>"},{"location":"reference/interfaces/appium_types.Credential/#signcount","title":"signCount","text":"<p>\u2022 signCount: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:554</p>"},{"location":"reference/interfaces/appium_types.Credential/#userhandle","title":"userHandle","text":"<p>\u2022 <code>Optional</code> userHandle: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Credential/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:553</p>"},{"location":"reference/interfaces/appium_types.DefaultCapabilitiesConfig/","title":"Interface: DefaultCapabilitiesConfig","text":"<p>@appium/types.DefaultCapabilitiesConfig</p> <p>Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.</p>"},{"location":"reference/interfaces/appium_types.DefaultCapabilitiesConfig/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.Driver/","title":"Interface: Driver&lt;C, CArgs, Settings, CreateResult, DeleteResult, SessionData&gt;","text":"<p>@appium/types.Driver</p> <p><code>BaseDriver</code> implements this.  It contains default behavior; external drivers are expected to implement <code>ExternalDriver</code> instead.</p> <p><code>C</code> should be the constraints of the driver. <code>CArgs</code> would be the shape of <code>cliArgs</code>. <code>Settings</code> is the shape of the raw device settings object (see <code>IDeviceSettings</code>)</p>"},{"location":"reference/interfaces/appium_types.Driver/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code> <code>CArgs</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>CreateResult</code> <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt; <code>DeleteResult</code> <code>DefaultDeleteSessionResult</code> <code>SessionData</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/interfaces/appium_types.Driver/#hierarchy","title":"Hierarchy","text":"<ul> <li> <p><code>ILogCommands</code></p> </li> <li> <p><code>IFindCommands</code></p> </li> <li> <p><code>ISettingsCommands</code>&lt;<code>Settings</code>&gt;</p> </li> <li> <p><code>ITimeoutCommands</code></p> </li> <li> <p><code>IEventCommands</code></p> </li> <li> <p><code>IExecuteCommands</code></p> </li> <li> <p><code>ISessionHandler</code>&lt;<code>C</code>, <code>CreateResult</code>, <code>DeleteResult</code>, <code>SessionData</code>&gt;</p> </li> <li> <p><code>Core</code>&lt;<code>C</code>, <code>Settings</code>&gt;</p> </li> </ul> <p>\u21b3 <code>Driver</code></p> <p>\u21b3\u21b3 <code>ExternalDriver</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Driver/#properties","title":"Properties","text":"<ul> <li>allowInsecure</li> <li>basePath</li> <li>caps</li> <li>cliArgs</li> <li>denyInsecure</li> <li>desiredCapConstraints</li> <li>driverData</li> <li>eventEmitter</li> <li>eventHistory</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>isCommandsQueueEnabled</li> <li>locatorStrategies</li> <li>log</li> <li>newCommandTimeoutMs</li> <li>opts</li> <li>originalCaps</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>server</li> <li>serverHost</li> <li>serverPath</li> <li>serverPort</li> <li>sessionId</li> <li>settings</li> <li>shouldValidateCaps</li> <li>supportedLogTypes</li> <li>updateSettings</li> <li>webLocatorStrategies</li> </ul>"},{"location":"reference/interfaces/appium_types.Driver/#methods","title":"Methods","text":"<ul> <li>addManagedDriver</li> <li>assertFeatureEnabled</li> <li>assignServer</li> <li>canProxy</li> <li>clearNewCommandTimeout</li> <li>createSession</li> <li>deleteSession</li> <li>driverForSession</li> <li>executeCommand</li> <li>executeMethod</li> <li>findElOrEls</li> <li>findElOrElsWithProcessing</li> <li>findElement</li> <li>findElementFromElement</li> <li>findElementFromShadowRoot</li> <li>findElements</li> <li>findElementsFromElement</li> <li>findElementsFromShadowRoot</li> <li>getLog</li> <li>getLogEvents</li> <li>getLogTypes</li> <li>getManagedDrivers</li> <li>getPageSource</li> <li>getProxyAvoidList</li> <li>getSession</li> <li>getSessions</li> <li>getSettings</li> <li>getStatus</li> <li>getTimeouts</li> <li>implicitWait</li> <li>implicitWaitForCondition</li> <li>implicitWaitMJSONWP</li> <li>implicitWaitW3C</li> <li>isFeatureEnabled</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>logCustomEvent</li> <li>logEvent</li> <li>logExtraCaps</li> <li>newCommandTimeout</li> <li>onUnexpectedShutdown</li> <li>pageLoadTimeoutMJSONWP</li> <li>pageLoadTimeoutW3C</li> <li>parseTimeoutArgument</li> <li>proxyActive</li> <li>proxyRouteIsAvoided</li> <li>reset</li> <li>scriptTimeoutMJSONWP</li> <li>scriptTimeoutW3C</li> <li>sessionExists</li> <li>setImplicitWait</li> <li>setNewCommandTimeout</li> <li>startNewCommandTimeout</li> <li>startUnexpectedShutdown</li> <li>timeouts</li> <li>validateDesiredCaps</li> <li>validateLocatorStrategy</li> </ul>"},{"location":"reference/interfaces/appium_types.Driver/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Driver/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from","title":"Inherited from","text":"<p>Core.allowInsecure</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:587</p>"},{"location":"reference/interfaces/appium_types.Driver/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_1","title":"Inherited from","text":"<p>Core.basePath</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:585</p>"},{"location":"reference/interfaces/appium_types.Driver/#caps","title":"caps","text":"<p>\u2022 <code>Optional</code> caps: <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p> <p>The processed capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:719</p>"},{"location":"reference/interfaces/appium_types.Driver/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>CArgs</code></p> <p>The set of command line arguments set for this driver</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:675</p>"},{"location":"reference/interfaces/appium_types.Driver/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_2","title":"Inherited from","text":"<p>Core.denyInsecure</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:588</p>"},{"location":"reference/interfaces/appium_types.Driver/#desiredcapconstraints","title":"desiredCapConstraints","text":"<p>\u2022 desiredCapConstraints: <code>C</code></p> <p>The constraints object used to validate capabilities</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:729</p>"},{"location":"reference/interfaces/appium_types.Driver/#driverdata","title":"driverData","text":"<p>\u2022 driverData: <code>DriverData</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_3","title":"Inherited from","text":"<p>Core.driverData</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:596</p>"},{"location":"reference/interfaces/appium_types.Driver/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_4","title":"Inherited from","text":"<p>Core.eventEmitter</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:593</p>"},{"location":"reference/interfaces/appium_types.Driver/#eventhistory","title":"eventHistory","text":"<p>\u2022 eventHistory: <code>EventHistory</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_5","title":"Inherited from","text":"<p>Core.eventHistory</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:598</p>"},{"location":"reference/interfaces/appium_types.Driver/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_6","title":"Inherited from","text":"<p>Core.helpers</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/driver.ts:584</p>"},{"location":"reference/interfaces/appium_types.Driver/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_7","title":"Inherited from","text":"<p>Core.implicitWaitMs</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/driver.ts:590</p>"},{"location":"reference/interfaces/appium_types.Driver/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#type-declaration","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_8","title":"Inherited from","text":"<p>Core.initialOpts</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/driver.ts:582</p>"},{"location":"reference/interfaces/appium_types.Driver/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 isCommandsQueueEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_9","title":"Inherited from","text":"<p>Core.isCommandsQueueEnabled</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/driver.ts:597</p>"},{"location":"reference/interfaces/appium_types.Driver/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_10","title":"Inherited from","text":"<p>Core.locatorStrategies</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/driver.ts:591</p>"},{"location":"reference/interfaces/appium_types.Driver/#log","title":"log","text":"<p>\u2022 log: <code>AppiumLogger</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_11","title":"Inherited from","text":"<p>Core.log</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/driver.ts:595</p>"},{"location":"reference/interfaces/appium_types.Driver/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_12","title":"Inherited from","text":"<p>Core.newCommandTimeoutMs</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/driver.ts:589</p>"},{"location":"reference/interfaces/appium_types.Driver/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_13","title":"Inherited from","text":"<p>Core.opts</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/driver.ts:581</p>"},{"location":"reference/interfaces/appium_types.Driver/#originalcaps","title":"originalCaps","text":"<p>\u2022 <code>Optional</code> originalCaps: <code>W3CCapabilities</code>&lt;<code>C</code>&gt;</p> <p>The original capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/driver.ts:724</p>"},{"location":"reference/interfaces/appium_types.Driver/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_14","title":"Inherited from","text":"<p>Core.protocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/driver.ts:583</p>"},{"location":"reference/interfaces/appium_types.Driver/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_15","title":"Inherited from","text":"<p>Core.relaxedSecurityEnabled</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/driver.ts:586</p>"},{"location":"reference/interfaces/appium_types.Driver/#server","title":"server","text":"<p>\u2022 <code>Optional</code> server: <code>AppiumServer</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/driver.ts:677</p>"},{"location":"reference/interfaces/appium_types.Driver/#serverhost","title":"serverHost","text":"<p>\u2022 <code>Optional</code> serverHost: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/driver.ts:678</p>"},{"location":"reference/interfaces/appium_types.Driver/#serverpath","title":"serverPath","text":"<p>\u2022 <code>Optional</code> serverPath: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/driver.ts:680</p>"},{"location":"reference/interfaces/appium_types.Driver/#serverport","title":"serverPort","text":"<p>\u2022 <code>Optional</code> serverPort: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/driver.ts:679</p>"},{"location":"reference/interfaces/appium_types.Driver/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_16","title":"Inherited from","text":"<p>Core.sessionId</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/driver.ts:580</p>"},{"location":"reference/interfaces/appium_types.Driver/#settings","title":"settings","text":"<p>\u2022 settings: <code>IDeviceSettings</code>&lt;<code>Settings</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_17","title":"Inherited from","text":"<p>Core.settings</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/driver.ts:594</p>"},{"location":"reference/interfaces/appium_types.Driver/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_18","title":"Inherited from","text":"<p>Core.shouldValidateCaps</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/driver.ts:579</p>"},{"location":"reference/interfaces/appium_types.Driver/#supportedlogtypes","title":"supportedLogTypes","text":"<p>\u2022 supportedLogTypes: <code>Readonly</code>&lt;<code>LogDefRecord</code>&gt;</p> <p>Definition of the available log types</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_19","title":"Inherited from","text":"<p>ILogCommands.supportedLogTypes</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/driver.ts:334</p>"},{"location":"reference/interfaces/appium_types.Driver/#updatesettings","title":"updateSettings","text":"<p>\u2022 updateSettings: (<code>settings</code>: <code>Settings</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (<code>settings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters","title":"Parameters","text":"Name Type Description <code>settings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/interfaces/appium_types.Driver/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_20","title":"Inherited from","text":"<p>ISettingsCommands.updateSettings</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/driver.ts:381</p>"},{"location":"reference/interfaces/appium_types.Driver/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_21","title":"Inherited from","text":"<p>Core.webLocatorStrategies</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/driver.ts:592</p>"},{"location":"reference/interfaces/appium_types.Driver/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.Driver/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_1","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/interfaces/appium_types.Driver/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_22","title":"Inherited from","text":"<p>Core.addManagedDriver</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_30","title":"Defined in","text":"<p>packages/types/lib/driver.ts:642</p>"},{"location":"reference/interfaces/appium_types.Driver/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_2","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_2","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_23","title":"Inherited from","text":"<p>Core.assertFeatureEnabled</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_31","title":"Defined in","text":"<p>packages/types/lib/driver.ts:636</p>"},{"location":"reference/interfaces/appium_types.Driver/#assignserver","title":"assignServer","text":"<p>\u25b8 <code>Optional</code> assignServer(<code>server</code>, <code>host</code>, <code>port</code>, <code>path</code>): <code>void</code></p> <p>A helper function used to assign server information to the driver instance so the driver knows where the server is Running</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_3","title":"Parameters","text":"Name Type Description <code>server</code> <code>AppiumServer</code> the server object <code>host</code> <code>string</code> the server hostname <code>port</code> <code>number</code> the server port <code>path</code> <code>string</code> the server base url"},{"location":"reference/interfaces/appium_types.Driver/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_32","title":"Defined in","text":"<p>packages/types/lib/driver.ts:760</p>"},{"location":"reference/interfaces/appium_types.Driver/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_4","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_4","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_24","title":"Inherited from","text":"<p>Core.canProxy</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_33","title":"Defined in","text":"<p>packages/types/lib/driver.ts:640</p>"},{"location":"reference/interfaces/appium_types.Driver/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_25","title":"Inherited from","text":"<p>Core.clearNewCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_34","title":"Defined in","text":"<p>packages/types/lib/driver.ts:644</p>"},{"location":"reference/interfaces/appium_types.Driver/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>w3cCaps1</code>, <code>w3cCaps2?</code>, <code>w3cCaps3?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_5","title":"Parameters","text":"Name Type Description <code>w3cCaps1</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>w3cCaps2?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>w3cCaps3?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>driverData?</code> <code>DriverData</code>[] a list of DriverData objects representing other sessions running for this driver on the same Appium server. This information can be used to help ensure no conflict of resources"},{"location":"reference/interfaces/appium_types.Driver/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>The capabilities object representing the created session</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_26","title":"Inherited from","text":"<p>ISessionHandler.createSession</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_35","title":"Defined in","text":"<p>packages/types/lib/driver.ts:430</p>"},{"location":"reference/interfaces/appium_types.Driver/#deletesession","title":"deleteSession","text":"<p>\u25b8 deleteSession(<code>sessionId?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p> <p>Stop an automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-session</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_6","title":"Parameters","text":"Name Type Description <code>sessionId?</code> <code>string</code> the id of the session that is to be deleted <code>driverData?</code> <code>DriverData</code>[] the driver data for other currently-running sessions"},{"location":"reference/interfaces/appium_types.Driver/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_27","title":"Inherited from","text":"<p>ISessionHandler.deleteSession</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_36","title":"Defined in","text":"<p>packages/types/lib/driver.ts:444</p>"},{"location":"reference/interfaces/appium_types.Driver/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_7","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_8","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_28","title":"Inherited from","text":"<p>Core.driverForSession</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_37","title":"Defined in","text":"<p>packages/types/lib/driver.ts:646</p>"},{"location":"reference/interfaces/appium_types.Driver/#executecommand","title":"executeCommand","text":"<p>\u25b8 executeCommand(<code>cmd</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Execute a driver (WebDriver-protocol) command by its name as defined in the routes file</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_8","title":"Parameters","text":"Name Type Description <code>cmd</code> <code>string</code> the name of the command <code>...args</code> <code>any</code>[] arguments to pass to the command"},{"location":"reference/interfaces/appium_types.Driver/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p> <p>The result of running the command</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_38","title":"Defined in","text":"<p>packages/types/lib/driver.ts:692</p>"},{"location":"reference/interfaces/appium_types.Driver/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>TArgs</code>, <code>TReturn</code>&gt;(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Call an <code>Execute Method</code> by its name with the given arguments. This method will check that the driver has registered the method matching the name, and send it the arguments.</p>"},{"location":"reference/interfaces/appium_types.Driver/#type-parameters_1","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;] = <code>unknown</code>[] <code>TReturn</code> <code>unknown</code>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_9","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the name of the Execute Method <code>args</code> <code>TArgs</code> a singleton array containing an arguments object"},{"location":"reference/interfaces/appium_types.Driver/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>The result of calling the Execute Method</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_29","title":"Inherited from","text":"<p>IExecuteCommands.executeMethod</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_39","title":"Defined in","text":"<p>packages/types/lib/driver.ts:170</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelorels","title":"findElOrEls","text":"<p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A helper method that returns one or more UI elements based on the search criteria</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_10","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.Driver/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_30","title":"Inherited from","text":"<p>IFindCommands.findElOrEls</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_40","title":"Defined in","text":"<p>packages/types/lib/driver.ts:294</p> <p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_11","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_31","title":"Inherited from","text":"<p>IFindCommands.findElOrEls</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_41","title":"Defined in","text":"<p>packages/types/lib/driver.ts:295</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelorelswithprocessing","title":"findElOrElsWithProcessing","text":"<p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>This is a wrapper for <code>findElOrEls</code> that validates locator strategies and implements the <code>appium:printPageSourceOnFindFailure</code> capability</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_12","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.Driver/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_32","title":"Inherited from","text":"<p>IFindCommands.findElOrElsWithProcessing</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_42","title":"Defined in","text":"<p>packages/types/lib/driver.ts:308</p> <p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_13","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_33","title":"Inherited from","text":"<p>IFindCommands.findElOrElsWithProcessing</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_43","title":"Defined in","text":"<p>packages/types/lib/driver.ts:314</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_14","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/interfaces/appium_types.Driver/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_34","title":"Inherited from","text":"<p>IFindCommands.findElement</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_44","title":"Defined in","text":"<p>packages/types/lib/driver.ts:210</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelementfromelement","title":"findElementFromElement","text":"<p>\u25b8 findElementFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_15","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.Driver/#returns_16","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_35","title":"Inherited from","text":"<p>IFindCommands.findElementFromElement</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_45","title":"Defined in","text":"<p>packages/types/lib/driver.ts:235</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelementfromshadowroot","title":"findElementFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_16","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.Driver/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_36","title":"Inherited from","text":"<p>IFindCommands.findElementFromShadowRoot</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_46","title":"Defined in","text":"<p>packages/types/lib/driver.ts:263</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_17","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/interfaces/appium_types.Driver/#returns_18","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_37","title":"Inherited from","text":"<p>IFindCommands.findElements</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_47","title":"Defined in","text":"<p>packages/types/lib/driver.ts:221</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelementsfromelement","title":"findElementsFromElement","text":"<p>\u25b8 findElementsFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_18","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.Driver/#returns_19","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_38","title":"Inherited from","text":"<p>IFindCommands.findElementsFromElement</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_48","title":"Defined in","text":"<p>packages/types/lib/driver.ts:248</p>"},{"location":"reference/interfaces/appium_types.Driver/#findelementsfromshadowroot","title":"findElementsFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementsFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_19","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.Driver/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_39","title":"Inherited from","text":"<p>IFindCommands.findElementsFromShadowRoot</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_49","title":"Defined in","text":"<p>packages/types/lib/driver.ts:278</p>"},{"location":"reference/interfaces/appium_types.Driver/#getlog","title":"getLog","text":"<p>\u25b8 getLog(<code>logType</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the log for a given log type.</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_20","title":"Parameters","text":"Name Type Description <code>logType</code> <code>string</code> Name/key of log type as defined in <code>supportedLogTypes</code>."},{"location":"reference/interfaces/appium_types.Driver/#returns_21","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_40","title":"Inherited from","text":"<p>ILogCommands.getLog</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_50","title":"Defined in","text":"<p>packages/types/lib/driver.ts:346</p>"},{"location":"reference/interfaces/appium_types.Driver/#getlogevents","title":"getLogEvents","text":"<p>\u25b8 getLogEvents(<code>type?</code>): <code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_21","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/interfaces/appium_types.Driver/#returns_22","title":"Returns","text":"<p><code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>The event history for the session</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_41","title":"Inherited from","text":"<p>IEventCommands.getLogEvents</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_51","title":"Defined in","text":"<p>packages/types/lib/driver.ts:157</p>"},{"location":"reference/interfaces/appium_types.Driver/#getlogtypes","title":"getLogTypes","text":"<p>\u25b8 getLogTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get available log types as a list of strings</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_23","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_42","title":"Inherited from","text":"<p>ILogCommands.getLogTypes</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_52","title":"Defined in","text":"<p>packages/types/lib/driver.ts:339</p>"},{"location":"reference/interfaces/appium_types.Driver/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_24","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_43","title":"Inherited from","text":"<p>Core.getManagedDrivers</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_53","title":"Defined in","text":"<p>packages/types/lib/driver.ts:643</p>"},{"location":"reference/interfaces/appium_types.Driver/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_25","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_44","title":"Inherited from","text":"<p>IFindCommands.getPageSource</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_54","title":"Defined in","text":"<p>packages/types/lib/driver.ts:327</p>"},{"location":"reference/interfaces/appium_types.Driver/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId?</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_22","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_26","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_45","title":"Inherited from","text":"<p>Core.getProxyAvoidList</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_55","title":"Defined in","text":"<p>packages/types/lib/driver.ts:639</p>"},{"location":"reference/interfaces/appium_types.Driver/#getsession","title":"getSession","text":"<p>\u25b8 getSession(): <code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>Get the data for the current session</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_27","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>A session data object</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_46","title":"Inherited from","text":"<p>ISessionHandler.getSession</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_56","title":"Defined in","text":"<p>packages/types/lib/driver.ts:458</p>"},{"location":"reference/interfaces/appium_types.Driver/#getsessions","title":"getSessions","text":"<p>\u25b8 getSessions(): <code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_28","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>A list of session data objects</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_47","title":"Inherited from","text":"<p>ISessionHandler.getSessions</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_57","title":"Defined in","text":"<p>packages/types/lib/driver.ts:451</p>"},{"location":"reference/interfaces/appium_types.Driver/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>Get the current settings for the session</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_29","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>The settings object</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_48","title":"Inherited from","text":"<p>ISettingsCommands.getSettings</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_58","title":"Defined in","text":"<p>packages/types/lib/driver.ts:388</p>"},{"location":"reference/interfaces/appium_types.Driver/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p> <p><code>Example</code></p> <pre><code>// webdriver.io example\nawait driver.status();\n</code></pre> <pre><code>driver.get_status()\n</code></pre> <pre><code>driver.getStatus();\n</code></pre> <pre><code># ruby_lib example\nremote_status\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"reference/interfaces/appium_types.Driver/#returns_30","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_49","title":"Inherited from","text":"<p>Core.getStatus</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_59","title":"Defined in","text":"<p>packages/types/lib/driver.ts:631</p>"},{"location":"reference/interfaces/appium_types.Driver/#gettimeouts","title":"getTimeouts","text":"<p>\u25b8 getTimeouts(): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get the current timeouts</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-timeouts</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_31","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>A map of timeout names to ms values</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_50","title":"Inherited from","text":"<p>ITimeoutCommands.getTimeouts</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_60","title":"Defined in","text":"<p>packages/types/lib/driver.ts:77</p>"},{"location":"reference/interfaces/appium_types.Driver/#implicitwait","title":"implicitWait","text":"<p>\u25b8 implicitWait(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_23","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_32","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_51","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWait</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_61","title":"Defined in","text":"<p>packages/types/lib/driver.ts:53</p>"},{"location":"reference/interfaces/appium_types.Driver/#implicitwaitforcondition","title":"implicitWaitForCondition","text":"<p>\u25b8 implicitWaitForCondition(<code>condition</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Periodically retry an async function up until the currently set implicit wait timeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_24","title":"Parameters","text":"Name Type Description <code>condition</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>Promise</code>&lt;<code>any</code>&gt; the behaviour to retry until it returns truthy"},{"location":"reference/interfaces/appium_types.Driver/#returns_33","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the condition</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_52","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitForCondition</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_62","title":"Defined in","text":"<p>packages/types/lib/driver.ts:69</p>"},{"location":"reference/interfaces/appium_types.Driver/#implicitwaitmjsonwp","title":"implicitWaitMJSONWP","text":"<p>\u25b8 implicitWaitMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_25","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_34","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_53","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitMJSONWP</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_63","title":"Defined in","text":"<p>packages/types/lib/driver.ts:92</p>"},{"location":"reference/interfaces/appium_types.Driver/#implicitwaitw3c","title":"implicitWaitW3C","text":"<p>\u25b8 implicitWaitW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_26","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_35","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_54","title":"Inherited from","text":"<p>ITimeoutCommands.implicitWaitW3C</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_64","title":"Defined in","text":"<p>packages/types/lib/driver.ts:84</p>"},{"location":"reference/interfaces/appium_types.Driver/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_27","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_36","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_55","title":"Inherited from","text":"<p>Core.isFeatureEnabled</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_65","title":"Defined in","text":"<p>packages/types/lib/driver.ts:635</p>"},{"location":"reference/interfaces/appium_types.Driver/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_37","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_56","title":"Inherited from","text":"<p>Core.isMjsonwpProtocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_66","title":"Defined in","text":"<p>packages/types/lib/driver.ts:634</p>"},{"location":"reference/interfaces/appium_types.Driver/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_38","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_57","title":"Inherited from","text":"<p>Core.isW3CProtocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_67","title":"Defined in","text":"<p>packages/types/lib/driver.ts:633</p>"},{"location":"reference/interfaces/appium_types.Driver/#logcustomevent","title":"logCustomEvent","text":"<p>\u25b8 logCustomEvent(<code>vendor</code>, <code>event</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_28","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/interfaces/appium_types.Driver/#returns_39","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_58","title":"Inherited from","text":"<p>IEventCommands.logCustomEvent</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_68","title":"Defined in","text":"<p>packages/types/lib/driver.ts:148</p>"},{"location":"reference/interfaces/appium_types.Driver/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_29","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_40","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_59","title":"Inherited from","text":"<p>Core.logEvent</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_69","title":"Defined in","text":"<p>packages/types/lib/driver.ts:645</p>"},{"location":"reference/interfaces/appium_types.Driver/#logextracaps","title":"logExtraCaps","text":"<p>\u25b8 logExtraCaps(<code>caps</code>): <code>void</code></p> <p>A helper function to log unrecognized capabilities to the console</p> <p><code>Params</code></p> <p>caps - the capabilities</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_30","title":"Parameters","text":"Name Type <code>caps</code> <code>DriverCaps</code>&lt;<code>C</code>&gt;"},{"location":"reference/interfaces/appium_types.Driver/#returns_41","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_70","title":"Defined in","text":"<p>packages/types/lib/driver.ts:749</p>"},{"location":"reference/interfaces/appium_types.Driver/#newcommandtimeout","title":"newCommandTimeout","text":"<p>\u25b8 newCommandTimeout(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set Appium's new command timeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_31","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_42","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_60","title":"Inherited from","text":"<p>ITimeoutCommands.newCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_71","title":"Defined in","text":"<p>packages/types/lib/driver.ts:129</p>"},{"location":"reference/interfaces/appium_types.Driver/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_32","title":"Parameters","text":"Name Type <code>handler</code> () =&gt; <code>any</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_43","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_61","title":"Inherited from","text":"<p>Core.onUnexpectedShutdown</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_72","title":"Defined in","text":"<p>packages/types/lib/driver.ts:599</p>"},{"location":"reference/interfaces/appium_types.Driver/#pageloadtimeoutmjsonwp","title":"pageLoadTimeoutMJSONWP","text":"<p>\u25b8 pageLoadTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_33","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_44","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_62","title":"Inherited from","text":"<p>ITimeoutCommands.pageLoadTimeoutMJSONWP</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_73","title":"Defined in","text":"<p>packages/types/lib/driver.ts:107</p>"},{"location":"reference/interfaces/appium_types.Driver/#pageloadtimeoutw3c","title":"pageLoadTimeoutW3C","text":"<p>\u25b8 pageLoadTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_34","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_45","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_63","title":"Inherited from","text":"<p>ITimeoutCommands.pageLoadTimeoutW3C</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_74","title":"Defined in","text":"<p>packages/types/lib/driver.ts:99</p>"},{"location":"reference/interfaces/appium_types.Driver/#parsetimeoutargument","title":"parseTimeoutArgument","text":"<p>\u25b8 parseTimeoutArgument(<code>ms</code>): <code>number</code></p> <p>Get a timeout value from a number or a string</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_35","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout value as a number or a string"},{"location":"reference/interfaces/appium_types.Driver/#returns_46","title":"Returns","text":"<p><code>number</code></p> <p>The timeout as a number in ms</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_64","title":"Inherited from","text":"<p>ITimeoutCommands.parseTimeoutArgument</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_75","title":"Defined in","text":"<p>packages/types/lib/driver.ts:138</p>"},{"location":"reference/interfaces/appium_types.Driver/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_36","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_47","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_65","title":"Inherited from","text":"<p>Core.proxyActive</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_76","title":"Defined in","text":"<p>packages/types/lib/driver.ts:638</p>"},{"location":"reference/interfaces/appium_types.Driver/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_37","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code> <code>method</code> <code>string</code> <code>url</code> <code>string</code> <code>body?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_48","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_66","title":"Inherited from","text":"<p>Core.proxyRouteIsAvoided</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_77","title":"Defined in","text":"<p>packages/types/lib/driver.ts:641</p>"},{"location":"reference/interfaces/appium_types.Driver/#reset","title":"reset","text":"<p>\u25b8 reset(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_49","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_78","title":"Defined in","text":"<p>packages/types/lib/driver.ts:714</p>"},{"location":"reference/interfaces/appium_types.Driver/#scripttimeoutmjsonwp","title":"scriptTimeoutMJSONWP","text":"<p>\u25b8 scriptTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_38","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_50","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_67","title":"Inherited from","text":"<p>ITimeoutCommands.scriptTimeoutMJSONWP</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_79","title":"Defined in","text":"<p>packages/types/lib/driver.ts:122</p>"},{"location":"reference/interfaces/appium_types.Driver/#scripttimeoutw3c","title":"scriptTimeoutW3C","text":"<p>\u25b8 scriptTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_39","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_51","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_68","title":"Inherited from","text":"<p>ITimeoutCommands.scriptTimeoutW3C</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_80","title":"Defined in","text":"<p>packages/types/lib/driver.ts:114</p>"},{"location":"reference/interfaces/appium_types.Driver/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_40","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_52","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_69","title":"Inherited from","text":"<p>Core.sessionExists</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_81","title":"Defined in","text":"<p>packages/types/lib/driver.ts:632</p>"},{"location":"reference/interfaces/appium_types.Driver/#setimplicitwait","title":"setImplicitWait","text":"<p>\u25b8 setImplicitWait(<code>ms</code>): <code>void</code></p> <p>A helper method (not a command) used to set the implicit wait value</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_41","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the implicit wait in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_53","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_70","title":"Inherited from","text":"<p>ITimeoutCommands.setImplicitWait</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_82","title":"Defined in","text":"<p>packages/types/lib/driver.ts:60</p>"},{"location":"reference/interfaces/appium_types.Driver/#setnewcommandtimeout","title":"setNewCommandTimeout","text":"<p>\u25b8 setNewCommandTimeout(<code>ms</code>): <code>void</code></p> <p>Set the new command timeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_42","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.Driver/#returns_54","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_71","title":"Inherited from","text":"<p>ITimeoutCommands.setNewCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_83","title":"Defined in","text":"<p>packages/types/lib/driver.ts:43</p>"},{"location":"reference/interfaces/appium_types.Driver/#startnewcommandtimeout","title":"startNewCommandTimeout","text":"<p>\u25b8 startNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Start the timer for the New Command Timeout, which when it runs out, will stop the current session</p>"},{"location":"reference/interfaces/appium_types.Driver/#returns_55","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_84","title":"Defined in","text":"<p>packages/types/lib/driver.ts:706</p>"},{"location":"reference/interfaces/appium_types.Driver/#startunexpectedshutdown","title":"startUnexpectedShutdown","text":"<p>\u25b8 startUnexpectedShutdown(<code>err?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Signify to any owning processes that this driver encountered an error which should cause the session to terminate immediately (for example an upstream service failed)</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_43","title":"Parameters","text":"Name Type Description <code>err?</code> <code>Error</code> the Error object which is causing the shutdown"},{"location":"reference/interfaces/appium_types.Driver/#returns_56","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_85","title":"Defined in","text":"<p>packages/types/lib/driver.ts:700</p>"},{"location":"reference/interfaces/appium_types.Driver/#timeouts","title":"timeouts","text":"<p>\u25b8 timeouts(<code>type</code>, <code>ms</code>, <code>script?</code>, <code>pageLoad?</code>, <code>implicit?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_44","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/interfaces/appium_types.Driver/#returns_57","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_72","title":"Inherited from","text":"<p>ITimeoutCommands.timeouts</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_86","title":"Defined in","text":"<p>packages/types/lib/driver.ts:30</p>"},{"location":"reference/interfaces/appium_types.Driver/#validatedesiredcaps","title":"validateDesiredCaps","text":"<p>\u25b8 validateDesiredCaps(<code>caps</code>): <code>boolean</code></p> <p>Validate the capabilities used to start a session</p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_45","title":"Parameters","text":"Name Type Description <code>caps</code> <code>DriverCaps</code>&lt;<code>C</code>&gt; the capabilities"},{"location":"reference/interfaces/appium_types.Driver/#returns_58","title":"Returns","text":"<p><code>boolean</code></p> <p>Whether or not the capabilities are valid</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_87","title":"Defined in","text":"<p>packages/types/lib/driver.ts:740</p>"},{"location":"reference/interfaces/appium_types.Driver/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#parameters_46","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>webContext?</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.Driver/#returns_59","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.Driver/#inherited-from_73","title":"Inherited from","text":"<p>Core.validateLocatorStrategy</p>"},{"location":"reference/interfaces/appium_types.Driver/#defined-in_88","title":"Defined in","text":"<p>packages/types/lib/driver.ts:637</p>"},{"location":"reference/interfaces/appium_types.DriverConfig/","title":"Interface: DriverConfig","text":"<p>@appium/types.DriverConfig</p> <p>Driver-specific configuration. Keys should correspond to driver package names</p>"},{"location":"reference/interfaces/appium_types.DriverConfig/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/","title":"Interface: DriverExecuteMethodDef&lt;T&gt;","text":"<p>@appium/types.DriverExecuteMethodDef</p> <p>A definition of an execute method in a <code>Driver</code>.</p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Driver</code>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseExecuteMethodDef</code></li> </ul> <p>\u21b3 <code>DriverExecuteMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#properties","title":"Properties","text":"<ul> <li>command</li> <li>params</li> </ul>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#command","title":"command","text":"<p>\u2022 command: <code>ConditionalKeys</code>&lt;<code>T</code>, <code>DriverCommand</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:122</p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#params","title":"params","text":"<p>\u2022 <code>Optional</code> params: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#type-declaration","title":"Type declaration","text":"Name Type <code>optional?</code> readonly <code>string</code>[] <code>required?</code> readonly <code>string</code>[]"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#inherited-from","title":"Inherited from","text":"<p>BaseExecuteMethodDef.params</p>"},{"location":"reference/interfaces/appium_types.DriverExecuteMethodDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:112</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/","title":"Interface: DriverHelpers","text":"<p>@appium/types.DriverHelpers</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.DriverHelpers/#properties","title":"Properties","text":"<ul> <li>configureApp</li> <li>duplicateKeys</li> <li>generateDriverLogPrefix</li> <li>isPackageOrBundle</li> <li>parseCapsArray</li> </ul>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.DriverHelpers/#configureapp","title":"configureApp","text":"<p>\u2022 configureApp: (<code>app</code>: <code>string</code>, <code>supportedAppExtensions?</code>: <code>string</code> | <code>string</code>[] | <code>ConfigureAppOptions</code>) =&gt; <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>app</code>, <code>supportedAppExtensions?</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parameters","title":"Parameters","text":"Name Type <code>app</code> <code>string</code> <code>supportedAppExtensions?</code> <code>string</code> | <code>string</code>[] | <code>ConfigureAppOptions</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:486</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#duplicatekeys","title":"duplicateKeys","text":"<p>\u2022 duplicateKeys: (<code>input</code>: <code>T</code>, <code>firstKey</code>: <code>string</code>, <code>secondKey</code>: <code>string</code>) =&gt; <code>T</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 &lt;<code>T</code>&gt;(<code>input</code>, <code>firstKey</code>, <code>secondKey</code>): <code>T</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-parameters","title":"Type parameters","text":"Name <code>T</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parameters_1","title":"Parameters","text":"Name Type <code>input</code> <code>T</code> <code>firstKey</code> <code>string</code> <code>secondKey</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#returns_1","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:491</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#generatedriverlogprefix","title":"generateDriverLogPrefix","text":"<p>\u2022 generateDriverLogPrefix: &lt;C&gt;(<code>obj</code>: <code>Core</code>&lt;<code>C</code>, <code>StringRecord</code>&gt;, <code>sessionId?</code>: <code>string</code>) =&gt; <code>string</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-declaration_2","title":"Type declaration","text":"<p>\u25b8 &lt;<code>C</code>&gt;(<code>obj</code>, <code>sessionId?</code>): <code>string</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-parameters_1","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parameters_2","title":"Parameters","text":"Name Type <code>obj</code> <code>Core</code>&lt;<code>C</code>, <code>StringRecord</code>&gt; <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#returns_2","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:493</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#ispackageorbundle","title":"isPackageOrBundle","text":"<p>\u2022 isPackageOrBundle: (<code>app</code>: <code>string</code>) =&gt; <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-declaration_3","title":"Type declaration","text":"<p>\u25b8 (<code>app</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parameters_3","title":"Parameters","text":"Name Type <code>app</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#returns_3","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:490</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parsecapsarray","title":"parseCapsArray","text":"<p>\u2022 parseCapsArray: (<code>cap</code>: <code>string</code> | <code>string</code>[]) =&gt; <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#type-declaration_4","title":"Type declaration","text":"<p>\u25b8 (<code>cap</code>): <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#parameters_4","title":"Parameters","text":"Name Type <code>cap</code> <code>string</code> | <code>string</code>[]"},{"location":"reference/interfaces/appium_types.DriverHelpers/#returns_4","title":"Returns","text":"<p><code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.DriverHelpers/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:492</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/","title":"Interface: DriverMethodDef&lt;T, D&gt;","text":"<p>@appium/types.DriverMethodDef</p> <p>A definition of an exposed API command in a <code>Driver</code>.</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Driver</code> <code>D</code> extends <code>boolean</code> = <code>boolean</code>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseMethodDef</code></li> </ul> <p>\u21b3 <code>DriverMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.DriverMethodDef/#properties","title":"Properties","text":"<ul> <li>command</li> <li>deprecated</li> <li>neverProxy</li> <li>payloadParams</li> </ul>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.DriverMethodDef/#command","title":"command","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> command: <code>D</code> extends <code>true</code> ? <code>string</code> : <code>ConditionalKeys</code>&lt;<code>Required</code>&lt;<code>T</code>&gt;, <code>DriverCommand</code>&gt;</p> <p>Name of the command.</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:72</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#deprecated","title":"deprecated","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> deprecated: <code>D</code></p> <p>If this is <code>true</code>, we do not validate <code>command</code>, because it may not exist in <code>ExternalDriver</code>.</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:77</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#neverproxy","title":"neverProxy","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> neverProxy: <code>boolean</code></p> <p>If true, this <code>Method</code> will never proxy.</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#inherited-from","title":"Inherited from","text":"<p>BaseMethodDef.neverProxy</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/command.ts:57</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#payloadparams","title":"payloadParams","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> payloadParams: <code>PayloadParams</code></p> <p>Specifies shape of payload</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#inherited-from_1","title":"Inherited from","text":"<p>BaseMethodDef.payloadParams</p>"},{"location":"reference/interfaces/appium_types.DriverMethodDef/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/command.ts:61</p>"},{"location":"reference/interfaces/appium_types.DriverMethodMap/","title":"Interface: DriverMethodMap&lt;T&gt;","text":"<p>@appium/types.DriverMethodMap</p> <p>A <code>MethodMap</code> for a <code>Driver</code>.</p>"},{"location":"reference/interfaces/appium_types.DriverMethodMap/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Driver</code>"},{"location":"reference/interfaces/appium_types.DriverMethodMap/#indexable","title":"Indexable","text":"<p>\u25aa [key: <code>string</code>]: { <code>DELETE?</code>: <code>DriverMethodDef</code>&lt;<code>T</code>&gt; ; <code>GET?</code>: <code>DriverMethodDef</code>&lt;<code>T</code>&gt; ; <code>POST?</code>: <code>DriverMethodDef</code>&lt;<code>T</code>&gt;  }</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/","title":"Interface: DriverStatic&lt;T&gt;","text":"<p>@appium/types.DriverStatic</p> <p>Static members of a <code>DriverClass</code>.</p> <p>This is likely unusable by external consumers, but YMMV!</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Driver</code>"},{"location":"reference/interfaces/appium_types.DriverStatic/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.DriverStatic/#properties","title":"Properties","text":"<ul> <li>baseVersion</li> <li>executeMethodMap</li> <li>newMethodMap</li> <li>updateServer</li> </ul>"},{"location":"reference/interfaces/appium_types.DriverStatic/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.DriverStatic/#baseversion","title":"baseVersion","text":"<p>\u2022 baseVersion: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1999</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#executemethodmap","title":"executeMethodMap","text":"<p>\u2022 <code>Optional</code> executeMethodMap: <code>ExecuteMethodMap</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2002</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#newmethodmap","title":"newMethodMap","text":"<p>\u2022 <code>Optional</code> newMethodMap: <code>MethodMap</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2001</p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#updateserver","title":"updateServer","text":"<p>\u2022 <code>Optional</code> updateServer: <code>UpdateServerCallback</code></p>"},{"location":"reference/interfaces/appium_types.DriverStatic/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2000</p>"},{"location":"reference/interfaces/appium_types.Element/","title":"Interface: Element&lt;Id&gt;","text":"<p>@appium/types.Element</p> <p>A W3C element.</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webdriver1/#elements</p>"},{"location":"reference/interfaces/appium_types.Element/#type-parameters","title":"Type parameters","text":"Name Type <code>Id</code> extends <code>string</code> = <code>string</code>"},{"location":"reference/interfaces/appium_types.Element/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Element/#properties","title":"Properties","text":"<ul> <li>ELEMENT</li> <li>element-6066-11e4-a52e-4f735466cecf</li> </ul>"},{"location":"reference/interfaces/appium_types.Element/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Element/#element","title":"ELEMENT","text":"<p>\u2022 <code>Optional</code> ELEMENT: <code>Id</code></p> <p>For backwards compatibility with JSONWP only.</p> <p><code>Deprecated</code></p> <p>Use <code>element-6066-11e4-a52e-4f735466cecf</code> instead.</p>"},{"location":"reference/interfaces/appium_types.Element/#defined-in","title":"Defined in","text":"<p>packages/types/lib/util.ts:85</p>"},{"location":"reference/interfaces/appium_types.Element/#element-6066-11e4-a52e-4f735466cecf","title":"element-6066-11e4-a52e-4f735466cecf","text":"<p>\u2022 element-6066-11e4-a52e-4f735466cecf: <code>Id</code></p> <p>This property name is the string constant W3C element identifier used to identify an object as a W3C element.</p>"},{"location":"reference/interfaces/appium_types.Element/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/util.ts:90</p>"},{"location":"reference/interfaces/appium_types.EventHistory/","title":"Interface: EventHistory","text":"<p>@appium/types.EventHistory</p>"},{"location":"reference/interfaces/appium_types.EventHistory/#indexable","title":"Indexable","text":"<p>\u25aa [key: <code>string</code>]: <code>any</code></p>"},{"location":"reference/interfaces/appium_types.EventHistory/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.EventHistory/#properties","title":"Properties","text":"<ul> <li>commands</li> </ul>"},{"location":"reference/interfaces/appium_types.EventHistory/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.EventHistory/#commands","title":"commands","text":"<p>\u2022 commands: <code>EventHistoryCommand</code>[]</p>"},{"location":"reference/interfaces/appium_types.EventHistory/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:561</p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/","title":"Interface: EventHistoryCommand","text":"<p>@appium/types.EventHistoryCommand</p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#properties","title":"Properties","text":"<ul> <li>cmd</li> <li>endTime</li> <li>startTime</li> </ul>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#cmd","title":"cmd","text":"<p>\u2022 cmd: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:566</p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#endtime","title":"endTime","text":"<p>\u2022 endTime: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:568</p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#starttime","title":"startTime","text":"<p>\u2022 startTime: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.EventHistoryCommand/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:567</p>"},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/","title":"Interface: ExecuteMethodDef&lt;Ext&gt;","text":"<p>@appium/types.ExecuteMethodDef</p>"},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#type-parameters","title":"Type parameters","text":"Name Type <code>Ext</code> extends <code>Plugin</code> | <code>Driver</code>"},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#properties","title":"Properties","text":"<ul> <li>command</li> </ul>"},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#command","title":"command","text":"<p>\u2022 command: <code>ConditionalKeys</code>&lt;<code>Required</code>&lt;<code>Ext</code>&gt;, <code>Ext</code> extends <code>Plugin</code> ? <code>PluginCommand</code> : <code>Ext</code> extends <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt; ? <code>DriverCommand</code> : <code>never</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExecuteMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:102</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/","title":"Interface: ExternalDriver&lt;C, Ctx, CArgs, Settings, CreateResult, DeleteResult, SessionData&gt;","text":"<p>@appium/types.ExternalDriver</p> <p>External drivers must subclass <code>BaseDriver</code>, and can implement any of these methods. None of these are implemented within Appium itself.</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code> <code>Ctx</code> <code>string</code> <code>CArgs</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>Settings</code> extends <code>StringRecord</code> = <code>StringRecord</code> <code>CreateResult</code> <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt; <code>DeleteResult</code> <code>DefaultDeleteSessionResult</code> <code>SessionData</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>Driver</code>&lt;<code>C</code>, <code>CArgs</code>, <code>Settings</code>, <code>CreateResult</code>, <code>DeleteResult</code>, <code>SessionData</code>&gt;</li> </ul> <p>\u21b3 <code>ExternalDriver</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ExternalDriver/#properties","title":"Properties","text":"<ul> <li>allowInsecure</li> <li>basePath</li> <li>caps</li> <li>cliArgs</li> <li>denyInsecure</li> <li>desiredCapConstraints</li> <li>driverData</li> <li>eventEmitter</li> <li>eventHistory</li> <li>helpers</li> <li>implicitWaitMs</li> <li>initialOpts</li> <li>isCommandsQueueEnabled</li> <li>locatorStrategies</li> <li>log</li> <li>newCommandTimeoutMs</li> <li>opts</li> <li>originalCaps</li> <li>protocol</li> <li>relaxedSecurityEnabled</li> <li>server</li> <li>serverHost</li> <li>serverPath</li> <li>serverPort</li> <li>sessionId</li> <li>settings</li> <li>shouldValidateCaps</li> <li>supportedLogTypes</li> <li>updateSettings</li> <li>webLocatorStrategies</li> </ul>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#methods","title":"Methods","text":"<ul> <li>activateApp</li> <li>activateIMEEngine</li> <li>active</li> <li>addAuthCredential</li> <li>addManagedDriver</li> <li>addVirtualAuthenticator</li> <li>assertFeatureEnabled</li> <li>assignServer</li> <li>availableIMEEngines</li> <li>back</li> <li>buttonDown</li> <li>buttonUp</li> <li>canProxy</li> <li>clear</li> <li>clearNewCommandTimeout</li> <li>click</li> <li>clickCurrent</li> <li>closeWindow</li> <li>createNewWindow</li> <li>createSession</li> <li>deactivateIMEEngine</li> <li>deleteCookie</li> <li>deleteCookies</li> <li>deleteSession</li> <li>doubleClick</li> <li>driverForSession</li> <li>elementDisplayed</li> <li>elementEnabled</li> <li>elementSelected</li> <li>elementShadowRoot</li> <li>endCoverage</li> <li>equalsElement</li> <li>execute</li> <li>executeAsync</li> <li>executeCdp</li> <li>executeCommand</li> <li>executeMethod</li> <li>findElOrEls</li> <li>findElOrElsWithProcessing</li> <li>findElement</li> <li>findElementFromElement</li> <li>findElementFromShadowRoot</li> <li>findElements</li> <li>findElementsFromElement</li> <li>findElementsFromShadowRoot</li> <li>fingerprint</li> <li>flick</li> <li>forward</li> <li>fullScreenWindow</li> <li>getActiveIMEEngine</li> <li>getAlertText</li> <li>getAttribute</li> <li>getAuthCredential</li> <li>getComputedLabel</li> <li>getComputedRole</li> <li>getContexts</li> <li>getCookie</li> <li>getCookies</li> <li>getCssProperty</li> <li>getCurrentActivity</li> <li>getCurrentContext</li> <li>getCurrentPackage</li> <li>getDeviceTime</li> <li>getDisplayDensity</li> <li>getElementRect</li> <li>getElementScreenshot</li> <li>getGeoLocation</li> <li>getLog</li> <li>getLogEvents</li> <li>getLogTypes</li> <li>getManagedDrivers</li> <li>getName</li> <li>getNetworkConnection</li> <li>getOrientation</li> <li>getPageIndex</li> <li>getPageSource</li> <li>getPerformanceData</li> <li>getPerformanceDataTypes</li> <li>getProperty</li> <li>getProxyAvoidList</li> <li>getRotation</li> <li>getScreenshot</li> <li>getSession</li> <li>getSessions</li> <li>getSettings</li> <li>getStatus</li> <li>getSystemBars</li> <li>getText</li> <li>getTimeouts</li> <li>getUrl</li> <li>getWindowHandle</li> <li>getWindowHandles</li> <li>getWindowRect</li> <li>gsmCall</li> <li>gsmSignal</li> <li>gsmVoice</li> <li>hideKeyboard</li> <li>implicitWait</li> <li>implicitWaitForCondition</li> <li>implicitWaitMJSONWP</li> <li>implicitWaitW3C</li> <li>installApp</li> <li>isAppInstalled</li> <li>isFeatureEnabled</li> <li>isIMEActivated</li> <li>isKeyboardShown</li> <li>isMjsonwpProtocol</li> <li>isW3CProtocol</li> <li>keyevent</li> <li>logCustomEvent</li> <li>logEvent</li> <li>logExtraCaps</li> <li>longPressKeyCode</li> <li>maximizeWindow</li> <li>minimizeWindow</li> <li>mobileRotation</li> <li>networkSpeed</li> <li>newCommandTimeout</li> <li>onUnexpectedShutdown</li> <li>openNotifications</li> <li>pageLoadTimeoutMJSONWP</li> <li>pageLoadTimeoutW3C</li> <li>parseTimeoutArgument</li> <li>performActions</li> <li>postAcceptAlert</li> <li>postDismissAlert</li> <li>powerAC</li> <li>powerCapacity</li> <li>pressKeyCode</li> <li>proxyActive</li> <li>proxyCommand</li> <li>proxyRouteIsAvoided</li> <li>pullFile</li> <li>pullFolder</li> <li>pushFile</li> <li>queryAppState</li> <li>refresh</li> <li>releaseActions</li> <li>removeAllAuthCredentials</li> <li>removeApp</li> <li>removeAuthCredential</li> <li>removeVirtualAuthenticator</li> <li>replaceValue</li> <li>reset</li> <li>scriptTimeoutMJSONWP</li> <li>scriptTimeoutW3C</li> <li>sendSMS</li> <li>sessionExists</li> <li>setAlertText</li> <li>setContext</li> <li>setCookie</li> <li>setFrame</li> <li>setGeoLocation</li> <li>setImplicitWait</li> <li>setNetworkConnection</li> <li>setNewCommandTimeout</li> <li>setOrientation</li> <li>setRotation</li> <li>setUrl</li> <li>setUserAuthVerified</li> <li>setValue</li> <li>setWindow</li> <li>setWindowRect</li> <li>startActivity</li> <li>startNewCommandTimeout</li> <li>startUnexpectedShutdown</li> <li>switchToParentFrame</li> <li>terminateApp</li> <li>timeouts</li> <li>title</li> <li>toggleData</li> <li>toggleFlightMode</li> <li>toggleLocationServices</li> <li>toggleWiFi</li> <li>touchDown</li> <li>touchLongClick</li> <li>touchMove</li> <li>touchUp</li> <li>validateDesiredCaps</li> <li>validateLocatorStrategy</li> </ul>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ExternalDriver/#allowinsecure","title":"allowInsecure","text":"<p>\u2022 allowInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from","title":"Inherited from","text":"<p>Driver.allowInsecure</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:587</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#basepath","title":"basePath","text":"<p>\u2022 basePath: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_1","title":"Inherited from","text":"<p>Driver.basePath</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:585</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#caps","title":"caps","text":"<p>\u2022 <code>Optional</code> caps: <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p> <p>The processed capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_2","title":"Inherited from","text":"<p>Driver.caps</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:719</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>CArgs</code></p> <p>The set of command line arguments set for this driver</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_3","title":"Inherited from","text":"<p>Driver.cliArgs</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:675</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#denyinsecure","title":"denyInsecure","text":"<p>\u2022 denyInsecure: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_4","title":"Inherited from","text":"<p>Driver.denyInsecure</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:588</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#desiredcapconstraints","title":"desiredCapConstraints","text":"<p>\u2022 desiredCapConstraints: <code>C</code></p> <p>The constraints object used to validate capabilities</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_5","title":"Inherited from","text":"<p>Driver.desiredCapConstraints</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:729</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#driverdata","title":"driverData","text":"<p>\u2022 driverData: <code>DriverData</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_6","title":"Inherited from","text":"<p>Driver.driverData</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:596</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#eventemitter","title":"eventEmitter","text":"<p>\u2022 eventEmitter: <code>EventEmitter</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_7","title":"Inherited from","text":"<p>Driver.eventEmitter</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:593</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#eventhistory","title":"eventHistory","text":"<p>\u2022 eventHistory: <code>EventHistory</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_8","title":"Inherited from","text":"<p>Driver.eventHistory</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:598</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#helpers","title":"helpers","text":"<p>\u2022 helpers: <code>DriverHelpers</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_9","title":"Inherited from","text":"<p>Driver.helpers</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/driver.ts:584</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#implicitwaitms","title":"implicitWaitMs","text":"<p>\u2022 implicitWaitMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_10","title":"Inherited from","text":"<p>Driver.implicitWaitMs</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/driver.ts:590</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#initialopts","title":"initialOpts","text":"<p>\u2022 initialOpts: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#type-declaration","title":"Type declaration","text":"Name Type <code>address</code> <code>string</code> <code>allowCors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>allowInsecure</code> <code>AllowInsecureConfig</code> <code>basePath</code> <code>string</code> <code>callbackAddress</code> <code>undefined</code> | <code>string</code> <code>callbackPort</code> <code>number</code> <code>debugLogSpacing</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> <code>denyInsecure</code> <code>DenyInsecureConfig</code> <code>driver</code> <code>undefined</code> | <code>DriverConfig</code> <code>fastReset?</code> <code>boolean</code> <code>keepAliveTimeout</code> <code>number</code> <code>localTimezone</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logFile</code> <code>undefined</code> | <code>string</code> <code>logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> <code>logNoColors</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>logTimestamp</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>loglevel</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; <code>longStacktrace</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>noPermsCheck</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> <code>plugin</code> <code>undefined</code> | <code>PluginConfig</code> <code>port</code> <code>number</code> <code>relaxedSecurityEnabled</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>sessionOverride</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>skipUninstall?</code> <code>boolean</code> <code>strictCaps</code> <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; <code>tmpDir</code> <code>undefined</code> | <code>string</code> <code>traceDir</code> <code>undefined</code> | <code>string</code> <code>useDrivers</code> <code>UseDriversConfig</code> <code>usePlugins</code> <code>UsePluginsConfig</code> <code>webhook</code> <code>undefined</code> | <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_11","title":"Inherited from","text":"<p>Driver.initialOpts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/driver.ts:582</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#iscommandsqueueenabled","title":"isCommandsQueueEnabled","text":"<p>\u2022 isCommandsQueueEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_12","title":"Inherited from","text":"<p>Driver.isCommandsQueueEnabled</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/driver.ts:597</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#locatorstrategies","title":"locatorStrategies","text":"<p>\u2022 locatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_13","title":"Inherited from","text":"<p>Driver.locatorStrategies</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/driver.ts:591</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#log","title":"log","text":"<p>\u2022 log: <code>AppiumLogger</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_14","title":"Inherited from","text":"<p>Driver.log</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/driver.ts:595</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#newcommandtimeoutms","title":"newCommandTimeoutMs","text":"<p>\u2022 newCommandTimeoutMs: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_15","title":"Inherited from","text":"<p>Driver.newCommandTimeoutMs</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/driver.ts:589</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#opts","title":"opts","text":"<p>\u2022 opts: <code>DriverOpts</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_16","title":"Inherited from","text":"<p>Driver.opts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/driver.ts:581</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#originalcaps","title":"originalCaps","text":"<p>\u2022 <code>Optional</code> originalCaps: <code>W3CCapabilities</code>&lt;<code>C</code>&gt;</p> <p>The original capabilities used to start the session represented by the current driver instance</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_17","title":"Inherited from","text":"<p>Driver.originalCaps</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/driver.ts:724</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#protocol","title":"protocol","text":"<p>\u2022 <code>Optional</code> protocol: <code>Protocol</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_18","title":"Inherited from","text":"<p>Driver.protocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/driver.ts:583</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#relaxedsecurityenabled","title":"relaxedSecurityEnabled","text":"<p>\u2022 relaxedSecurityEnabled: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_19","title":"Inherited from","text":"<p>Driver.relaxedSecurityEnabled</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/driver.ts:586</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#server","title":"server","text":"<p>\u2022 <code>Optional</code> server: <code>AppiumServer</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_20","title":"Inherited from","text":"<p>Driver.server</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/driver.ts:677</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#serverhost","title":"serverHost","text":"<p>\u2022 <code>Optional</code> serverHost: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_21","title":"Inherited from","text":"<p>Driver.serverHost</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/driver.ts:678</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#serverpath","title":"serverPath","text":"<p>\u2022 <code>Optional</code> serverPath: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_22","title":"Inherited from","text":"<p>Driver.serverPath</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/driver.ts:680</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#serverport","title":"serverPort","text":"<p>\u2022 <code>Optional</code> serverPort: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_23","title":"Inherited from","text":"<p>Driver.serverPort</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/driver.ts:679</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#sessionid","title":"sessionId","text":"<p>\u2022 sessionId: <code>null</code> | <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_24","title":"Inherited from","text":"<p>Driver.sessionId</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/driver.ts:580</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#settings","title":"settings","text":"<p>\u2022 settings: <code>IDeviceSettings</code>&lt;<code>Settings</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_25","title":"Inherited from","text":"<p>Driver.settings</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/driver.ts:594</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#shouldvalidatecaps","title":"shouldValidateCaps","text":"<p>\u2022 shouldValidateCaps: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_26","title":"Inherited from","text":"<p>Driver.shouldValidateCaps</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/driver.ts:579</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#supportedlogtypes","title":"supportedLogTypes","text":"<p>\u2022 supportedLogTypes: <code>Readonly</code>&lt;<code>LogDefRecord</code>&gt;</p> <p>Definition of the available log types</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_27","title":"Inherited from","text":"<p>Driver.supportedLogTypes</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/driver.ts:334</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#updatesettings","title":"updateSettings","text":"<p>\u2022 updateSettings: (<code>settings</code>: <code>Settings</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (<code>settings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters","title":"Parameters","text":"Name Type Description <code>settings</code> <code>Settings</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_28","title":"Inherited from","text":"<p>Driver.updateSettings</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/driver.ts:381</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#weblocatorstrategies","title":"webLocatorStrategies","text":"<p>\u2022 webLocatorStrategies: <code>string</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_29","title":"Inherited from","text":"<p>Driver.webLocatorStrategies</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/driver.ts:592</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.ExternalDriver/#activateapp","title":"activateApp","text":"<p>\u25b8 <code>Optional</code> activateApp(<code>appId</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Launch an app</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_1","title":"Parameters","text":"Name Type Description <code>appId</code> <code>string</code> the package or bundle ID of the application <code>options?</code> <code>unknown</code> driver-specific launch options"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_30","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1419</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#activateimeengine","title":"activateIMEEngine","text":"<p>\u25b8 <code>Optional</code> activateIMEEngine(<code>engine</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Activate an IME engine</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_2","title":"Parameters","text":"Name Type Description <code>engine</code> <code>string</code> the name of the engine"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_31","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1673</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#active","title":"active","text":"<p>\u25b8 <code>Optional</code> active(): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Get the active element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-active-element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The JSON object encapsulating the active element reference</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_32","title":"Defined in","text":"<p>packages/types/lib/driver.ts:938</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#addauthcredential","title":"addAuthCredential","text":"<p>\u25b8 <code>Optional</code> addAuthCredential(<code>credentialId</code>, <code>isResidentCredential</code>, <code>rpId</code>, <code>privateKey</code>, <code>userHandle</code>, <code>signCount</code>, <code>authenticatorId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Inject a public key credential source into a virtual authenticator</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-add-credential</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_3","title":"Parameters","text":"Name Type Description <code>credentialId</code> <code>string</code> the base64 encoded credential ID <code>isResidentCredential</code> <code>boolean</code> if true, a client-side credential, otherwise a server-side credential <code>rpId</code> <code>string</code> the relying party ID the credential is scoped to <code>privateKey</code> <code>string</code> the base64 encoded private key package <code>userHandle</code> <code>string</code> the base64 encoded user handle <code>signCount</code> <code>number</code> the initial value for a signature counter <code>authenticatorId</code> <code>string</code> -"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_33","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1934</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#addmanageddriver","title":"addManagedDriver","text":"<p>\u25b8 addManagedDriver(<code>driver</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_4","title":"Parameters","text":"Name Type <code>driver</code> <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_5","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_30","title":"Inherited from","text":"<p>Driver.addManagedDriver</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_34","title":"Defined in","text":"<p>packages/types/lib/driver.ts:642</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#addvirtualauthenticator","title":"addVirtualAuthenticator","text":"<p>\u25b8 <code>Optional</code> addVirtualAuthenticator(<code>protocol</code>, <code>transport</code>, <code>hasResidentKey?</code>, <code>hasUserVerification?</code>, <code>isUserConsenting?</code>, <code>isUserVerified?</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Add a virtual authenticator to a browser</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-add-virtual-authenticator</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_5","title":"Parameters","text":"Name Type Description <code>protocol</code> <code>\"ctap/u2f\"</code> | <code>\"ctap2\"</code> | <code>\"ctap2_1\"</code> the protocol <code>transport</code> <code>string</code> a valid AuthenticatorTransport value <code>hasResidentKey?</code> <code>boolean</code> whether there is a resident key <code>hasUserVerification?</code> <code>boolean</code> whether the authenticator has user verification <code>isUserConsenting?</code> <code>boolean</code> whether it is a user consenting authenticator <code>isUserVerified?</code> <code>boolean</code> whether the user is verified"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The authenticator ID</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_35","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1905</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#assertfeatureenabled","title":"assertFeatureEnabled","text":"<p>\u25b8 assertFeatureEnabled(<code>name</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_6","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_7","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_31","title":"Inherited from","text":"<p>Driver.assertFeatureEnabled</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_36","title":"Defined in","text":"<p>packages/types/lib/driver.ts:636</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#assignserver","title":"assignServer","text":"<p>\u25b8 <code>Optional</code> assignServer(<code>server</code>, <code>host</code>, <code>port</code>, <code>path</code>): <code>void</code></p> <p>A helper function used to assign server information to the driver instance so the driver knows where the server is Running</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_7","title":"Parameters","text":"Name Type Description <code>server</code> <code>AppiumServer</code> the server object <code>host</code> <code>string</code> the server hostname <code>port</code> <code>number</code> the server port <code>path</code> <code>string</code> the server base url"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_32","title":"Inherited from","text":"<p>Driver.assignServer</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_37","title":"Defined in","text":"<p>packages/types/lib/driver.ts:760</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#availableimeengines","title":"availableIMEEngines","text":"<p>\u25b8 <code>Optional</code> availableIMEEngines(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get the list of IME engines</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>The list of IME engines</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_38","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1639</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#back","title":"back","text":"<p>\u25b8 <code>Optional</code> back(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Navigate back in the page history</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#back</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_39","title":"Defined in","text":"<p>packages/types/lib/driver.ts:798</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#buttondown","title":"buttonDown","text":"<p>\u25b8 <code>Optional</code> buttonDown(<code>button?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Trigger a mouse button down</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_8","title":"Parameters","text":"Name Type Description <code>button?</code> <code>number</code> the button ID"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_11","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_40","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1697</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#buttonup","title":"buttonUp","text":"<p>\u25b8 <code>Optional</code> buttonUp(<code>button?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Trigger a mouse button up</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_9","title":"Parameters","text":"Name Type Description <code>button?</code> <code>number</code> the button ID"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_12","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_41","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1707</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#canproxy","title":"canProxy","text":"<p>\u25b8 canProxy(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_10","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_13","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_33","title":"Inherited from","text":"<p>Driver.canProxy</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_42","title":"Defined in","text":"<p>packages/types/lib/driver.ts:640</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#clear","title":"clear","text":"<p>\u25b8 <code>Optional</code> clear(<code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Clear the text/value of an editable element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#element-clear</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_11","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_14","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_43","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1077</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#clearnewcommandtimeout","title":"clearNewCommandTimeout","text":"<p>\u25b8 clearNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_34","title":"Inherited from","text":"<p>Driver.clearNewCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_44","title":"Defined in","text":"<p>packages/types/lib/driver.ts:644</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#click","title":"click","text":"<p>\u25b8 <code>Optional</code> click(<code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Click/tap an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#element-click</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_12","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_16","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_45","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1069</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#clickcurrent","title":"clickCurrent","text":"<p>\u25b8 <code>Optional</code> clickCurrent(<code>button?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Click the current mouse location</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_13","title":"Parameters","text":"Name Type Description <code>button?</code> <code>number</code> the button ID"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_17","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_46","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1717</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#closewindow","title":"closeWindow","text":"<p>\u25b8 <code>Optional</code> closeWindow(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Close the current browsing context (window)</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#close-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_18","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>An array of window handles representing currently-open windows</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_47","title":"Defined in","text":"<p>packages/types/lib/driver.ts:845</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#createnewwindow","title":"createNewWindow","text":"<p>\u25b8 <code>Optional</code> createNewWindow(<code>type?</code>): <code>Promise</code>&lt;<code>NewWindow</code>&gt;</p> <p>Create a new browser window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_14","title":"Parameters","text":"Name Type Description <code>type?</code> <code>NewWindowType</code> a hint to the driver whether to create a \"tab\" or \"window\""},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_19","title":"Returns","text":"<p><code>Promise</code>&lt;<code>NewWindow</code>&gt;</p> <p>An object containing the handle of the newly created window and its type</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_48","title":"Defined in","text":"<p>packages/types/lib/driver.ts:871</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>w3cCaps1</code>, <code>w3cCaps2?</code>, <code>w3cCaps3?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_15","title":"Parameters","text":"Name Type Description <code>w3cCaps1</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>w3cCaps2?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>w3cCaps3?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>driverData?</code> <code>DriverData</code>[] a list of DriverData objects representing other sessions running for this driver on the same Appium server. This information can be used to help ensure no conflict of resources"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>The capabilities object representing the created session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_35","title":"Inherited from","text":"<p>Driver.createSession</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_49","title":"Defined in","text":"<p>packages/types/lib/driver.ts:430</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#deactivateimeengine","title":"deactivateIMEEngine","text":"<p>\u25b8 <code>Optional</code> deactivateIMEEngine(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Deactivate an IME engine</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_21","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_50","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1664</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#deletecookie","title":"deleteCookie","text":"<p>\u25b8 <code>Optional</code> deleteCookie(<code>name</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Delete a named cookie</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-cookie</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_16","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the name of the cookie to delete"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_22","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_51","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1146</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#deletecookies","title":"deleteCookies","text":"<p>\u25b8 <code>Optional</code> deleteCookies(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Delete all cookies</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-all-cookies</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_23","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_52","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1152</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#deletesession","title":"deleteSession","text":"<p>\u25b8 deleteSession(<code>sessionId?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p> <p>Stop an automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_17","title":"Parameters","text":"Name Type Description <code>sessionId?</code> <code>string</code> the id of the session that is to be deleted <code>driverData?</code> <code>DriverData</code>[] the driver data for other currently-running sessions"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_24","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_36","title":"Inherited from","text":"<p>Driver.deleteSession</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_53","title":"Defined in","text":"<p>packages/types/lib/driver.ts:444</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#doubleclick","title":"doubleClick","text":"<p>\u25b8 <code>Optional</code> doubleClick(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Double-click the current mouse location</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_25","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_54","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1725</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#driverforsession","title":"driverForSession","text":"<p>\u25b8 driverForSession(<code>sessionId</code>): <code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_18","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_26","title":"Returns","text":"<p><code>null</code> | <code>Core</code>&lt;<code>Constraints</code>, <code>StringRecord</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_37","title":"Inherited from","text":"<p>Driver.driverForSession</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_55","title":"Defined in","text":"<p>packages/types/lib/driver.ts:646</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#elementdisplayed","title":"elementDisplayed","text":"<p>\u25b8 <code>Optional</code> elementDisplayed(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine whether an element is displayed</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#element-displayedness</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_19","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_27","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>True if any part of the element is rendered within the viewport, False otherwise</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_56","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1061</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#elementenabled","title":"elementEnabled","text":"<p>\u25b8 <code>Optional</code> elementEnabled(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine whether an element is enabled</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#is-element-enabled</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_20","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_28","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>True if the element is enabled, False otherwise</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_57","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1031</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#elementselected","title":"elementSelected","text":"<p>\u25b8 <code>Optional</code> elementSelected(<code>elementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine if the reference element is selected or not</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#is-element-selected</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_21","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_29","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>True if the element is selected, False otherwise</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_58","title":"Defined in","text":"<p>packages/types/lib/driver.ts:958</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#elementshadowroot","title":"elementShadowRoot","text":"<p>\u25b8 <code>Optional</code> elementShadowRoot(<code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Get the shadow root of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-shadow-root</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_22","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element to retrieve the shadow root for"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_30","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The shadow root for an element, as an element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_59","title":"Defined in","text":"<p>packages/types/lib/driver.ts:948</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#endcoverage","title":"endCoverage","text":"<p>\u25b8 <code>Optional</code> endCoverage(<code>intent</code>, <code>path</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>End platform-specific code coverage tracing</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_23","title":"Parameters","text":"Name Type Description <code>intent</code> <code>string</code> the Android intent for the coverage activity <code>path</code> <code>string</code> the path to place the results"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_31","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_60","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1605</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#equalselement","title":"equalsElement","text":"<p>\u25b8 <code>Optional</code> equalsElement(<code>elementId</code>, <code>otherElementId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Check whether two elements are identical</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_24","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the first element's ID <code>otherElementId</code> <code>string</code> the second element's ID"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_32","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>True if the elements are equal, false otherwise</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_61","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1630</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#execute","title":"execute","text":"<p>\u25b8 <code>Optional</code> execute(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Execute JavaScript (or some other kind of script) in the browser/app context</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#execute-script</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_25","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the string to be evaluated as the script, which will be made the body of an anonymous function in the case of JS <code>args</code> <code>unknown</code>[] the list of arguments to be applied to the script as a function"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_33","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the script execution</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_62","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1098</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#executeasync","title":"executeAsync","text":"<p>\u25b8 <code>Optional</code> executeAsync(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Execute JavaScript (or some other kind of script) in the browser/app context, asynchronously</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#execute-async-script</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_26","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the string to be evaluated as the script, which will be made the body of an anonymous function in the case of JS <code>args</code> <code>unknown</code>[] the list of arguments to be applied to the script as a function"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_34","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The promise resolution of the return value of the script execution (or an error object if the promise is rejected)</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_63","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1111</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#executecdp","title":"executeCdp","text":"<p>\u25b8 <code>Optional</code> executeCdp(<code>cmd</code>, <code>params</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Execute a devtools command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_27","title":"Parameters","text":"Name Type Description <code>cmd</code> <code>string</code> the command <code>params</code> <code>unknown</code> any command-specific command parameters"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_35","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The result of the command execution</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_64","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1888</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#executecommand","title":"executeCommand","text":"<p>\u25b8 executeCommand(<code>cmd</code>, <code>...args</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Execute a driver (WebDriver-protocol) command by its name as defined in the routes file</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_28","title":"Parameters","text":"Name Type Description <code>cmd</code> <code>string</code> the name of the command <code>...args</code> <code>any</code>[] arguments to pass to the command"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_36","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p> <p>The result of running the command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_38","title":"Inherited from","text":"<p>Driver.executeCommand</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_65","title":"Defined in","text":"<p>packages/types/lib/driver.ts:692</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>TArgs</code>, <code>TReturn</code>&gt;(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Call an <code>Execute Method</code> by its name with the given arguments. This method will check that the driver has registered the method matching the name, and send it the arguments.</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#type-parameters_1","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;] = <code>unknown</code>[] <code>TReturn</code> <code>unknown</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_29","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the name of the Execute Method <code>args</code> <code>TArgs</code> a singleton array containing an arguments object"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_37","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>The result of calling the Execute Method</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_39","title":"Inherited from","text":"<p>Driver.executeMethod</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_66","title":"Defined in","text":"<p>packages/types/lib/driver.ts:170</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelorels","title":"findElOrEls","text":"<p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A helper method that returns one or more UI elements based on the search criteria</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_30","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_38","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_40","title":"Inherited from","text":"<p>Driver.findElOrEls</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_67","title":"Defined in","text":"<p>packages/types/lib/driver.ts:294</p> <p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_31","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_39","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_41","title":"Inherited from","text":"<p>Driver.findElOrEls</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_68","title":"Defined in","text":"<p>packages/types/lib/driver.ts:295</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelorelswithprocessing","title":"findElOrElsWithProcessing","text":"<p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>This is a wrapper for <code>findElOrEls</code> that validates locator strategies and implements the <code>appium:printPageSourceOnFindFailure</code> capability</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_32","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_40","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_42","title":"Inherited from","text":"<p>Driver.findElOrElsWithProcessing</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_69","title":"Defined in","text":"<p>packages/types/lib/driver.ts:308</p> <p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_33","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_41","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_43","title":"Inherited from","text":"<p>Driver.findElOrElsWithProcessing</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_70","title":"Defined in","text":"<p>packages/types/lib/driver.ts:314</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_34","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_42","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_44","title":"Inherited from","text":"<p>Driver.findElement</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_71","title":"Defined in","text":"<p>packages/types/lib/driver.ts:210</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelementfromelement","title":"findElementFromElement","text":"<p>\u25b8 findElementFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_35","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_43","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_45","title":"Inherited from","text":"<p>Driver.findElementFromElement</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_72","title":"Defined in","text":"<p>packages/types/lib/driver.ts:235</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelementfromshadowroot","title":"findElementFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_36","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_44","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_46","title":"Inherited from","text":"<p>Driver.findElementFromShadowRoot</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_73","title":"Defined in","text":"<p>packages/types/lib/driver.ts:263</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_37","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_45","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_47","title":"Inherited from","text":"<p>Driver.findElements</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_74","title":"Defined in","text":"<p>packages/types/lib/driver.ts:221</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelementsfromelement","title":"findElementsFromElement","text":"<p>\u25b8 findElementsFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_38","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_46","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_48","title":"Inherited from","text":"<p>Driver.findElementsFromElement</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_75","title":"Defined in","text":"<p>packages/types/lib/driver.ts:248</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#findelementsfromshadowroot","title":"findElementsFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementsFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_39","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_47","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_49","title":"Inherited from","text":"<p>Driver.findElementsFromShadowRoot</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_76","title":"Defined in","text":"<p>packages/types/lib/driver.ts:278</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#fingerprint","title":"fingerprint","text":"<p>\u25b8 <code>Optional</code> fingerprint(<code>fingerprintId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Apply a synthetic fingerprint to the fingerprint detector of the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_40","title":"Parameters","text":"Name Type Description <code>fingerprintId</code> <code>number</code> the numeric ID of the fingerprint to use"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_48","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_77","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1283</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#flick","title":"flick","text":"<p>\u25b8 <code>Optional</code> flick(<code>element?</code>, <code>xSpeed?</code>, <code>ySpeed?</code>, <code>xOffset?</code>, <code>yOffset?</code>, <code>speed?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform a flick event at the location specified</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_41","title":"Parameters","text":"Name Type Description <code>element?</code> <code>string</code> the element to make coordinates relative to <code>xSpeed?</code> <code>number</code> the horizontal flick speed (in driver-specific units) <code>ySpeed?</code> <code>number</code> the vertical flick speed (in driver-specific units) <code>xOffset?</code> <code>number</code> the x coordinate <code>yOffset?</code> <code>number</code> the y coordinate <code>speed?</code> <code>number</code> the speed (unclear how this relates to xSpeed and ySpeed)"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_49","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_78","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1779</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#forward","title":"forward","text":"<p>\u25b8 <code>Optional</code> forward(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Navigate forward in the page history</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#forward</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_50","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_79","title":"Defined in","text":"<p>packages/types/lib/driver.ts:804</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#fullscreenwindow","title":"fullScreenWindow","text":"<p>\u25b8 <code>Optional</code> fullScreenWindow(): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Put the current window into full screen mode</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#fullscreen-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_51","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>The actual <code>Rect</code> of the window after running the command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_80","title":"Defined in","text":"<p>packages/types/lib/driver.ts:930</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getactiveimeengine","title":"getActiveIMEEngine","text":"<p>\u25b8 <code>Optional</code> getActiveIMEEngine(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the active IME engine</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_52","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The name of the active engine</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_81","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1648</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getalerttext","title":"getAlertText","text":"<p>\u25b8 <code>Optional</code> getAlertText(): <code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>Get the text of the displayed alert</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-alert-text</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_53","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>The text of the alert</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_82","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1186</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getattribute","title":"getAttribute","text":"<p>\u25b8 <code>Optional</code> getAttribute(<code>name</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>Retrieve the value of an element's attribute</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-attribute</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_42","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the attribute name <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_54","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>The attribute value</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_83","title":"Defined in","text":"<p>packages/types/lib/driver.ts:969</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getauthcredential","title":"getAuthCredential","text":"<p>\u25b8 <code>Optional</code> getAuthCredential(): <code>Promise</code>&lt;<code>Credential</code>[]&gt;</p> <p>Get the list of public key credential sources</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-get-credentials</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_55","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Credential</code>[]&gt;</p> <p>The list of Credentials</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_84","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1950</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcomputedlabel","title":"getComputedLabel","text":"<p>\u25b8 <code>Optional</code> getComputedLabel(<code>elementId</code>): <code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>Get the accessible name/label of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-computed-label</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_43","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_56","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>The accessible name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_85","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1051</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcomputedrole","title":"getComputedRole","text":"<p>\u25b8 <code>Optional</code> getComputedRole(<code>elementId</code>): <code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>Get the WAI-ARIA role of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-computed-role</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_44","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_57","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>The role</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_86","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1041</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcontexts","title":"getContexts","text":"<p>\u25b8 <code>Optional</code> getContexts(): <code>Promise</code>&lt;<code>Ctx</code>[]&gt;</p> <p>Get the list of available contexts</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#webviews-and-other-contexts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_58","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Ctx</code>[]&gt;</p> <p>The list of context names</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_87","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1827</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcookie","title":"getCookie","text":"<p>\u25b8 <code>Optional</code> getCookie(<code>name</code>): <code>Promise</code>&lt;<code>Cookie</code>&gt;</p> <p>Get a cookie by name</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-named-cookie</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_45","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the name of the cookie"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_59","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Cookie</code>&gt;</p> <p>A serialized cookie</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_88","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1129</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcookies","title":"getCookies","text":"<p>\u25b8 <code>Optional</code> getCookies(): <code>Promise</code>&lt;<code>Cookie</code>[]&gt;</p> <p>Get all cookies known to the browsing context</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-all-cookies</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_60","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Cookie</code>[]&gt;</p> <p>A list of serialized cookies</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_89","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1119</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcssproperty","title":"getCssProperty","text":"<p>\u25b8 <code>Optional</code> getCssProperty(<code>name</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Retrieve the value of a CSS property of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-css-value</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_46","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the CSS property name <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_61","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The property value</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_90","title":"Defined in","text":"<p>packages/types/lib/driver.ts:991</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcurrentactivity","title":"getCurrentActivity","text":"<p>\u25b8 <code>Optional</code> getCurrentActivity(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current activity name</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_62","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The activity name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_91","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1393</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcurrentcontext","title":"getCurrentContext","text":"<p>\u25b8 <code>Optional</code> getCurrentContext(): <code>Promise</code>&lt;<code>null</code> | <code>Ctx</code>&gt;</p> <p>Get the currently active context</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#webviews-and-other-contexts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_63","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>Ctx</code>&gt;</p> <p>The context name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_92","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1811</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getcurrentpackage","title":"getCurrentPackage","text":"<p>\u25b8 <code>Optional</code> getCurrentPackage(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current active app package name/id</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_64","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The package name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_93","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1403</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getdevicetime","title":"getDeviceTime","text":"<p>\u25b8 <code>Optional</code> getDeviceTime(<code>format?</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current time on the device under timeouts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_47","title":"Parameters","text":"Name Type Description <code>format?</code> <code>string</code> the date/time format you would like the response into"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_65","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The formatted time</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_94","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1223</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getdisplaydensity","title":"getDisplayDensity","text":"<p>\u25b8 <code>Optional</code> getDisplayDensity(): <code>Promise</code>&lt;<code>number</code>&gt;</p> <p>Get the display's pixel density</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_66","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>The density</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_95","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1594</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getelementrect","title":"getElementRect","text":"<p>\u25b8 <code>Optional</code> getElementRect(<code>elementId</code>): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Get the dimensions and position of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-rect</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_48","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_67","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>The Rect object containing x, y, width, and height properties</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_96","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1021</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getelementscreenshot","title":"getElementScreenshot","text":"<p>\u25b8 <code>Optional</code> getElementScreenshot(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get an image of a single element as rendered on screen</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#take-element-screenshot</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_49","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_68","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>A base64-encoded string representing the PNG image data for the element rect</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_97","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1212</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getgeolocation","title":"getGeoLocation","text":"<p>\u25b8 <code>Optional</code> getGeoLocation(): <code>Promise</code>&lt;<code>Location</code>&gt;</p> <p>Get the virtual or real geographical location of a device</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_69","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Location</code>&gt;</p> <p>The location</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_98","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1793</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getlog","title":"getLog","text":"<p>\u25b8 getLog(<code>logType</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the log for a given log type.</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_50","title":"Parameters","text":"Name Type Description <code>logType</code> <code>string</code> Name/key of log type as defined in <code>supportedLogTypes</code>."},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_70","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_50","title":"Inherited from","text":"<p>Driver.getLog</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_99","title":"Defined in","text":"<p>packages/types/lib/driver.ts:346</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getlogevents","title":"getLogEvents","text":"<p>\u25b8 getLogEvents(<code>type?</code>): <code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_51","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_71","title":"Returns","text":"<p><code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>The event history for the session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_51","title":"Inherited from","text":"<p>Driver.getLogEvents</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_100","title":"Defined in","text":"<p>packages/types/lib/driver.ts:157</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getlogtypes","title":"getLogTypes","text":"<p>\u25b8 getLogTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get available log types as a list of strings</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_72","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_52","title":"Inherited from","text":"<p>Driver.getLogTypes</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_101","title":"Defined in","text":"<p>packages/types/lib/driver.ts:339</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getmanageddrivers","title":"getManagedDrivers","text":"<p>\u25b8 getManagedDrivers(): <code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_73","title":"Returns","text":"<p><code>Driver</code>&lt;<code>Constraints</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_53","title":"Inherited from","text":"<p>Driver.getManagedDrivers</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_102","title":"Defined in","text":"<p>packages/types/lib/driver.ts:643</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getname","title":"getName","text":"<p>\u25b8 <code>Optional</code> getName(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the tag name of an element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-tag-name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_52","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_74","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The tag name</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_103","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1011</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getnetworkconnection","title":"getNetworkConnection","text":"<p>\u25b8 <code>Optional</code> getNetworkConnection(): <code>Promise</code>&lt;<code>number</code>&gt;</p> <p>Get the network connection state of a device</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#device-modes</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_75","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>A number which is a bitmask representing categories like Data, Wifi, and Airplane mode status</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_104","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1848</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getorientation","title":"getOrientation","text":"<p>\u25b8 <code>Optional</code> getOrientation(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the device orientation</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_76","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The orientation string</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_105","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1680</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getpageindex","title":"getPageIndex","text":"<p>\u25b8 <code>Optional</code> getPageIndex(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the index of an element on the page</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_53","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the element id"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_77","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The page index</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_106","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1839</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_78","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_54","title":"Inherited from","text":"<p>Driver.getPageSource</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_107","title":"Defined in","text":"<p>packages/types/lib/driver.ts:327</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getperformancedata","title":"getPerformanceData","text":"<p>\u25b8 <code>Optional</code> getPerformanceData(<code>packageName</code>, <code>dataType</code>, <code>dataReadTimeout?</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the list of performance data associated with a given type</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_54","title":"Parameters","text":"Name Type Description <code>packageName</code> <code>string</code> the package name / id of the app to retrieve data for <code>dataType</code> <code>string</code> the performance data type; one of those retrieved in a call to getPerformanceDataTypes <code>dataReadTimeout?</code> <code>number</code> how long to wait for data before timing out"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_79","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p> <p>A list of performance data strings</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_108","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1247</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getperformancedatatypes","title":"getPerformanceDataTypes","text":"<p>\u25b8 <code>Optional</code> getPerformanceDataTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>List the performance data types supported by this driver, which can be used in a call to get the performance data by type.</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_80","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>The list of types</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_109","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1233</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getproperty","title":"getProperty","text":"<p>\u25b8 <code>Optional</code> getProperty(<code>name</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>Retrieve the value of a named property of an element's JS object</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-property</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_55","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the object property name <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_81","title":"Returns","text":"<p><code>Promise</code>&lt;<code>null</code> | <code>string</code>&gt;</p> <p>The property value</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_110","title":"Defined in","text":"<p>packages/types/lib/driver.ts:980</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getproxyavoidlist","title":"getProxyAvoidList","text":"<p>\u25b8 getProxyAvoidList(<code>sessionId?</code>): <code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_56","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_82","title":"Returns","text":"<p><code>RouteMatcher</code>[]</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_55","title":"Inherited from","text":"<p>Driver.getProxyAvoidList</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_111","title":"Defined in","text":"<p>packages/types/lib/driver.ts:639</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getrotation","title":"getRotation","text":"<p>\u25b8 <code>Optional</code> getRotation(): <code>Promise</code>&lt;<code>Rotation</code>&gt;</p> <p>Get the current rotation state of the device</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#device-rotation</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_83","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rotation</code>&gt;</p> <p>The Rotation object consisting of x, y, and z rotation values (0 &lt;= n &lt;= 360)</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_112","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1866</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getscreenshot","title":"getScreenshot","text":"<p>\u25b8 <code>Optional</code> getScreenshot(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get a screenshot of the current document as rendered</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#take-screenshot</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_84","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>A base64-encoded string representing the PNG image data</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_113","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1202</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getsession","title":"getSession","text":"<p>\u25b8 getSession(): <code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>Get the data for the current session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_85","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>A session data object</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_56","title":"Inherited from","text":"<p>Driver.getSession</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_114","title":"Defined in","text":"<p>packages/types/lib/driver.ts:458</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getsessions","title":"getSessions","text":"<p>\u25b8 getSessions(): <code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_86","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>A list of session data objects</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_57","title":"Inherited from","text":"<p>Driver.getSessions</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_115","title":"Defined in","text":"<p>packages/types/lib/driver.ts:451</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>Get the current settings for the session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_87","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Settings</code>&gt;</p> <p>The settings object</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_58","title":"Inherited from","text":"<p>Driver.getSettings</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_116","title":"Defined in","text":"<p>packages/types/lib/driver.ts:388</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getstatus","title":"getStatus","text":"<p>\u25b8 getStatus(): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p><code>Summary</code></p> <p>Retrieve the server's current status.</p> <p><code>Description</code></p> <p>Returns information about whether a remote end is in a state in which it can create new sessions and can additionally include arbitrary meta information that is specific to the implementation.</p> <p>The readiness state is represented by the ready property of the body, which is false if an attempt to create a session at the current time would fail. However, the value true does not guarantee that a New Session command will succeed.</p> <p>Implementations may optionally include additional meta information as part of the body, but the top-level properties ready and message are reserved and must not be overwritten.</p> <p><code>Example</code></p> <pre><code>// webdriver.io example\nawait driver.status();\n</code></pre> <pre><code>driver.get_status()\n</code></pre> <pre><code>driver.getStatus();\n</code></pre> <pre><code># ruby_lib example\nremote_status\n# ruby_lib_core example\n@driver.remote_status\n</code></pre>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_88","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_59","title":"Inherited from","text":"<p>Driver.getStatus</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_117","title":"Defined in","text":"<p>packages/types/lib/driver.ts:631</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getsystembars","title":"getSystemBars","text":"<p>\u25b8 <code>Optional</code> getSystemBars(): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Get information from the system bars of a device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_89","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>An array of information objects of driver-specific shape</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_118","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1584</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#gettext","title":"getText","text":"<p>\u25b8 <code>Optional</code> getText(<code>elementId</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the text of an element as rendered</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-element-text</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_57","title":"Parameters","text":"Name Type Description <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_90","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The text rendered for the element</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_119","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1001</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#gettimeouts","title":"getTimeouts","text":"<p>\u25b8 getTimeouts(): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get the current timeouts</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-timeouts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_91","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>A map of timeout names to ms values</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_60","title":"Inherited from","text":"<p>Driver.getTimeouts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_120","title":"Defined in","text":"<p>packages/types/lib/driver.ts:77</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#geturl","title":"getUrl","text":"<p>\u25b8 <code>Optional</code> getUrl(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current url</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-current-url</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_92","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The url</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_121","title":"Defined in","text":"<p>packages/types/lib/driver.ts:792</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getwindowhandle","title":"getWindowHandle","text":"<p>\u25b8 <code>Optional</code> getWindowHandle(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the handle (id) associated with the current browser window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-window-handle</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_93","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The handle string</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_122","title":"Defined in","text":"<p>packages/types/lib/driver.ts:837</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getwindowhandles","title":"getWindowHandles","text":"<p>\u25b8 <code>Optional</code> getWindowHandles(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get a set of handles representing open browser windows</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-window-handles</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_94","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>An array of window handles representing currently-open windows</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_123","title":"Defined in","text":"<p>packages/types/lib/driver.ts:861</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#getwindowrect","title":"getWindowRect","text":"<p>\u25b8 <code>Optional</code> getWindowRect(): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Get the size and position of the current window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-window-rect</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_95","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>A <code>Rect</code> JSON object with x, y, width, and height properties</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_124","title":"Defined in","text":"<p>packages/types/lib/driver.ts:893</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#gsmcall","title":"gsmCall","text":"<p>\u25b8 <code>Optional</code> gsmCall(<code>phoneNumber</code>, <code>action</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Simulate triggering a phone call from a phone number and having the device take an action in response</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_58","title":"Parameters","text":"Name Type Description <code>phoneNumber</code> <code>string</code> the number to pretend the call is from <code>action</code> <code>string</code> the action to take in response (accept, reject, etc...)"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_96","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_125","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1304</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#gsmsignal","title":"gsmSignal","text":"<p>\u25b8 <code>Optional</code> gsmSignal(<code>signalStrength</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Simulate setting the GSM signal strength for a cell phone</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_59","title":"Parameters","text":"Name Type <code>signalStrength</code> <code>string</code> | <code>number</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_97","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_126","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1313</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#gsmvoice","title":"gsmVoice","text":"<p>\u25b8 <code>Optional</code> gsmVoice(<code>state</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Do something with GSM voice (unclear; this should not be implemented anywhere)</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_60","title":"Parameters","text":"Name Type Description <code>state</code> <code>string</code> the state"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_98","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_127","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1323</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#hidekeyboard","title":"hideKeyboard","text":"<p>\u25b8 <code>Optional</code> hideKeyboard(<code>strategy?</code>, <code>key?</code>, <code>keyCode?</code>, <code>keyName?</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Attempt to hide a virtual keyboard</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_61","title":"Parameters","text":"Name Type Description <code>strategy?</code> <code>string</code> the driver-specific name of a hiding strategy to follow <code>key?</code> <code>string</code> the text of a key to use to hide the keyboard <code>keyCode?</code> <code>string</code> a key code to trigger to hide the keyboard <code>keyName?</code> <code>string</code> the name of a key to use to hide the keyboard"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_99","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Whether the keyboard was successfully hidden. May never return <code>false</code> on some platforms</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_128","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1467</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#implicitwait","title":"implicitWait","text":"<p>\u25b8 implicitWait(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_62","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_100","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_61","title":"Inherited from","text":"<p>Driver.implicitWait</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_129","title":"Defined in","text":"<p>packages/types/lib/driver.ts:53</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#implicitwaitforcondition","title":"implicitWaitForCondition","text":"<p>\u25b8 implicitWaitForCondition(<code>condition</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Periodically retry an async function up until the currently set implicit wait timeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_63","title":"Parameters","text":"Name Type Description <code>condition</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>Promise</code>&lt;<code>any</code>&gt; the behaviour to retry until it returns truthy"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_101","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the condition</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_62","title":"Inherited from","text":"<p>Driver.implicitWaitForCondition</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_130","title":"Defined in","text":"<p>packages/types/lib/driver.ts:69</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#implicitwaitmjsonwp","title":"implicitWaitMJSONWP","text":"<p>\u25b8 implicitWaitMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_64","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_102","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_63","title":"Inherited from","text":"<p>Driver.implicitWaitMJSONWP</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_131","title":"Defined in","text":"<p>packages/types/lib/driver.ts:92</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#implicitwaitw3c","title":"implicitWaitW3C","text":"<p>\u25b8 implicitWaitW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_65","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_103","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_64","title":"Inherited from","text":"<p>Driver.implicitWaitW3C</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_132","title":"Defined in","text":"<p>packages/types/lib/driver.ts:84</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#installapp","title":"installApp","text":"<p>\u25b8 <code>Optional</code> installApp(<code>appPath</code>, <code>options?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Install an app on a device</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_66","title":"Parameters","text":"Name Type Description <code>appPath</code> <code>string</code> the absolute path to a local app or a URL of a downloadable app bundle <code>options?</code> <code>unknown</code> driver-specific install options"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_104","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_133","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1411</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#isappinstalled","title":"isAppInstalled","text":"<p>\u25b8 <code>Optional</code> isAppInstalled(<code>appId</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine whether an app is installed</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_67","title":"Parameters","text":"Name Type Description <code>appId</code> <code>string</code> the package or bundle ID of the application"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_105","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_134","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1444</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#isfeatureenabled","title":"isFeatureEnabled","text":"<p>\u25b8 isFeatureEnabled(<code>name</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_68","title":"Parameters","text":"Name Type <code>name</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_106","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_65","title":"Inherited from","text":"<p>Driver.isFeatureEnabled</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_135","title":"Defined in","text":"<p>packages/types/lib/driver.ts:635</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#isimeactivated","title":"isIMEActivated","text":"<p>\u25b8 <code>Optional</code> isIMEActivated(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine whether an IME is active</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_107","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>True if the IME is activated</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_136","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1657</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#iskeyboardshown","title":"isKeyboardShown","text":"<p>\u25b8 <code>Optional</code> isKeyboardShown(): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Determine whether the keyboard is shown</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_108","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Whether the keyboard is shown</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_137","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1479</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#ismjsonwpprotocol","title":"isMjsonwpProtocol","text":"<p>\u25b8 isMjsonwpProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_109","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_66","title":"Inherited from","text":"<p>Driver.isMjsonwpProtocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_138","title":"Defined in","text":"<p>packages/types/lib/driver.ts:634</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#isw3cprotocol","title":"isW3CProtocol","text":"<p>\u25b8 isW3CProtocol(): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_110","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_67","title":"Inherited from","text":"<p>Driver.isW3CProtocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_139","title":"Defined in","text":"<p>packages/types/lib/driver.ts:633</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#keyevent","title":"keyevent","text":"<p>\u25b8 <code>Optional</code> keyevent(<code>keycode</code>, <code>metastate?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Simulate a keyevent on the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_69","title":"Parameters","text":"Name Type Description <code>keycode</code> <code>string</code> | <code>number</code> the manufacturer defined keycode <code>metastate?</code> <code>string</code> | <code>number</code> the combination of meta startUnexpectedShutdown"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_111","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_140","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1360</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#logcustomevent","title":"logCustomEvent","text":"<p>\u25b8 logCustomEvent(<code>vendor</code>, <code>event</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_70","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_112","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_68","title":"Inherited from","text":"<p>Driver.logCustomEvent</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_141","title":"Defined in","text":"<p>packages/types/lib/driver.ts:148</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#logevent","title":"logEvent","text":"<p>\u25b8 logEvent(<code>eventName</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_71","title":"Parameters","text":"Name Type <code>eventName</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_113","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_69","title":"Inherited from","text":"<p>Driver.logEvent</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_142","title":"Defined in","text":"<p>packages/types/lib/driver.ts:645</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#logextracaps","title":"logExtraCaps","text":"<p>\u25b8 logExtraCaps(<code>caps</code>): <code>void</code></p> <p>A helper function to log unrecognized capabilities to the console</p> <p><code>Params</code></p> <p>caps - the capabilities</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_72","title":"Parameters","text":"Name Type <code>caps</code> <code>DriverCaps</code>&lt;<code>C</code>&gt;"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_114","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_70","title":"Inherited from","text":"<p>Driver.logExtraCaps</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_143","title":"Defined in","text":"<p>packages/types/lib/driver.ts:749</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#longpresskeycode","title":"longPressKeyCode","text":"<p>\u25b8 <code>Optional</code> longPressKeyCode(<code>keycode</code>, <code>metastate?</code>, <code>flags?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Press a device hardware key by its code for a longer duration</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_73","title":"Parameters","text":"Name Type Description <code>keycode</code> <code>number</code> the keycode <code>metastate?</code> <code>number</code> the code denoting the simultaneous pressing of any meta keys (shift etc) <code>flags?</code> <code>number</code> the code denoting the combination of extra flags"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_115","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_144","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1274</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#maximizewindow","title":"maximizeWindow","text":"<p>\u25b8 <code>Optional</code> maximizeWindow(): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Run the window-manager specific 'maximize' operation on the current window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#maximize-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_116","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>The actual <code>Rect</code> of the window after running the command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_145","title":"Defined in","text":"<p>packages/types/lib/driver.ts:914</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#minimizewindow","title":"minimizeWindow","text":"<p>\u25b8 <code>Optional</code> minimizeWindow(): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Run the window-manager specific 'minimize' operation on the current window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#minimize-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_117","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>The actual <code>Rect</code> of the window after running the command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_146","title":"Defined in","text":"<p>packages/types/lib/driver.ts:922</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#mobilerotation","title":"mobileRotation","text":"<p>\u25b8 <code>Optional</code> mobileRotation(<code>x</code>, <code>y</code>, <code>radius</code>, <code>rotation</code>, <code>touchCount</code>, <code>duration</code>, <code>elementId?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Construct a rotation gesture? Unclear what this command does and it does not appear to be used</p> <p><code>Deprecated</code></p> <p>Use setRotation instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_74","title":"Parameters","text":"Name Type Description <code>x</code> <code>number</code> the x coordinate of the rotation center <code>y</code> <code>number</code> the y coordinate of the rotation center <code>radius</code> <code>number</code> the radius of the rotation circle <code>rotation</code> <code>number</code> the rotation angle? idk <code>touchCount</code> <code>number</code> how many fingers to rotate <code>duration</code> <code>string</code> - <code>elementId?</code> <code>string</code> if we're rotating around an element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_118","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_147","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1375</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#networkspeed","title":"networkSpeed","text":"<p>\u25b8 <code>Optional</code> networkSpeed(<code>netspeed</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the network speed of the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_75","title":"Parameters","text":"Name Type Description <code>netspeed</code> <code>string</code> the speed as a string, like '3G'"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_119","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_148","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1350</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#newcommandtimeout","title":"newCommandTimeout","text":"<p>\u25b8 newCommandTimeout(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set Appium's new command timeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_76","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_120","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_71","title":"Inherited from","text":"<p>Driver.newCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_149","title":"Defined in","text":"<p>packages/types/lib/driver.ts:129</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u25b8 onUnexpectedShutdown(<code>handler</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_77","title":"Parameters","text":"Name Type <code>handler</code> () =&gt; <code>any</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_121","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_72","title":"Inherited from","text":"<p>Driver.onUnexpectedShutdown</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_150","title":"Defined in","text":"<p>packages/types/lib/driver.ts:599</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#opennotifications","title":"openNotifications","text":"<p>\u25b8 <code>Optional</code> openNotifications(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Open the notifications shade/screen</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_122","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_151","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1545</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#pageloadtimeoutmjsonwp","title":"pageLoadTimeoutMJSONWP","text":"<p>\u25b8 pageLoadTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_78","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_123","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_73","title":"Inherited from","text":"<p>Driver.pageLoadTimeoutMJSONWP</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_152","title":"Defined in","text":"<p>packages/types/lib/driver.ts:107</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#pageloadtimeoutw3c","title":"pageLoadTimeoutW3C","text":"<p>\u25b8 pageLoadTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_79","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_124","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_74","title":"Inherited from","text":"<p>Driver.pageLoadTimeoutW3C</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_153","title":"Defined in","text":"<p>packages/types/lib/driver.ts:99</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parsetimeoutargument","title":"parseTimeoutArgument","text":"<p>\u25b8 parseTimeoutArgument(<code>ms</code>): <code>number</code></p> <p>Get a timeout value from a number or a string</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_80","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout value as a number or a string"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_125","title":"Returns","text":"<p><code>number</code></p> <p>The timeout as a number in ms</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_75","title":"Inherited from","text":"<p>Driver.parseTimeoutArgument</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_154","title":"Defined in","text":"<p>packages/types/lib/driver.ts:138</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#performactions","title":"performActions","text":"<p>\u25b8 <code>Optional</code> performActions(<code>actions</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform touch or keyboard actions</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#perform-actions</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_81","title":"Parameters","text":"Name Type Description <code>actions</code> <code>ActionSequence</code>[] the action sequence"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_126","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_155","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1160</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#postacceptalert","title":"postAcceptAlert","text":"<p>\u25b8 <code>Optional</code> postAcceptAlert(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Accept a simple dialog/alert</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#accept-alert</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_127","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_156","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1178</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#postdismissalert","title":"postDismissAlert","text":"<p>\u25b8 <code>Optional</code> postDismissAlert(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Dismiss a simple dialog/alert</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#dismiss-alert</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_128","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_157","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1172</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#powerac","title":"powerAC","text":"<p>\u25b8 <code>Optional</code> powerAC(<code>state</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the AC-connected power state of the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_82","title":"Parameters","text":"Name Type Description <code>state</code> <code>string</code> whether the device is connected to power or not"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_129","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_158","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1341</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#powercapacity","title":"powerCapacity","text":"<p>\u25b8 <code>Optional</code> powerCapacity(<code>percent</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the simulated power capacity of the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_83","title":"Parameters","text":"Name Type Description <code>percent</code> <code>number</code> how full the battery should become"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_130","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_159","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1332</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#presskeycode","title":"pressKeyCode","text":"<p>\u25b8 <code>Optional</code> pressKeyCode(<code>keycode</code>, <code>metastate?</code>, <code>flags?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Press a device hardware key by its code for the default duration</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_84","title":"Parameters","text":"Name Type Description <code>keycode</code> <code>number</code> the keycode <code>metastate?</code> <code>number</code> the code denoting the simultaneous pressing of any meta keys (shift etc) <code>flags?</code> <code>number</code> the code denoting the combination of extra flags"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_131","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_160","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1262</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#proxyactive","title":"proxyActive","text":"<p>\u25b8 proxyActive(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_85","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_132","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_76","title":"Inherited from","text":"<p>Driver.proxyActive</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_161","title":"Defined in","text":"<p>packages/types/lib/driver.ts:638</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#proxycommand","title":"proxyCommand","text":"<p>\u25b8 <code>Optional</code> proxyCommand&lt;<code>TReq</code>, <code>TRes</code>&gt;(<code>url</code>, <code>method</code>, <code>body?</code>): <code>Promise</code>&lt;<code>TRes</code>&gt;</p> <p>Proxy a command to a connected WebDriver server</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#type-parameters_2","title":"Type parameters","text":"Name Type Description <code>TReq</code> <code>any</code> the type of the incoming body <code>TRes</code> <code>unknown</code> the type of the return value"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_86","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> the incoming URL <code>method</code> <code>HTTPMethod</code> the incoming HTTP method <code>body?</code> <code>TReq</code> the incoming HTTP body"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_133","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TRes</code>&gt;</p> <p>The return value of the proxied command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_162","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1986</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#proxyrouteisavoided","title":"proxyRouteIsAvoided","text":"<p>\u25b8 proxyRouteIsAvoided(<code>sessionId</code>, <code>method</code>, <code>url</code>, <code>body?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_87","title":"Parameters","text":"Name Type <code>sessionId</code> <code>string</code> <code>method</code> <code>string</code> <code>url</code> <code>string</code> <code>body?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_134","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_77","title":"Inherited from","text":"<p>Driver.proxyRouteIsAvoided</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_163","title":"Defined in","text":"<p>packages/types/lib/driver.ts:641</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#pullfile","title":"pullFile","text":"<p>\u25b8 <code>Optional</code> pullFile(<code>path</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Retrieve the data from a file on the device at a given path</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_88","title":"Parameters","text":"Name Type Description <code>path</code> <code>string</code> the remote path on the device to pull file data from"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_135","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The base64-encoded file data</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_164","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1496</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#pullfolder","title":"pullFolder","text":"<p>\u25b8 <code>Optional</code> pullFolder(<code>path</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Retrieve the data from a folder on the device at a given path</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_89","title":"Parameters","text":"Name Type Description <code>path</code> <code>string</code> the remote path of a directory on the device"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_136","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The base64-encoded zip file of the directory contents</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_165","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1505</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#pushfile","title":"pushFile","text":"<p>\u25b8 <code>Optional</code> pushFile(<code>path</code>, <code>data</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Push data to a file at a remote path on the device</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_90","title":"Parameters","text":"Name Type Description <code>path</code> <code>string</code> the remote path on the device to create the file at <code>data</code> <code>string</code> the base64-encoded data which will be decoded and written to <code>path</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_137","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_166","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1487</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#queryappstate","title":"queryAppState","text":"<p>\u25b8 <code>Optional</code> queryAppState(<code>appId</code>): <code>Promise</code>&lt;<code>0</code> | <code>2</code> | <code>1</code> | <code>3</code> | <code>4</code>&gt;</p> <p>Get the running state of an app</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_91","title":"Parameters","text":"Name Type Description <code>appId</code> <code>string</code> the package or bundle ID of the application"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_138","title":"Returns","text":"<p><code>Promise</code>&lt;<code>0</code> | <code>2</code> | <code>1</code> | <code>3</code> | <code>4</code>&gt;</p> <p>A number representing the state. <code>0</code> means not installed, <code>1</code> means not running, <code>2</code> means running in background but suspended, <code>3</code> means running in the background, and <code>4</code> means running in the foreground</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_167","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1455</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#refresh","title":"refresh","text":"<p>\u25b8 <code>Optional</code> refresh(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Refresh the page</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#refresh</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_139","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_168","title":"Defined in","text":"<p>packages/types/lib/driver.ts:810</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#releaseactions","title":"releaseActions","text":"<p>\u25b8 <code>Optional</code> releaseActions(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Release all keys or buttons that are currently pressed</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#release-actions</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_140","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_169","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1166</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#removeallauthcredentials","title":"removeAllAuthCredentials","text":"<p>\u25b8 <code>Optional</code> removeAllAuthCredentials(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Remove all auth credentials</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-remove-all-credentials</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_141","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_170","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1956</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#removeapp","title":"removeApp","text":"<p>\u25b8 <code>Optional</code> removeApp(<code>appId</code>, <code>options?</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Remove / uninstall an app</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_92","title":"Parameters","text":"Name Type Description <code>appId</code> <code>string</code> the package or bundle ID of the application <code>options?</code> <code>unknown</code> driver-specific launch options"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_142","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p><code>true</code> if successful</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_171","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1429</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#removeauthcredential","title":"removeAuthCredential","text":"<p>\u25b8 <code>Optional</code> removeAuthCredential(<code>credentialId</code>, <code>authenticatorId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Remove a specific auth credential</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_93","title":"Parameters","text":"Name Type Description <code>credentialId</code> <code>string</code> the credential ID <code>authenticatorId</code> <code>string</code> the authenticator ID"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_143","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_172","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1964</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#removevirtualauthenticator","title":"removeVirtualAuthenticator","text":"<p>\u25b8 <code>Optional</code> removeVirtualAuthenticator(<code>authenticatorId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Remove a virtual authenticator</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-remove-virtual-authenticator</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_94","title":"Parameters","text":"Name Type Description <code>authenticatorId</code> <code>string</code> the ID returned in the call to add the authenticator"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_144","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_173","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1920</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#replacevalue","title":"replaceValue","text":"<p>\u25b8 <code>Optional</code> replaceValue(<code>value</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the value of a text field but ensure the current value is replace and not appended</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_95","title":"Parameters","text":"Name Type Description <code>value</code> <code>string</code> the text to set <code>elementId</code> <code>string</code> the element to set it in"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_145","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_174","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1616</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#reset","title":"reset","text":"<p>\u25b8 reset(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Reset the current session (run the delete session and create session subroutines)</p> <p><code>Deprecated</code></p> <p>Use explicit session management commands instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_146","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_78","title":"Inherited from","text":"<p>Driver.reset</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_175","title":"Defined in","text":"<p>packages/types/lib/driver.ts:714</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#scripttimeoutmjsonwp","title":"scriptTimeoutMJSONWP","text":"<p>\u25b8 scriptTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_96","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_147","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_79","title":"Inherited from","text":"<p>Driver.scriptTimeoutMJSONWP</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_176","title":"Defined in","text":"<p>packages/types/lib/driver.ts:122</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#scripttimeoutw3c","title":"scriptTimeoutW3C","text":"<p>\u25b8 scriptTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_97","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_148","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_80","title":"Inherited from","text":"<p>Driver.scriptTimeoutW3C</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_177","title":"Defined in","text":"<p>packages/types/lib/driver.ts:114</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#sendsms","title":"sendSMS","text":"<p>\u25b8 <code>Optional</code> sendSMS(<code>phoneNumber</code>, <code>message</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Simulate sending an SMS message from a certain phone number to the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_98","title":"Parameters","text":"Name Type Description <code>phoneNumber</code> <code>string</code> the number to pretend the message is from <code>message</code> <code>string</code> the SMS text"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_149","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_178","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1293</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#sessionexists","title":"sessionExists","text":"<p>\u25b8 sessionExists(<code>sessionId?</code>): <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_99","title":"Parameters","text":"Name Type <code>sessionId?</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_150","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_81","title":"Inherited from","text":"<p>Driver.sessionExists</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_179","title":"Defined in","text":"<p>packages/types/lib/driver.ts:632</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setalerttext","title":"setAlertText","text":"<p>\u25b8 <code>Optional</code> setAlertText(<code>text</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the text field of an alert prompt</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#send-alert-text</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_100","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> the text to send to the prompt"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_151","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_180","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1194</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setcontext","title":"setContext","text":"<p>\u25b8 <code>Optional</code> setContext(<code>name</code>, <code>...args</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Switch to a context by name</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#webviews-and-other-contexts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_101","title":"Parameters","text":"Name Type Description <code>name</code> <code>string</code> the context name <code>...args</code> <code>any</code>[] -"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_152","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_181","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1819</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setcookie","title":"setCookie","text":"<p>\u25b8 <code>Optional</code> setCookie(<code>cookie</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a cookie to the browsing context</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#add-cookie</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_102","title":"Parameters","text":"Name Type Description <code>cookie</code> <code>Cookie</code> the cookie data including properties like name, value, path, domain, secure, httpOnly, expiry, and samesite"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_153","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_182","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1138</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setframe","title":"setFrame","text":"<p>\u25b8 <code>Optional</code> setFrame(<code>id</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Switch the current browsing context to a frame</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#switch-to-frame</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_103","title":"Parameters","text":"Name Type Description <code>id</code> <code>null</code> | <code>string</code> | <code>number</code> the frame id, index, or <code>null</code> (indicating the top-level context)"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_154","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_183","title":"Defined in","text":"<p>packages/types/lib/driver.ts:879</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setgeolocation","title":"setGeoLocation","text":"<p>\u25b8 <code>Optional</code> setGeoLocation(<code>location</code>): <code>Promise</code>&lt;<code>Location</code>&gt;</p> <p>Set the virtual geographical location of a device</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_104","title":"Parameters","text":"Name Type Description <code>location</code> <code>Partial</code>&lt;<code>Location</code>&gt; the location including latitude and longitude"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_155","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Location</code>&gt;</p> <p>The complete location</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_184","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1801</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setimplicitwait","title":"setImplicitWait","text":"<p>\u25b8 setImplicitWait(<code>ms</code>): <code>void</code></p> <p>A helper method (not a command) used to set the implicit wait value</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_105","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the implicit wait in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_156","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_82","title":"Inherited from","text":"<p>Driver.setImplicitWait</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_185","title":"Defined in","text":"<p>packages/types/lib/driver.ts:60</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setnetworkconnection","title":"setNetworkConnection","text":"<p>\u25b8 <code>Optional</code> setNetworkConnection(<code>type</code>): <code>Promise</code>&lt;<code>number</code>&gt;</p> <p>Set the network connection of the device</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#device-modes</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_106","title":"Parameters","text":"Name Type Description <code>type</code> <code>number</code> the bitmask representing network state"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_157","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>A number which is a bitmask representing categories like Data, Wifi, and Airplane mode status</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_186","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1858</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setnewcommandtimeout","title":"setNewCommandTimeout","text":"<p>\u25b8 setNewCommandTimeout(<code>ms</code>): <code>void</code></p> <p>Set the new command timeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_107","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_158","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_83","title":"Inherited from","text":"<p>Driver.setNewCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_187","title":"Defined in","text":"<p>packages/types/lib/driver.ts:43</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setorientation","title":"setOrientation","text":"<p>\u25b8 <code>Optional</code> setOrientation(<code>orientation</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the device orientation</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_108","title":"Parameters","text":"Name Type Description <code>orientation</code> <code>string</code> the orientation string"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_159","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_188","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1687</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setrotation","title":"setRotation","text":"<p>\u25b8 <code>Optional</code> setRotation(<code>x</code>, <code>y</code>, <code>z</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the device rotation state</p> <p><code>See</code></p> <p>https://github.com/SeleniumHQ/mobile-spec/blob/master/spec-draft.md#device-rotation</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_109","title":"Parameters","text":"Name Type Description <code>x</code> <code>number</code> the degree to which the device is rotated around the x axis (0 &lt;= x &lt;= 360) <code>y</code> <code>number</code> the degree to which the device is rotated around the y axis (0 &lt;= y &lt;= 360) <code>z</code> <code>number</code> the degree to which the device is rotated around the z axis (0 &lt;= z &lt;= 360)"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_160","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_189","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1876</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#seturl","title":"setUrl","text":"<p>\u25b8 <code>Optional</code> setUrl(<code>url</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Navigate to a given url</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#navigate-to</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_110","title":"Parameters","text":"Name Type Description <code>url</code> <code>string</code> the url"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_161","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_190","title":"Defined in","text":"<p>packages/types/lib/driver.ts:784</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setuserauthverified","title":"setUserAuthVerified","text":"<p>\u25b8 <code>Optional</code> setUserAuthVerified(<code>isUserVerified</code>, <code>authenticatorId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the isUserVerified property of an authenticator</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webauthn-2/#sctn-automation-set-user-verified</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_111","title":"Parameters","text":"Name Type Description <code>isUserVerified</code> <code>boolean</code> the value of the isUserVerified property <code>authenticatorId</code> <code>string</code> the authenticator id"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_162","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_191","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1973</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setvalue","title":"setValue","text":"<p>\u25b8 <code>Optional</code> setValue(<code>text</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Send keystrokes to an element (or otherwise set its value)</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#element-send-keys</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_112","title":"Parameters","text":"Name Type Description <code>text</code> <code>string</code> the text to send to the element <code>elementId</code> <code>string</code> the id of the element"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_163","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_192","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1086</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setwindow","title":"setWindow","text":"<p>\u25b8 <code>Optional</code> setWindow(<code>handle</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Switch to a specified window</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#switch-to-window</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_113","title":"Parameters","text":"Name Type Description <code>handle</code> <code>string</code> the window handle of the window to make active"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_164","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_193","title":"Defined in","text":"<p>packages/types/lib/driver.ts:853</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#setwindowrect","title":"setWindowRect","text":"<p>\u25b8 <code>Optional</code> setWindowRect(<code>x</code>, <code>y</code>, <code>width</code>, <code>height</code>): <code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>Set the current window's size and position</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-window-rect</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_114","title":"Parameters","text":"Name Type Description <code>x</code> <code>number</code> the screen coordinate for the new left edge of the window <code>y</code> <code>number</code> the screen coordinate for the new top edge of the window <code>width</code> <code>number</code> the width in pixels to resize the window to <code>height</code> <code>number</code> the height in pixels to resize the window to"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_165","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Rect</code>&gt;</p> <p>The actual <code>Rect</code> of the window after running the command</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_194","title":"Defined in","text":"<p>packages/types/lib/driver.ts:906</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#startactivity","title":"startActivity","text":"<p>\u25b8 <code>Optional</code> startActivity(<code>appPackage</code>, <code>appActivity</code>, <code>appWaitPackage?</code>, <code>appWaitActivity?</code>, <code>intentAction?</code>, <code>intentCategory?</code>, <code>intentFlags?</code>, <code>optionalIntentArguments?</code>, <code>dontStopAppOnReset?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Start an Android activity within an app</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_115","title":"Parameters","text":"Name Type Description <code>appPackage</code> <code>string</code> the app package id <code>appActivity</code> <code>string</code> the activity name <code>appWaitPackage?</code> <code>string</code> the package id to wait for if different from the app package <code>appWaitActivity?</code> <code>string</code> the activity name to wait for being active if different from appActivity <code>intentAction?</code> <code>string</code> the action for the intent to use to start the activity <code>intentCategory?</code> <code>string</code> the category for the intent <code>intentFlags?</code> <code>string</code> - <code>optionalIntentArguments?</code> <code>string</code> additional arguments to be passed to launching the intent <code>dontStopAppOnReset?</code> <code>boolean</code> set to true to not stop the current app before launching the activity"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_166","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_195","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1565</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#startnewcommandtimeout","title":"startNewCommandTimeout","text":"<p>\u25b8 startNewCommandTimeout(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Start the timer for the New Command Timeout, which when it runs out, will stop the current session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_167","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_84","title":"Inherited from","text":"<p>Driver.startNewCommandTimeout</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_196","title":"Defined in","text":"<p>packages/types/lib/driver.ts:706</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#startunexpectedshutdown","title":"startUnexpectedShutdown","text":"<p>\u25b8 startUnexpectedShutdown(<code>err?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Signify to any owning processes that this driver encountered an error which should cause the session to terminate immediately (for example an upstream service failed)</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_116","title":"Parameters","text":"Name Type Description <code>err?</code> <code>Error</code> the Error object which is causing the shutdown"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_168","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_85","title":"Inherited from","text":"<p>Driver.startUnexpectedShutdown</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_197","title":"Defined in","text":"<p>packages/types/lib/driver.ts:700</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#switchtoparentframe","title":"switchToParentFrame","text":"<p>\u25b8 <code>Optional</code> switchToParentFrame(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the current browsing context to the parent of the current context</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#switch-to-parent-frame</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_169","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_198","title":"Defined in","text":"<p>packages/types/lib/driver.ts:885</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#terminateapp","title":"terminateApp","text":"<p>\u25b8 <code>Optional</code> terminateApp(<code>appId</code>, <code>options?</code>): <code>Promise</code>&lt;<code>boolean</code>&gt;</p> <p>Quit / terminate / stop a running application</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_117","title":"Parameters","text":"Name Type Description <code>appId</code> <code>string</code> the package or bundle ID of the application <code>options?</code> <code>unknown</code> driver-specific launch options"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_170","title":"Returns","text":"<p><code>Promise</code>&lt;<code>boolean</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_199","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1437</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#timeouts","title":"timeouts","text":"<p>\u25b8 timeouts(<code>type</code>, <code>ms</code>, <code>script?</code>, <code>pageLoad?</code>, <code>implicit?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_118","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_171","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_86","title":"Inherited from","text":"<p>Driver.timeouts</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_200","title":"Defined in","text":"<p>packages/types/lib/driver.ts:30</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#title","title":"title","text":"<p>\u25b8 <code>Optional</code> title(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page title</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-title</p> <p><code>Example</code></p> <p><pre><code>await driver.getTitle()\n</code></pre> <pre><code>driver.title\n</code></pre> <pre><code>driver.getTitle();\n</code></pre></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_172","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The title</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_201","title":"Defined in","text":"<p>packages/types/lib/driver.ts:829</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#toggledata","title":"toggleData","text":"<p>\u25b8 <code>Optional</code> toggleData(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Toggle cell network data</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_173","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_202","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1521</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#toggleflightmode","title":"toggleFlightMode","text":"<p>\u25b8 <code>Optional</code> toggleFlightMode(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Toggle airplane/flight mode for the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_174","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_203","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1513</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#togglelocationservices","title":"toggleLocationServices","text":"<p>\u25b8 <code>Optional</code> toggleLocationServices(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Toggle location services for the device</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_175","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_204","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1537</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#togglewifi","title":"toggleWiFi","text":"<p>\u25b8 <code>Optional</code> toggleWiFi(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Toggle WiFi radio status</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_176","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_205","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1529</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#touchdown","title":"touchDown","text":"<p>\u25b8 <code>Optional</code> touchDown(<code>element</code>, <code>x</code>, <code>y</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform a touch down event at the location specified</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_119","title":"Parameters","text":"Name Type Description <code>element</code> <code>string</code> - <code>x</code> <code>number</code> the x coordinate <code>y</code> <code>number</code> the y coordinate"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_177","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_206","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1735</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#touchlongclick","title":"touchLongClick","text":"<p>\u25b8 <code>Optional</code> touchLongClick(<code>element</code>, <code>x</code>, <code>y</code>, <code>duration</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform a long touch down event at the location specified</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_120","title":"Parameters","text":"Name Type <code>element</code> <code>string</code> <code>x</code> <code>number</code> <code>y</code> <code>number</code> <code>duration</code> <code>number</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_178","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_207","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1764</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#touchmove","title":"touchMove","text":"<p>\u25b8 <code>Optional</code> touchMove(<code>element</code>, <code>x</code>, <code>y</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform a touch move event at the location specified</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_121","title":"Parameters","text":"Name Type Description <code>element</code> <code>string</code> - <code>x</code> <code>number</code> the x coordinate <code>y</code> <code>number</code> the y coordinate"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_179","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_208","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1755</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#touchup","title":"touchUp","text":"<p>\u25b8 <code>Optional</code> touchUp(<code>element</code>, <code>x</code>, <code>y</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Perform a touch up event at the location specified</p> <p><code>Deprecated</code></p> <p>Use the Actions API instead</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_122","title":"Parameters","text":"Name Type Description <code>element</code> <code>string</code> - <code>x</code> <code>number</code> the x coordinate <code>y</code> <code>number</code> the y coordinate"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_180","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_209","title":"Defined in","text":"<p>packages/types/lib/driver.ts:1745</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#validatedesiredcaps","title":"validateDesiredCaps","text":"<p>\u25b8 validateDesiredCaps(<code>caps</code>): <code>boolean</code></p> <p>Validate the capabilities used to start a session</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_123","title":"Parameters","text":"Name Type Description <code>caps</code> <code>DriverCaps</code>&lt;<code>C</code>&gt; the capabilities"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_181","title":"Returns","text":"<p><code>boolean</code></p> <p>Whether or not the capabilities are valid</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_87","title":"Inherited from","text":"<p>Driver.validateDesiredCaps</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_210","title":"Defined in","text":"<p>packages/types/lib/driver.ts:740</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#validatelocatorstrategy","title":"validateLocatorStrategy","text":"<p>\u25b8 validateLocatorStrategy(<code>strategy</code>, <code>webContext?</code>): <code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#parameters_124","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>webContext?</code> <code>boolean</code>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#returns_182","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#inherited-from_88","title":"Inherited from","text":"<p>Driver.validateLocatorStrategy</p>"},{"location":"reference/interfaces/appium_types.ExternalDriver/#defined-in_211","title":"Defined in","text":"<p>packages/types/lib/driver.ts:637</p>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/","title":"Interface: ExtraDriverOpts","text":"<p>@appium/types.ExtraDriverOpts</p>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#properties","title":"Properties","text":"<ul> <li>fastReset</li> <li>skipUninstall</li> </ul>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#fastreset","title":"fastReset","text":"<p>\u2022 <code>Optional</code> fastReset: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2017</p>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#skipuninstall","title":"skipUninstall","text":"<p>\u2022 <code>Optional</code> skipUninstall: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ExtraDriverOpts/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2018</p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/","title":"Interface: IDeviceSettings&lt;T&gt;","text":"<p>@appium/types.IDeviceSettings</p> <p>Interface implemented by the <code>DeviceSettings</code> class in <code>@appium/base-driver</code></p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>StringRecord</code>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.IDeviceSettings/#methods","title":"Methods","text":"<ul> <li>getSettings</li> <li>update</li> </ul>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.IDeviceSettings/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>T</code></p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#returns","title":"Returns","text":"<p><code>T</code></p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:17</p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#update","title":"update","text":"<p>\u25b8 update(<code>newSettings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#parameters","title":"Parameters","text":"Name Type <code>newSettings</code> <code>T</code>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.IDeviceSettings/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:16</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/","title":"Interface: IEventCommands","text":"<p>@appium/types.IEventCommands</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>IEventCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.IEventCommands/#methods","title":"Methods","text":"<ul> <li>getLogEvents</li> <li>logCustomEvent</li> </ul>"},{"location":"reference/interfaces/appium_types.IEventCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.IEventCommands/#getlogevents","title":"getLogEvents","text":"<p>\u25b8 getLogEvents(<code>type?</code>): <code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get a list of events that have occurred in the current session</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#parameters","title":"Parameters","text":"Name Type Description <code>type?</code> <code>string</code> | <code>string</code>[] filter the returned events by including one or more types"},{"location":"reference/interfaces/appium_types.IEventCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>EventHistory</code> | <code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>The event history for the session</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:157</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#logcustomevent","title":"logCustomEvent","text":"<p>\u25b8 logCustomEvent(<code>vendor</code>, <code>event</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Add a custom-named event to the Appium event log</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#parameters_1","title":"Parameters","text":"Name Type Description <code>vendor</code> <code>string</code> the name of the vendor or tool the event belongs to, to namespace the event <code>event</code> <code>string</code> the name of the event itself"},{"location":"reference/interfaces/appium_types.IEventCommands/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.IEventCommands/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:148</p>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/","title":"Interface: IExecuteCommands","text":"<p>@appium/types.IExecuteCommands</p>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>IExecuteCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.IExecuteCommands/#methods","title":"Methods","text":"<ul> <li>executeMethod</li> </ul>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.IExecuteCommands/#executemethod","title":"executeMethod","text":"<p>\u25b8 executeMethod&lt;<code>TArgs</code>, <code>TReturn</code>&gt;(<code>script</code>, <code>args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Call an <code>Execute Method</code> by its name with the given arguments. This method will check that the driver has registered the method matching the name, and send it the arguments.</p>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#type-parameters","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] | readonly [<code>StringRecord</code>&lt;<code>unknown</code>&gt;] = <code>unknown</code>[] <code>TReturn</code> <code>unknown</code>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#parameters","title":"Parameters","text":"Name Type Description <code>script</code> <code>string</code> the name of the Execute Method <code>args</code> <code>TArgs</code> a singleton array containing an arguments object"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>The result of calling the Execute Method</p>"},{"location":"reference/interfaces/appium_types.IExecuteCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:170</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/","title":"Interface: IFindCommands","text":"<p>@appium/types.IFindCommands</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>IFindCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.IFindCommands/#methods","title":"Methods","text":"<ul> <li>findElOrEls</li> <li>findElOrElsWithProcessing</li> <li>findElement</li> <li>findElementFromElement</li> <li>findElementFromShadowRoot</li> <li>findElements</li> <li>findElementsFromElement</li> <li>findElementsFromShadowRoot</li> <li>getPageSource</li> </ul>"},{"location":"reference/interfaces/appium_types.IFindCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.IFindCommands/#findelorels","title":"findElOrEls","text":"<p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A helper method that returns one or more UI elements based on the search criteria</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:294</p> <p>\u25b8 findElOrEls(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_1","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:295</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelorelswithprocessing","title":"findElOrElsWithProcessing","text":"<p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>This is a wrapper for <code>findElOrEls</code> that validates locator strategies and implements the <code>appium:printPageSourceOnFindFailure</code> capability</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_2","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector <code>mult</code> <code>true</code> whether or not we want to find multiple elements <code>context?</code> <code>any</code> the element to use as the search context basis if desiredCapabilities"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A single element or list of elements</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:308</p> <p>\u25b8 findElOrElsWithProcessing(<code>strategy</code>, <code>selector</code>, <code>mult</code>, <code>context?</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_3","title":"Parameters","text":"Name Type <code>strategy</code> <code>string</code> <code>selector</code> <code>string</code> <code>mult</code> <code>false</code> <code>context?</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:314</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelement","title":"findElement","text":"<p>\u25b8 findElement(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_4","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:210</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelementfromelement","title":"findElementFromElement","text":"<p>\u25b8 findElementFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find a UI element given a locator strategy and a selector, erroring if it can't be found. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-element</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_5","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific element <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element object encoding the element id which can be used in element-related commands</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:235</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelementfromshadowroot","title":"findElementFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>Find an element from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_6","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;&gt;</p> <p>The element inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:263</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelements","title":"findElements","text":"<p>\u25b8 findElements(<code>strategy</code>, <code>selector</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_7","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:221</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelementsfromelement","title":"findElementsFromElement","text":"<p>\u25b8 findElementsFromElement(<code>strategy</code>, <code>selector</code>, <code>elementId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find a a list of all UI elements matching a given a locator strategy and a selector. Only look for elements among the set of descendants of a given element</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-elements-from-element</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_8","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>elementId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_8","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly-empty list of element objects</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:248</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#findelementsfromshadowroot","title":"findElementsFromShadowRoot","text":"<p>\u25b8 <code>Optional</code> findElementsFromShadowRoot(<code>strategy</code>, <code>selector</code>, <code>shadowId</code>): <code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>Find elements from a shadow root</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#find-element-from-shadow-root</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#parameters_9","title":"Parameters","text":"Name Type Description <code>strategy</code> <code>string</code> the locator strategy <code>selector</code> <code>string</code> the selector to combine with the strategy to find the specific elements <code>shadowId</code> <code>string</code> the id of the element to use as the search basis"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Element</code>&lt;<code>string</code>&gt;[]&gt;</p> <p>A possibly empty list of elements inside the shadow root matching the selector</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/driver.ts:278</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#getpagesource","title":"getPageSource","text":"<p>\u25b8 getPageSource(): <code>Promise</code>&lt;<code>string</code>&gt;</p> <p>Get the current page/app source as HTML/XML</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-page-source</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p> <p>The UI hierarchy in a platform-appropriate format (e.g., HTML for a web page)</p>"},{"location":"reference/interfaces/appium_types.IFindCommands/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/driver.ts:327</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/","title":"Interface: ILogCommands","text":"<p>@appium/types.ILogCommands</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ILogCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ILogCommands/#properties","title":"Properties","text":"<ul> <li>supportedLogTypes</li> </ul>"},{"location":"reference/interfaces/appium_types.ILogCommands/#methods","title":"Methods","text":"<ul> <li>getLog</li> <li>getLogTypes</li> </ul>"},{"location":"reference/interfaces/appium_types.ILogCommands/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ILogCommands/#supportedlogtypes","title":"supportedLogTypes","text":"<p>\u2022 supportedLogTypes: <code>Readonly</code>&lt;<code>LogDefRecord</code>&gt;</p> <p>Definition of the available log types</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:334</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.ILogCommands/#getlog","title":"getLog","text":"<p>\u25b8 getLog(<code>logType</code>): <code>Promise</code>&lt;<code>any</code>&gt;</p> <p>Get the log for a given log type.</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#parameters","title":"Parameters","text":"Name Type Description <code>logType</code> <code>string</code> Name/key of log type as defined in <code>supportedLogTypes</code>."},{"location":"reference/interfaces/appium_types.ILogCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>any</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:346</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#getlogtypes","title":"getLogTypes","text":"<p>\u25b8 getLogTypes(): <code>Promise</code>&lt;<code>string</code>[]&gt;</p> <p>Get available log types as a list of strings</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>[]&gt;</p>"},{"location":"reference/interfaces/appium_types.ILogCommands/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:339</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/","title":"Interface: ISessionHandler&lt;C, CreateResult, DeleteResult, SessionData&gt;","text":"<p>@appium/types.ISessionHandler</p> <p>An interface which creates and deletes sessions.</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code> <code>CreateResult</code> <code>DefaultCreateSessionResult</code>&lt;<code>C</code>&gt; <code>DeleteResult</code> <code>DefaultDeleteSessionResult</code> <code>SessionData</code> extends <code>StringRecord</code> = <code>StringRecord</code>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ISessionHandler</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ISessionHandler/#methods","title":"Methods","text":"<ul> <li>createSession</li> <li>deleteSession</li> <li>getSession</li> <li>getSessions</li> </ul>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.ISessionHandler/#createsession","title":"createSession","text":"<p>\u25b8 createSession(<code>w3cCaps1</code>, <code>w3cCaps2?</code>, <code>w3cCaps3?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>Start a new automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#new-session</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#parameters","title":"Parameters","text":"Name Type Description <code>w3cCaps1</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; the new session capabilities <code>w3cCaps2?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>w3cCaps3?</code> <code>W3CDriverCaps</code>&lt;<code>C</code>&gt; another place the new session capabilities could be sent (typically left undefined) <code>driverData?</code> <code>DriverData</code>[] a list of DriverData objects representing other sessions running for this driver on the same Appium server. This information can be used to help ensure no conflict of resources"},{"location":"reference/interfaces/appium_types.ISessionHandler/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>CreateResult</code>&gt;</p> <p>The capabilities object representing the created session</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:430</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#deletesession","title":"deleteSession","text":"<p>\u25b8 deleteSession(<code>sessionId?</code>, <code>driverData?</code>): <code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p> <p>Stop an automation session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#delete-session</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#parameters_1","title":"Parameters","text":"Name Type Description <code>sessionId?</code> <code>string</code> the id of the session that is to be deleted <code>driverData?</code> <code>DriverData</code>[] the driver data for other currently-running sessions"},{"location":"reference/interfaces/appium_types.ISessionHandler/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code> | <code>DeleteResult</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:444</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#getsession","title":"getSession","text":"<p>\u25b8 getSession(): <code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>Get the data for the current session</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SingularSessionData</code>&lt;<code>C</code>, <code>SessionData</code>&gt;&gt;</p> <p>A session data object</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:458</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#getsessions","title":"getSessions","text":"<p>\u25b8 getSessions(): <code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>Get data for all sessions running on an Appium server</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MultiSessionData</code>&lt;<code>Constraints</code>&gt;[]&gt;</p> <p>A list of session data objects</p>"},{"location":"reference/interfaces/appium_types.ISessionHandler/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:451</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/","title":"Interface: ISettingsCommands&lt;T&gt;","text":"<p>@appium/types.ISettingsCommands</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>object</code> = <code>object</code>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ISettingsCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ISettingsCommands/#properties","title":"Properties","text":"<ul> <li>updateSettings</li> </ul>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#methods","title":"Methods","text":"<ul> <li>getSettings</li> </ul>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ISettingsCommands/#updatesettings","title":"updateSettings","text":"<p>\u2022 updateSettings: (<code>settings</code>: <code>T</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>settings</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Update the session's settings dictionary with a new settings object</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#parameters","title":"Parameters","text":"Name Type Description <code>settings</code> <code>T</code> A key-value map of setting names to values. Settings not named in the map will not have their value adjusted."},{"location":"reference/interfaces/appium_types.ISettingsCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:381</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.ISettingsCommands/#getsettings","title":"getSettings","text":"<p>\u25b8 getSettings(): <code>Promise</code>&lt;<code>T</code>&gt;</p> <p>Get the current settings for the session</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p> <p>The settings object</p>"},{"location":"reference/interfaces/appium_types.ISettingsCommands/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:388</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/","title":"Interface: ITimeoutCommands","text":"<p>@appium/types.ITimeoutCommands</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>ITimeoutCommands</code></li> </ul> <p>\u21b3 <code>Driver</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#methods","title":"Methods","text":"<ul> <li>getTimeouts</li> <li>implicitWait</li> <li>implicitWaitForCondition</li> <li>implicitWaitMJSONWP</li> <li>implicitWaitW3C</li> <li>newCommandTimeout</li> <li>pageLoadTimeoutMJSONWP</li> <li>pageLoadTimeoutW3C</li> <li>parseTimeoutArgument</li> <li>scriptTimeoutMJSONWP</li> <li>scriptTimeoutW3C</li> <li>setImplicitWait</li> <li>setNewCommandTimeout</li> <li>timeouts</li> </ul>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#methods_1","title":"Methods","text":""},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#gettimeouts","title":"getTimeouts","text":"<p>\u25b8 getTimeouts(): <code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>Get the current timeouts</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#get-timeouts</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>number</code>&gt;&gt;</p> <p>A map of timeout names to ms values</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:77</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#implicitwait","title":"implicitWait","text":"<p>\u25b8 implicitWait(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait timeout</p> <p><code>Deprecated</code></p> <p>Use <code>timeouts</code> instead</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:53</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#implicitwaitforcondition","title":"implicitWaitForCondition","text":"<p>\u25b8 implicitWaitForCondition(<code>condition</code>): <code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>Periodically retry an async function up until the currently set implicit wait timeout</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_1","title":"Parameters","text":"Name Type Description <code>condition</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>Promise</code>&lt;<code>any</code>&gt; the behaviour to retry until it returns truthy"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>unknown</code>&gt;</p> <p>The return value of the condition</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:69</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#implicitwaitmjsonwp","title":"implicitWaitMJSONWP","text":"<p>\u25b8 implicitWaitMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_2","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:92</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#implicitwaitw3c","title":"implicitWaitW3C","text":"<p>\u25b8 implicitWaitW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the implicit wait value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_3","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/driver.ts:84</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#newcommandtimeout","title":"newCommandTimeout","text":"<p>\u25b8 newCommandTimeout(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set Appium's new command timeout</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_4","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/driver.ts:129</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#pageloadtimeoutmjsonwp","title":"pageLoadTimeoutMJSONWP","text":"<p>\u25b8 pageLoadTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_5","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/driver.ts:107</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#pageloadtimeoutw3c","title":"pageLoadTimeoutW3C","text":"<p>\u25b8 pageLoadTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the page load timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_6","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_7","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/driver.ts:99</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parsetimeoutargument","title":"parseTimeoutArgument","text":"<p>\u25b8 parseTimeoutArgument(<code>ms</code>): <code>number</code></p> <p>Get a timeout value from a number or a string</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_7","title":"Parameters","text":"Name Type Description <code>ms</code> <code>string</code> | <code>number</code> the timeout value as a number or a string"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_8","title":"Returns","text":"<p><code>number</code></p> <p>The timeout as a number in ms</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/driver.ts:138</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#scripttimeoutmjsonwp","title":"scriptTimeoutMJSONWP","text":"<p>\u25b8 scriptTimeoutMJSONWP(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the JSONWP</p> <p><code>Deprecated</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_8","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_9","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/driver.ts:122</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#scripttimeoutw3c","title":"scriptTimeoutW3C","text":"<p>\u25b8 scriptTimeoutW3C(<code>ms</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the script timeout value that was sent in via the W3C protocol</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_9","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_10","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/driver.ts:114</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#setimplicitwait","title":"setImplicitWait","text":"<p>\u25b8 setImplicitWait(<code>ms</code>): <code>void</code></p> <p>A helper method (not a command) used to set the implicit wait value</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_10","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the implicit wait in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_11","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/driver.ts:60</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#setnewcommandtimeout","title":"setNewCommandTimeout","text":"<p>\u25b8 setNewCommandTimeout(<code>ms</code>): <code>void</code></p> <p>Set the new command timeout</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_11","title":"Parameters","text":"Name Type Description <code>ms</code> <code>number</code> the timeout in ms"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_12","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/driver.ts:43</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#timeouts","title":"timeouts","text":"<p>\u25b8 timeouts(<code>type</code>, <code>ms</code>, <code>script?</code>, <code>pageLoad?</code>, <code>implicit?</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Set the various timeouts associated with a session</p> <p><code>See</code></p> <p>https://w3c.github.io/webdriver/#set-timeouts</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#parameters_12","title":"Parameters","text":"Name Type Description <code>type</code> <code>string</code> used only for the old (JSONWP) command, the type of the timeout <code>ms</code> <code>string</code> | <code>number</code> used only for the old (JSONWP) command, the ms for the timeout <code>script?</code> <code>number</code> the number in ms for the script timeout, used for the W3C command <code>pageLoad?</code> <code>number</code> the number in ms for the pageLoad timeout, used for the W3C command <code>implicit?</code> <code>string</code> | <code>number</code> the number in ms for the implicit wait timeout, used for the W3C command"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#returns_13","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.ITimeoutCommands/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/driver.ts:30</p>"},{"location":"reference/interfaces/appium_types.Location/","title":"Interface: Location","text":"<p>@appium/types.Location</p>"},{"location":"reference/interfaces/appium_types.Location/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Location/#properties","title":"Properties","text":"<ul> <li>altitude</li> <li>latitude</li> <li>longitude</li> </ul>"},{"location":"reference/interfaces/appium_types.Location/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Location/#altitude","title":"altitude","text":"<p>\u2022 <code>Optional</code> altitude: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Location/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:537</p>"},{"location":"reference/interfaces/appium_types.Location/#latitude","title":"latitude","text":"<p>\u2022 latitude: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Location/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:535</p>"},{"location":"reference/interfaces/appium_types.Location/#longitude","title":"longitude","text":"<p>\u2022 longitude: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Location/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:536</p>"},{"location":"reference/interfaces/appium_types.LogDef/","title":"Interface: LogDef","text":"<p>@appium/types.LogDef</p> <p>A definition of a log type</p>"},{"location":"reference/interfaces/appium_types.LogDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.LogDef/#properties","title":"Properties","text":"<ul> <li>description</li> <li>getter</li> </ul>"},{"location":"reference/interfaces/appium_types.LogDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.LogDef/#description","title":"description","text":"<p>\u2022 description: <code>string</code></p> <p>Description of the log type.</p> <p>The only place this is used is in error messages if the client provides an invalid log type via <code>getLog</code>.</p>"},{"location":"reference/interfaces/appium_types.LogDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:365</p>"},{"location":"reference/interfaces/appium_types.LogDef/#getter","title":"getter","text":"<p>\u2022 getter: (<code>driver</code>: <code>any</code>) =&gt; <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.LogDef/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>driver</code>): <code>unknown</code></p> <p>Returns all the log data for the given type</p> <p>This implementation should drain, truncate or otherwise reset the log buffer.</p>"},{"location":"reference/interfaces/appium_types.LogDef/#parameters","title":"Parameters","text":"Name Type <code>driver</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.LogDef/#returns","title":"Returns","text":"<p><code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.LogDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:371</p>"},{"location":"reference/interfaces/appium_types.LogFilterRegex/","title":"Interface: LogFilterRegex","text":"<p>@appium/types.LogFilterRegex</p> <p>Log filter with regular expression</p>"},{"location":"reference/interfaces/appium_types.LogFilterRegex/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.LogFilterRegex/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.LogFilterRegex/#properties","title":"Properties","text":"<ul> <li>pattern</li> </ul>"},{"location":"reference/interfaces/appium_types.LogFilterRegex/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.LogFilterRegex/#pattern","title":"pattern","text":"<p>\u2022 pattern: <code>string</code></p> <p>Regex pattern to match</p>"},{"location":"reference/interfaces/appium_types.LogFilterRegex/#defined-in","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:223</p>"},{"location":"reference/interfaces/appium_types.LogFilterText/","title":"Interface: LogFilterText","text":"<p>@appium/types.LogFilterText</p> <p>Log filter with plain text</p>"},{"location":"reference/interfaces/appium_types.LogFilterText/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.LogFilterText/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.LogFilterText/#properties","title":"Properties","text":"<ul> <li>text</li> </ul>"},{"location":"reference/interfaces/appium_types.LogFilterText/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.LogFilterText/#text","title":"text","text":"<p>\u2022 text: <code>string</code></p> <p>Text to match</p>"},{"location":"reference/interfaces/appium_types.LogFilterText/#defined-in","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:213</p>"},{"location":"reference/interfaces/appium_types.MultiSessionData/","title":"Interface: MultiSessionData&lt;C&gt;","text":"<p>@appium/types.MultiSessionData</p>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.MultiSessionData/#properties","title":"Properties","text":"<ul> <li>capabilities</li> <li>id</li> </ul>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.MultiSessionData/#capabilities","title":"capabilities","text":"<p>\u2022 capabilities: <code>DriverCaps</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:181</p>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#id","title":"id","text":"<p>\u2022 id: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.MultiSessionData/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:180</p>"},{"location":"reference/interfaces/appium_types.NewWindow/","title":"Interface: NewWindow","text":"<p>@appium/types.NewWindow</p>"},{"location":"reference/interfaces/appium_types.NewWindow/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.NewWindow/#properties","title":"Properties","text":"<ul> <li>handle</li> <li>type</li> </ul>"},{"location":"reference/interfaces/appium_types.NewWindow/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.NewWindow/#handle","title":"handle","text":"<p>\u2022 handle: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.NewWindow/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:514</p>"},{"location":"reference/interfaces/appium_types.NewWindow/#type","title":"type","text":"<p>\u2022 type: <code>NewWindowType</code></p>"},{"location":"reference/interfaces/appium_types.NewWindow/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:515</p>"},{"location":"reference/interfaces/appium_types.NodeconfigConfig/","title":"Interface: NodeconfigConfig","text":"<p>@appium/types.NodeconfigConfig</p> <p>Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself</p>"},{"location":"reference/interfaces/appium_types.NodeconfigConfig/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/","title":"Interface: PayloadParams","text":"<p>@appium/types.PayloadParams</p> <p>Defines the shape of a payload for a MethodDef.</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PayloadParams/#properties","title":"Properties","text":"<ul> <li>makeArgs</li> <li>optional</li> <li>required</li> <li>unwrap</li> <li>validate</li> <li>wrap</li> </ul>"},{"location":"reference/interfaces/appium_types.PayloadParams/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PayloadParams/#makeargs","title":"makeArgs","text":"<p>\u2022 <code>Optional</code> makeArgs: (<code>obj</code>: <code>any</code>) =&gt; <code>any</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>obj</code>): <code>any</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#parameters","title":"Parameters","text":"Name Type <code>obj</code> <code>any</code>"},{"location":"reference/interfaces/appium_types.PayloadParams/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:15</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#optional","title":"optional","text":"<p>\u2022 <code>Optional</code> optional: readonly <code>string</code>[] | readonly readonly string[][]</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:13</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#required","title":"required","text":"<p>\u2022 <code>Optional</code> required: readonly <code>string</code>[] | readonly readonly string[][]</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/command.ts:12</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#unwrap","title":"unwrap","text":"<p>\u2022 <code>Optional</code> unwrap: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/command.ts:11</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#validate","title":"validate","text":"<p>\u2022 <code>Optional</code> validate: (<code>obj</code>: <code>any</code>, <code>protocol</code>: <code>string</code>) =&gt; <code>undefined</code> | <code>string</code> | <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#type-declaration_1","title":"Type declaration","text":"<p>\u25b8 (<code>obj</code>, <code>protocol</code>): <code>undefined</code> | <code>string</code> | <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#parameters_1","title":"Parameters","text":"Name Type <code>obj</code> <code>any</code> <code>protocol</code> <code>string</code>"},{"location":"reference/interfaces/appium_types.PayloadParams/#returns_1","title":"Returns","text":"<p><code>undefined</code> | <code>string</code> | <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/command.ts:14</p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#wrap","title":"wrap","text":"<p>\u2022 <code>Optional</code> wrap: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.PayloadParams/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/command.ts:10</p>"},{"location":"reference/interfaces/appium_types.Plugin/","title":"Interface: Plugin","text":"<p>@appium/types.Plugin</p> <p>An instance of a \"plugin\" extension.</p> <p>Likewise, the <code>prototype</code> of a <code>Plugin</code> class.</p>"},{"location":"reference/interfaces/appium_types.Plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Plugin/#properties","title":"Properties","text":"<ul> <li>cliArgs</li> <li>handle</li> <li>logger</li> <li>name</li> <li>onUnexpectedShutdown</li> </ul>"},{"location":"reference/interfaces/appium_types.Plugin/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Plugin/#cliargs","title":"cliArgs","text":"<p>\u2022 cliArgs: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p> <p>CLI args for this plugin (if any are accepted and provided).</p>"},{"location":"reference/interfaces/appium_types.Plugin/#defined-in","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:75</p>"},{"location":"reference/interfaces/appium_types.Plugin/#handle","title":"handle","text":"<p>\u2022 <code>Optional</code> handle: <code>PluginCommand</code>&lt;<code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;, [cmdName: string, ...args: any[]], <code>void</code>, <code>unknown</code>&gt;</p> <p>Handle an Appium command, optionally running and using or throwing away the value of the original Appium behavior (or the behavior of the next plugin in a plugin chain).</p>"},{"location":"reference/interfaces/appium_types.Plugin/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:84</p>"},{"location":"reference/interfaces/appium_types.Plugin/#logger","title":"logger","text":"<p>\u2022 logger: <code>AppiumLogger</code></p> <p>A logger with prefix identifying the plugin</p>"},{"location":"reference/interfaces/appium_types.Plugin/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:71</p>"},{"location":"reference/interfaces/appium_types.Plugin/#name","title":"name","text":"<p>\u2022 name: <code>string</code></p> <p>Name of the plugin.  Derived from the metadata.</p>"},{"location":"reference/interfaces/appium_types.Plugin/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:67</p>"},{"location":"reference/interfaces/appium_types.Plugin/#onunexpectedshutdown","title":"onUnexpectedShutdown","text":"<p>\u2022 <code>Optional</code> onUnexpectedShutdown: (<code>driver</code>: <code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt;, <code>cause</code>: <code>string</code> | <code>Error</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Plugin/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>driver</code>, <code>cause</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Listener for unexpected server shutdown, which allows a plugin to do cleanup or take custom actions.</p>"},{"location":"reference/interfaces/appium_types.Plugin/#parameters","title":"Parameters","text":"Name Type <code>driver</code> <code>ExternalDriver</code>&lt;<code>Constraints</code>, <code>string</code>, <code>StringRecord</code>, <code>StringRecord</code>, <code>DefaultCreateSessionResult</code>&lt;<code>Constraints</code>&gt;, <code>void</code>, <code>StringRecord</code>&gt; <code>cause</code> <code>string</code> | <code>Error</code>"},{"location":"reference/interfaces/appium_types.Plugin/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.Plugin/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:79</p>"},{"location":"reference/interfaces/appium_types.PluginConfig/","title":"Interface: PluginConfig","text":"<p>@appium/types.PluginConfig</p> <p>Plugin-specific configuration. Keys should correspond to plugin package names</p>"},{"location":"reference/interfaces/appium_types.PluginConfig/#indexable","title":"Indexable","text":"<p>\u25aa [k: <code>string</code>]: <code>unknown</code></p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/","title":"Interface: PluginExecuteMethodDef&lt;T&gt;","text":"<p>@appium/types.PluginExecuteMethodDef</p> <p>A definition of an execute method in a <code>Plugin</code>.</p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Plugin</code>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseExecuteMethodDef</code></li> </ul> <p>\u21b3 <code>PluginExecuteMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#properties","title":"Properties","text":"<ul> <li>command</li> <li>params</li> </ul>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#command","title":"command","text":"<p>\u2022 command: <code>ConditionalKeys</code>&lt;<code>T</code>, <code>PluginCommand</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:129</p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#params","title":"params","text":"<p>\u2022 <code>Optional</code> params: <code>Object</code></p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#type-declaration","title":"Type declaration","text":"Name Type <code>optional?</code> readonly <code>string</code>[] <code>required?</code> readonly <code>string</code>[]"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#inherited-from","title":"Inherited from","text":"<p>BaseExecuteMethodDef.params</p>"},{"location":"reference/interfaces/appium_types.PluginExecuteMethodDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:112</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/","title":"Interface: PluginMethodDef&lt;T&gt;","text":"<p>@appium/types.PluginMethodDef</p> <p>A definition of an exposed API command in a <code>Plugin</code>.</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Plugin</code>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#hierarchy","title":"Hierarchy","text":"<ul> <li><code>BaseMethodDef</code></li> </ul> <p>\u21b3 <code>PluginMethodDef</code></p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PluginMethodDef/#properties","title":"Properties","text":"<ul> <li>command</li> <li>neverProxy</li> <li>payloadParams</li> </ul>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PluginMethodDef/#command","title":"command","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> command: <code>ConditionalKeys</code>&lt;<code>Required</code>&lt;<code>T</code>&gt;, <code>DriverCommand</code>&gt;</p> <p>Name of the command.</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#defined-in","title":"Defined in","text":"<p>packages/types/lib/command.ts:87</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#neverproxy","title":"neverProxy","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> neverProxy: <code>boolean</code></p> <p>If true, this <code>Method</code> will never proxy.</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#inherited-from","title":"Inherited from","text":"<p>BaseMethodDef.neverProxy</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/command.ts:57</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#payloadparams","title":"payloadParams","text":"<p>\u2022 <code>Optional</code> <code>Readonly</code> payloadParams: <code>PayloadParams</code></p> <p>Specifies shape of payload</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#inherited-from_1","title":"Inherited from","text":"<p>BaseMethodDef.payloadParams</p>"},{"location":"reference/interfaces/appium_types.PluginMethodDef/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/command.ts:61</p>"},{"location":"reference/interfaces/appium_types.PluginMethodMap/","title":"Interface: PluginMethodMap&lt;T&gt;","text":"<p>@appium/types.PluginMethodMap</p> <p>A mapping of URL paths to HTTP methods to <code>PluginMethodDef</code>.</p>"},{"location":"reference/interfaces/appium_types.PluginMethodMap/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Plugin</code>"},{"location":"reference/interfaces/appium_types.PluginMethodMap/#indexable","title":"Indexable","text":"<p>\u25aa [key: <code>string</code>]: { <code>DELETE?</code>: <code>PluginMethodDef</code>&lt;<code>T</code>&gt; ; <code>GET?</code>: <code>PluginMethodDef</code>&lt;<code>T</code>&gt; ; <code>POST?</code>: <code>PluginMethodDef</code>&lt;<code>T</code>&gt;  }</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/","title":"Interface: PluginStatic&lt;P&gt;","text":"<p>@appium/types.PluginStatic</p> <p>The interface describing the constructor and static properties of a Plugin.</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/#type-parameters","title":"Type parameters","text":"Name Type <code>P</code> extends <code>Plugin</code>"},{"location":"reference/interfaces/appium_types.PluginStatic/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PluginStatic/#properties","title":"Properties","text":"<ul> <li>executeMethodMap</li> <li>newMethodMap</li> <li>updateServer</li> </ul>"},{"location":"reference/interfaces/appium_types.PluginStatic/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PluginStatic/#executemethodmap","title":"executeMethodMap","text":"<p>\u2022 <code>Optional</code> executeMethodMap: <code>ExecuteMethodMap</code>&lt;<code>P</code>&gt;</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/#defined-in","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:28</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/#newmethodmap","title":"newMethodMap","text":"<p>\u2022 <code>Optional</code> newMethodMap: <code>MethodMap</code>&lt;<code>P</code>&gt;</p> <p>Plugins can define new methods for the Appium server to map to command names, of the same format as used in Appium's <code>routes.js</code>, for example, this would be a valid <code>newMethodMap</code>:</p> <p><code>Example</code></p> <pre><code>{\n*   '/session/:sessionId/new_method': {\n*     GET: {command: 'getNewThing'},\n*     POST: {command: 'setNewThing', payloadParams: {required: ['someParam']}}\n*   }\n* }\n</code></pre>"},{"location":"reference/interfaces/appium_types.PluginStatic/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:27</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/#updateserver","title":"updateServer","text":"<p>\u2022 <code>Optional</code> updateServer: <code>UpdateServerCallback</code></p> <p>Allows a plugin to modify the Appium server instance.</p>"},{"location":"reference/interfaces/appium_types.PluginStatic/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:15</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/","title":"Interface: PostProcessOptions&lt;Headers&gt;","text":"<p>@appium/types.PostProcessOptions</p> <p>Options for the post-processing step</p> <p>The generic can be supplied if using <code>axios</code>, where <code>headers</code> is a fancy object.</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#type-parameters","title":"Type parameters","text":"Name Type <code>Headers</code> <code>HTTPHeaders</code>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PostProcessOptions/#properties","title":"Properties","text":"<ul> <li>appPath</li> <li>cachedAppInfo</li> <li>headers</li> <li>isUrl</li> </ul>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PostProcessOptions/#apppath","title":"appPath","text":"<p>\u2022 <code>Optional</code> appPath: <code>string</code></p> <p>A string containing full path to the preprocessed application package (either downloaded or a local one)</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2114</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#cachedappinfo","title":"cachedAppInfo","text":"<p>\u2022 <code>Optional</code> cachedAppInfo: <code>CachedAppInfo</code></p> <p>The information about the previously cached app instance (if exists)</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2100</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#headers","title":"headers","text":"<p>\u2022 <code>Optional</code> headers: <code>Headers</code></p> <p>Optional headers object.</p> <p>Only present if <code>isUrl</code> is <code>true</code> and if the server responds to <code>HEAD</code> requests. All header names are normalized to lowercase.</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2110</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#isurl","title":"isUrl","text":"<p>\u2022 <code>Optional</code> isUrl: <code>boolean</code></p> <p>Whether the app has been downloaded from a remote URL</p>"},{"location":"reference/interfaces/appium_types.PostProcessOptions/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2104</p>"},{"location":"reference/interfaces/appium_types.PostProcessResult/","title":"Interface: PostProcessResult","text":"<p>@appium/types.PostProcessResult</p> <p>Result of the onPostProcess ConfigureAppOptions.onPostProcess callback.</p>"},{"location":"reference/interfaces/appium_types.PostProcessResult/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.PostProcessResult/#properties","title":"Properties","text":"<ul> <li>appPath</li> </ul>"},{"location":"reference/interfaces/appium_types.PostProcessResult/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.PostProcessResult/#apppath","title":"appPath","text":"<p>\u2022 appPath: <code>string</code></p> <p>The full past to the post-processed application package on the local file system .</p> <p>This might be a file or a folder path.</p>"},{"location":"reference/interfaces/appium_types.PostProcessResult/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2053</p>"},{"location":"reference/interfaces/appium_types.Rect/","title":"Interface: Rect","text":"<p>@appium/types.Rect</p>"},{"location":"reference/interfaces/appium_types.Rect/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Rect/#properties","title":"Properties","text":"<ul> <li>height</li> <li>width</li> <li>x</li> <li>y</li> </ul>"},{"location":"reference/interfaces/appium_types.Rect/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Rect/#height","title":"height","text":"<p>\u2022 height: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rect/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:508</p>"},{"location":"reference/interfaces/appium_types.Rect/#width","title":"width","text":"<p>\u2022 width: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rect/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:507</p>"},{"location":"reference/interfaces/appium_types.Rect/#x","title":"x","text":"<p>\u2022 x: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rect/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:505</p>"},{"location":"reference/interfaces/appium_types.Rect/#y","title":"y","text":"<p>\u2022 y: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rect/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/driver.ts:506</p>"},{"location":"reference/interfaces/appium_types.Rotation/","title":"Interface: Rotation","text":"<p>@appium/types.Rotation</p>"},{"location":"reference/interfaces/appium_types.Rotation/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.Rotation/#properties","title":"Properties","text":"<ul> <li>x</li> <li>y</li> <li>z</li> </ul>"},{"location":"reference/interfaces/appium_types.Rotation/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.Rotation/#x","title":"x","text":"<p>\u2022 x: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rotation/#defined-in","title":"Defined in","text":"<p>packages/types/lib/driver.ts:541</p>"},{"location":"reference/interfaces/appium_types.Rotation/#y","title":"y","text":"<p>\u2022 y: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rotation/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/driver.ts:542</p>"},{"location":"reference/interfaces/appium_types.Rotation/#z","title":"z","text":"<p>\u2022 z: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.Rotation/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/driver.ts:543</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/","title":"Interface: ServerConfig","text":"<p>@appium/types.ServerConfig</p> <p>Configuration when running Appium as a server</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.ServerConfig/#properties","title":"Properties","text":"<ul> <li>address</li> <li>allow-cors</li> <li>allow-insecure</li> <li>base-path</li> <li>callback-address</li> <li>callback-port</li> <li>debug-log-spacing</li> <li>default-capabilities</li> <li>deny-insecure</li> <li>driver</li> <li>keep-alive-timeout</li> <li>local-timezone</li> <li>log</li> <li>log-filters</li> <li>log-level</li> <li>log-no-colors</li> <li>log-timestamp</li> <li>long-stacktrace</li> <li>no-perms-check</li> <li>nodeconfig</li> <li>plugin</li> <li>port</li> <li>relaxed-security</li> <li>session-override</li> <li>strict-caps</li> <li>tmp</li> <li>trace-dir</li> <li>use-drivers</li> <li>use-plugins</li> <li>webhook</li> </ul>"},{"location":"reference/interfaces/appium_types.ServerConfig/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.ServerConfig/#address","title":"address","text":"<p>\u2022 <code>Optional</code> address: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:163</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#allow-cors","title":"allow-cors","text":"<p>\u2022 <code>Optional</code> allow-cors: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:164</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#allow-insecure","title":"allow-insecure","text":"<p>\u2022 <code>Optional</code> allow-insecure: <code>AllowInsecureConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:165</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#base-path","title":"base-path","text":"<p>\u2022 <code>Optional</code> base-path: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:166</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#callback-address","title":"callback-address","text":"<p>\u2022 <code>Optional</code> callback-address: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:167</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#callback-port","title":"callback-port","text":"<p>\u2022 <code>Optional</code> callback-port: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:168</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#debug-log-spacing","title":"debug-log-spacing","text":"<p>\u2022 <code>Optional</code> debug-log-spacing: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:169</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#default-capabilities","title":"default-capabilities","text":"<p>\u2022 <code>Optional</code> default-capabilities: <code>DefaultCapabilitiesConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:170</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#deny-insecure","title":"deny-insecure","text":"<p>\u2022 <code>Optional</code> deny-insecure: <code>DenyInsecureConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:171</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#driver","title":"driver","text":"<p>\u2022 <code>Optional</code> driver: <code>DriverConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:172</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#keep-alive-timeout","title":"keep-alive-timeout","text":"<p>\u2022 <code>Optional</code> keep-alive-timeout: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:173</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#local-timezone","title":"local-timezone","text":"<p>\u2022 <code>Optional</code> local-timezone: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:174</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#log","title":"log","text":"<p>\u2022 <code>Optional</code> log: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:175</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#log-filters","title":"log-filters","text":"<p>\u2022 <code>Optional</code> log-filters: <code>LogFiltersConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:176</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#log-level","title":"log-level","text":"<p>\u2022 <code>Optional</code> log-level: <code>LogLevelConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:177</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#log-no-colors","title":"log-no-colors","text":"<p>\u2022 <code>Optional</code> log-no-colors: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:178</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#log-timestamp","title":"log-timestamp","text":"<p>\u2022 <code>Optional</code> log-timestamp: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:179</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#long-stacktrace","title":"long-stacktrace","text":"<p>\u2022 <code>Optional</code> long-stacktrace: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:180</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#no-perms-check","title":"no-perms-check","text":"<p>\u2022 <code>Optional</code> no-perms-check: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:181</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#nodeconfig","title":"nodeconfig","text":"<p>\u2022 <code>Optional</code> nodeconfig: <code>NodeconfigConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:182</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#plugin","title":"plugin","text":"<p>\u2022 <code>Optional</code> plugin: <code>PluginConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:183</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#port","title":"port","text":"<p>\u2022 <code>Optional</code> port: <code>number</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:184</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#relaxed-security","title":"relaxed-security","text":"<p>\u2022 <code>Optional</code> relaxed-security: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:185</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#session-override","title":"session-override","text":"<p>\u2022 <code>Optional</code> session-override: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:186</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#strict-caps","title":"strict-caps","text":"<p>\u2022 <code>Optional</code> strict-caps: <code>boolean</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:187</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#tmp","title":"tmp","text":"<p>\u2022 <code>Optional</code> tmp: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:188</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#trace-dir","title":"trace-dir","text":"<p>\u2022 <code>Optional</code> trace-dir: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:189</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#use-drivers","title":"use-drivers","text":"<p>\u2022 <code>Optional</code> use-drivers: <code>UseDriversConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:190</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#use-plugins","title":"use-plugins","text":"<p>\u2022 <code>Optional</code> use-plugins: <code>UsePluginsConfig</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:191</p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#webhook","title":"webhook","text":"<p>\u2022 <code>Optional</code> webhook: <code>string</code></p>"},{"location":"reference/interfaces/appium_types.ServerConfig/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:192</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/","title":"Interface: StandardCapabilities","text":"<p>@appium/types.StandardCapabilities</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.StandardCapabilities/#properties","title":"Properties","text":"<ul> <li>acceptInsecureCerts</li> <li>browserName</li> <li>browserVersion</li> <li>pageLoadStrategy</li> <li>platformName</li> <li>proxy</li> <li>setWindowRect</li> <li>strictFileInteractability</li> <li>timeouts</li> <li>unhandledPromptBehavior</li> <li>webSocketUrl</li> </ul>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.StandardCapabilities/#acceptinsecurecerts","title":"acceptInsecureCerts","text":"<p>\u2022 <code>Optional</code> acceptInsecureCerts: <code>boolean</code></p> <p>Indicates whether untrusted and self-signed TLS certificates are implicitly trusted on navigation for the duration of the session.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:36</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#browsername","title":"browserName","text":"<p>\u2022 <code>Optional</code> browserName: <code>string</code></p> <p>Identifies the user agent.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:24</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#browserversion","title":"browserVersion","text":"<p>\u2022 <code>Optional</code> browserVersion: <code>string</code></p> <p>Identifies the version of the user agent.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:28</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#pageloadstrategy","title":"pageLoadStrategy","text":"<p>\u2022 <code>Optional</code> pageLoadStrategy: <code>PageLoadingStrategy</code></p> <p>Defines the current session\u2019s page load strategy.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:40</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#platformname","title":"platformName","text":"<p>\u2022 <code>Optional</code> platformName: <code>string</code></p> <p>Identifies the operating system of the endpoint node.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:32</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#proxy","title":"proxy","text":"<p>\u2022 <code>Optional</code> proxy: <code>ProxyObject</code></p> <p>Defines the current session\u2019s proxy configuration.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:44</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#setwindowrect","title":"setWindowRect","text":"<p>\u2022 <code>Optional</code> setWindowRect: <code>boolean</code></p> <p>Indicates whether the remote end supports all of the resizing and repositioning commands.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:48</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#strictfileinteractability","title":"strictFileInteractability","text":"<p>\u2022 <code>Optional</code> strictFileInteractability: <code>boolean</code></p> <p>Defines the current session\u2019s strict file interactability.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:56</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#timeouts","title":"timeouts","text":"<p>\u2022 <code>Optional</code> timeouts: <code>Timeouts</code></p> <p>Describes the timeouts imposed on certain session operations.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:52</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#unhandledpromptbehavior","title":"unhandledPromptBehavior","text":"<p>\u2022 <code>Optional</code> unhandledPromptBehavior: <code>string</code></p> <p>Describes the current session\u2019s user prompt handler. Defaults to the dismiss and notify state.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:60</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#websocketurl","title":"webSocketUrl","text":"<p>\u2022 <code>Optional</code> webSocketUrl: <code>boolean</code></p> <p>WebDriver clients opt in to a bidirectional connection by requesting a capability with the name \"webSocketUrl\" and value true.</p>"},{"location":"reference/interfaces/appium_types.StandardCapabilities/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/standard-caps.ts:64</p>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/","title":"Interface: W3CCapabilities&lt;C&gt;","text":"<p>@appium/types.W3CCapabilities</p> <p>Like <code>Capabilities</code>, except W3C-style.</p> <p>Does not contain <code>BaseCapabilities</code>; see <code>W3CDriverCaps</code>.</p>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#type-parameters","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/interfaces/appium_types.W3CCapabilities/#properties","title":"Properties","text":"<ul> <li>alwaysMatch</li> <li>firstMatch</li> </ul>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#properties_1","title":"Properties","text":""},{"location":"reference/interfaces/appium_types.W3CCapabilities/#alwaysmatch","title":"alwaysMatch","text":"<p>\u2022 alwaysMatch: <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;</p>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#defined-in","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:108</p>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#firstmatch","title":"firstMatch","text":"<p>\u2022 firstMatch: <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;[]</p>"},{"location":"reference/interfaces/appium_types.W3CCapabilities/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:109</p>"},{"location":"reference/modules/appium/","title":"Module: appium","text":""},{"location":"reference/modules/appium/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium/#interfaces","title":"Interfaces","text":"<ul> <li>ServerInitData</li> </ul>"},{"location":"reference/modules/appium/#type-aliases","title":"Type Aliases","text":"<ul> <li>Args</li> <li>CliCommand</li> <li>CliExtensionCommand</li> <li>CliExtensionSubcommand</li> <li>DriverClass</li> <li>DriverCommand</li> <li>DriverNameMap</li> <li>DriverType</li> <li>ExtCommandInitResult</li> <li>InitResult</li> <li>ParsedArgs</li> <li>PluginClass</li> <li>PluginCommand</li> <li>PluginNameMap</li> <li>PluginType</li> <li>ServerCommand</li> </ul>"},{"location":"reference/modules/appium/#functions","title":"Functions","text":"<ul> <li>finalizeSchema</li> <li>getSchema</li> <li>init</li> <li>main</li> <li>readConfigFile</li> <li>resolveAppiumHome</li> <li>validate</li> </ul>"},{"location":"reference/modules/appium/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium/#args","title":"Args","text":"<p>\u01ac Args&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;: <code>Cmd</code> extends <code>ServerCommand</code> ? <code>SetOptional</code>&lt;<code>CommonArgs</code>&lt;<code>Cmd</code>&gt;, keyof <code>ServerArgs</code>&gt; : <code>ParsedArgs</code>&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;</p> <p>Like <code>ParsedArgs</code> except server arguments are all optional.</p> <p>May have defaults applied; may contain config values; may contain computed args.</p>"},{"location":"reference/modules/appium/#type-parameters","title":"Type parameters","text":"Name Type <code>Cmd</code> extends <code>CliCommand</code> = <code>ServerCommand</code> <code>SubCmd</code> extends <code>CliExtensionSubcommand</code> | <code>void</code> = <code>void</code>"},{"location":"reference/modules/appium/#defined-in","title":"Defined in","text":"<p>packages/appium/types/cli.ts:179</p>"},{"location":"reference/modules/appium/#clicommand","title":"CliCommand","text":"<p>\u01ac CliCommand: <code>ServerCommand</code> | <code>CliExtensionCommand</code></p> <p>Possible commands for the <code>appium</code> CLI.</p>"},{"location":"reference/modules/appium/#defined-in_1","title":"Defined in","text":"<p>packages/appium/types/cli.ts:16</p>"},{"location":"reference/modules/appium/#cliextensioncommand","title":"CliExtensionCommand","text":"<p>\u01ac CliExtensionCommand: <code>DriverCommand</code> | <code>PluginCommand</code></p> <p>Extension-specific commands</p>"},{"location":"reference/modules/appium/#defined-in_2","title":"Defined in","text":"<p>packages/appium/types/cli.ts:11</p>"},{"location":"reference/modules/appium/#cliextensionsubcommand","title":"CliExtensionSubcommand","text":"<p>\u01ac CliExtensionSubcommand: <code>\"install\"</code> | <code>\"list\"</code> | <code>\"run\"</code> | <code>\"uninstall\"</code> | <code>\"update\"</code></p> <p>Possible subcommands of CliCommandDriver or CliCommandPlugin.</p>"},{"location":"reference/modules/appium/#defined-in_3","title":"Defined in","text":"<p>packages/appium/types/cli.ts:22</p>"},{"location":"reference/modules/appium/#driverclass","title":"DriverClass","text":"<p>\u01ac DriverClass&lt;&gt;: <code>DriverClass</code></p>"},{"location":"reference/modules/appium/#defined-in_4","title":"Defined in","text":"<p>packages/appium/lib/main.js:479</p>"},{"location":"reference/modules/appium/#drivercommand","title":"DriverCommand","text":"<p>\u01ac DriverCommand: <code>DriverType</code></p>"},{"location":"reference/modules/appium/#defined-in_5","title":"Defined in","text":"<p>packages/appium/types/cli.ts:5</p>"},{"location":"reference/modules/appium/#drivernamemap","title":"DriverNameMap","text":"<p>\u01ac DriverNameMap&lt;&gt;: <code>Map</code>&lt;<code>DriverClass</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium/#defined-in_6","title":"Defined in","text":"<p>packages/appium/lib/extension/index.js:104</p>"},{"location":"reference/modules/appium/#drivertype","title":"DriverType","text":"<p>\u01ac DriverType: <code>\"driver\"</code></p> <p>The string referring to a \"driver\"-type extension</p>"},{"location":"reference/modules/appium/#defined-in_7","title":"Defined in","text":"<p>packages/types/build/lib/util.d.ts:13</p>"},{"location":"reference/modules/appium/#extcommandinitresult","title":"ExtCommandInitResult","text":"<p>\u01ac ExtCommandInitResult&lt;&gt;: <code>Object</code></p>"},{"location":"reference/modules/appium/#defined-in_8","title":"Defined in","text":"<p>packages/appium/lib/main.js:493</p>"},{"location":"reference/modules/appium/#initresult","title":"InitResult","text":"<p>\u01ac InitResult&lt;<code>Cmd</code>&gt;: <code>Cmd</code> extends <code>ServerCommand</code> ? <code>ServerInitData</code> &amp; <code>ExtensionConfigs</code> : <code>ExtCommandInitResult</code></p>"},{"location":"reference/modules/appium/#type-parameters_1","title":"Type parameters","text":"Name <code>Cmd</code>"},{"location":"reference/modules/appium/#defined-in_9","title":"Defined in","text":"<p>packages/appium/lib/main.js:504</p>"},{"location":"reference/modules/appium/#parsedargs","title":"ParsedArgs","text":"<p>\u01ac ParsedArgs&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;: <code>CommonArgs</code>&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;</p> <p>Fully-parsed arguments, containing defaults, computed args, and config file values.</p>"},{"location":"reference/modules/appium/#type-parameters_2","title":"Type parameters","text":"Name Type <code>Cmd</code> extends <code>CliCommand</code> = <code>ServerCommand</code> <code>SubCmd</code> extends <code>CliExtensionSubcommand</code> | <code>void</code> = <code>void</code>"},{"location":"reference/modules/appium/#defined-in_10","title":"Defined in","text":"<p>packages/appium/types/cli.ts:169</p>"},{"location":"reference/modules/appium/#pluginclass","title":"PluginClass","text":"<p>\u01ac PluginClass&lt;&gt;: <code>PluginClass</code></p>"},{"location":"reference/modules/appium/#defined-in_11","title":"Defined in","text":"<p>packages/appium/lib/main.js:480</p>"},{"location":"reference/modules/appium/#plugincommand","title":"PluginCommand","text":"<p>\u01ac PluginCommand: <code>PluginType</code></p>"},{"location":"reference/modules/appium/#defined-in_12","title":"Defined in","text":"<p>packages/appium/types/cli.ts:6</p>"},{"location":"reference/modules/appium/#pluginnamemap","title":"PluginNameMap","text":"<p>\u01ac PluginNameMap&lt;&gt;: <code>Map</code>&lt;<code>PluginClass</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium/#defined-in_13","title":"Defined in","text":"<p>packages/appium/lib/extension/index.js:99</p>"},{"location":"reference/modules/appium/#plugintype","title":"PluginType","text":"<p>\u01ac PluginType: <code>\"plugin\"</code></p> <p>The string referring to a \"plugin\"-type extension</p>"},{"location":"reference/modules/appium/#defined-in_14","title":"Defined in","text":"<p>packages/types/build/lib/util.d.ts:18</p>"},{"location":"reference/modules/appium/#servercommand","title":"ServerCommand","text":"<p>\u01ac ServerCommand: <code>\"server\"</code></p>"},{"location":"reference/modules/appium/#defined-in_15","title":"Defined in","text":"<p>packages/appium/types/cli.ts:4</p>"},{"location":"reference/modules/appium/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium/#finalizeschema","title":"finalizeSchema","text":"<p>\u25b8 finalizeSchema(): <code>Readonly</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>StrictSchemaObject</code>&gt;&gt;</p> <p>Call this when no more schemas will be registered.</p> <p>This does three things: 1. It combines all schemas from extensions into the Appium config schema,    then adds the result to the <code>Ajv</code> instance. 2. It adds schemas for each argument/property for validation purposes.    The CLI uses these schemas to validate specific arguments. 3. The schemas are validated against JSON schema draft-07 (which is the    only one supported at this time)</p> <p>Any method in this instance that needs to interact with the <code>Ajv</code> instance will throw if this method has not been called.</p> <p>If the instance has already been finalized, this is a no-op.</p> <p><code>Throws</code></p> <p>If the schema is not valid</p>"},{"location":"reference/modules/appium/#returns","title":"Returns","text":"<p><code>Readonly</code>&lt;<code>Record</code>&lt;<code>string</code>, <code>StrictSchemaObject</code>&gt;&gt;</p> <p>Record of schema IDs to full schema objects</p>"},{"location":"reference/modules/appium/#defined-in_16","title":"Defined in","text":"<p>packages/appium/lib/schema/schema.js:180</p>"},{"location":"reference/modules/appium/#getschema","title":"getSchema","text":"<p>\u25b8 getSchema(<code>ref?</code>): <code>SchemaObject</code></p> <p>Retrieves the schema itself</p> <p><code>Throws</code></p> <p>If the schema has not yet been finalized</p>"},{"location":"reference/modules/appium/#parameters","title":"Parameters","text":"Name Type Default value Description <code>ref?</code> <code>string</code> <code>APPIUM_CONFIG_SCHEMA_ID</code> Schema ID"},{"location":"reference/modules/appium/#returns_1","title":"Returns","text":"<p><code>SchemaObject</code></p>"},{"location":"reference/modules/appium/#defined-in_17","title":"Defined in","text":"<p>packages/appium/lib/schema/schema.js:495</p>"},{"location":"reference/modules/appium/#init","title":"init","text":"<p>\u25b8 init&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;(<code>args?</code>): <code>Promise</code>&lt;<code>InitResult</code>&lt;<code>Cmd</code>&gt;&gt;</p> <p>Initializes Appium, but does not start the server.</p> <p>Use this to get at the configuration schema.</p> <p>If <code>args</code> contains a non-empty <code>subcommand</code> which is not <code>server</code>, this function will return an empty object.</p> <p><code>Example</code></p> <pre><code>import {init, getSchema} from 'appium';\nconst options = {}; // config object\nawait init(options);\nconst schema = getSchema(); // entire config schema including plugins and drivers\n</code></pre>"},{"location":"reference/modules/appium/#type-parameters_3","title":"Type parameters","text":"Name Type <code>Cmd</code> extends <code>CliCommand</code> = <code>\"server\"</code> <code>SubCmd</code> extends <code>void</code> | <code>CliExtensionSubcommand</code> = <code>void</code>"},{"location":"reference/modules/appium/#parameters_1","title":"Parameters","text":"Name Type Description <code>args?</code> <code>Args</code>&lt;<code>Cmd</code>, <code>SubCmd</code>&gt; Partial args (progammatic usage only)"},{"location":"reference/modules/appium/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>InitResult</code>&lt;<code>Cmd</code>&gt;&gt;</p>"},{"location":"reference/modules/appium/#defined-in_18","title":"Defined in","text":"<p>packages/appium/lib/main.js:213</p>"},{"location":"reference/modules/appium/#main","title":"main","text":"<p>\u25b8 main&lt;<code>Cmd</code>, <code>SubCmd</code>&gt;(<code>args?</code>): <code>Promise</code>&lt;<code>Cmd</code> extends <code>\"server\"</code> ? <code>AppiumServer</code> : <code>void</code>&gt;</p> <p>Initializes Appium's config.  Starts server if appropriate and resolves the server instance if so; otherwise resolves w/ <code>undefined</code>.</p>"},{"location":"reference/modules/appium/#type-parameters_4","title":"Type parameters","text":"Name Type <code>Cmd</code> extends <code>CliCommand</code> = <code>\"server\"</code> <code>SubCmd</code> extends <code>void</code> | <code>CliExtensionSubcommand</code> = <code>void</code>"},{"location":"reference/modules/appium/#parameters_2","title":"Parameters","text":"Name Type Description <code>args?</code> <code>Args</code>&lt;<code>Cmd</code>, <code>SubCmd</code>&gt; Arguments from CLI or otherwise"},{"location":"reference/modules/appium/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>Cmd</code> extends <code>\"server\"</code> ? <code>AppiumServer</code> : <code>void</code>&gt;</p>"},{"location":"reference/modules/appium/#defined-in_19","title":"Defined in","text":"<p>packages/appium/lib/main.js:364</p>"},{"location":"reference/modules/appium/#readconfigfile","title":"readConfigFile","text":"<p>\u25b8 readConfigFile(<code>filepath?</code>, <code>opts?</code>): <code>Promise</code>&lt;<code>ReadConfigFileResult</code>&gt;</p> <p>Given an optional path, read a config file. Validates the config file.</p> <p>Call validate if you already have a config object.</p>"},{"location":"reference/modules/appium/#parameters_3","title":"Parameters","text":"Name Type Description <code>filepath?</code> <code>string</code> Path to config file, if we have one <code>opts?</code> <code>ReadConfigFileOptions</code> Options"},{"location":"reference/modules/appium/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>ReadConfigFileResult</code>&gt;</p> <p>Contains config and filepath, if found, and any errors</p>"},{"location":"reference/modules/appium/#defined-in_20","title":"Defined in","text":"<p>packages/appium/lib/config-file.js:109</p>"},{"location":"reference/modules/appium/#resolveappiumhome","title":"resolveAppiumHome","text":"<p>\u25b8 resolveAppiumHome(<code>cwd?</code>): <code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/modules/appium/#parameters_4","title":"Parameters","text":"Name Type <code>cwd?</code> <code>string</code>"},{"location":"reference/modules/appium/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;<code>string</code>&gt;</p>"},{"location":"reference/modules/appium/#defined-in_21","title":"Defined in","text":"<p>packages/support/build/lib/env.d.ts:41</p>"},{"location":"reference/modules/appium/#validate","title":"validate","text":"<p>\u25b8 validate(<code>value</code>, <code>ref?</code>): <code>ErrorObject</code>&lt;<code>string</code>, <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;, <code>any</code>&gt;[]</p> <p>Given an object, validates it against the Appium config schema. If errors occur, the returned array will be non-empty.</p>"},{"location":"reference/modules/appium/#parameters_5","title":"Parameters","text":"Name Type Default value Description <code>value</code> <code>any</code> <code>undefined</code> The value (hopefully an object) to validate against the schema <code>ref?</code> <code>string</code> <code>APPIUM_CONFIG_SCHEMA_ID</code> Schema ID or ref."},{"location":"reference/modules/appium/#returns_6","title":"Returns","text":"<p><code>ErrorObject</code>&lt;<code>string</code>, <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;, <code>any</code>&gt;[]</p> <p>Array of errors, if any.</p>"},{"location":"reference/modules/appium/#defined-in_22","title":"Defined in","text":"<p>packages/appium/lib/schema/schema.js:525</p>"},{"location":"reference/modules/appium_base_driver/","title":"Module: @appium/base-driver","text":""},{"location":"reference/modules/appium_base_driver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_base_driver/#references","title":"References","text":"<ul> <li>default</li> <li>errorFromMJSONWPStatusCode</li> </ul>"},{"location":"reference/modules/appium_base_driver/#classes","title":"Classes","text":"<ul> <li>BaseDriver</li> <li>DeviceSettings</li> <li>DriverCore</li> <li>JWProxy</li> </ul>"},{"location":"reference/modules/appium_base_driver/#interfaces","title":"Interfaces","text":"<ul> <li>ServerOpts</li> </ul>"},{"location":"reference/modules/appium_base_driver/#variables","title":"Variables","text":"<ul> <li>ALL_COMMANDS</li> <li>CREATE_SESSION_COMMAND</li> <li>DEFAULT_BASE_PATH</li> <li>DEFAULT_WS_PATHNAME_PREFIX</li> <li>DELETE_SESSION_COMMAND</li> <li>GET_STATUS_COMMAND</li> <li>METHOD_MAP</li> <li>NO_SESSION_ID_COMMANDS</li> <li>PREFIXED_APPIUM_OPTS_CAP</li> <li>PROTOCOLS</li> <li>STANDARD_CAPS</li> <li>STATIC_DIR</li> <li>W3C_ELEMENT_KEY</li> <li>errors</li> <li>statusCodes</li> </ul>"},{"location":"reference/modules/appium_base_driver/#functions","title":"Functions","text":"<ul> <li>checkParams</li> <li>determineProtocol</li> <li>errorFromCode</li> <li>errorFromW3CJsonCode</li> <li>getSummaryByCode</li> <li>isErrorType</li> <li>isSessionCommand</li> <li>isStandardCap</li> <li>makeArgs</li> <li>normalizeBasePath</li> <li>processCapabilities</li> <li>promoteAppiumOptions</li> <li>promoteAppiumOptionsForObject</li> <li>routeConfiguringFunction</li> <li>routeToCommandName</li> <li>server</li> <li>validateCaps</li> <li>validateExecuteMethodParams</li> </ul>"},{"location":"reference/modules/appium_base_driver/#references_1","title":"References","text":""},{"location":"reference/modules/appium_base_driver/#default","title":"default","text":"<p>Renames and re-exports BaseDriver</p>"},{"location":"reference/modules/appium_base_driver/#errorfrommjsonwpstatuscode","title":"errorFromMJSONWPStatusCode","text":"<p>Renames and re-exports errorFromCode</p>"},{"location":"reference/modules/appium_base_driver/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_base_driver/#all_commands","title":"ALL_COMMANDS","text":"<p>\u2022 ALL_COMMANDS: <code>any</code>[] = <code>[]</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/routes.js:931</p>"},{"location":"reference/modules/appium_base_driver/#create_session_command","title":"CREATE_SESSION_COMMAND","text":"<p>\u2022 <code>Const</code> CREATE_SESSION_COMMAND: <code>\"createSession\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_1","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:18</p>"},{"location":"reference/modules/appium_base_driver/#default_base_path","title":"DEFAULT_BASE_PATH","text":"<p>\u2022 <code>Const</code> DEFAULT_BASE_PATH: <code>\"\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_2","title":"Defined in","text":"<p>packages/base-driver/lib/constants.ts:19</p>"},{"location":"reference/modules/appium_base_driver/#default_ws_pathname_prefix","title":"DEFAULT_WS_PATHNAME_PREFIX","text":"<p>\u2022 <code>Const</code> DEFAULT_WS_PATHNAME_PREFIX: <code>\"/ws\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_3","title":"Defined in","text":"<p>packages/base-driver/lib/express/websocket.js:6</p>"},{"location":"reference/modules/appium_base_driver/#delete_session_command","title":"DELETE_SESSION_COMMAND","text":"<p>\u2022 <code>Const</code> DELETE_SESSION_COMMAND: <code>\"deleteSession\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_4","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:19</p>"},{"location":"reference/modules/appium_base_driver/#get_status_command","title":"GET_STATUS_COMMAND","text":"<p>\u2022 <code>Const</code> GET_STATUS_COMMAND: <code>\"getStatus\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_5","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:20</p>"},{"location":"reference/modules/appium_base_driver/#method_map","title":"METHOD_MAP","text":"<p>\u2022 <code>Const</code> METHOD_MAP: <code>Object</code></p> <p>define the routes, mapping of HTTP methods to particular driver commands, and any parameters that are expected in a request parameters can be <code>required</code> or <code>optional</code></p>"},{"location":"reference/modules/appium_base_driver/#type-declaration","title":"Type declaration","text":"Name Type <code>/session</code> { <code>POST</code>: { <code>command</code>: <code>\"createSession\"</code> = 'createSession'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"desiredCapabilities\"</code>, <code>\"requiredCapabilities\"</code>, <code>\"capabilities\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"desiredCapabilities\\\" or \\\"capabilities\\\" object\"</code>  }  }  } <code>/session.POST</code> { <code>command</code>: <code>\"createSession\"</code> = 'createSession'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"desiredCapabilities\"</code>, <code>\"requiredCapabilities\"</code>, <code>\"capabilities\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"desiredCapabilities\\\" or \\\"capabilities\\\" object\"</code>  }  } <code>/session.POST.command</code> <code>\"createSession\"</code> <code>/session.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"desiredCapabilities\"</code>, <code>\"requiredCapabilities\"</code>, <code>\"capabilities\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"desiredCapabilities\\\" or \\\"capabilities\\\" object\"</code>  } <code>/session.POST.payloadParams.optional</code> readonly [<code>\"desiredCapabilities\"</code>, <code>\"requiredCapabilities\"</code>, <code>\"capabilities\"</code>] <code>/session.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"desiredCapabilities\\\" or \\\"capabilities\\\" object\"</code> <code>/session/:sessionId</code> { <code>DELETE</code>: { <code>command</code>: <code>\"deleteSession\"</code> = 'deleteSession' } ; <code>GET</code>: { <code>command</code>: <code>\"getSession\"</code> = 'getSession' }  } <code>/session/:sessionId.DELETE</code> { <code>command</code>: <code>\"deleteSession\"</code> = 'deleteSession' } <code>/session/:sessionId.DELETE.command</code> <code>\"deleteSession\"</code> <code>/session/:sessionId.GET</code> { <code>command</code>: <code>\"getSession\"</code> = 'getSession' } <code>/session/:sessionId.GET.command</code> <code>\"getSession\"</code> <code>/session/:sessionId/:vendor/cdp/execute</code> { <code>POST</code>: { <code>command</code>: <code>\"executeCdp\"</code> = 'executeCdp'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"cmd\"</code>, <code>\"params\"</code>]  }  }  } <code>/session/:sessionId/:vendor/cdp/execute.POST</code> { <code>command</code>: <code>\"executeCdp\"</code> = 'executeCdp'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"cmd\"</code>, <code>\"params\"</code>]  }  } <code>/session/:sessionId/:vendor/cdp/execute.POST.command</code> <code>\"executeCdp\"</code> <code>/session/:sessionId/:vendor/cdp/execute.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"cmd\"</code>, <code>\"params\"</code>]  } <code>/session/:sessionId/:vendor/cdp/execute.POST.payloadParams.required</code> readonly [<code>\"cmd\"</code>, <code>\"params\"</code>] <code>/session/:sessionId/accept_alert</code> { <code>POST</code>: { <code>command</code>: <code>\"postAcceptAlert\"</code> = 'postAcceptAlert' }  } <code>/session/:sessionId/accept_alert.POST</code> { <code>command</code>: <code>\"postAcceptAlert\"</code> = 'postAcceptAlert' } <code>/session/:sessionId/accept_alert.POST.command</code> <code>\"postAcceptAlert\"</code> <code>/session/:sessionId/actions</code> { <code>DELETE</code>: { <code>command</code>: <code>\"releaseActions\"</code> = 'releaseActions' } ; <code>POST</code>: { <code>command</code>: <code>\"performActions\"</code> = 'performActions'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"actions\"</code>]  }  }  } <code>/session/:sessionId/actions.DELETE</code> { <code>command</code>: <code>\"releaseActions\"</code> = 'releaseActions' } <code>/session/:sessionId/actions.DELETE.command</code> <code>\"releaseActions\"</code> <code>/session/:sessionId/actions.POST</code> { <code>command</code>: <code>\"performActions\"</code> = 'performActions'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"actions\"</code>]  }  } <code>/session/:sessionId/actions.POST.command</code> <code>\"performActions\"</code> <code>/session/:sessionId/actions.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"actions\"</code>]  } <code>/session/:sessionId/actions.POST.payloadParams.required</code> readonly [<code>\"actions\"</code>] <code>/session/:sessionId/alert/accept</code> { <code>POST</code>: { <code>command</code>: <code>\"postAcceptAlert\"</code> = 'postAcceptAlert' }  } <code>/session/:sessionId/alert/accept.POST</code> { <code>command</code>: <code>\"postAcceptAlert\"</code> = 'postAcceptAlert' } <code>/session/:sessionId/alert/accept.POST.command</code> <code>\"postAcceptAlert\"</code> <code>/session/:sessionId/alert/dismiss</code> { <code>POST</code>: { <code>command</code>: <code>\"postDismissAlert\"</code> = 'postDismissAlert' }  } <code>/session/:sessionId/alert/dismiss.POST</code> { <code>command</code>: <code>\"postDismissAlert\"</code> = 'postDismissAlert' } <code>/session/:sessionId/alert/dismiss.POST.command</code> <code>\"postDismissAlert\"</code> <code>/session/:sessionId/alert/text</code> { <code>GET</code>: { <code>command</code>: <code>\"getAlertText\"</code> = 'getAlertText' } ; <code>POST</code>: { <code>command</code>: <code>\"setAlertText\"</code> = 'setAlertText'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } = SET_ALERT_TEXT_PAYLOAD_PARAMS }  } <code>/session/:sessionId/alert/text.GET</code> { <code>command</code>: <code>\"getAlertText\"</code> = 'getAlertText' } <code>/session/:sessionId/alert/text.GET.command</code> <code>\"getAlertText\"</code> <code>/session/:sessionId/alert/text.POST</code> { <code>command</code>: <code>\"setAlertText\"</code> = 'setAlertText'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } = SET_ALERT_TEXT_PAYLOAD_PARAMS } <code>/session/:sessionId/alert/text.POST.command</code> <code>\"setAlertText\"</code> <code>/session/:sessionId/alert/text.POST.payloadParams</code> { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } <code>/session/:sessionId/alert/text.POST.payloadParams.makeArgs</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] <code>/session/:sessionId/alert/text.POST.payloadParams.optional</code> <code>string</code>[] <code>/session/:sessionId/alert/text.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code> <code>/session/:sessionId/alert_text</code> { <code>GET</code>: { <code>command</code>: <code>\"getAlertText\"</code> = 'getAlertText' } ; <code>POST</code>: { <code>command</code>: <code>\"setAlertText\"</code> = 'setAlertText'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } = SET_ALERT_TEXT_PAYLOAD_PARAMS }  } <code>/session/:sessionId/alert_text.GET</code> { <code>command</code>: <code>\"getAlertText\"</code> = 'getAlertText' } <code>/session/:sessionId/alert_text.GET.command</code> <code>\"getAlertText\"</code> <code>/session/:sessionId/alert_text.POST</code> { <code>command</code>: <code>\"setAlertText\"</code> = 'setAlertText'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } = SET_ALERT_TEXT_PAYLOAD_PARAMS } <code>/session/:sessionId/alert_text.POST.command</code> <code>\"setAlertText\"</code> <code>/session/:sessionId/alert_text.POST.payloadParams</code> { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: <code>string</code>[] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code>  } <code>/session/:sessionId/alert_text.POST.payloadParams.makeArgs</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] <code>/session/:sessionId/alert_text.POST.payloadParams.optional</code> <code>string</code>[] <code>/session/:sessionId/alert_text.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"either \\\"text\\\" or \\\"value\\\" must be set\"</code> <code>/session/:sessionId/appium/app/background</code> { <code>POST</code>: { <code>command</code>: <code>\"background\"</code> = 'background'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"seconds\"</code>]  }  }  } <code>/session/:sessionId/appium/app/background.POST</code> { <code>command</code>: <code>\"background\"</code> = 'background'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"seconds\"</code>]  }  } <code>/session/:sessionId/appium/app/background.POST.command</code> <code>\"background\"</code> <code>/session/:sessionId/appium/app/background.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/background.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"seconds\"</code>]  } <code>/session/:sessionId/appium/app/background.POST.payloadParams.required</code> readonly [<code>\"seconds\"</code>] <code>/session/:sessionId/appium/app/close</code> { <code>POST</code>: { <code>command</code>: <code>\"closeApp\"</code> = 'closeApp'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/app/close.POST</code> { <code>command</code>: <code>\"closeApp\"</code> = 'closeApp'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/app/close.POST.command</code> <code>\"closeApp\"</code> <code>/session/:sessionId/appium/app/close.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/end_test_coverage</code> { <code>POST</code>: { <code>command</code>: <code>\"endCoverage\"</code> = 'endCoverage'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"intent\"</code>, <code>\"path\"</code>]  }  }  } <code>/session/:sessionId/appium/app/end_test_coverage.POST</code> { <code>command</code>: <code>\"endCoverage\"</code> = 'endCoverage'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"intent\"</code>, <code>\"path\"</code>]  }  } <code>/session/:sessionId/appium/app/end_test_coverage.POST.command</code> <code>\"endCoverage\"</code> <code>/session/:sessionId/appium/app/end_test_coverage.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/end_test_coverage.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"intent\"</code>, <code>\"path\"</code>]  } <code>/session/:sessionId/appium/app/end_test_coverage.POST.payloadParams.required</code> readonly [<code>\"intent\"</code>, <code>\"path\"</code>] <code>/session/:sessionId/appium/app/launch</code> { <code>POST</code>: { <code>command</code>: <code>\"launchApp\"</code> = 'launchApp'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/app/launch.POST</code> { <code>command</code>: <code>\"launchApp\"</code> = 'launchApp'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/app/launch.POST.command</code> <code>\"launchApp\"</code> <code>/session/:sessionId/appium/app/launch.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/reset</code> { <code>POST</code>: { <code>command</code>: <code>\"reset\"</code> = 'reset'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/app/reset.POST</code> { <code>command</code>: <code>\"reset\"</code> = 'reset'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/app/reset.POST.command</code> <code>\"reset\"</code> <code>/session/:sessionId/appium/app/reset.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/strings</code> { <code>POST</code>: { <code>command</code>: <code>\"getStrings\"</code> = 'getStrings'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"language\"</code>, <code>\"stringFile\"</code>]  }  }  } <code>/session/:sessionId/appium/app/strings.POST</code> { <code>command</code>: <code>\"getStrings\"</code> = 'getStrings'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"language\"</code>, <code>\"stringFile\"</code>]  }  } <code>/session/:sessionId/appium/app/strings.POST.command</code> <code>\"getStrings\"</code> <code>/session/:sessionId/appium/app/strings.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/app/strings.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"language\"</code>, <code>\"stringFile\"</code>]  } <code>/session/:sessionId/appium/app/strings.POST.payloadParams.optional</code> readonly [<code>\"language\"</code>, <code>\"stringFile\"</code>] <code>/session/:sessionId/appium/device/activate_app</code> { <code>POST</code>: { <code>command</code>: <code>\"activateApp\"</code> = 'activateApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  }  } <code>/session/:sessionId/appium/device/activate_app.POST</code> { <code>command</code>: <code>\"activateApp\"</code> = 'activateApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/activate_app.POST.command</code> <code>\"activateApp\"</code> <code>/session/:sessionId/appium/device/activate_app.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/activate_app.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/device/activate_app.POST.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/app_installed</code> { <code>POST</code>: { <code>command</code>: <code>\"isAppInstalled\"</code> = 'isAppInstalled'; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  }  } <code>/session/:sessionId/appium/device/app_installed.POST</code> { <code>command</code>: <code>\"isAppInstalled\"</code> = 'isAppInstalled'; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/app_installed.POST.command</code> <code>\"isAppInstalled\"</code> <code>/session/:sessionId/appium/device/app_installed.POST.payloadParams</code> { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/app_installed.POST.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/app_state</code> { <code>GET</code>: { <code>command</code>: <code>\"queryAppState\"</code> = 'queryAppState'; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } ; <code>POST</code>: { <code>command</code>: <code>\"queryAppState\"</code> = 'queryAppState'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  }  } <code>/session/:sessionId/appium/device/app_state.GET</code> { <code>command</code>: <code>\"queryAppState\"</code> = 'queryAppState'; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/app_state.GET.command</code> <code>\"queryAppState\"</code> <code>/session/:sessionId/appium/device/app_state.GET.payloadParams</code> { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/app_state.GET.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/app_state.POST</code> { <code>command</code>: <code>\"queryAppState\"</code> = 'queryAppState'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/app_state.POST.command</code> <code>\"queryAppState\"</code> <code>/session/:sessionId/appium/device/app_state.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/app_state.POST.payloadParams</code> { <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/app_state.POST.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/current_activity</code> { <code>GET</code>: { <code>command</code>: <code>\"getCurrentActivity\"</code> = 'getCurrentActivity'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/current_activity.GET</code> { <code>command</code>: <code>\"getCurrentActivity\"</code> = 'getCurrentActivity'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/current_activity.GET.command</code> <code>\"getCurrentActivity\"</code> <code>/session/:sessionId/appium/device/current_activity.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/current_package</code> { <code>GET</code>: { <code>command</code>: <code>\"getCurrentPackage\"</code> = 'getCurrentPackage'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/current_package.GET</code> { <code>command</code>: <code>\"getCurrentPackage\"</code> = 'getCurrentPackage'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/current_package.GET.command</code> <code>\"getCurrentPackage\"</code> <code>/session/:sessionId/appium/device/current_package.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/display_density</code> { <code>GET</code>: { <code>command</code>: <code>\"getDisplayDensity\"</code> = 'getDisplayDensity'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/display_density.GET</code> { <code>command</code>: <code>\"getDisplayDensity\"</code> = 'getDisplayDensity'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/display_density.GET.command</code> <code>\"getDisplayDensity\"</code> <code>/session/:sessionId/appium/device/display_density.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/finger_print</code> { <code>POST</code>: { <code>command</code>: <code>\"fingerprint\"</code> = 'fingerprint'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"fingerprintId\"</code>]  }  }  } <code>/session/:sessionId/appium/device/finger_print.POST</code> { <code>command</code>: <code>\"fingerprint\"</code> = 'fingerprint'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"fingerprintId\"</code>]  }  } <code>/session/:sessionId/appium/device/finger_print.POST.command</code> <code>\"fingerprint\"</code> <code>/session/:sessionId/appium/device/finger_print.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/finger_print.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"fingerprintId\"</code>]  } <code>/session/:sessionId/appium/device/finger_print.POST.payloadParams.required</code> readonly [<code>\"fingerprintId\"</code>] <code>/session/:sessionId/appium/device/get_clipboard</code> { <code>POST</code>: { <code>command</code>: <code>\"getClipboard\"</code> = 'getClipboard'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"contentType\"</code>]  }  }  } <code>/session/:sessionId/appium/device/get_clipboard.POST</code> { <code>command</code>: <code>\"getClipboard\"</code> = 'getClipboard'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"contentType\"</code>]  }  } <code>/session/:sessionId/appium/device/get_clipboard.POST.command</code> <code>\"getClipboard\"</code> <code>/session/:sessionId/appium/device/get_clipboard.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/get_clipboard.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"contentType\"</code>]  } <code>/session/:sessionId/appium/device/get_clipboard.POST.payloadParams.optional</code> readonly [<code>\"contentType\"</code>] <code>/session/:sessionId/appium/device/gsm_call</code> { <code>POST</code>: { <code>command</code>: <code>\"gsmCall\"</code> = 'gsmCall'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"action\"</code>]  }  }  } <code>/session/:sessionId/appium/device/gsm_call.POST</code> { <code>command</code>: <code>\"gsmCall\"</code> = 'gsmCall'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"action\"</code>]  }  } <code>/session/:sessionId/appium/device/gsm_call.POST.command</code> <code>\"gsmCall\"</code> <code>/session/:sessionId/appium/device/gsm_call.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/gsm_call.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"action\"</code>]  } <code>/session/:sessionId/appium/device/gsm_call.POST.payloadParams.required</code> readonly [<code>\"phoneNumber\"</code>, <code>\"action\"</code>] <code>/session/:sessionId/appium/device/gsm_signal</code> { <code>POST</code>: { <code>command</code>: <code>\"gsmSignal\"</code> = 'gsmSignal'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"signalStrength\"</code>]  }  }  } <code>/session/:sessionId/appium/device/gsm_signal.POST</code> { <code>command</code>: <code>\"gsmSignal\"</code> = 'gsmSignal'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"signalStrength\"</code>]  }  } <code>/session/:sessionId/appium/device/gsm_signal.POST.command</code> <code>\"gsmSignal\"</code> <code>/session/:sessionId/appium/device/gsm_signal.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/gsm_signal.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"signalStrength\"</code>]  } <code>/session/:sessionId/appium/device/gsm_signal.POST.payloadParams.required</code> readonly [<code>\"signalStrength\"</code>] <code>/session/:sessionId/appium/device/gsm_voice</code> { <code>POST</code>: { <code>command</code>: <code>\"gsmVoice\"</code> = 'gsmVoice'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"state\"</code>]  }  }  } <code>/session/:sessionId/appium/device/gsm_voice.POST</code> { <code>command</code>: <code>\"gsmVoice\"</code> = 'gsmVoice'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"state\"</code>]  }  } <code>/session/:sessionId/appium/device/gsm_voice.POST.command</code> <code>\"gsmVoice\"</code> <code>/session/:sessionId/appium/device/gsm_voice.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/gsm_voice.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"state\"</code>]  } <code>/session/:sessionId/appium/device/gsm_voice.POST.payloadParams.required</code> readonly [<code>\"state\"</code>] <code>/session/:sessionId/appium/device/hide_keyboard</code> { <code>POST</code>: { <code>command</code>: <code>\"hideKeyboard\"</code> = 'hideKeyboard'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"strategy\"</code>, <code>\"key\"</code>, <code>\"keyCode\"</code>, <code>\"keyName\"</code>]  }  }  } <code>/session/:sessionId/appium/device/hide_keyboard.POST</code> { <code>command</code>: <code>\"hideKeyboard\"</code> = 'hideKeyboard'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"strategy\"</code>, <code>\"key\"</code>, <code>\"keyCode\"</code>, <code>\"keyName\"</code>]  }  } <code>/session/:sessionId/appium/device/hide_keyboard.POST.command</code> <code>\"hideKeyboard\"</code> <code>/session/:sessionId/appium/device/hide_keyboard.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"strategy\"</code>, <code>\"key\"</code>, <code>\"keyCode\"</code>, <code>\"keyName\"</code>]  } <code>/session/:sessionId/appium/device/hide_keyboard.POST.payloadParams.optional</code> readonly [<code>\"strategy\"</code>, <code>\"key\"</code>, <code>\"keyCode\"</code>, <code>\"keyName\"</code>] <code>/session/:sessionId/appium/device/install_app</code> { <code>POST</code>: { <code>command</code>: <code>\"installApp\"</code> = 'installApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"appPath\"</code>]  }  }  } <code>/session/:sessionId/appium/device/install_app.POST</code> { <code>command</code>: <code>\"installApp\"</code> = 'installApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"appPath\"</code>]  }  } <code>/session/:sessionId/appium/device/install_app.POST.command</code> <code>\"installApp\"</code> <code>/session/:sessionId/appium/device/install_app.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [<code>\"appPath\"</code>]  } <code>/session/:sessionId/appium/device/install_app.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/device/install_app.POST.payloadParams.required</code> readonly [<code>\"appPath\"</code>] <code>/session/:sessionId/appium/device/is_keyboard_shown</code> { <code>GET</code>: { <code>command</code>: <code>\"isKeyboardShown\"</code> = 'isKeyboardShown' }  } <code>/session/:sessionId/appium/device/is_keyboard_shown.GET</code> { <code>command</code>: <code>\"isKeyboardShown\"</code> = 'isKeyboardShown' } <code>/session/:sessionId/appium/device/is_keyboard_shown.GET.command</code> <code>\"isKeyboardShown\"</code> <code>/session/:sessionId/appium/device/is_locked</code> { <code>POST</code>: { <code>command</code>: <code>\"isLocked\"</code> = 'isLocked'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/is_locked.POST</code> { <code>command</code>: <code>\"isLocked\"</code> = 'isLocked'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/is_locked.POST.command</code> <code>\"isLocked\"</code> <code>/session/:sessionId/appium/device/is_locked.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/keyevent</code> { <code>POST</code>: { <code>command</code>: <code>\"keyevent\"</code> = 'keyevent'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  }  } <code>/session/:sessionId/appium/device/keyevent.POST</code> { <code>command</code>: <code>\"keyevent\"</code> = 'keyevent'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  } <code>/session/:sessionId/appium/device/keyevent.POST.command</code> <code>\"keyevent\"</code> <code>/session/:sessionId/appium/device/keyevent.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/keyevent.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"metastate\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  } <code>/session/:sessionId/appium/device/keyevent.POST.payloadParams.optional</code> readonly [<code>\"metastate\"</code>] <code>/session/:sessionId/appium/device/keyevent.POST.payloadParams.required</code> readonly [<code>\"keycode\"</code>] <code>/session/:sessionId/appium/device/lock</code> { <code>POST</code>: { <code>command</code>: <code>\"lock\"</code> = 'lock'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"seconds\"</code>]  }  }  } <code>/session/:sessionId/appium/device/lock.POST</code> { <code>command</code>: <code>\"lock\"</code> = 'lock'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"seconds\"</code>]  }  } <code>/session/:sessionId/appium/device/lock.POST.command</code> <code>\"lock\"</code> <code>/session/:sessionId/appium/device/lock.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/lock.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"seconds\"</code>]  } <code>/session/:sessionId/appium/device/lock.POST.payloadParams.optional</code> readonly [<code>\"seconds\"</code>] <code>/session/:sessionId/appium/device/long_press_keycode</code> { <code>POST</code>: { <code>command</code>: <code>\"longPressKeyCode\"</code> = 'longPressKeyCode'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  }  } <code>/session/:sessionId/appium/device/long_press_keycode.POST</code> { <code>command</code>: <code>\"longPressKeyCode\"</code> = 'longPressKeyCode'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  } <code>/session/:sessionId/appium/device/long_press_keycode.POST.command</code> <code>\"longPressKeyCode\"</code> <code>/session/:sessionId/appium/device/long_press_keycode.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/long_press_keycode.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  } <code>/session/:sessionId/appium/device/long_press_keycode.POST.payloadParams.optional</code> readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] <code>/session/:sessionId/appium/device/long_press_keycode.POST.payloadParams.required</code> readonly [<code>\"keycode\"</code>] <code>/session/:sessionId/appium/device/network_speed</code> { <code>POST</code>: { <code>command</code>: <code>\"networkSpeed\"</code> = 'networkSpeed'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"netspeed\"</code>]  }  }  } <code>/session/:sessionId/appium/device/network_speed.POST</code> { <code>command</code>: <code>\"networkSpeed\"</code> = 'networkSpeed'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"netspeed\"</code>]  }  } <code>/session/:sessionId/appium/device/network_speed.POST.command</code> <code>\"networkSpeed\"</code> <code>/session/:sessionId/appium/device/network_speed.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/network_speed.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"netspeed\"</code>]  } <code>/session/:sessionId/appium/device/network_speed.POST.payloadParams.required</code> readonly [<code>\"netspeed\"</code>] <code>/session/:sessionId/appium/device/open_notifications</code> { <code>POST</code>: { <code>command</code>: <code>\"openNotifications\"</code> = 'openNotifications'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/open_notifications.POST</code> { <code>command</code>: <code>\"openNotifications\"</code> = 'openNotifications'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/open_notifications.POST.command</code> <code>\"openNotifications\"</code> <code>/session/:sessionId/appium/device/open_notifications.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/power_ac</code> { <code>POST</code>: { <code>command</code>: <code>\"powerAC\"</code> = 'powerAC'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"state\"</code>]  }  }  } <code>/session/:sessionId/appium/device/power_ac.POST</code> { <code>command</code>: <code>\"powerAC\"</code> = 'powerAC'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"state\"</code>]  }  } <code>/session/:sessionId/appium/device/power_ac.POST.command</code> <code>\"powerAC\"</code> <code>/session/:sessionId/appium/device/power_ac.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/power_ac.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"state\"</code>]  } <code>/session/:sessionId/appium/device/power_ac.POST.payloadParams.required</code> readonly [<code>\"state\"</code>] <code>/session/:sessionId/appium/device/power_capacity</code> { <code>POST</code>: { <code>command</code>: <code>\"powerCapacity\"</code> = 'powerCapacity'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"percent\"</code>]  }  }  } <code>/session/:sessionId/appium/device/power_capacity.POST</code> { <code>command</code>: <code>\"powerCapacity\"</code> = 'powerCapacity'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"percent\"</code>]  }  } <code>/session/:sessionId/appium/device/power_capacity.POST.command</code> <code>\"powerCapacity\"</code> <code>/session/:sessionId/appium/device/power_capacity.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/power_capacity.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"percent\"</code>]  } <code>/session/:sessionId/appium/device/power_capacity.POST.payloadParams.required</code> readonly [<code>\"percent\"</code>] <code>/session/:sessionId/appium/device/press_keycode</code> { <code>POST</code>: { <code>command</code>: <code>\"pressKeyCode\"</code> = 'pressKeyCode'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  }  } <code>/session/:sessionId/appium/device/press_keycode.POST</code> { <code>command</code>: <code>\"pressKeyCode\"</code> = 'pressKeyCode'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  }  } <code>/session/:sessionId/appium/device/press_keycode.POST.command</code> <code>\"pressKeyCode\"</code> <code>/session/:sessionId/appium/device/press_keycode.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/press_keycode.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] ; <code>required</code>: readonly [<code>\"keycode\"</code>]  } <code>/session/:sessionId/appium/device/press_keycode.POST.payloadParams.optional</code> readonly [<code>\"metastate\"</code>, <code>\"flags\"</code>] <code>/session/:sessionId/appium/device/press_keycode.POST.payloadParams.required</code> readonly [<code>\"keycode\"</code>] <code>/session/:sessionId/appium/device/pull_file</code> { <code>POST</code>: { <code>command</code>: <code>\"pullFile\"</code> = 'pullFile'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>]  }  }  } <code>/session/:sessionId/appium/device/pull_file.POST</code> { <code>command</code>: <code>\"pullFile\"</code> = 'pullFile'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>]  }  } <code>/session/:sessionId/appium/device/pull_file.POST.command</code> <code>\"pullFile\"</code> <code>/session/:sessionId/appium/device/pull_file.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"path\"</code>]  } <code>/session/:sessionId/appium/device/pull_file.POST.payloadParams.required</code> readonly [<code>\"path\"</code>] <code>/session/:sessionId/appium/device/pull_folder</code> { <code>POST</code>: { <code>command</code>: <code>\"pullFolder\"</code> = 'pullFolder'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>]  }  }  } <code>/session/:sessionId/appium/device/pull_folder.POST</code> { <code>command</code>: <code>\"pullFolder\"</code> = 'pullFolder'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>]  }  } <code>/session/:sessionId/appium/device/pull_folder.POST.command</code> <code>\"pullFolder\"</code> <code>/session/:sessionId/appium/device/pull_folder.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"path\"</code>]  } <code>/session/:sessionId/appium/device/pull_folder.POST.payloadParams.required</code> readonly [<code>\"path\"</code>] <code>/session/:sessionId/appium/device/push_file</code> { <code>POST</code>: { <code>command</code>: <code>\"pushFile\"</code> = 'pushFile'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>, <code>\"data\"</code>]  }  }  } <code>/session/:sessionId/appium/device/push_file.POST</code> { <code>command</code>: <code>\"pushFile\"</code> = 'pushFile'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"path\"</code>, <code>\"data\"</code>]  }  } <code>/session/:sessionId/appium/device/push_file.POST.command</code> <code>\"pushFile\"</code> <code>/session/:sessionId/appium/device/push_file.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"path\"</code>, <code>\"data\"</code>]  } <code>/session/:sessionId/appium/device/push_file.POST.payloadParams.required</code> readonly [<code>\"path\"</code>, <code>\"data\"</code>] <code>/session/:sessionId/appium/device/remove_app</code> { <code>POST</code>: { <code>command</code>: <code>\"removeApp\"</code> = 'removeApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  }  } <code>/session/:sessionId/appium/device/remove_app.POST</code> { <code>command</code>: <code>\"removeApp\"</code> = 'removeApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/remove_app.POST.command</code> <code>\"removeApp\"</code> <code>/session/:sessionId/appium/device/remove_app.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/remove_app.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/device/remove_app.POST.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/rotate</code> { <code>POST</code>: { <code>command</code>: <code>\"mobileRotation\"</code> = 'mobileRotation'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>] ; <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"radius\"</code>, <code>\"rotation\"</code>, <code>\"touchCount\"</code>, <code>\"duration\"</code>]  }  }  } <code>/session/:sessionId/appium/device/rotate.POST</code> { <code>command</code>: <code>\"mobileRotation\"</code> = 'mobileRotation'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>] ; <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"radius\"</code>, <code>\"rotation\"</code>, <code>\"touchCount\"</code>, <code>\"duration\"</code>]  }  } <code>/session/:sessionId/appium/device/rotate.POST.command</code> <code>\"mobileRotation\"</code> <code>/session/:sessionId/appium/device/rotate.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/rotate.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"element\"</code>] ; <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"radius\"</code>, <code>\"rotation\"</code>, <code>\"touchCount\"</code>, <code>\"duration\"</code>]  } <code>/session/:sessionId/appium/device/rotate.POST.payloadParams.optional</code> readonly [<code>\"element\"</code>] <code>/session/:sessionId/appium/device/rotate.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"radius\"</code>, <code>\"rotation\"</code>, <code>\"touchCount\"</code>, <code>\"duration\"</code>] <code>/session/:sessionId/appium/device/send_sms</code> { <code>POST</code>: { <code>command</code>: <code>\"sendSMS\"</code> = 'sendSMS'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"message\"</code>]  }  }  } <code>/session/:sessionId/appium/device/send_sms.POST</code> { <code>command</code>: <code>\"sendSMS\"</code> = 'sendSMS'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"message\"</code>]  }  } <code>/session/:sessionId/appium/device/send_sms.POST.command</code> <code>\"sendSMS\"</code> <code>/session/:sessionId/appium/device/send_sms.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/send_sms.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"phoneNumber\"</code>, <code>\"message\"</code>]  } <code>/session/:sessionId/appium/device/send_sms.POST.payloadParams.required</code> readonly [<code>\"phoneNumber\"</code>, <code>\"message\"</code>] <code>/session/:sessionId/appium/device/set_clipboard</code> { <code>POST</code>: { <code>command</code>: <code>\"setClipboard\"</code> = 'setClipboard'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"contentType\"</code>, <code>\"label\"</code>] ; <code>required</code>: readonly [<code>\"content\"</code>]  }  }  } <code>/session/:sessionId/appium/device/set_clipboard.POST</code> { <code>command</code>: <code>\"setClipboard\"</code> = 'setClipboard'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"contentType\"</code>, <code>\"label\"</code>] ; <code>required</code>: readonly [<code>\"content\"</code>]  }  } <code>/session/:sessionId/appium/device/set_clipboard.POST.command</code> <code>\"setClipboard\"</code> <code>/session/:sessionId/appium/device/set_clipboard.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/set_clipboard.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"contentType\"</code>, <code>\"label\"</code>] ; <code>required</code>: readonly [<code>\"content\"</code>]  } <code>/session/:sessionId/appium/device/set_clipboard.POST.payloadParams.optional</code> readonly [<code>\"contentType\"</code>, <code>\"label\"</code>] <code>/session/:sessionId/appium/device/set_clipboard.POST.payloadParams.required</code> readonly [<code>\"content\"</code>] <code>/session/:sessionId/appium/device/shake</code> { <code>POST</code>: { <code>command</code>: <code>\"mobileShake\"</code> = 'mobileShake'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/shake.POST</code> { <code>command</code>: <code>\"mobileShake\"</code> = 'mobileShake'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/shake.POST.command</code> <code>\"mobileShake\"</code> <code>/session/:sessionId/appium/device/shake.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/start_activity</code> { <code>POST</code>: { <code>command</code>: <code>\"startActivity\"</code> = 'startActivity'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"appWaitPackage\"</code>, <code>\"appWaitActivity\"</code>, <code>\"intentAction\"</code>, <code>\"intentCategory\"</code>, <code>\"intentFlags\"</code>, <code>\"optionalIntentArguments\"</code>, <code>\"dontStopAppOnReset\"</code>] ; <code>required</code>: readonly [<code>\"appPackage\"</code>, <code>\"appActivity\"</code>]  }  }  } <code>/session/:sessionId/appium/device/start_activity.POST</code> { <code>command</code>: <code>\"startActivity\"</code> = 'startActivity'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"appWaitPackage\"</code>, <code>\"appWaitActivity\"</code>, <code>\"intentAction\"</code>, <code>\"intentCategory\"</code>, <code>\"intentFlags\"</code>, <code>\"optionalIntentArguments\"</code>, <code>\"dontStopAppOnReset\"</code>] ; <code>required</code>: readonly [<code>\"appPackage\"</code>, <code>\"appActivity\"</code>]  }  } <code>/session/:sessionId/appium/device/start_activity.POST.command</code> <code>\"startActivity\"</code> <code>/session/:sessionId/appium/device/start_activity.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/start_activity.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"appWaitPackage\"</code>, <code>\"appWaitActivity\"</code>, <code>\"intentAction\"</code>, <code>\"intentCategory\"</code>, <code>\"intentFlags\"</code>, <code>\"optionalIntentArguments\"</code>, <code>\"dontStopAppOnReset\"</code>] ; <code>required</code>: readonly [<code>\"appPackage\"</code>, <code>\"appActivity\"</code>]  } <code>/session/:sessionId/appium/device/start_activity.POST.payloadParams.optional</code> readonly [<code>\"appWaitPackage\"</code>, <code>\"appWaitActivity\"</code>, <code>\"intentAction\"</code>, <code>\"intentCategory\"</code>, <code>\"intentFlags\"</code>, <code>\"optionalIntentArguments\"</code>, <code>\"dontStopAppOnReset\"</code>] <code>/session/:sessionId/appium/device/start_activity.POST.payloadParams.required</code> readonly [<code>\"appPackage\"</code>, <code>\"appActivity\"</code>] <code>/session/:sessionId/appium/device/system_bars</code> { <code>GET</code>: { <code>command</code>: <code>\"getSystemBars\"</code> = 'getSystemBars'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/system_bars.GET</code> { <code>command</code>: <code>\"getSystemBars\"</code> = 'getSystemBars'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/system_bars.GET.command</code> <code>\"getSystemBars\"</code> <code>/session/:sessionId/appium/device/system_bars.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/system_time</code> { <code>GET</code>: { <code>command</code>: <code>\"getDeviceTime\"</code> = 'getDeviceTime'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"format\"</code>]  }  } ; <code>POST</code>: { <code>command</code>: <code>\"getDeviceTime\"</code> = 'getDeviceTime'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"format\"</code>]  }  }  } <code>/session/:sessionId/appium/device/system_time.GET</code> { <code>command</code>: <code>\"getDeviceTime\"</code> = 'getDeviceTime'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"format\"</code>]  }  } <code>/session/:sessionId/appium/device/system_time.GET.command</code> <code>\"getDeviceTime\"</code> <code>/session/:sessionId/appium/device/system_time.GET.payloadParams</code> { <code>optional</code>: readonly [<code>\"format\"</code>]  } <code>/session/:sessionId/appium/device/system_time.GET.payloadParams.optional</code> readonly [<code>\"format\"</code>] <code>/session/:sessionId/appium/device/system_time.POST</code> { <code>command</code>: <code>\"getDeviceTime\"</code> = 'getDeviceTime'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"format\"</code>]  }  } <code>/session/:sessionId/appium/device/system_time.POST.command</code> <code>\"getDeviceTime\"</code> <code>/session/:sessionId/appium/device/system_time.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"format\"</code>]  } <code>/session/:sessionId/appium/device/system_time.POST.payloadParams.optional</code> readonly [<code>\"format\"</code>] <code>/session/:sessionId/appium/device/terminate_app</code> { <code>POST</code>: { <code>command</code>: <code>\"terminateApp\"</code> = 'terminateApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  }  } <code>/session/:sessionId/appium/device/terminate_app.POST</code> { <code>command</code>: <code>\"terminateApp\"</code> = 'terminateApp'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  }  } <code>/session/:sessionId/appium/device/terminate_app.POST.command</code> <code>\"terminateApp\"</code> <code>/session/:sessionId/appium/device/terminate_app.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>] ; <code>required</code>: readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]]  } <code>/session/:sessionId/appium/device/terminate_app.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/device/terminate_app.POST.payloadParams.required</code> readonly [readonly [<code>\"appId\"</code>], readonly [<code>\"bundleId\"</code>]] <code>/session/:sessionId/appium/device/toggle_airplane_mode</code> { <code>POST</code>: { <code>command</code>: <code>\"toggleFlightMode\"</code> = 'toggleFlightMode'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/toggle_airplane_mode.POST</code> { <code>command</code>: <code>\"toggleFlightMode\"</code> = 'toggleFlightMode'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/toggle_airplane_mode.POST.command</code> <code>\"toggleFlightMode\"</code> <code>/session/:sessionId/appium/device/toggle_airplane_mode.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/toggle_data</code> { <code>POST</code>: { <code>command</code>: <code>\"toggleData\"</code> = 'toggleData'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/toggle_data.POST</code> { <code>command</code>: <code>\"toggleData\"</code> = 'toggleData'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/toggle_data.POST.command</code> <code>\"toggleData\"</code> <code>/session/:sessionId/appium/device/toggle_data.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/toggle_location_services</code> { <code>POST</code>: { <code>command</code>: <code>\"toggleLocationServices\"</code> = 'toggleLocationServices'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/toggle_location_services.POST</code> { <code>command</code>: <code>\"toggleLocationServices\"</code> = 'toggleLocationServices'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/toggle_location_services.POST.command</code> <code>\"toggleLocationServices\"</code> <code>/session/:sessionId/appium/device/toggle_location_services.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/toggle_wifi</code> { <code>POST</code>: { <code>command</code>: <code>\"toggleWiFi\"</code> = 'toggleWiFi'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/toggle_wifi.POST</code> { <code>command</code>: <code>\"toggleWiFi\"</code> = 'toggleWiFi'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/toggle_wifi.POST.command</code> <code>\"toggleWiFi\"</code> <code>/session/:sessionId/appium/device/toggle_wifi.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/device/unlock</code> { <code>POST</code>: { <code>command</code>: <code>\"unlock\"</code> = 'unlock'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/device/unlock.POST</code> { <code>command</code>: <code>\"unlock\"</code> = 'unlock'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/device/unlock.POST.command</code> <code>\"unlock\"</code> <code>/session/:sessionId/appium/device/unlock.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/element/:elementId/replace_value</code> { <code>POST</code>: { <code>command</code>: <code>\"replaceValue\"</code> = 'replaceValue'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  }  }  } <code>/session/:sessionId/appium/element/:elementId/replace_value.POST</code> { <code>command</code>: <code>\"replaceValue\"</code> = 'replaceValue'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  }  } <code>/session/:sessionId/appium/element/:elementId/replace_value.POST.command</code> <code>\"replaceValue\"</code> <code>/session/:sessionId/appium/element/:elementId/replace_value.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/element/:elementId/replace_value.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"text\"</code>]  } <code>/session/:sessionId/appium/element/:elementId/replace_value.POST.payloadParams.required</code> readonly [<code>\"text\"</code>] <code>/session/:sessionId/appium/element/:elementId/value</code> { <code>POST</code>: { <code>command</code>: <code>\"setValueImmediate\"</code> = 'setValueImmediate'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  }  }  } <code>/session/:sessionId/appium/element/:elementId/value.POST</code> { <code>command</code>: <code>\"setValueImmediate\"</code> = 'setValueImmediate'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  }  } <code>/session/:sessionId/appium/element/:elementId/value.POST.command</code> <code>\"setValueImmediate\"</code> <code>/session/:sessionId/appium/element/:elementId/value.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/element/:elementId/value.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"text\"</code>]  } <code>/session/:sessionId/appium/element/:elementId/value.POST.payloadParams.required</code> readonly [<code>\"text\"</code>] <code>/session/:sessionId/appium/events</code> { <code>POST</code>: { <code>command</code>: <code>\"getLogEvents\"</code> = 'getLogEvents'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>]  }  }  } <code>/session/:sessionId/appium/events.POST</code> { <code>command</code>: <code>\"getLogEvents\"</code> = 'getLogEvents'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>]  }  } <code>/session/:sessionId/appium/events.POST.command</code> <code>\"getLogEvents\"</code> <code>/session/:sessionId/appium/events.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"type\"</code>]  } <code>/session/:sessionId/appium/events.POST.payloadParams.optional</code> readonly [<code>\"type\"</code>] <code>/session/:sessionId/appium/getPerformanceData</code> { <code>POST</code>: { <code>command</code>: <code>\"getPerformanceData\"</code> = 'getPerformanceData'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"dataReadTimeout\"</code>] ; <code>required</code>: readonly [<code>\"packageName\"</code>, <code>\"dataType\"</code>]  }  }  } <code>/session/:sessionId/appium/getPerformanceData.POST</code> { <code>command</code>: <code>\"getPerformanceData\"</code> = 'getPerformanceData'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"dataReadTimeout\"</code>] ; <code>required</code>: readonly [<code>\"packageName\"</code>, <code>\"dataType\"</code>]  }  } <code>/session/:sessionId/appium/getPerformanceData.POST.command</code> <code>\"getPerformanceData\"</code> <code>/session/:sessionId/appium/getPerformanceData.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/getPerformanceData.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"dataReadTimeout\"</code>] ; <code>required</code>: readonly [<code>\"packageName\"</code>, <code>\"dataType\"</code>]  } <code>/session/:sessionId/appium/getPerformanceData.POST.payloadParams.optional</code> readonly [<code>\"dataReadTimeout\"</code>] <code>/session/:sessionId/appium/getPerformanceData.POST.payloadParams.required</code> readonly [<code>\"packageName\"</code>, <code>\"dataType\"</code>] <code>/session/:sessionId/appium/log_event</code> { <code>POST</code>: { <code>command</code>: <code>\"logCustomEvent\"</code> = 'logCustomEvent'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"vendor\"</code>, <code>\"event\"</code>]  }  }  } <code>/session/:sessionId/appium/log_event.POST</code> { <code>command</code>: <code>\"logCustomEvent\"</code> = 'logCustomEvent'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"vendor\"</code>, <code>\"event\"</code>]  }  } <code>/session/:sessionId/appium/log_event.POST.command</code> <code>\"logCustomEvent\"</code> <code>/session/:sessionId/appium/log_event.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"vendor\"</code>, <code>\"event\"</code>]  } <code>/session/:sessionId/appium/log_event.POST.payloadParams.required</code> readonly [<code>\"vendor\"</code>, <code>\"event\"</code>] <code>/session/:sessionId/appium/performanceData/types</code> { <code>POST</code>: { <code>command</code>: <code>\"getPerformanceDataTypes\"</code> = 'getPerformanceDataTypes'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/appium/performanceData/types.POST</code> { <code>command</code>: <code>\"getPerformanceDataTypes\"</code> = 'getPerformanceDataTypes'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/appium/performanceData/types.POST.command</code> <code>\"getPerformanceDataTypes\"</code> <code>/session/:sessionId/appium/performanceData/types.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/receive_async_response</code> { <code>POST</code>: { <code>command</code>: <code>\"receiveAsyncResponse\"</code> = 'receiveAsyncResponse'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"response\"</code>]  }  }  } <code>/session/:sessionId/appium/receive_async_response.POST</code> { <code>command</code>: <code>\"receiveAsyncResponse\"</code> = 'receiveAsyncResponse'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"response\"</code>]  }  } <code>/session/:sessionId/appium/receive_async_response.POST.command</code> <code>\"receiveAsyncResponse\"</code> <code>/session/:sessionId/appium/receive_async_response.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/receive_async_response.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"response\"</code>]  } <code>/session/:sessionId/appium/receive_async_response.POST.payloadParams.required</code> readonly [<code>\"response\"</code>] <code>/session/:sessionId/appium/settings</code> { <code>GET</code>: { <code>command</code>: <code>\"getSettings\"</code> = 'getSettings' } ; <code>POST</code>: { <code>command</code>: <code>\"updateSettings\"</code> = 'updateSettings'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"settings\"</code>]  }  }  } <code>/session/:sessionId/appium/settings.GET</code> { <code>command</code>: <code>\"getSettings\"</code> = 'getSettings' } <code>/session/:sessionId/appium/settings.GET.command</code> <code>\"getSettings\"</code> <code>/session/:sessionId/appium/settings.POST</code> { <code>command</code>: <code>\"updateSettings\"</code> = 'updateSettings'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"settings\"</code>]  }  } <code>/session/:sessionId/appium/settings.POST.command</code> <code>\"updateSettings\"</code> <code>/session/:sessionId/appium/settings.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"settings\"</code>]  } <code>/session/:sessionId/appium/settings.POST.payloadParams.required</code> readonly [<code>\"settings\"</code>] <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment</code> { <code>POST</code>: { <code>command</code>: <code>\"toggleEnrollTouchId\"</code> = 'toggleEnrollTouchId'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"enabled\"</code>]  }  }  } <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment.POST</code> { <code>command</code>: <code>\"toggleEnrollTouchId\"</code> = 'toggleEnrollTouchId'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"enabled\"</code>]  }  } <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment.POST.command</code> <code>\"toggleEnrollTouchId\"</code> <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"enabled\"</code>]  } <code>/session/:sessionId/appium/simulator/toggle_touch_id_enrollment.POST.payloadParams.optional</code> readonly [<code>\"enabled\"</code>] <code>/session/:sessionId/appium/simulator/touch_id</code> { <code>POST</code>: { <code>command</code>: <code>\"touchId\"</code> = 'touchId'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"match\"</code>]  }  }  } <code>/session/:sessionId/appium/simulator/touch_id.POST</code> { <code>command</code>: <code>\"touchId\"</code> = 'touchId'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"match\"</code>]  }  } <code>/session/:sessionId/appium/simulator/touch_id.POST.command</code> <code>\"touchId\"</code> <code>/session/:sessionId/appium/simulator/touch_id.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/simulator/touch_id.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"match\"</code>]  } <code>/session/:sessionId/appium/simulator/touch_id.POST.payloadParams.required</code> readonly [<code>\"match\"</code>] <code>/session/:sessionId/appium/start_recording_screen</code> { <code>POST</code>: { <code>command</code>: <code>\"startRecordingScreen\"</code> = 'startRecordingScreen'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>]  }  }  } <code>/session/:sessionId/appium/start_recording_screen.POST</code> { <code>command</code>: <code>\"startRecordingScreen\"</code> = 'startRecordingScreen'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>]  }  } <code>/session/:sessionId/appium/start_recording_screen.POST.command</code> <code>\"startRecordingScreen\"</code> <code>/session/:sessionId/appium/start_recording_screen.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/start_recording_screen.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>]  } <code>/session/:sessionId/appium/start_recording_screen.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/appium/stop_recording_screen</code> { <code>POST</code>: { <code>command</code>: <code>\"stopRecordingScreen\"</code> = 'stopRecordingScreen'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>]  }  }  } <code>/session/:sessionId/appium/stop_recording_screen.POST</code> { <code>command</code>: <code>\"stopRecordingScreen\"</code> = 'stopRecordingScreen'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"options\"</code>]  }  } <code>/session/:sessionId/appium/stop_recording_screen.POST.command</code> <code>\"stopRecordingScreen\"</code> <code>/session/:sessionId/appium/stop_recording_screen.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/appium/stop_recording_screen.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"options\"</code>]  } <code>/session/:sessionId/appium/stop_recording_screen.POST.payloadParams.optional</code> readonly [<code>\"options\"</code>] <code>/session/:sessionId/application_cache/status</code> { <code>GET</code>: {} = {} } <code>/session/:sessionId/application_cache/status.GET</code> {} <code>/session/:sessionId/back</code> { <code>POST</code>: { <code>command</code>: <code>\"back\"</code> = 'back' }  } <code>/session/:sessionId/back.POST</code> { <code>command</code>: <code>\"back\"</code> = 'back' } <code>/session/:sessionId/back.POST.command</code> <code>\"back\"</code> <code>/session/:sessionId/buttondown</code> { <code>POST</code>: { <code>command</code>: <code>\"buttonDown\"</code> = 'buttonDown'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  }  } <code>/session/:sessionId/buttondown.POST</code> { <code>command</code>: <code>\"buttonDown\"</code> = 'buttonDown'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  } <code>/session/:sessionId/buttondown.POST.command</code> <code>\"buttonDown\"</code> <code>/session/:sessionId/buttondown.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/buttondown.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"button\"</code>]  } <code>/session/:sessionId/buttondown.POST.payloadParams.optional</code> readonly [<code>\"button\"</code>] <code>/session/:sessionId/buttonup</code> { <code>POST</code>: { <code>command</code>: <code>\"buttonUp\"</code> = 'buttonUp'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  }  } <code>/session/:sessionId/buttonup.POST</code> { <code>command</code>: <code>\"buttonUp\"</code> = 'buttonUp'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  } <code>/session/:sessionId/buttonup.POST.command</code> <code>\"buttonUp\"</code> <code>/session/:sessionId/buttonup.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/buttonup.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"button\"</code>]  } <code>/session/:sessionId/buttonup.POST.payloadParams.optional</code> readonly [<code>\"button\"</code>] <code>/session/:sessionId/click</code> { <code>POST</code>: { <code>command</code>: <code>\"clickCurrent\"</code> = 'clickCurrent'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  }  } <code>/session/:sessionId/click.POST</code> { <code>command</code>: <code>\"clickCurrent\"</code> = 'clickCurrent'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"button\"</code>]  }  } <code>/session/:sessionId/click.POST.command</code> <code>\"clickCurrent\"</code> <code>/session/:sessionId/click.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/click.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"button\"</code>]  } <code>/session/:sessionId/click.POST.payloadParams.optional</code> readonly [<code>\"button\"</code>] <code>/session/:sessionId/context</code> { <code>GET</code>: { <code>command</code>: <code>\"getCurrentContext\"</code> = 'getCurrentContext' } ; <code>POST</code>: { <code>command</code>: <code>\"setContext\"</code> = 'setContext'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"name\"</code>]  }  }  } <code>/session/:sessionId/context.GET</code> { <code>command</code>: <code>\"getCurrentContext\"</code> = 'getCurrentContext' } <code>/session/:sessionId/context.GET.command</code> <code>\"getCurrentContext\"</code> <code>/session/:sessionId/context.POST</code> { <code>command</code>: <code>\"setContext\"</code> = 'setContext'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"name\"</code>]  }  } <code>/session/:sessionId/context.POST.command</code> <code>\"setContext\"</code> <code>/session/:sessionId/context.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"name\"</code>]  } <code>/session/:sessionId/context.POST.payloadParams.required</code> readonly [<code>\"name\"</code>] <code>/session/:sessionId/contexts</code> { <code>GET</code>: { <code>command</code>: <code>\"getContexts\"</code> = 'getContexts' }  } <code>/session/:sessionId/contexts.GET</code> { <code>command</code>: <code>\"getContexts\"</code> = 'getContexts' } <code>/session/:sessionId/contexts.GET.command</code> <code>\"getContexts\"</code> <code>/session/:sessionId/cookie</code> { <code>DELETE</code>: { <code>command</code>: <code>\"deleteCookies\"</code> = 'deleteCookies' } ; <code>GET</code>: { <code>command</code>: <code>\"getCookies\"</code> = 'getCookies' } ; <code>POST</code>: { <code>command</code>: <code>\"setCookie\"</code> = 'setCookie'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"cookie\"</code>]  }  }  } <code>/session/:sessionId/cookie.DELETE</code> { <code>command</code>: <code>\"deleteCookies\"</code> = 'deleteCookies' } <code>/session/:sessionId/cookie.DELETE.command</code> <code>\"deleteCookies\"</code> <code>/session/:sessionId/cookie.GET</code> { <code>command</code>: <code>\"getCookies\"</code> = 'getCookies' } <code>/session/:sessionId/cookie.GET.command</code> <code>\"getCookies\"</code> <code>/session/:sessionId/cookie.POST</code> { <code>command</code>: <code>\"setCookie\"</code> = 'setCookie'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"cookie\"</code>]  }  } <code>/session/:sessionId/cookie.POST.command</code> <code>\"setCookie\"</code> <code>/session/:sessionId/cookie.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"cookie\"</code>]  } <code>/session/:sessionId/cookie.POST.payloadParams.required</code> readonly [<code>\"cookie\"</code>] <code>/session/:sessionId/cookie/:name</code> { <code>DELETE</code>: { <code>command</code>: <code>\"deleteCookie\"</code> = 'deleteCookie' } ; <code>GET</code>: { <code>command</code>: <code>\"getCookie\"</code> = 'getCookie' }  } <code>/session/:sessionId/cookie/:name.DELETE</code> { <code>command</code>: <code>\"deleteCookie\"</code> = 'deleteCookie' } <code>/session/:sessionId/cookie/:name.DELETE.command</code> <code>\"deleteCookie\"</code> <code>/session/:sessionId/cookie/:name.GET</code> { <code>command</code>: <code>\"getCookie\"</code> = 'getCookie' } <code>/session/:sessionId/cookie/:name.GET.command</code> <code>\"getCookie\"</code> <code>/session/:sessionId/dismiss_alert</code> { <code>POST</code>: { <code>command</code>: <code>\"postDismissAlert\"</code> = 'postDismissAlert' }  } <code>/session/:sessionId/dismiss_alert.POST</code> { <code>command</code>: <code>\"postDismissAlert\"</code> = 'postDismissAlert' } <code>/session/:sessionId/dismiss_alert.POST.command</code> <code>\"postDismissAlert\"</code> <code>/session/:sessionId/doubleclick</code> { <code>POST</code>: { <code>command</code>: <code>\"doubleClick\"</code> = 'doubleClick'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/doubleclick.POST</code> { <code>command</code>: <code>\"doubleClick\"</code> = 'doubleClick'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/doubleclick.POST.command</code> <code>\"doubleClick\"</code> <code>/session/:sessionId/doubleclick.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/element</code> { <code>POST</code>: { <code>command</code>: <code>\"findElement\"</code> = 'findElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/element.POST</code> { <code>command</code>: <code>\"findElement\"</code> = 'findElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/element.POST.command</code> <code>\"findElement\"</code> <code>/session/:sessionId/element.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/element.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/element/:elementId</code> { <code>GET</code>: {} = {} } <code>/session/:sessionId/element/:elementId.GET</code> {} <code>/session/:sessionId/element/:elementId/attribute/:name</code> { <code>GET</code>: { <code>command</code>: <code>\"getAttribute\"</code> = 'getAttribute' }  } <code>/session/:sessionId/element/:elementId/attribute/:name.GET</code> { <code>command</code>: <code>\"getAttribute\"</code> = 'getAttribute' } <code>/session/:sessionId/element/:elementId/attribute/:name.GET.command</code> <code>\"getAttribute\"</code> <code>/session/:sessionId/element/:elementId/clear</code> { <code>POST</code>: { <code>command</code>: <code>\"clear\"</code> = 'clear' }  } <code>/session/:sessionId/element/:elementId/clear.POST</code> { <code>command</code>: <code>\"clear\"</code> = 'clear' } <code>/session/:sessionId/element/:elementId/clear.POST.command</code> <code>\"clear\"</code> <code>/session/:sessionId/element/:elementId/click</code> { <code>POST</code>: { <code>command</code>: <code>\"click\"</code> = 'click' }  } <code>/session/:sessionId/element/:elementId/click.POST</code> { <code>command</code>: <code>\"click\"</code> = 'click' } <code>/session/:sessionId/element/:elementId/click.POST.command</code> <code>\"click\"</code> <code>/session/:sessionId/element/:elementId/css/:propertyName</code> { <code>GET</code>: { <code>command</code>: <code>\"getCssProperty\"</code> = 'getCssProperty' }  } <code>/session/:sessionId/element/:elementId/css/:propertyName.GET</code> { <code>command</code>: <code>\"getCssProperty\"</code> = 'getCssProperty' } <code>/session/:sessionId/element/:elementId/css/:propertyName.GET.command</code> <code>\"getCssProperty\"</code> <code>/session/:sessionId/element/:elementId/displayed</code> { <code>GET</code>: { <code>command</code>: <code>\"elementDisplayed\"</code> = 'elementDisplayed' }  } <code>/session/:sessionId/element/:elementId/displayed.GET</code> { <code>command</code>: <code>\"elementDisplayed\"</code> = 'elementDisplayed' } <code>/session/:sessionId/element/:elementId/displayed.GET.command</code> <code>\"elementDisplayed\"</code> <code>/session/:sessionId/element/:elementId/element</code> { <code>POST</code>: { <code>command</code>: <code>\"findElementFromElement\"</code> = 'findElementFromElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/element/:elementId/element.POST</code> { <code>command</code>: <code>\"findElementFromElement\"</code> = 'findElementFromElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/element/:elementId/element.POST.command</code> <code>\"findElementFromElement\"</code> <code>/session/:sessionId/element/:elementId/element.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/element/:elementId/element.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/element/:elementId/elements</code> { <code>POST</code>: { <code>command</code>: <code>\"findElementsFromElement\"</code> = 'findElementsFromElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/element/:elementId/elements.POST</code> { <code>command</code>: <code>\"findElementsFromElement\"</code> = 'findElementsFromElement'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/element/:elementId/elements.POST.command</code> <code>\"findElementsFromElement\"</code> <code>/session/:sessionId/element/:elementId/elements.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/element/:elementId/elements.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/element/:elementId/enabled</code> { <code>GET</code>: { <code>command</code>: <code>\"elementEnabled\"</code> = 'elementEnabled' }  } <code>/session/:sessionId/element/:elementId/enabled.GET</code> { <code>command</code>: <code>\"elementEnabled\"</code> = 'elementEnabled' } <code>/session/:sessionId/element/:elementId/enabled.GET.command</code> <code>\"elementEnabled\"</code> <code>/session/:sessionId/element/:elementId/equals/:otherId</code> { <code>GET</code>: { <code>command</code>: <code>\"equalsElement\"</code> = 'equalsElement'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/equals/:otherId.GET</code> { <code>command</code>: <code>\"equalsElement\"</code> = 'equalsElement'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/equals/:otherId.GET.command</code> <code>\"equalsElement\"</code> <code>/session/:sessionId/element/:elementId/equals/:otherId.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/location</code> { <code>GET</code>: { <code>command</code>: <code>\"getLocation\"</code> = 'getLocation'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/location.GET</code> { <code>command</code>: <code>\"getLocation\"</code> = 'getLocation'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/location.GET.command</code> <code>\"getLocation\"</code> <code>/session/:sessionId/element/:elementId/location.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/location_in_view</code> { <code>GET</code>: { <code>command</code>: <code>\"getLocationInView\"</code> = 'getLocationInView'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/location_in_view.GET</code> { <code>command</code>: <code>\"getLocationInView\"</code> = 'getLocationInView'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/location_in_view.GET.command</code> <code>\"getLocationInView\"</code> <code>/session/:sessionId/element/:elementId/location_in_view.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/name</code> { <code>GET</code>: { <code>command</code>: <code>\"getName\"</code> = 'getName' }  } <code>/session/:sessionId/element/:elementId/name.GET</code> { <code>command</code>: <code>\"getName\"</code> = 'getName' } <code>/session/:sessionId/element/:elementId/name.GET.command</code> <code>\"getName\"</code> <code>/session/:sessionId/element/:elementId/pageIndex</code> { <code>GET</code>: { <code>command</code>: <code>\"getPageIndex\"</code> = 'getPageIndex'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/pageIndex.GET</code> { <code>command</code>: <code>\"getPageIndex\"</code> = 'getPageIndex'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/pageIndex.GET.command</code> <code>\"getPageIndex\"</code> <code>/session/:sessionId/element/:elementId/pageIndex.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/property/:name</code> { <code>GET</code>: { <code>command</code>: <code>\"getProperty\"</code> = 'getProperty' }  } <code>/session/:sessionId/element/:elementId/property/:name.GET</code> { <code>command</code>: <code>\"getProperty\"</code> = 'getProperty' } <code>/session/:sessionId/element/:elementId/property/:name.GET.command</code> <code>\"getProperty\"</code> <code>/session/:sessionId/element/:elementId/rect</code> { <code>GET</code>: { <code>command</code>: <code>\"getElementRect\"</code> = 'getElementRect' }  } <code>/session/:sessionId/element/:elementId/rect.GET</code> { <code>command</code>: <code>\"getElementRect\"</code> = 'getElementRect' } <code>/session/:sessionId/element/:elementId/rect.GET.command</code> <code>\"getElementRect\"</code> <code>/session/:sessionId/element/:elementId/screenshot</code> { <code>GET</code>: { <code>command</code>: <code>\"getElementScreenshot\"</code> = 'getElementScreenshot' }  } <code>/session/:sessionId/element/:elementId/screenshot.GET</code> { <code>command</code>: <code>\"getElementScreenshot\"</code> = 'getElementScreenshot' } <code>/session/:sessionId/element/:elementId/screenshot.GET.command</code> <code>\"getElementScreenshot\"</code> <code>/session/:sessionId/element/:elementId/selected</code> { <code>GET</code>: { <code>command</code>: <code>\"elementSelected\"</code> = 'elementSelected' }  } <code>/session/:sessionId/element/:elementId/selected.GET</code> { <code>command</code>: <code>\"elementSelected\"</code> = 'elementSelected' } <code>/session/:sessionId/element/:elementId/selected.GET.command</code> <code>\"elementSelected\"</code> <code>/session/:sessionId/element/:elementId/shadow</code> { <code>GET</code>: { <code>command</code>: <code>\"elementShadowRoot\"</code> = 'elementShadowRoot' }  } <code>/session/:sessionId/element/:elementId/shadow.GET</code> { <code>command</code>: <code>\"elementShadowRoot\"</code> = 'elementShadowRoot' } <code>/session/:sessionId/element/:elementId/shadow.GET.command</code> <code>\"elementShadowRoot\"</code> <code>/session/:sessionId/element/:elementId/size</code> { <code>GET</code>: { <code>command</code>: <code>\"getSize\"</code> = 'getSize'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/size.GET</code> { <code>command</code>: <code>\"getSize\"</code> = 'getSize'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/size.GET.command</code> <code>\"getSize\"</code> <code>/session/:sessionId/element/:elementId/size.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/submit</code> { <code>POST</code>: { <code>command</code>: <code>\"submit\"</code> = 'submit'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/element/:elementId/submit.POST</code> { <code>command</code>: <code>\"submit\"</code> = 'submit'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/element/:elementId/submit.POST.command</code> <code>\"submit\"</code> <code>/session/:sessionId/element/:elementId/submit.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/element/:elementId/text</code> { <code>GET</code>: { <code>command</code>: <code>\"getText\"</code> = 'getText' }  } <code>/session/:sessionId/element/:elementId/text.GET</code> { <code>command</code>: <code>\"getText\"</code> = 'getText' } <code>/session/:sessionId/element/:elementId/text.GET.command</code> <code>\"getText\"</code> <code>/session/:sessionId/element/:elementId/value</code> { <code>POST</code>: { <code>command</code>: <code>\"setValue\"</code> = 'setValue'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"value\"</code>, <code>\"text\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"text\\\" or \\\"value\\\" params\"</code>  }  }  } <code>/session/:sessionId/element/:elementId/value.POST</code> { <code>command</code>: <code>\"setValue\"</code> = 'setValue'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"value\"</code>, <code>\"text\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"text\\\" or \\\"value\\\" params\"</code>  }  } <code>/session/:sessionId/element/:elementId/value.POST.command</code> <code>\"setValue\"</code> <code>/session/:sessionId/element/:elementId/value.POST.payloadParams</code> { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"value\"</code>, <code>\"text\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"text\\\" or \\\"value\\\" params\"</code>  } <code>/session/:sessionId/element/:elementId/value.POST.payloadParams.makeArgs</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] <code>/session/:sessionId/element/:elementId/value.POST.payloadParams.optional</code> readonly [<code>\"value\"</code>, <code>\"text\"</code>] <code>/session/:sessionId/element/:elementId/value.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"text\\\" or \\\"value\\\" params\"</code> <code>/session/:sessionId/element/active</code> { <code>GET</code>: { <code>command</code>: <code>\"active\"</code> = 'active' } ; <code>POST</code>: { <code>command</code>: <code>\"active\"</code> = 'active' }  } <code>/session/:sessionId/element/active.GET</code> { <code>command</code>: <code>\"active\"</code> = 'active' } <code>/session/:sessionId/element/active.GET.command</code> <code>\"active\"</code> <code>/session/:sessionId/element/active.POST</code> { <code>command</code>: <code>\"active\"</code> = 'active' } <code>/session/:sessionId/element/active.POST.command</code> <code>\"active\"</code> <code>/session/:sessionId/elements</code> { <code>POST</code>: { <code>command</code>: <code>\"findElements\"</code> = 'findElements'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/elements.POST</code> { <code>command</code>: <code>\"findElements\"</code> = 'findElements'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/elements.POST.command</code> <code>\"findElements\"</code> <code>/session/:sessionId/elements.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/elements.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/execute</code> { <code>POST</code>: { <code>command</code>: <code>\"execute\"</code> = 'execute'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  }  } <code>/session/:sessionId/execute.POST</code> { <code>command</code>: <code>\"execute\"</code> = 'execute'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  } <code>/session/:sessionId/execute.POST.command</code> <code>\"execute\"</code> <code>/session/:sessionId/execute.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  } <code>/session/:sessionId/execute.POST.payloadParams.required</code> readonly [<code>\"script\"</code>, <code>\"args\"</code>] <code>/session/:sessionId/execute/async</code> { <code>POST</code>: { <code>command</code>: <code>\"executeAsync\"</code> = 'executeAsync'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  }  } <code>/session/:sessionId/execute/async.POST</code> { <code>command</code>: <code>\"executeAsync\"</code> = 'executeAsync'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  } <code>/session/:sessionId/execute/async.POST.command</code> <code>\"executeAsync\"</code> <code>/session/:sessionId/execute/async.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  } <code>/session/:sessionId/execute/async.POST.payloadParams.required</code> readonly [<code>\"script\"</code>, <code>\"args\"</code>] <code>/session/:sessionId/execute/sync</code> { <code>POST</code>: { <code>command</code>: <code>\"execute\"</code> = 'execute'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  }  } <code>/session/:sessionId/execute/sync.POST</code> { <code>command</code>: <code>\"execute\"</code> = 'execute'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  } <code>/session/:sessionId/execute/sync.POST.command</code> <code>\"execute\"</code> <code>/session/:sessionId/execute/sync.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  } <code>/session/:sessionId/execute/sync.POST.payloadParams.required</code> readonly [<code>\"script\"</code>, <code>\"args\"</code>] <code>/session/:sessionId/execute_async</code> { <code>POST</code>: { <code>command</code>: <code>\"executeAsync\"</code> = 'executeAsync'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  }  } <code>/session/:sessionId/execute_async.POST</code> { <code>command</code>: <code>\"executeAsync\"</code> = 'executeAsync'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  }  } <code>/session/:sessionId/execute_async.POST.command</code> <code>\"executeAsync\"</code> <code>/session/:sessionId/execute_async.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"script\"</code>, <code>\"args\"</code>]  } <code>/session/:sessionId/execute_async.POST.payloadParams.required</code> readonly [<code>\"script\"</code>, <code>\"args\"</code>] <code>/session/:sessionId/forward</code> { <code>POST</code>: { <code>command</code>: <code>\"forward\"</code> = 'forward' }  } <code>/session/:sessionId/forward.POST</code> { <code>command</code>: <code>\"forward\"</code> = 'forward' } <code>/session/:sessionId/forward.POST.command</code> <code>\"forward\"</code> <code>/session/:sessionId/frame</code> { <code>POST</code>: { <code>command</code>: <code>\"setFrame\"</code> = 'setFrame'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"id\"</code>]  }  }  } <code>/session/:sessionId/frame.POST</code> { <code>command</code>: <code>\"setFrame\"</code> = 'setFrame'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"id\"</code>]  }  } <code>/session/:sessionId/frame.POST.command</code> <code>\"setFrame\"</code> <code>/session/:sessionId/frame.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"id\"</code>]  } <code>/session/:sessionId/frame.POST.payloadParams.required</code> readonly [<code>\"id\"</code>] <code>/session/:sessionId/frame/parent</code> { <code>POST</code>: { <code>command</code>: <code>\"switchToParentFrame\"</code> = 'switchToParentFrame' }  } <code>/session/:sessionId/frame/parent.POST</code> { <code>command</code>: <code>\"switchToParentFrame\"</code> = 'switchToParentFrame' } <code>/session/:sessionId/frame/parent.POST.command</code> <code>\"switchToParentFrame\"</code> <code>/session/:sessionId/ime/activate</code> { <code>POST</code>: { <code>command</code>: <code>\"activateIMEEngine\"</code> = 'activateIMEEngine'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"engine\"</code>]  }  }  } <code>/session/:sessionId/ime/activate.POST</code> { <code>command</code>: <code>\"activateIMEEngine\"</code> = 'activateIMEEngine'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"engine\"</code>]  }  } <code>/session/:sessionId/ime/activate.POST.command</code> <code>\"activateIMEEngine\"</code> <code>/session/:sessionId/ime/activate.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/ime/activate.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"engine\"</code>]  } <code>/session/:sessionId/ime/activate.POST.payloadParams.required</code> readonly [<code>\"engine\"</code>] <code>/session/:sessionId/ime/activated</code> { <code>GET</code>: { <code>command</code>: <code>\"isIMEActivated\"</code> = 'isIMEActivated'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/ime/activated.GET</code> { <code>command</code>: <code>\"isIMEActivated\"</code> = 'isIMEActivated'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/ime/activated.GET.command</code> <code>\"isIMEActivated\"</code> <code>/session/:sessionId/ime/activated.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/ime/active_engine</code> { <code>GET</code>: { <code>command</code>: <code>\"getActiveIMEEngine\"</code> = 'getActiveIMEEngine'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/ime/active_engine.GET</code> { <code>command</code>: <code>\"getActiveIMEEngine\"</code> = 'getActiveIMEEngine'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/ime/active_engine.GET.command</code> <code>\"getActiveIMEEngine\"</code> <code>/session/:sessionId/ime/active_engine.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/ime/available_engines</code> { <code>GET</code>: { <code>command</code>: <code>\"availableIMEEngines\"</code> = 'availableIMEEngines'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/ime/available_engines.GET</code> { <code>command</code>: <code>\"availableIMEEngines\"</code> = 'availableIMEEngines'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/ime/available_engines.GET.command</code> <code>\"availableIMEEngines\"</code> <code>/session/:sessionId/ime/available_engines.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/ime/deactivate</code> { <code>POST</code>: { <code>command</code>: <code>\"deactivateIMEEngine\"</code> = 'deactivateIMEEngine'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/ime/deactivate.POST</code> { <code>command</code>: <code>\"deactivateIMEEngine\"</code> = 'deactivateIMEEngine'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/ime/deactivate.POST.command</code> <code>\"deactivateIMEEngine\"</code> <code>/session/:sessionId/ime/deactivate.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/keys</code> { <code>POST</code>: { <code>command</code>: <code>\"keys\"</code> = 'keys'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"value\"</code>]  }  }  } <code>/session/:sessionId/keys.POST</code> { <code>command</code>: <code>\"keys\"</code> = 'keys'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"value\"</code>]  }  } <code>/session/:sessionId/keys.POST.command</code> <code>\"keys\"</code> <code>/session/:sessionId/keys.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/keys.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"value\"</code>]  } <code>/session/:sessionId/keys.POST.payloadParams.required</code> readonly [<code>\"value\"</code>] <code>/session/:sessionId/local_storage</code> { <code>DELETE</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>POST</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/local_storage.DELETE</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage.DELETE.deprecated</code> <code>true</code> <code>/session/:sessionId/local_storage.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/local_storage.POST</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/local_storage/key/:key</code> { <code>DELETE</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/local_storage/key/:key.DELETE</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage/key/:key.DELETE.deprecated</code> <code>true</code> <code>/session/:sessionId/local_storage/key/:key.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage/key/:key.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/local_storage/size</code> { <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/local_storage/size.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/local_storage/size.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/location</code> { <code>GET</code>: { <code>command</code>: <code>\"getGeoLocation\"</code> = 'getGeoLocation' } ; <code>POST</code>: { <code>command</code>: <code>\"setGeoLocation\"</code> = 'setGeoLocation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"location\"</code>]  }  }  } <code>/session/:sessionId/location.GET</code> { <code>command</code>: <code>\"getGeoLocation\"</code> = 'getGeoLocation' } <code>/session/:sessionId/location.GET.command</code> <code>\"getGeoLocation\"</code> <code>/session/:sessionId/location.POST</code> { <code>command</code>: <code>\"setGeoLocation\"</code> = 'setGeoLocation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"location\"</code>]  }  } <code>/session/:sessionId/location.POST.command</code> <code>\"setGeoLocation\"</code> <code>/session/:sessionId/location.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"location\"</code>]  } <code>/session/:sessionId/location.POST.payloadParams.required</code> readonly [<code>\"location\"</code>] <code>/session/:sessionId/log</code> { <code>POST</code>: { <code>command</code>: <code>\"getLog\"</code> = 'getLog'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>]  }  }  } <code>/session/:sessionId/log.POST</code> { <code>command</code>: <code>\"getLog\"</code> = 'getLog'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>]  }  } <code>/session/:sessionId/log.POST.command</code> <code>\"getLog\"</code> <code>/session/:sessionId/log.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"type\"</code>]  } <code>/session/:sessionId/log.POST.payloadParams.required</code> readonly [<code>\"type\"</code>] <code>/session/:sessionId/log/types</code> { <code>GET</code>: { <code>command</code>: <code>\"getLogTypes\"</code> = 'getLogTypes' }  } <code>/session/:sessionId/log/types.GET</code> { <code>command</code>: <code>\"getLogTypes\"</code> = 'getLogTypes' } <code>/session/:sessionId/log/types.GET.command</code> <code>\"getLogTypes\"</code> <code>/session/:sessionId/moveto</code> { <code>POST</code>: { <code>command</code>: <code>\"moveTo\"</code> = 'moveTo'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>]  }  }  } <code>/session/:sessionId/moveto.POST</code> { <code>command</code>: <code>\"moveTo\"</code> = 'moveTo'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>]  }  } <code>/session/:sessionId/moveto.POST.command</code> <code>\"moveTo\"</code> <code>/session/:sessionId/moveto.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/moveto.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>]  } <code>/session/:sessionId/moveto.POST.payloadParams.optional</code> readonly [<code>\"element\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>] <code>/session/:sessionId/network_connection</code> { <code>GET</code>: { <code>command</code>: <code>\"getNetworkConnection\"</code> = 'getNetworkConnection' } ; <code>POST</code>: { <code>command</code>: <code>\"setNetworkConnection\"</code> = 'setNetworkConnection'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>] ; <code>unwrap</code>: <code>\"parameters\"</code> = 'parameters' }  }  } <code>/session/:sessionId/network_connection.GET</code> { <code>command</code>: <code>\"getNetworkConnection\"</code> = 'getNetworkConnection' } <code>/session/:sessionId/network_connection.GET.command</code> <code>\"getNetworkConnection\"</code> <code>/session/:sessionId/network_connection.POST</code> { <code>command</code>: <code>\"setNetworkConnection\"</code> = 'setNetworkConnection'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>] ; <code>unwrap</code>: <code>\"parameters\"</code> = 'parameters' }  } <code>/session/:sessionId/network_connection.POST.command</code> <code>\"setNetworkConnection\"</code> <code>/session/:sessionId/network_connection.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"type\"</code>] ; <code>unwrap</code>: <code>\"parameters\"</code> = 'parameters' } <code>/session/:sessionId/network_connection.POST.payloadParams.required</code> readonly [<code>\"type\"</code>] <code>/session/:sessionId/network_connection.POST.payloadParams.unwrap</code> <code>\"parameters\"</code> <code>/session/:sessionId/orientation</code> { <code>GET</code>: { <code>command</code>: <code>\"getOrientation\"</code> = 'getOrientation' } ; <code>POST</code>: { <code>command</code>: <code>\"setOrientation\"</code> = 'setOrientation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"orientation\"</code>]  }  }  } <code>/session/:sessionId/orientation.GET</code> { <code>command</code>: <code>\"getOrientation\"</code> = 'getOrientation' } <code>/session/:sessionId/orientation.GET.command</code> <code>\"getOrientation\"</code> <code>/session/:sessionId/orientation.POST</code> { <code>command</code>: <code>\"setOrientation\"</code> = 'setOrientation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"orientation\"</code>]  }  } <code>/session/:sessionId/orientation.POST.command</code> <code>\"setOrientation\"</code> <code>/session/:sessionId/orientation.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"orientation\"</code>]  } <code>/session/:sessionId/orientation.POST.payloadParams.required</code> readonly [<code>\"orientation\"</code>] <code>/session/:sessionId/receive_async_response</code> { <code>POST</code>: { <code>command</code>: <code>\"receiveAsyncResponse\"</code> = 'receiveAsyncResponse'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"status\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/receive_async_response.POST</code> { <code>command</code>: <code>\"receiveAsyncResponse\"</code> = 'receiveAsyncResponse'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"status\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/receive_async_response.POST.command</code> <code>\"receiveAsyncResponse\"</code> <code>/session/:sessionId/receive_async_response.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"status\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/receive_async_response.POST.payloadParams.required</code> readonly [<code>\"status\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/refresh</code> { <code>POST</code>: { <code>command</code>: <code>\"refresh\"</code> = 'refresh' }  } <code>/session/:sessionId/refresh.POST</code> { <code>command</code>: <code>\"refresh\"</code> = 'refresh' } <code>/session/:sessionId/refresh.POST.command</code> <code>\"refresh\"</code> <code>/session/:sessionId/rotation</code> { <code>GET</code>: { <code>command</code>: <code>\"getRotation\"</code> = 'getRotation' } ; <code>POST</code>: { <code>command</code>: <code>\"setRotation\"</code> = 'setRotation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"z\"</code>]  }  }  } <code>/session/:sessionId/rotation.GET</code> { <code>command</code>: <code>\"getRotation\"</code> = 'getRotation' } <code>/session/:sessionId/rotation.GET.command</code> <code>\"getRotation\"</code> <code>/session/:sessionId/rotation.POST</code> { <code>command</code>: <code>\"setRotation\"</code> = 'setRotation'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"z\"</code>]  }  } <code>/session/:sessionId/rotation.POST.command</code> <code>\"setRotation\"</code> <code>/session/:sessionId/rotation.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"z\"</code>]  } <code>/session/:sessionId/rotation.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"z\"</code>] <code>/session/:sessionId/screenshot</code> { <code>GET</code>: { <code>command</code>: <code>\"getScreenshot\"</code> = 'getScreenshot' }  } <code>/session/:sessionId/screenshot.GET</code> { <code>command</code>: <code>\"getScreenshot\"</code> = 'getScreenshot' } <code>/session/:sessionId/screenshot.GET.command</code> <code>\"getScreenshot\"</code> <code>/session/:sessionId/screenshot/:elementId</code> { <code>GET</code>: { <code>command</code>: <code>\"getElementScreenshot\"</code> = 'getElementScreenshot' }  } <code>/session/:sessionId/screenshot/:elementId.GET</code> { <code>command</code>: <code>\"getElementScreenshot\"</code> = 'getElementScreenshot' } <code>/session/:sessionId/screenshot/:elementId.GET.command</code> <code>\"getElementScreenshot\"</code> <code>/session/:sessionId/se/log</code> { <code>POST</code>: { <code>command</code>: <code>\"getLog\"</code> = 'getLog'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>]  }  }  } <code>/session/:sessionId/se/log.POST</code> { <code>command</code>: <code>\"getLog\"</code> = 'getLog'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"type\"</code>]  }  } <code>/session/:sessionId/se/log.POST.command</code> <code>\"getLog\"</code> <code>/session/:sessionId/se/log.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"type\"</code>]  } <code>/session/:sessionId/se/log.POST.payloadParams.required</code> readonly [<code>\"type\"</code>] <code>/session/:sessionId/se/log/types</code> { <code>GET</code>: { <code>command</code>: <code>\"getLogTypes\"</code> = 'getLogTypes' }  } <code>/session/:sessionId/se/log/types.GET</code> { <code>command</code>: <code>\"getLogTypes\"</code> = 'getLogTypes' } <code>/session/:sessionId/se/log/types.GET.command</code> <code>\"getLogTypes\"</code> <code>/session/:sessionId/session_storage</code> { <code>DELETE</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>POST</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/session_storage.DELETE</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage.DELETE.deprecated</code> <code>true</code> <code>/session/:sessionId/session_storage.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/session_storage.POST</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/session_storage/key/:key</code> { <code>DELETE</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/session_storage/key/:key.DELETE</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage/key/:key.DELETE.deprecated</code> <code>true</code> <code>/session/:sessionId/session_storage/key/:key.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage/key/:key.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/session_storage/size</code> { <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/session_storage/size.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/session_storage/size.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/shadow/:shadowId/element</code> { <code>POST</code>: { <code>command</code>: <code>\"findElementFromShadowRoot\"</code> = 'findElementFromShadowRoot'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/shadow/:shadowId/element.POST</code> { <code>command</code>: <code>\"findElementFromShadowRoot\"</code> = 'findElementFromShadowRoot'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/shadow/:shadowId/element.POST.command</code> <code>\"findElementFromShadowRoot\"</code> <code>/session/:sessionId/shadow/:shadowId/element.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/shadow/:shadowId/element.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/shadow/:shadowId/elements</code> { <code>POST</code>: { <code>command</code>: <code>\"findElementsFromShadowRoot\"</code> = 'findElementsFromShadowRoot'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  }  } <code>/session/:sessionId/shadow/:shadowId/elements.POST</code> { <code>command</code>: <code>\"findElementsFromShadowRoot\"</code> = 'findElementsFromShadowRoot'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  }  } <code>/session/:sessionId/shadow/:shadowId/elements.POST.command</code> <code>\"findElementsFromShadowRoot\"</code> <code>/session/:sessionId/shadow/:shadowId/elements.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"using\"</code>, <code>\"value\"</code>]  } <code>/session/:sessionId/shadow/:shadowId/elements.POST.payloadParams.required</code> readonly [<code>\"using\"</code>, <code>\"value\"</code>] <code>/session/:sessionId/source</code> { <code>GET</code>: { <code>command</code>: <code>\"getPageSource\"</code> = 'getPageSource' }  } <code>/session/:sessionId/source.GET</code> { <code>command</code>: <code>\"getPageSource\"</code> = 'getPageSource' } <code>/session/:sessionId/source.GET.command</code> <code>\"getPageSource\"</code> <code>/session/:sessionId/timeouts</code> { <code>GET</code>: { <code>command</code>: <code>\"getTimeouts\"</code> = 'getTimeouts' } ; <code>POST</code>: { <code>command</code>: <code>\"timeouts\"</code> = 'timeouts'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"ms\"</code>, <code>\"script\"</code>, <code>\"pageLoad\"</code>, <code>\"implicit\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>, <code>protocolName</code>: <code>string</code>) =&gt; <code>undefined</code> | <code>\"W3C protocol expects any of script, pageLoad or implicit to be set\"</code> | <code>\"MJSONWP protocol requires type and ms\"</code>  }  }  } <code>/session/:sessionId/timeouts.GET</code> { <code>command</code>: <code>\"getTimeouts\"</code> = 'getTimeouts' } <code>/session/:sessionId/timeouts.GET.command</code> <code>\"getTimeouts\"</code> <code>/session/:sessionId/timeouts.POST</code> { <code>command</code>: <code>\"timeouts\"</code> = 'timeouts'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"ms\"</code>, <code>\"script\"</code>, <code>\"pageLoad\"</code>, <code>\"implicit\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>, <code>protocolName</code>: <code>string</code>) =&gt; <code>undefined</code> | <code>\"W3C protocol expects any of script, pageLoad or implicit to be set\"</code> | <code>\"MJSONWP protocol requires type and ms\"</code>  }  } <code>/session/:sessionId/timeouts.POST.command</code> <code>\"timeouts\"</code> <code>/session/:sessionId/timeouts.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"type\"</code>, <code>\"ms\"</code>, <code>\"script\"</code>, <code>\"pageLoad\"</code>, <code>\"implicit\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>, <code>protocolName</code>: <code>string</code>) =&gt; <code>undefined</code> | <code>\"W3C protocol expects any of script, pageLoad or implicit to be set\"</code> | <code>\"MJSONWP protocol requires type and ms\"</code>  } <code>/session/:sessionId/timeouts.POST.payloadParams.optional</code> readonly [<code>\"type\"</code>, <code>\"ms\"</code>, <code>\"script\"</code>, <code>\"pageLoad\"</code>, <code>\"implicit\"</code>] <code>/session/:sessionId/timeouts.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>, <code>protocolName</code>: <code>string</code>) =&gt; <code>undefined</code> | <code>\"W3C protocol expects any of script, pageLoad or implicit to be set\"</code> | <code>\"MJSONWP protocol requires type and ms\"</code> <code>/session/:sessionId/timeouts/async_script</code> { <code>POST</code>: { <code>command</code>: <code>\"asyncScriptTimeout\"</code> = 'asyncScriptTimeout'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"ms\"</code>]  }  }  } <code>/session/:sessionId/timeouts/async_script.POST</code> { <code>command</code>: <code>\"asyncScriptTimeout\"</code> = 'asyncScriptTimeout'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"ms\"</code>]  }  } <code>/session/:sessionId/timeouts/async_script.POST.command</code> <code>\"asyncScriptTimeout\"</code> <code>/session/:sessionId/timeouts/async_script.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/timeouts/async_script.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"ms\"</code>]  } <code>/session/:sessionId/timeouts/async_script.POST.payloadParams.required</code> readonly [<code>\"ms\"</code>] <code>/session/:sessionId/timeouts/implicit_wait</code> { <code>POST</code>: { <code>command</code>: <code>\"implicitWait\"</code> = 'implicitWait'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"ms\"</code>]  }  }  } <code>/session/:sessionId/timeouts/implicit_wait.POST</code> { <code>command</code>: <code>\"implicitWait\"</code> = 'implicitWait'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"ms\"</code>]  }  } <code>/session/:sessionId/timeouts/implicit_wait.POST.command</code> <code>\"implicitWait\"</code> <code>/session/:sessionId/timeouts/implicit_wait.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/timeouts/implicit_wait.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"ms\"</code>]  } <code>/session/:sessionId/timeouts/implicit_wait.POST.payloadParams.required</code> readonly [<code>\"ms\"</code>] <code>/session/:sessionId/title</code> { <code>GET</code>: { <code>command</code>: <code>\"title\"</code> = 'title' }  } <code>/session/:sessionId/title.GET</code> { <code>command</code>: <code>\"title\"</code> = 'title' } <code>/session/:sessionId/title.GET.command</code> <code>\"title\"</code> <code>/session/:sessionId/touch/click</code> { <code>POST</code>: { <code>command</code>: <code>\"click\"</code> = 'click'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"element\"</code>]  }  }  } <code>/session/:sessionId/touch/click.POST</code> { <code>command</code>: <code>\"click\"</code> = 'click'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"element\"</code>]  }  } <code>/session/:sessionId/touch/click.POST.command</code> <code>\"click\"</code> <code>/session/:sessionId/touch/click.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/click.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"element\"</code>]  } <code>/session/:sessionId/touch/click.POST.payloadParams.required</code> readonly [<code>\"element\"</code>] <code>/session/:sessionId/touch/doubleclick</code> { <code>POST</code>: {} = {} } <code>/session/:sessionId/touch/doubleclick.POST</code> {} <code>/session/:sessionId/touch/down</code> { <code>POST</code>: { <code>command</code>: <code>\"touchDown\"</code> = 'touchDown'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  }  } <code>/session/:sessionId/touch/down.POST</code> { <code>command</code>: <code>\"touchDown\"</code> = 'touchDown'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  } <code>/session/:sessionId/touch/down.POST.command</code> <code>\"touchDown\"</code> <code>/session/:sessionId/touch/down.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/down.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  } <code>/session/:sessionId/touch/down.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>] <code>/session/:sessionId/touch/flick</code> { <code>POST</code>: { <code>command</code>: <code>\"flick\"</code> = 'flick'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xspeed\"</code>, <code>\"yspeed\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>, <code>\"speed\"</code>]  }  }  } <code>/session/:sessionId/touch/flick.POST</code> { <code>command</code>: <code>\"flick\"</code> = 'flick'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xspeed\"</code>, <code>\"yspeed\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>, <code>\"speed\"</code>]  }  } <code>/session/:sessionId/touch/flick.POST.command</code> <code>\"flick\"</code> <code>/session/:sessionId/touch/flick.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/flick.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"element\"</code>, <code>\"xspeed\"</code>, <code>\"yspeed\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>, <code>\"speed\"</code>]  } <code>/session/:sessionId/touch/flick.POST.payloadParams.optional</code> readonly [<code>\"element\"</code>, <code>\"xspeed\"</code>, <code>\"yspeed\"</code>, <code>\"xoffset\"</code>, <code>\"yoffset\"</code>, <code>\"speed\"</code>] <code>/session/:sessionId/touch/longclick</code> { <code>POST</code>: { <code>command</code>: <code>\"touchLongClick\"</code> = 'touchLongClick'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"elements\"</code>]  }  }  } <code>/session/:sessionId/touch/longclick.POST</code> { <code>command</code>: <code>\"touchLongClick\"</code> = 'touchLongClick'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"elements\"</code>]  }  } <code>/session/:sessionId/touch/longclick.POST.command</code> <code>\"touchLongClick\"</code> <code>/session/:sessionId/touch/longclick.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/longclick.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"elements\"</code>]  } <code>/session/:sessionId/touch/longclick.POST.payloadParams.required</code> readonly [<code>\"elements\"</code>] <code>/session/:sessionId/touch/move</code> { <code>POST</code>: { <code>command</code>: <code>\"touchMove\"</code> = 'touchMove'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  }  } <code>/session/:sessionId/touch/move.POST</code> { <code>command</code>: <code>\"touchMove\"</code> = 'touchMove'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  } <code>/session/:sessionId/touch/move.POST.command</code> <code>\"touchMove\"</code> <code>/session/:sessionId/touch/move.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/move.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  } <code>/session/:sessionId/touch/move.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>] <code>/session/:sessionId/touch/multi/perform</code> { <code>POST</code>: { <code>command</code>: <code>\"performMultiAction\"</code> = 'performMultiAction'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"elementId\"</code>] ; <code>required</code>: readonly [<code>\"actions\"</code>]  }  }  } <code>/session/:sessionId/touch/multi/perform.POST</code> { <code>command</code>: <code>\"performMultiAction\"</code> = 'performMultiAction'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"elementId\"</code>] ; <code>required</code>: readonly [<code>\"actions\"</code>]  }  } <code>/session/:sessionId/touch/multi/perform.POST.command</code> <code>\"performMultiAction\"</code> <code>/session/:sessionId/touch/multi/perform.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/multi/perform.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"elementId\"</code>] ; <code>required</code>: readonly [<code>\"actions\"</code>]  } <code>/session/:sessionId/touch/multi/perform.POST.payloadParams.optional</code> readonly [<code>\"elementId\"</code>] <code>/session/:sessionId/touch/multi/perform.POST.payloadParams.required</code> readonly [<code>\"actions\"</code>] <code>/session/:sessionId/touch/perform</code> { <code>POST</code>: { <code>command</code>: <code>\"performTouch\"</code> = 'performTouch'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"actions\"</code>] ; <code>wrap</code>: <code>\"actions\"</code> = 'actions' }  }  } <code>/session/:sessionId/touch/perform.POST</code> { <code>command</code>: <code>\"performTouch\"</code> = 'performTouch'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"actions\"</code>] ; <code>wrap</code>: <code>\"actions\"</code> = 'actions' }  } <code>/session/:sessionId/touch/perform.POST.command</code> <code>\"performTouch\"</code> <code>/session/:sessionId/touch/perform.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/perform.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"actions\"</code>] ; <code>wrap</code>: <code>\"actions\"</code> = 'actions' } <code>/session/:sessionId/touch/perform.POST.payloadParams.required</code> readonly [<code>\"actions\"</code>] <code>/session/:sessionId/touch/perform.POST.payloadParams.wrap</code> <code>\"actions\"</code> <code>/session/:sessionId/touch/scroll</code> { <code>POST</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/touch/scroll.POST</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/touch/scroll.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/up</code> { <code>POST</code>: { <code>command</code>: <code>\"touchUp\"</code> = 'touchUp'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  }  } <code>/session/:sessionId/touch/up.POST</code> { <code>command</code>: <code>\"touchUp\"</code> = 'touchUp'; <code>deprecated</code>: <code>true</code> = true; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  }  } <code>/session/:sessionId/touch/up.POST.command</code> <code>\"touchUp\"</code> <code>/session/:sessionId/touch/up.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/touch/up.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>]  } <code>/session/:sessionId/touch/up.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>] <code>/session/:sessionId/url</code> { <code>GET</code>: { <code>command</code>: <code>\"getUrl\"</code> = 'getUrl' } ; <code>POST</code>: { <code>command</code>: <code>\"setUrl\"</code> = 'setUrl'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"url\"</code>]  }  }  } <code>/session/:sessionId/url.GET</code> { <code>command</code>: <code>\"getUrl\"</code> = 'getUrl' } <code>/session/:sessionId/url.GET.command</code> <code>\"getUrl\"</code> <code>/session/:sessionId/url.POST</code> { <code>command</code>: <code>\"setUrl\"</code> = 'setUrl'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"url\"</code>]  }  } <code>/session/:sessionId/url.POST.command</code> <code>\"setUrl\"</code> <code>/session/:sessionId/url.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"url\"</code>]  } <code>/session/:sessionId/url.POST.payloadParams.required</code> readonly [<code>\"url\"</code>] <code>/session/:sessionId/webauthn/authenticator</code> { <code>POST</code>: { <code>command</code>: <code>\"addVirtualAuthenticator\"</code> = 'addVirtualAuthenticator'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"hasResidentKey\"</code>, <code>\"hasUserVerification\"</code>, <code>\"isUserConsenting\"</code>, <code>\"isUserVerified\"</code>] ; <code>required</code>: readonly [<code>\"protocol\"</code>, <code>\"transport\"</code>]  }  }  } <code>/session/:sessionId/webauthn/authenticator.POST</code> { <code>command</code>: <code>\"addVirtualAuthenticator\"</code> = 'addVirtualAuthenticator'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"hasResidentKey\"</code>, <code>\"hasUserVerification\"</code>, <code>\"isUserConsenting\"</code>, <code>\"isUserVerified\"</code>] ; <code>required</code>: readonly [<code>\"protocol\"</code>, <code>\"transport\"</code>]  }  } <code>/session/:sessionId/webauthn/authenticator.POST.command</code> <code>\"addVirtualAuthenticator\"</code> <code>/session/:sessionId/webauthn/authenticator.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"hasResidentKey\"</code>, <code>\"hasUserVerification\"</code>, <code>\"isUserConsenting\"</code>, <code>\"isUserVerified\"</code>] ; <code>required</code>: readonly [<code>\"protocol\"</code>, <code>\"transport\"</code>]  } <code>/session/:sessionId/webauthn/authenticator.POST.payloadParams.optional</code> readonly [<code>\"hasResidentKey\"</code>, <code>\"hasUserVerification\"</code>, <code>\"isUserConsenting\"</code>, <code>\"isUserVerified\"</code>] <code>/session/:sessionId/webauthn/authenticator.POST.payloadParams.required</code> readonly [<code>\"protocol\"</code>, <code>\"transport\"</code>] <code>/session/:sessionId/webauthn/authenticator/:authenticatorId</code> { <code>DELETE</code>: { <code>command</code>: <code>\"removeVirtualAuthenticator\"</code> = 'removeVirtualAuthenticator' }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId.DELETE</code> { <code>command</code>: <code>\"removeVirtualAuthenticator\"</code> = 'removeVirtualAuthenticator' } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId.DELETE.command</code> <code>\"removeVirtualAuthenticator\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential</code> { <code>POST</code>: { <code>command</code>: <code>\"addAuthCredential\"</code> = 'addAuthCredential'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"userHandle\"</code>, <code>\"signCount\"</code>] ; <code>required</code>: readonly [<code>\"credentialId\"</code>, <code>\"isResidentCredential\"</code>, <code>\"rpId\"</code>, <code>\"privateKey\"</code>]  }  }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential.POST</code> { <code>command</code>: <code>\"addAuthCredential\"</code> = 'addAuthCredential'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"userHandle\"</code>, <code>\"signCount\"</code>] ; <code>required</code>: readonly [<code>\"credentialId\"</code>, <code>\"isResidentCredential\"</code>, <code>\"rpId\"</code>, <code>\"privateKey\"</code>]  }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential.POST.command</code> <code>\"addAuthCredential\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"userHandle\"</code>, <code>\"signCount\"</code>] ; <code>required</code>: readonly [<code>\"credentialId\"</code>, <code>\"isResidentCredential\"</code>, <code>\"rpId\"</code>, <code>\"privateKey\"</code>]  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential.POST.payloadParams.optional</code> readonly [<code>\"userHandle\"</code>, <code>\"signCount\"</code>] <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credential.POST.payloadParams.required</code> readonly [<code>\"credentialId\"</code>, <code>\"isResidentCredential\"</code>, <code>\"rpId\"</code>, <code>\"privateKey\"</code>] <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials</code> { <code>DELETE</code>: { <code>command</code>: <code>\"removeAllAuthCredentials\"</code> = 'removeAllAuthCredentials' } ; <code>GET</code>: { <code>command</code>: <code>\"getAuthCredential\"</code> = 'getAuthCredential' }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials.DELETE</code> { <code>command</code>: <code>\"removeAllAuthCredentials\"</code> = 'removeAllAuthCredentials' } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials.DELETE.command</code> <code>\"removeAllAuthCredentials\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials.GET</code> { <code>command</code>: <code>\"getAuthCredential\"</code> = 'getAuthCredential' } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials.GET.command</code> <code>\"getAuthCredential\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials/:credentialId</code> { <code>DELETE</code>: { <code>command</code>: <code>\"removeAuthCredential\"</code> = 'removeAuthCredential' }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials/:credentialId.DELETE</code> { <code>command</code>: <code>\"removeAuthCredential\"</code> = 'removeAuthCredential' } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/credentials/:credentialId.DELETE.command</code> <code>\"removeAuthCredential\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/uv</code> { <code>POST</code>: { <code>command</code>: <code>\"setUserAuthVerified\"</code> = 'setUserAuthVerified'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"isUserVerified\"</code>]  }  }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/uv.POST</code> { <code>command</code>: <code>\"setUserAuthVerified\"</code> = 'setUserAuthVerified'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"isUserVerified\"</code>]  }  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/uv.POST.command</code> <code>\"setUserAuthVerified\"</code> <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/uv.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"isUserVerified\"</code>]  } <code>/session/:sessionId/webauthn/authenticator/:authenticatorId/uv.POST.payloadParams.required</code> readonly [<code>\"isUserVerified\"</code>] <code>/session/:sessionId/window</code> { <code>DELETE</code>: { <code>command</code>: <code>\"closeWindow\"</code> = 'closeWindow' } ; <code>GET</code>: { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' } ; <code>POST</code>: { <code>command</code>: <code>\"setWindow\"</code> = 'setWindow'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"name\"</code>, <code>\"handle\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"name\\\" or \\\"handle\\\" to be set\"</code>  }  }  } <code>/session/:sessionId/window.DELETE</code> { <code>command</code>: <code>\"closeWindow\"</code> = 'closeWindow' } <code>/session/:sessionId/window.DELETE.command</code> <code>\"closeWindow\"</code> <code>/session/:sessionId/window.GET</code> { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' } <code>/session/:sessionId/window.GET.command</code> <code>\"getWindowHandle\"</code> <code>/session/:sessionId/window.POST</code> { <code>command</code>: <code>\"setWindow\"</code> = 'setWindow'; <code>payloadParams</code>: { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"name\"</code>, <code>\"handle\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"name\\\" or \\\"handle\\\" to be set\"</code>  }  } <code>/session/:sessionId/window.POST.command</code> <code>\"setWindow\"</code> <code>/session/:sessionId/window.POST.payloadParams</code> { <code>makeArgs</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] ; <code>optional</code>: readonly [<code>\"name\"</code>, <code>\"handle\"</code>] ; <code>validate</code>: (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"name\\\" or \\\"handle\\\" to be set\"</code>  } <code>/session/:sessionId/window.POST.payloadParams.makeArgs</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>any</code>[] <code>/session/:sessionId/window.POST.payloadParams.optional</code> readonly [<code>\"name\"</code>, <code>\"handle\"</code>] <code>/session/:sessionId/window.POST.payloadParams.validate</code> (<code>jsonObj</code>: <code>any</code>) =&gt; <code>false</code> | <code>\"we require one of \\\"name\\\" or \\\"handle\\\" to be set\"</code> <code>/session/:sessionId/window/:windowhandle/maximize</code> { <code>POST</code>: { <code>command</code>: <code>\"maximizeWindow\"</code> = 'maximizeWindow' }  } <code>/session/:sessionId/window/:windowhandle/maximize.POST</code> { <code>command</code>: <code>\"maximizeWindow\"</code> = 'maximizeWindow' } <code>/session/:sessionId/window/:windowhandle/maximize.POST.command</code> <code>\"maximizeWindow\"</code> <code>/session/:sessionId/window/:windowhandle/position</code> { <code>GET</code>: { <code>deprecated</code>: <code>true</code> = true } ; <code>POST</code>: { <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/window/:windowhandle/position.GET</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/window/:windowhandle/position.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/window/:windowhandle/position.POST</code> { <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/window/:windowhandle/position.POST.deprecated</code> <code>true</code> <code>/session/:sessionId/window/:windowhandle/size</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowSize\"</code> = 'getWindowSize'; <code>deprecated</code>: <code>true</code> = true }  } <code>/session/:sessionId/window/:windowhandle/size.GET</code> { <code>command</code>: <code>\"getWindowSize\"</code> = 'getWindowSize'; <code>deprecated</code>: <code>true</code> = true } <code>/session/:sessionId/window/:windowhandle/size.GET.command</code> <code>\"getWindowSize\"</code> <code>/session/:sessionId/window/:windowhandle/size.GET.deprecated</code> <code>true</code> <code>/session/:sessionId/window/fullscreen</code> { <code>POST</code>: { <code>command</code>: <code>\"fullScreenWindow\"</code> = 'fullScreenWindow' }  } <code>/session/:sessionId/window/fullscreen.POST</code> { <code>command</code>: <code>\"fullScreenWindow\"</code> = 'fullScreenWindow' } <code>/session/:sessionId/window/fullscreen.POST.command</code> <code>\"fullScreenWindow\"</code> <code>/session/:sessionId/window/handle</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' }  } <code>/session/:sessionId/window/handle.GET</code> { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' } <code>/session/:sessionId/window/handle.GET.command</code> <code>\"getWindowHandle\"</code> <code>/session/:sessionId/window/handles</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowHandles\"</code> = 'getWindowHandles' }  } <code>/session/:sessionId/window/handles.GET</code> { <code>command</code>: <code>\"getWindowHandles\"</code> = 'getWindowHandles' } <code>/session/:sessionId/window/handles.GET.command</code> <code>\"getWindowHandles\"</code> <code>/session/:sessionId/window/maximize</code> { <code>POST</code>: { <code>command</code>: <code>\"maximizeWindow\"</code> = 'maximizeWindow' }  } <code>/session/:sessionId/window/maximize.POST</code> { <code>command</code>: <code>\"maximizeWindow\"</code> = 'maximizeWindow' } <code>/session/:sessionId/window/maximize.POST.command</code> <code>\"maximizeWindow\"</code> <code>/session/:sessionId/window/minimize</code> { <code>POST</code>: { <code>command</code>: <code>\"minimizeWindow\"</code> = 'minimizeWindow' }  } <code>/session/:sessionId/window/minimize.POST</code> { <code>command</code>: <code>\"minimizeWindow\"</code> = 'minimizeWindow' } <code>/session/:sessionId/window/minimize.POST.command</code> <code>\"minimizeWindow\"</code> <code>/session/:sessionId/window/new</code> { <code>POST</code>: { <code>command</code>: <code>\"createNewWindow\"</code> = 'createNewWindow'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>]  }  }  } <code>/session/:sessionId/window/new.POST</code> { <code>command</code>: <code>\"createNewWindow\"</code> = 'createNewWindow'; <code>payloadParams</code>: { <code>optional</code>: readonly [<code>\"type\"</code>]  }  } <code>/session/:sessionId/window/new.POST.command</code> <code>\"createNewWindow\"</code> <code>/session/:sessionId/window/new.POST.payloadParams</code> { <code>optional</code>: readonly [<code>\"type\"</code>]  } <code>/session/:sessionId/window/new.POST.payloadParams.optional</code> readonly [<code>\"type\"</code>] <code>/session/:sessionId/window/rect</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowRect\"</code> = 'getWindowRect' } ; <code>POST</code>: { <code>command</code>: <code>\"setWindowRect\"</code> = 'setWindowRect'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"width\"</code>, <code>\"height\"</code>]  }  }  } <code>/session/:sessionId/window/rect.GET</code> { <code>command</code>: <code>\"getWindowRect\"</code> = 'getWindowRect' } <code>/session/:sessionId/window/rect.GET.command</code> <code>\"getWindowRect\"</code> <code>/session/:sessionId/window/rect.POST</code> { <code>command</code>: <code>\"setWindowRect\"</code> = 'setWindowRect'; <code>payloadParams</code>: { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"width\"</code>, <code>\"height\"</code>]  }  } <code>/session/:sessionId/window/rect.POST.command</code> <code>\"setWindowRect\"</code> <code>/session/:sessionId/window/rect.POST.payloadParams</code> { <code>required</code>: readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"width\"</code>, <code>\"height\"</code>]  } <code>/session/:sessionId/window/rect.POST.payloadParams.required</code> readonly [<code>\"x\"</code>, <code>\"y\"</code>, <code>\"width\"</code>, <code>\"height\"</code>] <code>/session/:sessionId/window_handle</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' }  } <code>/session/:sessionId/window_handle.GET</code> { <code>command</code>: <code>\"getWindowHandle\"</code> = 'getWindowHandle' } <code>/session/:sessionId/window_handle.GET.command</code> <code>\"getWindowHandle\"</code> <code>/session/:sessionId/window_handles</code> { <code>GET</code>: { <code>command</code>: <code>\"getWindowHandles\"</code> = 'getWindowHandles' }  } <code>/session/:sessionId/window_handles.GET</code> { <code>command</code>: <code>\"getWindowHandles\"</code> = 'getWindowHandles' } <code>/session/:sessionId/window_handles.GET.command</code> <code>\"getWindowHandles\"</code> <code>/sessions</code> { <code>GET</code>: { <code>command</code>: <code>\"getSessions\"</code> = 'getSessions' }  } <code>/sessions.GET</code> { <code>command</code>: <code>\"getSessions\"</code> = 'getSessions' } <code>/sessions.GET.command</code> <code>\"getSessions\"</code> <code>/status</code> { <code>GET</code>: { <code>command</code>: <code>\"getStatus\"</code> = 'getStatus' }  } <code>/status.GET</code> { <code>command</code>: <code>\"getStatus\"</code> = 'getStatus' } <code>/status.GET.command</code> <code>\"getStatus\"</code> <code>session/:sessionId/element/:elementId/computedlabel</code> { <code>GET</code>: { <code>command</code>: <code>\"getComputedLabel\"</code> = 'getComputedLabel' }  } <code>session/:sessionId/element/:elementId/computedlabel.GET</code> { <code>command</code>: <code>\"getComputedLabel\"</code> = 'getComputedLabel' } <code>session/:sessionId/element/:elementId/computedlabel.GET.command</code> <code>\"getComputedLabel\"</code> <code>session/:sessionId/element/:elementId/computedrole</code> { <code>GET</code>: { <code>command</code>: <code>\"getComputedRole\"</code> = 'getComputedRole' }  } <code>session/:sessionId/element/:elementId/computedrole.GET</code> { <code>command</code>: <code>\"getComputedRole\"</code> = 'getComputedRole' } <code>session/:sessionId/element/:elementId/computedrole.GET.command</code> <code>\"getComputedRole\"</code>"},{"location":"reference/modules/appium_base_driver/#defined-in_6","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/routes.js:23</p>"},{"location":"reference/modules/appium_base_driver/#no_session_id_commands","title":"NO_SESSION_ID_COMMANDS","text":"<p>\u2022 <code>Const</code> NO_SESSION_ID_COMMANDS: <code>string</code>[]</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_7","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/routes.js:1015</p>"},{"location":"reference/modules/appium_base_driver/#prefixed_appium_opts_cap","title":"PREFIXED_APPIUM_OPTS_CAP","text":"<p>\u2022 <code>Const</code> PREFIXED_APPIUM_OPTS_CAP: <code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_8","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:10</p>"},{"location":"reference/modules/appium_base_driver/#protocols","title":"PROTOCOLS","text":"<p>\u2022 <code>Const</code> PROTOCOLS: <code>Object</code></p>"},{"location":"reference/modules/appium_base_driver/#type-declaration_1","title":"Type declaration","text":"Name Type <code>MJSONWP</code> <code>\"MJSONWP\"</code> <code>W3C</code> <code>\"W3C\"</code>"},{"location":"reference/modules/appium_base_driver/#defined-in_9","title":"Defined in","text":"<p>packages/base-driver/lib/constants.ts:13</p>"},{"location":"reference/modules/appium_base_driver/#standard_caps","title":"STANDARD_CAPS","text":"<p>\u2022 <code>Const</code> STANDARD_CAPS: <code>Readonly</code>&lt;<code>Set</code>&lt;keyof <code>StandardCapabilities</code>&gt;&gt;</p> <p>Standard, non-prefixed capabilities</p> <p><code>See</code></p> <p>https://www.w3.org/TR/webdriver/#dfn-table-of-standard-capabilities)</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_10","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:100</p>"},{"location":"reference/modules/appium_base_driver/#static_dir","title":"STATIC_DIR","text":"<p>\u2022 STATIC_DIR: <code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_11","title":"Defined in","text":"<p>packages/base-driver/lib/express/static.js:7</p>"},{"location":"reference/modules/appium_base_driver/#w3c_element_key","title":"W3C_ELEMENT_KEY","text":"<p>\u2022 <code>Const</code> W3C_ELEMENT_KEY: <code>\"element-6066-11e4-a52e-4f735466cecf\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_12","title":"Defined in","text":"<p>packages/base-driver/lib/constants.ts:12</p>"},{"location":"reference/modules/appium_base_driver/#errors","title":"errors","text":"<p>\u2022 <code>Const</code> errors: <code>Object</code></p>"},{"location":"reference/modules/appium_base_driver/#type-declaration_2","title":"Type declaration","text":"Name Type <code>BadParametersError</code> typeof <code>BadParametersError</code> <code>ElementClickInterceptedError</code> typeof <code>ElementClickInterceptedError</code> <code>ElementIsNotSelectableError</code> typeof <code>ElementIsNotSelectableError</code> <code>ElementNotInteractableError</code> typeof <code>ElementNotInteractableError</code> <code>ElementNotVisibleError</code> typeof <code>ElementNotVisibleError</code> <code>IMEEngineActivationFailedError</code> typeof <code>IMEEngineActivationFailedError</code> <code>IMENotAvailableError</code> typeof <code>IMENotAvailableError</code> <code>InsecureCertificateError</code> typeof <code>InsecureCertificateError</code> <code>InvalidArgumentError</code> typeof <code>InvalidArgumentError</code> <code>InvalidContextError</code> typeof <code>InvalidContextError</code> <code>InvalidCookieDomainError</code> typeof <code>InvalidCookieDomainError</code> <code>InvalidCoordinatesError</code> typeof <code>InvalidCoordinatesError</code> <code>InvalidElementCoordinatesError</code> typeof <code>InvalidElementCoordinatesError</code> <code>InvalidElementStateError</code> typeof <code>InvalidElementStateError</code> <code>InvalidSelectorError</code> typeof <code>InvalidSelectorError</code> <code>JavaScriptError</code> typeof <code>JavaScriptError</code> <code>MoveTargetOutOfBoundsError</code> typeof <code>MoveTargetOutOfBoundsError</code> <code>NoAlertOpenError</code> typeof <code>NoAlertOpenError</code> <code>NoSuchAlertError</code> typeof <code>NoSuchAlertError</code> <code>NoSuchContextError</code> typeof <code>NoSuchContextError</code> <code>NoSuchCookieError</code> typeof <code>NoSuchCookieError</code> <code>NoSuchDriverError</code> typeof <code>NoSuchDriverError</code> <code>NoSuchElementError</code> typeof <code>NoSuchElementError</code> <code>NoSuchFrameError</code> typeof <code>NoSuchFrameError</code> <code>NoSuchWindowError</code> typeof <code>NoSuchWindowError</code> <code>NotImplementedError</code> typeof <code>NotImplementedError</code> <code>NotYetImplementedError</code> typeof <code>NotYetImplementedError</code> <code>ProxyRequestError</code> typeof <code>ProxyRequestError</code> <code>ScriptTimeoutError</code> typeof <code>ScriptTimeoutError</code> <code>SessionNotCreatedError</code> typeof <code>SessionNotCreatedError</code> <code>StaleElementReferenceError</code> typeof <code>StaleElementReferenceError</code> <code>TimeoutError</code> typeof <code>TimeoutError</code> <code>UnableToCaptureScreen</code> typeof <code>UnableToCaptureScreen</code> <code>UnableToSetCookieError</code> typeof <code>UnableToSetCookieError</code> <code>UnexpectedAlertOpenError</code> typeof <code>UnexpectedAlertOpenError</code> <code>UnknownCommandError</code> typeof <code>UnknownCommandError</code> <code>UnknownError</code> typeof <code>UnknownError</code> <code>UnknownMethodError</code> typeof <code>UnknownMethodError</code> <code>UnsupportedOperationError</code> typeof <code>UnsupportedOperationError</code> <code>XPathLookupError</code> typeof <code>XPathLookupError</code>"},{"location":"reference/modules/appium_base_driver/#defined-in_13","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/errors.js:919</p>"},{"location":"reference/modules/appium_base_driver/#statuscodes","title":"statusCodes","text":"<p>\u2022 <code>Const</code> statusCodes: <code>Object</code></p>"},{"location":"reference/modules/appium_base_driver/#type-declaration_3","title":"Type declaration","text":"Name Type <code>ElementIsNotSelectable</code> { <code>code</code>: <code>number</code> = 15; <code>summary</code>: <code>string</code> = 'An attempt was made to select an element that cannot be selected.' } <code>ElementIsNotSelectable.code</code> <code>number</code> <code>ElementIsNotSelectable.summary</code> <code>string</code> <code>ElementNotVisible</code> { <code>code</code>: <code>number</code> = 11; <code>summary</code>: <code>string</code> = 'An element command could not be completed because the element is not visible on the page.' } <code>ElementNotVisible.code</code> <code>number</code> <code>ElementNotVisible.summary</code> <code>string</code> <code>IMEEngineActivationFailed</code> { <code>code</code>: <code>number</code> = 31; <code>summary</code>: <code>string</code> = 'An IME engine could not be started.' } <code>IMEEngineActivationFailed.code</code> <code>number</code> <code>IMEEngineActivationFailed.summary</code> <code>string</code> <code>IMENotAvailable</code> { <code>code</code>: <code>number</code> = 30; <code>summary</code>: <code>string</code> = 'IME was not available.' } <code>IMENotAvailable.code</code> <code>number</code> <code>IMENotAvailable.summary</code> <code>string</code> <code>InvalidCookieDomain</code> { <code>code</code>: <code>number</code> = 24; <code>summary</code>: <code>string</code> = 'An illegal attempt was made to set a cookie under a different domain than the current page.' } <code>InvalidCookieDomain.code</code> <code>number</code> <code>InvalidCookieDomain.summary</code> <code>string</code> <code>InvalidElementCoordinates</code> { <code>code</code>: <code>number</code> = 29; <code>summary</code>: <code>string</code> = 'The coordinates provided to an interactions operation are invalid.' } <code>InvalidElementCoordinates.code</code> <code>number</code> <code>InvalidElementCoordinates.summary</code> <code>string</code> <code>InvalidElementState</code> { <code>code</code>: <code>number</code> = 12; <code>summary</code>: <code>string</code> = 'An element command could not be completed because the element is in an invalid state (e.g. attempting to click a disabled element).' } <code>InvalidElementState.code</code> <code>number</code> <code>InvalidElementState.summary</code> <code>string</code> <code>InvalidSelector</code> { <code>code</code>: <code>number</code> = 32; <code>summary</code>: <code>string</code> = 'Argument was an invalid selector (e.g. XPath/CSS).' } <code>InvalidSelector.code</code> <code>number</code> <code>InvalidSelector.summary</code> <code>string</code> <code>JavaScriptError</code> { <code>code</code>: <code>number</code> = 17; <code>summary</code>: <code>string</code> = 'An error occurred while executing user supplied JavaScript.' } <code>JavaScriptError.code</code> <code>number</code> <code>JavaScriptError.summary</code> <code>string</code> <code>MoveTargetOutOfBounds</code> { <code>code</code>: <code>number</code> = 34; <code>summary</code>: <code>string</code> = 'Target provided for a move action is out of bounds.' } <code>MoveTargetOutOfBounds.code</code> <code>number</code> <code>MoveTargetOutOfBounds.summary</code> <code>string</code> <code>NoAlertOpenError</code> { <code>code</code>: <code>number</code> = 27; <code>summary</code>: <code>string</code> = 'An attempt was made to operate on a modal dialog when one was not open.' } <code>NoAlertOpenError.code</code> <code>number</code> <code>NoAlertOpenError.summary</code> <code>string</code> <code>NoSuchContext</code> { <code>code</code>: <code>number</code> = 35; <code>summary</code>: <code>string</code> = 'No such context found.' } <code>NoSuchContext.code</code> <code>number</code> <code>NoSuchContext.summary</code> <code>string</code> <code>NoSuchDriver</code> { <code>code</code>: <code>number</code> = 6; <code>summary</code>: <code>string</code> = 'A session is either terminated or not started' } <code>NoSuchDriver.code</code> <code>number</code> <code>NoSuchDriver.summary</code> <code>string</code> <code>NoSuchElement</code> { <code>code</code>: <code>number</code> = 7; <code>summary</code>: <code>string</code> = 'An element could not be located on the page using the given search parameters.' } <code>NoSuchElement.code</code> <code>number</code> <code>NoSuchElement.summary</code> <code>string</code> <code>NoSuchFrame</code> { <code>code</code>: <code>number</code> = 8; <code>summary</code>: <code>string</code> = 'A request to switch to a frame could not be satisfied because the frame could not be found.' } <code>NoSuchFrame.code</code> <code>number</code> <code>NoSuchFrame.summary</code> <code>string</code> <code>NoSuchWindow</code> { <code>code</code>: <code>number</code> = 23; <code>summary</code>: <code>string</code> = 'A request to switch to a different window could not be satisfied because the window could not be found.' } <code>NoSuchWindow.code</code> <code>number</code> <code>NoSuchWindow.summary</code> <code>string</code> <code>ScriptTimeout</code> { <code>code</code>: <code>number</code> = 28; <code>summary</code>: <code>string</code> = 'A script did not complete before its timeout expired.' } <code>ScriptTimeout.code</code> <code>number</code> <code>ScriptTimeout.summary</code> <code>string</code> <code>SessionNotCreatedException</code> { <code>code</code>: <code>number</code> = 33; <code>summary</code>: <code>string</code> = 'A new session could not be created.' } <code>SessionNotCreatedException.code</code> <code>number</code> <code>SessionNotCreatedException.summary</code> <code>string</code> <code>StaleElementReference</code> { <code>code</code>: <code>number</code> = 10; <code>summary</code>: <code>string</code> = 'An element command failed because the referenced element is no longer attached to the DOM.' } <code>StaleElementReference.code</code> <code>number</code> <code>StaleElementReference.summary</code> <code>string</code> <code>Success</code> { <code>code</code>: <code>number</code> = 0; <code>summary</code>: <code>string</code> = 'The command executed successfully.' } <code>Success.code</code> <code>number</code> <code>Success.summary</code> <code>string</code> <code>Timeout</code> { <code>code</code>: <code>number</code> = 21; <code>summary</code>: <code>string</code> = 'An operation did not complete before its timeout expired.' } <code>Timeout.code</code> <code>number</code> <code>Timeout.summary</code> <code>string</code> <code>UnableToSetCookie</code> { <code>code</code>: <code>number</code> = 25; <code>summary</code>: <code>string</code> = \"A request to set a cookie's value could not be satisfied.\" } <code>UnableToSetCookie.code</code> <code>number</code> <code>UnableToSetCookie.summary</code> <code>string</code> <code>UnexpectedAlertOpen</code> { <code>code</code>: <code>number</code> = 26; <code>summary</code>: <code>string</code> = 'A modal dialog was open, blocking this operation' } <code>UnexpectedAlertOpen.code</code> <code>number</code> <code>UnexpectedAlertOpen.summary</code> <code>string</code> <code>UnknownCommand</code> { <code>code</code>: <code>number</code> = 9; <code>summary</code>: <code>string</code> = 'The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource.' } <code>UnknownCommand.code</code> <code>number</code> <code>UnknownCommand.summary</code> <code>string</code> <code>UnknownError</code> { <code>code</code>: <code>number</code> = 13; <code>summary</code>: <code>string</code> = 'An unknown server-side error occurred while processing the command.' } <code>UnknownError.code</code> <code>number</code> <code>UnknownError.summary</code> <code>string</code> <code>XPathLookupError</code> { <code>code</code>: <code>number</code> = 19; <code>summary</code>: <code>string</code> = 'An error occurred while searching for an element by XPath.' } <code>XPathLookupError.code</code> <code>number</code> <code>XPathLookupError.summary</code> <code>string</code>"},{"location":"reference/modules/appium_base_driver/#defined-in_14","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-status/status.js:3</p>"},{"location":"reference/modules/appium_base_driver/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_base_driver/#checkparams","title":"checkParams","text":"<p>\u25b8 checkParams(<code>paramSets</code>, <code>jsonObj</code>, <code>protocol</code>): <code>void</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters","title":"Parameters","text":"Name Type <code>paramSets</code> <code>any</code> <code>jsonObj</code> <code>any</code> <code>protocol</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_15","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:101</p>"},{"location":"reference/modules/appium_base_driver/#determineprotocol","title":"determineProtocol","text":"<p>\u25b8 determineProtocol(<code>createSessionArgs</code>): <code>\"MJSONWP\"</code> | <code>\"W3C\"</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_1","title":"Parameters","text":"Name Type <code>createSessionArgs</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns_1","title":"Returns","text":"<p><code>\"MJSONWP\"</code> | <code>\"W3C\"</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_16","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:25</p>"},{"location":"reference/modules/appium_base_driver/#errorfromcode","title":"errorFromCode","text":"<p>\u25b8 errorFromCode(<code>code</code>, <code>value?</code>): <code>ProtocolError</code></p> <p>Retrieve an error derived from MJSONWP status</p>"},{"location":"reference/modules/appium_base_driver/#parameters_2","title":"Parameters","text":"Name Type Default value Description <code>code</code> <code>number</code> <code>undefined</code> JSONWP status code <code>value</code> <code>any</code> <code>''</code> The error message, or an object with a <code>message</code> property"},{"location":"reference/modules/appium_base_driver/#returns_2","title":"Returns","text":"<p><code>ProtocolError</code></p> <p>The error that is associated with provided JSONWP status code</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_17","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/errors.js:1018</p>"},{"location":"reference/modules/appium_base_driver/#errorfromw3cjsoncode","title":"errorFromW3CJsonCode","text":"<p>\u25b8 errorFromW3CJsonCode(<code>code</code>, <code>message</code>, <code>stacktrace?</code>): <code>ProtocolError</code></p> <p>Retrieve an error derived from W3C JSON Code</p>"},{"location":"reference/modules/appium_base_driver/#parameters_3","title":"Parameters","text":"Name Type Default value Description <code>code</code> <code>string</code> <code>undefined</code> W3C error string (see https://www.w3.org/TR/webdriver/#handling-errors <code>JSON Error Code</code> column) <code>message</code> <code>string</code> <code>undefined</code> the error message <code>stacktrace</code> <code>null</code> | <code>string</code> <code>null</code> an optional error stacktrace"},{"location":"reference/modules/appium_base_driver/#returns_3","title":"Returns","text":"<p><code>ProtocolError</code></p> <p>The error that is associated with the W3C error string</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_18","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/errors.js:1037</p>"},{"location":"reference/modules/appium_base_driver/#getsummarybycode","title":"getSummaryByCode","text":"<p>\u25b8 getSummaryByCode(<code>code</code>): <code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_4","title":"Parameters","text":"Name Type <code>code</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns_4","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_19","title":"Defined in","text":"<p>packages/base-driver/lib/jsonwp-status/status.js:117</p>"},{"location":"reference/modules/appium_base_driver/#iserrortype","title":"isErrorType","text":"<p>\u25b8 isErrorType&lt;<code>T</code>&gt;(<code>err</code>, <code>type</code>): err is T</p> <p>Type guard to check if an Error is of a specific type</p>"},{"location":"reference/modules/appium_base_driver/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Error</code>"},{"location":"reference/modules/appium_base_driver/#parameters_5","title":"Parameters","text":"Name Type <code>err</code> <code>any</code> <code>type</code> <code>Class</code>&lt;<code>T</code>, <code>object</code>, <code>any</code>[]&gt;"},{"location":"reference/modules/appium_base_driver/#returns_5","title":"Returns","text":"<p>err is T</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_20","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/errors.js:992</p>"},{"location":"reference/modules/appium_base_driver/#issessioncommand","title":"isSessionCommand","text":"<p>\u25b8 isSessionCommand(<code>command</code>): <code>boolean</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_6","title":"Parameters","text":"Name Type <code>command</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns_6","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_21","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:44</p>"},{"location":"reference/modules/appium_base_driver/#isstandardcap","title":"isStandardCap","text":"<p>\u25b8 isStandardCap(<code>cap</code>): <code>boolean</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_7","title":"Parameters","text":"Name Type <code>cap</code> <code>string</code>"},{"location":"reference/modules/appium_base_driver/#returns_7","title":"Returns","text":"<p><code>boolean</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_22","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:123</p>"},{"location":"reference/modules/appium_base_driver/#makeargs","title":"makeArgs","text":"<p>\u25b8 makeArgs(<code>requestParams</code>, <code>jsonObj</code>, <code>payloadParams</code>, <code>protocol</code>): <code>any</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_8","title":"Parameters","text":"Name Type <code>requestParams</code> <code>any</code> <code>jsonObj</code> <code>any</code> <code>payloadParams</code> <code>any</code> <code>protocol</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns_8","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_23","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:169</p>"},{"location":"reference/modules/appium_base_driver/#normalizebasepath","title":"normalizeBasePath","text":"<p>\u25b8 normalizeBasePath(<code>basePath</code>): <code>string</code></p> <p>Normalize base path string</p>"},{"location":"reference/modules/appium_base_driver/#parameters_9","title":"Parameters","text":"Name Type <code>basePath</code> <code>string</code>"},{"location":"reference/modules/appium_base_driver/#returns_9","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_24","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:251</p>"},{"location":"reference/modules/appium_base_driver/#processcapabilities","title":"processCapabilities","text":"<p>\u25b8 processCapabilities&lt;<code>C</code>, <code>W3CCaps</code>&gt;(<code>w3cCaps</code>, <code>constraints?</code>, <code>shouldValidateCaps?</code>): <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p> <p>Calls parseCaps and just returns the matchedCaps variable</p>"},{"location":"reference/modules/appium_base_driver/#type-parameters_1","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>W3CCaps</code> extends <code>W3CCapabilities</code>&lt;<code>C</code>, <code>W3CCaps</code>&gt;"},{"location":"reference/modules/appium_base_driver/#parameters_10","title":"Parameters","text":"Name Type Default value <code>w3cCaps</code> <code>W3CCaps</code> <code>undefined</code> <code>constraints?</code> <code>C</code> <code>undefined</code> <code>shouldValidateCaps?</code> <code>boolean</code> <code>true</code>"},{"location":"reference/modules/appium_base_driver/#returns_10","title":"Returns","text":"<p><code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_25","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:327</p>"},{"location":"reference/modules/appium_base_driver/#promoteappiumoptions","title":"promoteAppiumOptions","text":"<p>\u25b8 promoteAppiumOptions&lt;<code>C</code>&gt;(<code>originalCaps</code>): <code>W3CCapabilities</code>&lt;<code>C</code>&gt;</p> <p>Return a copy of a capabilities object which has taken everything within the 'options' capability and promoted it to the top level.</p>"},{"location":"reference/modules/appium_base_driver/#type-parameters_2","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_base_driver/#parameters_11","title":"Parameters","text":"Name Type <code>originalCaps</code> <code>W3CCapabilities</code>&lt;<code>C</code>&gt;"},{"location":"reference/modules/appium_base_driver/#returns_11","title":"Returns","text":"<p><code>W3CCapabilities</code>&lt;<code>C</code>&gt;</p> <p>the capabilities with 'options' promoted if necessary</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_26","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:422</p>"},{"location":"reference/modules/appium_base_driver/#promoteappiumoptionsforobject","title":"promoteAppiumOptionsForObject","text":"<p>\u25b8 promoteAppiumOptionsForObject&lt;<code>C</code>&gt;(<code>obj</code>): <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;</p> <p>Return a copy of a \"bare\" (single-level, non-W3C) capabilities object which has taken everything within the 'appium:options' capability and promoted it to the top level.</p>"},{"location":"reference/modules/appium_base_driver/#type-parameters_3","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_base_driver/#parameters_12","title":"Parameters","text":"Name Type <code>obj</code> <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;"},{"location":"reference/modules/appium_base_driver/#returns_12","title":"Returns","text":"<p><code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>\"appium\"</code>&gt;&gt;</p> <p>the capabilities with 'options' promoted if necessary</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_27","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:360</p>"},{"location":"reference/modules/appium_base_driver/#routeconfiguringfunction","title":"routeConfiguringFunction","text":"<p>\u25b8 routeConfiguringFunction(<code>driver</code>): <code>RouteConfiguringFunction</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_13","title":"Parameters","text":"Name Type <code>driver</code> <code>Core</code>&lt;<code>any</code>, <code>StringRecord</code>&gt;"},{"location":"reference/modules/appium_base_driver/#returns_13","title":"Returns","text":"<p><code>RouteConfiguringFunction</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_28","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:257</p>"},{"location":"reference/modules/appium_base_driver/#routetocommandname","title":"routeToCommandName","text":"<p>\u25b8 routeToCommandName(<code>endpoint</code>, <code>method</code>, <code>basePath?</code>): <code>undefined</code> | <code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_14","title":"Parameters","text":"Name Type Default value <code>endpoint</code> <code>string</code> <code>undefined</code> <code>method</code> <code>HTTPMethod</code> <code>undefined</code> <code>basePath?</code> <code>string</code> <code>DEFAULT_BASE_PATH</code>"},{"location":"reference/modules/appium_base_driver/#returns_14","title":"Returns","text":"<p><code>undefined</code> | <code>string</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_29","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/routes.js:978</p>"},{"location":"reference/modules/appium_base_driver/#server","title":"server","text":"<p>\u25b8 server(<code>opts</code>): <code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_base_driver/#parameters_15","title":"Parameters","text":"Name Type <code>opts</code> <code>ServerOpts</code>"},{"location":"reference/modules/appium_base_driver/#returns_15","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_30","title":"Defined in","text":"<p>packages/base-driver/lib/express/server.js:38</p>"},{"location":"reference/modules/appium_base_driver/#validatecaps","title":"validateCaps","text":"<p>\u25b8 validateCaps&lt;<code>C</code>&gt;(<code>caps</code>, <code>constraints?</code>, <code>opts?</code>): <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p> <p>Validates caps against a set of constraints</p>"},{"location":"reference/modules/appium_base_driver/#type-parameters_4","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_base_driver/#parameters_16","title":"Parameters","text":"Name Type <code>caps</code> <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt; <code>constraints?</code> <code>C</code> <code>opts?</code> <code>ValidateCapsOpts</code>"},{"location":"reference/modules/appium_base_driver/#returns_16","title":"Returns","text":"<p><code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p>"},{"location":"reference/modules/appium_base_driver/#defined-in_31","title":"Defined in","text":"<p>packages/base-driver/lib/basedriver/capabilities.js:54</p>"},{"location":"reference/modules/appium_base_driver/#validateexecutemethodparams","title":"validateExecuteMethodParams","text":"<p>\u25b8 validateExecuteMethodParams(<code>params</code>, <code>paramSpec</code>): <code>any</code></p>"},{"location":"reference/modules/appium_base_driver/#parameters_17","title":"Parameters","text":"Name Type <code>params</code> <code>any</code> <code>paramSpec</code> <code>any</code>"},{"location":"reference/modules/appium_base_driver/#returns_17","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/modules/appium_base_driver/#defined-in_32","title":"Defined in","text":"<p>packages/base-driver/lib/protocol/protocol.js:219</p>"},{"location":"reference/modules/appium_base_plugin/","title":"Module: @appium/base-plugin","text":""},{"location":"reference/modules/appium_base_plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_base_plugin/#references","title":"References","text":"<ul> <li>default</li> </ul>"},{"location":"reference/modules/appium_base_plugin/#classes","title":"Classes","text":"<ul> <li>BasePlugin</li> </ul>"},{"location":"reference/modules/appium_base_plugin/#interfaces","title":"Interfaces","text":"<ul> <li>Plugin</li> </ul>"},{"location":"reference/modules/appium_base_plugin/#type-aliases","title":"Type Aliases","text":"<ul> <li>Constraints</li> <li>Driver</li> <li>NextPluginCallback</li> </ul>"},{"location":"reference/modules/appium_base_plugin/#references_1","title":"References","text":""},{"location":"reference/modules/appium_base_plugin/#default","title":"default","text":"<p>Renames and re-exports BasePlugin</p>"},{"location":"reference/modules/appium_base_plugin/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_base_plugin/#constraints","title":"Constraints","text":"<p>\u01ac Constraints: <code>Object</code></p> <p>A collection of constraints describing the allowed capabilities for a driver.</p>"},{"location":"reference/modules/appium_base_plugin/#index-signature","title":"Index signature","text":"<p>\u25aa [name: <code>string</code>]: <code>Constraint</code></p>"},{"location":"reference/modules/appium_base_plugin/#defined-in","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:393</p>"},{"location":"reference/modules/appium_base_plugin/#driver","title":"Driver","text":"<p>\u01ac Driver&lt;<code>C</code>&gt;: <code>Driver</code></p>"},{"location":"reference/modules/appium_base_plugin/#type-parameters","title":"Type parameters","text":"Name <code>C</code>"},{"location":"reference/modules/appium_base_plugin/#defined-in_1","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:95</p>"},{"location":"reference/modules/appium_base_plugin/#nextplugincallback","title":"NextPluginCallback","text":"<p>\u01ac NextPluginCallback&lt;&gt;: <code>NextPluginCallback</code></p>"},{"location":"reference/modules/appium_base_plugin/#defined-in_2","title":"Defined in","text":"<p>packages/base-plugin/lib/plugin.js:89</p>"},{"location":"reference/modules/appium_driver_test_support/","title":"Module: @appium/driver-test-support","text":""},{"location":"reference/modules/appium_driver_test_support/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_driver_test_support/#interfaces","title":"Interfaces","text":"<ul> <li>W3CCapabilities</li> </ul>"},{"location":"reference/modules/appium_driver_test_support/#type-aliases","title":"Type Aliases","text":"<ul> <li>AppiumServerOpts</li> <li>BaseNSCapabilities</li> <li>Constraints</li> <li>Driver</li> <li>DriverClass</li> <li>NormativeAppiumServer</li> <li>TestAppiumServer</li> </ul>"},{"location":"reference/modules/appium_driver_test_support/#variables","title":"Variables","text":"<ul> <li>TEST_HOST</li> </ul>"},{"location":"reference/modules/appium_driver_test_support/#functions","title":"Functions","text":"<ul> <li>createAppiumURL</li> <li>createSessionHelpers</li> <li>driverE2ETestSuite</li> <li>driverUnitTestSuite</li> <li>getTestPort</li> <li>startStoppableAppium</li> </ul>"},{"location":"reference/modules/appium_driver_test_support/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_driver_test_support/#appiumserveropts","title":"AppiumServerOpts","text":"<p>\u01ac AppiumServerOpts: <code>Args</code>&lt;<code>CliCommandServer</code>&gt;</p> <p>Options for <code>startStoppableAppium</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in","title":"Defined in","text":"<p>packages/driver-test-support/lib/stoppable.ts:12</p>"},{"location":"reference/modules/appium_driver_test_support/#basenscapabilities","title":"BaseNSCapabilities","text":"<p>\u01ac BaseNSCapabilities: <code>NSCapabilities</code>&lt;<code>BaseDriverCapConstraints</code>&gt;</p> <p>Like BaseCapabilities, except all Appium-specific keys are namespaced.</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_1","title":"Defined in","text":"<p>packages/types/build/lib/capabilities.d.ts:14</p>"},{"location":"reference/modules/appium_driver_test_support/#constraints","title":"Constraints","text":"<p>\u01ac Constraints: <code>Object</code></p> <p>A collection of constraints describing the allowed capabilities for a driver.</p>"},{"location":"reference/modules/appium_driver_test_support/#index-signature","title":"Index signature","text":"<p>\u25aa [name: <code>string</code>]: <code>Constraint</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_2","title":"Defined in","text":"<p>packages/types/build/lib/driver.d.ts:393</p>"},{"location":"reference/modules/appium_driver_test_support/#driver","title":"Driver","text":"<p>\u01ac Driver&lt;<code>C</code>&gt;: <code>Driver</code></p>"},{"location":"reference/modules/appium_driver_test_support/#type-parameters","title":"Type parameters","text":"Name <code>C</code>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_3","title":"Defined in","text":"<p>packages/driver-test-support/lib/unit-suite.js:644</p>"},{"location":"reference/modules/appium_driver_test_support/#driverclass","title":"DriverClass","text":"<p>\u01ac DriverClass&lt;&gt;: <code>DriverClass</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_4","title":"Defined in","text":"<p>packages/driver-test-support/lib/index.js:9</p>"},{"location":"reference/modules/appium_driver_test_support/#normativeappiumserver","title":"NormativeAppiumServer","text":"<p>\u01ac NormativeAppiumServer: <code>Omit</code>&lt;<code>AppiumServer</code>, <code>\"close\"</code>&gt; &amp; { <code>close</code>: <code>Server</code>[<code>\"close\"</code>]  }</p> <p>The AppiumServer type, but with the <code>close</code> method normalized to a callback-style function.</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_5","title":"Defined in","text":"<p>packages/driver-test-support/lib/stoppable.ts:27</p>"},{"location":"reference/modules/appium_driver_test_support/#testappiumserver","title":"TestAppiumServer","text":"<p>\u01ac TestAppiumServer: <code>Omit</code>&lt;<code>NormativeAppiumServer</code>, <code>\"close\"</code>&gt; &amp; { <code>close</code>: (<code>callback</code>: (<code>err?</code>: <code>Error</code>) =&gt; <code>void</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt; ; <code>stop</code>: <code>Asyncify</code>&lt;<code>stoppable.WithStop</code>[<code>\"stop\"</code>]&gt;  }</p> <p>An AppiumServer with a method <code>stop() =&gt; Promise&lt;void&gt;</code>, which closes all sockets and fully stops the server.</p> <p>Returned by <code>startStoppableAppium</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_6","title":"Defined in","text":"<p>packages/driver-test-support/lib/stoppable.ts:19</p>"},{"location":"reference/modules/appium_driver_test_support/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_driver_test_support/#test_host","title":"TEST_HOST","text":"<p>\u2022 <code>Const</code> TEST_HOST: <code>\"127.0.0.1\"</code></p> <p>Default test host</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_7","title":"Defined in","text":"<p>packages/driver-test-support/lib/helpers.js:7</p>"},{"location":"reference/modules/appium_driver_test_support/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_driver_test_support/#createappiumurl","title":"createAppiumURL","text":"<p>\u25b8 createAppiumURL(): <code>CurriedFunction4</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#returns","title":"Returns","text":"<p><code>CurriedFunction4</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_8","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:174</p> <p>\u25b8 createAppiumURL(<code>t1</code>): <code>CurriedFunction3</code>&lt;<code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_1","title":"Returns","text":"<p><code>CurriedFunction3</code>&lt;<code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_9","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:175</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>): <code>CurriedFunction3</code>&lt;<code>string</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_1","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>string</code> | <code>number</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_2","title":"Returns","text":"<p><code>CurriedFunction3</code>&lt;<code>string</code>, <code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_10","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:176</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>): <code>CurriedFunction2</code>&lt;<code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_2","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>string</code> | <code>number</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_3","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>null</code> | <code>string</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_11","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:177</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>): <code>CurriedFunction3</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_3","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>null</code> | <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_4","title":"Returns","text":"<p><code>CurriedFunction3</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_12","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:178</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>): <code>CurriedFunction2</code>&lt;<code>string</code> | <code>number</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_4","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>null</code> | <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_5","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>string</code> | <code>number</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_13","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:179</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>): <code>CurriedFunction2</code>&lt;<code>string</code>, <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_5","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>null</code> | <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_6","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>string</code>, <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_14","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:180</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>): <code>CurriedFunction1</code>&lt;<code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_6","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>null</code> | <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_7","title":"Returns","text":"<p><code>CurriedFunction1</code>&lt;<code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_15","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:181</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction3</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_7","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>LoDashStatic</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_8","title":"Returns","text":"<p><code>CurriedFunction3</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_16","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:182</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction2</code>&lt;<code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_8","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>LoDashStatic</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_9","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>string</code> | <code>number</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_17","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:183</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction2</code>&lt;<code>string</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_9","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>LoDashStatic</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_10","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>string</code>, <code>null</code> | <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_18","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:184</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction2</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_10","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>null</code> | <code>string</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_11","title":"Returns","text":"<p><code>CurriedFunction2</code>&lt;<code>string</code>, <code>string</code> | <code>number</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_19","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:185</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction1</code>&lt;<code>null</code> | <code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_11","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>LoDashStatic</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_12","title":"Returns","text":"<p><code>CurriedFunction1</code>&lt;<code>null</code> | <code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_20","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:186</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction1</code>&lt;<code>string</code> | <code>number</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_12","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>LoDashStatic</code> <code>t3</code> <code>null</code> | <code>string</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_13","title":"Returns","text":"<p><code>CurriedFunction1</code>&lt;<code>string</code> | <code>number</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_21","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:187</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>CurriedFunction1</code>&lt;<code>string</code>, <code>string</code>&gt;</p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_13","title":"Parameters","text":"Name Type <code>t1</code> <code>LoDashStatic</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>null</code> | <code>string</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_14","title":"Returns","text":"<p><code>CurriedFunction1</code>&lt;<code>string</code>, <code>string</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_22","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:188</p> <p>\u25b8 createAppiumURL(<code>t1</code>, <code>t2</code>, <code>t3</code>, <code>t4</code>): <code>string</code></p> <p>Build an Appium URL from components.</p> <p>All parameters are required.  Provide an empty string (<code>''</code>) if you don't need one. To rearrange arguments (if needed), use the placeholder from Lodash (<code>_</code>).</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_14","title":"Parameters","text":"Name Type <code>t1</code> <code>string</code> <code>t2</code> <code>string</code> | <code>number</code> <code>t3</code> <code>null</code> | <code>string</code> <code>t4</code> <code>string</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_15","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_23","title":"Defined in","text":"<p>node_modules/@types/lodash/common/function.d.ts:189</p>"},{"location":"reference/modules/appium_driver_test_support/#createsessionhelpers","title":"createSessionHelpers","text":"<p>\u25b8 createSessionHelpers&lt;<code>CommandData</code>, <code>ResponseData</code>&gt;(<code>port</code>, <code>address?</code>): <code>SessionHelpers</code>&lt;<code>CommandData</code>, <code>ResponseData</code>&gt;</p> <p>Creates some helper functions for E2E tests to manage sessions.</p>"},{"location":"reference/modules/appium_driver_test_support/#type-parameters_1","title":"Type parameters","text":"Name Type <code>CommandData</code> <code>unknown</code> <code>ResponseData</code> <code>any</code>"},{"location":"reference/modules/appium_driver_test_support/#parameters_15","title":"Parameters","text":"Name Type Default value Description <code>port</code> <code>number</code> <code>undefined</code> Port on which the server is running. Typically this will be retrieved via <code>get-port</code> beforehand <code>address?</code> <code>string</code> <code>TEST_HOST</code> Address/host on which the server is running. Defaults to <code>TEST_HOST</code>"},{"location":"reference/modules/appium_driver_test_support/#returns_16","title":"Returns","text":"<p><code>SessionHelpers</code>&lt;<code>CommandData</code>, <code>ResponseData</code>&gt;</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_24","title":"Defined in","text":"<p>packages/driver-test-support/lib/e2e-suite.js:21</p>"},{"location":"reference/modules/appium_driver_test_support/#drivere2etestsuite","title":"driverE2ETestSuite","text":"<p>\u25b8 driverE2ETestSuite(<code>DriverClass</code>, <code>defaultCaps?</code>): <code>void</code></p> <p>Creates E2E test suites for a driver.</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_16","title":"Parameters","text":"Name Type <code>DriverClass</code> <code>DriverClass</code> <code>defaultCaps?</code> <code>Partial</code>&lt;<code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;{ <code>app</code>: { <code>isString</code>: <code>true</code>  } ; <code>autoLaunch</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>autoWebview</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>automationName</code>: { <code>isString</code>: <code>true</code>  } ; <code>eventTimings</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>fullReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>language</code>: { <code>isString</code>: <code>true</code>  } ; <code>locale</code>: { <code>isString</code>: <code>true</code>  } ; <code>newCommandTimeout</code>: { <code>isNumber</code>: <code>true</code>  } ; <code>noReset</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>orientation</code>: { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } ; <code>platformName</code>: { <code>isString</code>: <code>true</code> ; <code>presence</code>: <code>true</code>  } ; <code>platformVersion</code>: { <code>isString</code>: <code>true</code>  } ; <code>printPageSourceOnFindFailure</code>: { <code>isBoolean</code>: <code>true</code>  } ; <code>udid</code>: { <code>isString</code>: <code>true</code>  } ; <code>webSocketUrl</code>: { <code>isBoolean</code>: <code>true</code>  }  }&gt;, <code>\"appium\"</code>&gt;&gt;&gt;"},{"location":"reference/modules/appium_driver_test_support/#returns_17","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_25","title":"Defined in","text":"<p>packages/driver-test-support/lib/e2e-suite.js:107</p>"},{"location":"reference/modules/appium_driver_test_support/#driverunittestsuite","title":"driverUnitTestSuite","text":"<p>\u25b8 driverUnitTestSuite&lt;<code>C</code>&gt;(<code>DriverClass</code>, <code>defaultCaps?</code>): <code>void</code></p> <p>Creates unit test suites for a driver.</p>"},{"location":"reference/modules/appium_driver_test_support/#type-parameters_2","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_driver_test_support/#parameters_17","title":"Parameters","text":"Name Type <code>DriverClass</code> <code>DriverClass</code>&lt;<code>C</code>&gt; <code>defaultCaps?</code> <code>NSDriverCaps</code>&lt;<code>C</code>&gt;"},{"location":"reference/modules/appium_driver_test_support/#returns_18","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_26","title":"Defined in","text":"<p>packages/driver-test-support/lib/unit-suite.js:20</p>"},{"location":"reference/modules/appium_driver_test_support/#gettestport","title":"getTestPort","text":"<p>\u25b8 getTestPort(<code>force?</code>): <code>Promise</code>&lt;<code>number</code>&gt;</p> <p>Returns a free port; one per process</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_18","title":"Parameters","text":"Name Type Default value Description <code>force?</code> <code>boolean</code> <code>false</code> If true, do not reuse the port (if it already exists)"},{"location":"reference/modules/appium_driver_test_support/#returns_19","title":"Returns","text":"<p><code>Promise</code>&lt;<code>number</code>&gt;</p> <p>a free port</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_27","title":"Defined in","text":"<p>packages/driver-test-support/lib/helpers.js:16</p>"},{"location":"reference/modules/appium_driver_test_support/#startstoppableappium","title":"startStoppableAppium","text":"<p>\u25b8 startStoppableAppium(<code>opts</code>): <code>Promise</code>&lt;<code>TestAppiumServer</code>&gt;</p> <p>Coerces AppiumServer into a <code>TestAppiumServer</code>.</p> <p><code>Todo</code></p> <p>This should be moved into <code>@appium/driver-test-support</code> or something</p>"},{"location":"reference/modules/appium_driver_test_support/#parameters_19","title":"Parameters","text":"Name Type Description <code>opts</code> <code>Object</code> Options for startAppium <code>opts.address</code> <code>undefined</code> | <code>string</code> - <code>opts.allowCors</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.allowInsecure</code> <code>undefined</code> | <code>AllowInsecureConfig</code> - <code>opts.appiumHome?</code> <code>string</code> Alternate way to set <code>APPIUM_HOME</code> for tests. Since we don't want to muck about with the environment, we just set it here. Setting this means that any discovery of the proper <code>APPIUM_HOME</code> path is bypassed and is equivalent to setting <code>APPIUM_HOME</code> in the environment. <code>opts.basePath</code> <code>undefined</code> | <code>string</code> - <code>opts.callbackAddress</code> <code>undefined</code> | <code>string</code> - <code>opts.callbackPort</code> <code>undefined</code> | <code>number</code> - <code>opts.configFile?</code> <code>string</code> Path to config file, if any. Does not make sense for this to be allowed in a config file! <code>opts.debugLogSpacing</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.defaultCapabilities</code> <code>undefined</code> | <code>DefaultCapabilitiesConfig</code> - <code>opts.denyInsecure</code> <code>undefined</code> | <code>DenyInsecureConfig</code> - <code>opts.driver</code> <code>undefined</code> | <code>DriverConfig</code> - <code>opts.keepAliveTimeout</code> <code>undefined</code> | <code>number</code> - <code>opts.localTimezone</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.logFile</code> <code>undefined</code> | <code>string</code> - <code>opts.logFilters</code> <code>undefined</code> | <code>LogFiltersConfig</code> - <code>opts.logHandler?</code> (...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code> Seems to only be used in tests or standalone driver calls <code>opts.logNoColors</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.logTimestamp</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.loglevel</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>LogLevelConfig</code>&gt; - <code>opts.longStacktrace</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.noPermsCheck</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.nodeconfig</code> <code>undefined</code> | <code>NodeconfigConfig</code> - <code>opts.plugin</code> <code>undefined</code> | <code>PluginConfig</code> - <code>opts.port</code> <code>undefined</code> | <code>number</code> - <code>opts.relaxedSecurityEnabled</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.sessionOverride</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.shell?</code> <code>boolean</code> If true, open a REPL <code>opts.showBuildInfo?</code> <code>boolean</code> If true, show the BuildInfo build info and exit <code>opts.showConfig?</code> <code>boolean</code> If true, show the config and exit <code>opts.strictCaps</code> <code>undefined</code> | <code>NonNullable</code>&lt;<code>undefined</code> | <code>boolean</code>&gt; - <code>opts.subcommand?</code> <code>CliCommand</code> Possible subcommands. If empty, defaults to CliCommandServer. <code>opts.throwInsteadOfExit?</code> <code>boolean</code> If <code>true</code>, throw on error instead of exit. <code>opts.tmpDir</code> <code>undefined</code> | <code>string</code> - <code>opts.traceDir</code> <code>undefined</code> | <code>string</code> - <code>opts.useDrivers</code> <code>undefined</code> | <code>UseDriversConfig</code> - <code>opts.usePlugins</code> <code>undefined</code> | <code>UsePluginsConfig</code> - <code>opts.webhook</code> <code>undefined</code> | <code>string</code> -"},{"location":"reference/modules/appium_driver_test_support/#returns_20","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TestAppiumServer</code>&gt;</p> <p>A stoppable Appium server</p>"},{"location":"reference/modules/appium_driver_test_support/#defined-in_28","title":"Defined in","text":"<p>packages/driver-test-support/lib/stoppable.ts:37</p>"},{"location":"reference/modules/appium_execute_driver_plugin/","title":"Module: @appium/execute-driver-plugin","text":""},{"location":"reference/modules/appium_execute_driver_plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_execute_driver_plugin/#references","title":"References","text":"<ul> <li>default</li> </ul>"},{"location":"reference/modules/appium_execute_driver_plugin/#classes","title":"Classes","text":"<ul> <li>ExecuteDriverPlugin</li> </ul>"},{"location":"reference/modules/appium_execute_driver_plugin/#references_1","title":"References","text":""},{"location":"reference/modules/appium_execute_driver_plugin/#default","title":"default","text":"<p>Renames and re-exports ExecuteDriverPlugin</p>"},{"location":"reference/modules/appium_fake_driver/","title":"Module: @appium/fake-driver","text":""},{"location":"reference/modules/appium_fake_driver/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_fake_driver/#classes","title":"Classes","text":"<ul> <li>FakeDriver</li> </ul>"},{"location":"reference/modules/appium_fake_driver/#type-aliases","title":"Type Aliases","text":"<ul> <li>FakeDriverCaps</li> <li>W3CFakeDriverCaps</li> </ul>"},{"location":"reference/modules/appium_fake_driver/#functions","title":"Functions","text":"<ul> <li>main</li> <li>startServer</li> </ul>"},{"location":"reference/modules/appium_fake_driver/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_fake_driver/#fakedrivercaps","title":"FakeDriverCaps","text":"<p>\u01ac FakeDriverCaps: <code>DriverCaps</code>&lt;<code>FakeDriverConstraints</code>&gt;</p> <p>Capabilities for FakeDriver</p>"},{"location":"reference/modules/appium_fake_driver/#defined-in","title":"Defined in","text":"<p>packages/fake-driver/lib/types.ts:14</p>"},{"location":"reference/modules/appium_fake_driver/#w3cfakedrivercaps","title":"W3CFakeDriverCaps","text":"<p>\u01ac W3CFakeDriverCaps: <code>W3CDriverCaps</code>&lt;<code>FakeDriverConstraints</code>&gt;</p> <p>W3C-style caps for FakeDriver</p>"},{"location":"reference/modules/appium_fake_driver/#defined-in_1","title":"Defined in","text":"<p>packages/fake-driver/lib/types.ts:8</p>"},{"location":"reference/modules/appium_fake_driver/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_fake_driver/#main","title":"main","text":"<p>\u25b8 main(): <code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_fake_driver/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_fake_driver/#defined-in_2","title":"Defined in","text":"<p>packages/fake-driver/lib/index.js:7</p>"},{"location":"reference/modules/appium_fake_driver/#startserver","title":"startServer","text":"<p>\u25b8 startServer(<code>port</code>, <code>hostname</code>): <code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_fake_driver/#parameters","title":"Parameters","text":"Name Type <code>port</code> <code>any</code> <code>hostname</code> <code>any</code>"},{"location":"reference/modules/appium_fake_driver/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>AppiumServer</code>&gt;</p>"},{"location":"reference/modules/appium_fake_driver/#defined-in_3","title":"Defined in","text":"<p>packages/fake-driver/lib/server.js:5</p>"},{"location":"reference/modules/appium_images_plugin/","title":"Module: @appium/images-plugin","text":""},{"location":"reference/modules/appium_images_plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_images_plugin/#references","title":"References","text":"<ul> <li>default</li> </ul>"},{"location":"reference/modules/appium_images_plugin/#classes","title":"Classes","text":"<ul> <li>ImageElementPlugin</li> </ul>"},{"location":"reference/modules/appium_images_plugin/#variables","title":"Variables","text":"<ul> <li>IMAGE_STRATEGY</li> </ul>"},{"location":"reference/modules/appium_images_plugin/#functions","title":"Functions","text":"<ul> <li>getImgElFromArgs</li> </ul>"},{"location":"reference/modules/appium_images_plugin/#references_1","title":"References","text":""},{"location":"reference/modules/appium_images_plugin/#default","title":"default","text":"<p>Renames and re-exports ImageElementPlugin</p>"},{"location":"reference/modules/appium_images_plugin/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_images_plugin/#image_strategy","title":"IMAGE_STRATEGY","text":"<p>\u2022 <code>Const</code> IMAGE_STRATEGY: <code>\"-image\"</code></p>"},{"location":"reference/modules/appium_images_plugin/#defined-in","title":"Defined in","text":"<p>packages/images-plugin/lib/constants.js:3</p>"},{"location":"reference/modules/appium_images_plugin/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_images_plugin/#getimgelfromargs","title":"getImgElFromArgs","text":"<p>\u25b8 getImgElFromArgs(<code>args</code>): <code>any</code></p>"},{"location":"reference/modules/appium_images_plugin/#parameters","title":"Parameters","text":"Name Type <code>args</code> <code>any</code>"},{"location":"reference/modules/appium_images_plugin/#returns","title":"Returns","text":"<p><code>any</code></p>"},{"location":"reference/modules/appium_images_plugin/#defined-in_1","title":"Defined in","text":"<p>packages/images-plugin/lib/plugin.js:11</p>"},{"location":"reference/modules/appium_opencv/","title":"Module: @appium/opencv","text":""},{"location":"reference/modules/appium_opencv/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_opencv/#interfaces","title":"Interfaces","text":"<ul> <li>MatchComputationResult</li> <li>MatchingOptions</li> <li>MatchingResult</li> <li>OccurrenceOptions</li> <li>OccurrenceResult</li> <li>OpenCVBindings</li> <li>Point</li> <li>Rect</li> <li>Region</li> <li>SimilarityOptions</li> <li>SimilarityResult</li> </ul>"},{"location":"reference/modules/appium_opencv/#type-aliases","title":"Type Aliases","text":"<ul> <li>OccurrenceResultMethod</li> </ul>"},{"location":"reference/modules/appium_opencv/#functions","title":"Functions","text":"<ul> <li>getImageOccurrence</li> <li>getImagesMatches</li> <li>getImagesSimilarity</li> <li>initOpenCv</li> </ul>"},{"location":"reference/modules/appium_opencv/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_opencv/#occurrenceresultmethod","title":"OccurrenceResultMethod","text":"<p>\u01ac OccurrenceResultMethod&lt;&gt;: <code>\"TM_CCOEFF\"</code> | <code>\"TM_CCOEFF_NORMED\"</code> | <code>\"TM_CCORR\"</code> | <code>\"TM_CCORR_NORMED\"</code> | <code>\"TM_SQDIFF\"</code> | <code>\"TMSQDIFF_NORMED\"</code></p>"},{"location":"reference/modules/appium_opencv/#defined-in","title":"Defined in","text":"<p>packages/opencv/lib/index.js:464</p>"},{"location":"reference/modules/appium_opencv/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_opencv/#getimageoccurrence","title":"getImageOccurrence","text":"<p>\u25b8 getImageOccurrence(<code>fullImgData</code>, <code>partialImgData</code>, <code>options?</code>): <code>Promise</code>&lt;<code>OccurrenceResult</code>&gt;</p> <p>Calculates the occurrence position of a partial image in the full image.</p> <p><code>Throws</code></p> <p>If no occurrences of the partial image can be found in the full image</p>"},{"location":"reference/modules/appium_opencv/#parameters","title":"Parameters","text":"Name Type Description <code>fullImgData</code> <code>Buffer</code> The data of the full image packed into a NodeJS buffer <code>partialImgData</code> <code>Buffer</code> The data of the partial image packed into a NodeJS buffer <code>options?</code> <code>OccurrenceOptions</code> Set of occurrence calculation options"},{"location":"reference/modules/appium_opencv/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>OccurrenceResult</code>&gt;</p>"},{"location":"reference/modules/appium_opencv/#defined-in_1","title":"Defined in","text":"<p>packages/opencv/lib/index.js:502</p>"},{"location":"reference/modules/appium_opencv/#getimagesmatches","title":"getImagesMatches","text":"<p>\u25b8 getImagesMatches(<code>img1Data</code>, <code>img2Data</code>, <code>options?</code>): <code>Promise</code>&lt;<code>MatchingResult</code>&gt;</p> <p>Calculates the count of common edges between two images. The images might be rotated or resized relatively to each other.</p> <p><code>Throws</code></p> <p>If <code>detectorName</code> value is unknown.</p>"},{"location":"reference/modules/appium_opencv/#parameters_1","title":"Parameters","text":"Name Type Description <code>img1Data</code> <code>Buffer</code> The data of the first image packed into a NodeJS buffer <code>img2Data</code> <code>Buffer</code> The data of the second image packed into a NodeJS buffer <code>options</code> <code>MatchingOptions</code> [{}] Set of matching options"},{"location":"reference/modules/appium_opencv/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>MatchingResult</code>&gt;</p> <p>Maching result</p>"},{"location":"reference/modules/appium_opencv/#defined-in_2","title":"Defined in","text":"<p>packages/opencv/lib/index.js:238</p>"},{"location":"reference/modules/appium_opencv/#getimagessimilarity","title":"getImagesSimilarity","text":"<p>\u25b8 getImagesSimilarity(<code>img1Data</code>, <code>img2Data</code>, <code>options?</code>): <code>Promise</code>&lt;<code>SimilarityResult</code>&gt;</p> <p>Calculates the similarity score between two images. It is expected, that both images have the same resolution.</p> <p><code>Throws</code></p> <p>If the given images have different resolution.</p>"},{"location":"reference/modules/appium_opencv/#parameters_2","title":"Parameters","text":"Name Type Description <code>img1Data</code> <code>Buffer</code> The data of the first image packed into a NodeJS buffer <code>img2Data</code> <code>Buffer</code> The data of the second image packed into a NodeJS buffer <code>options</code> <code>SimilarityOptions</code> [{}] Set of similarity calculation options"},{"location":"reference/modules/appium_opencv/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>SimilarityResult</code>&gt;</p> <p>The calculation result</p>"},{"location":"reference/modules/appium_opencv/#defined-in_3","title":"Defined in","text":"<p>packages/opencv/lib/index.js:393</p>"},{"location":"reference/modules/appium_opencv/#initopencv","title":"initOpenCv","text":"<p>\u25b8 initOpenCv(): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Spins until the opencv-bindings module is fully loaded</p>"},{"location":"reference/modules/appium_opencv/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_opencv/#defined-in_4","title":"Defined in","text":"<p>packages/opencv/lib/index.js:87</p>"},{"location":"reference/modules/appium_plugin_test_support/","title":"Module: @appium/plugin-test-support","text":""},{"location":"reference/modules/appium_plugin_test_support/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_plugin_test_support/#interfaces","title":"Interfaces","text":"<ul> <li>AppiumEnv</li> <li>E2ESetupOpts</li> </ul>"},{"location":"reference/modules/appium_plugin_test_support/#type-aliases","title":"Type Aliases","text":"<ul> <li>AppiumServer</li> </ul>"},{"location":"reference/modules/appium_plugin_test_support/#functions","title":"Functions","text":"<ul> <li>pluginE2EHarness</li> </ul>"},{"location":"reference/modules/appium_plugin_test_support/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_plugin_test_support/#appiumserver","title":"AppiumServer","text":"<p>\u01ac AppiumServer: <code>Omit</code>&lt;<code>HTTPServer</code>, <code>\"close\"</code>&gt; &amp; <code>AppiumServerExtension</code></p> <p>Appium's slightly-modified HTTPServer http.Server.</p>"},{"location":"reference/modules/appium_plugin_test_support/#defined-in","title":"Defined in","text":"<p>packages/types/build/lib/server.d.ts:11</p>"},{"location":"reference/modules/appium_plugin_test_support/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_plugin_test_support/#plugine2eharness","title":"pluginE2EHarness","text":"<p>\u25b8 pluginE2EHarness(<code>opts</code>): <code>void</code></p> <p>Creates hooks to install a driver and a plugin and starts an Appium server w/ the given extensions.</p>"},{"location":"reference/modules/appium_plugin_test_support/#parameters","title":"Parameters","text":"Name Type <code>opts</code> <code>E2ESetupOpts</code>"},{"location":"reference/modules/appium_plugin_test_support/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_plugin_test_support/#defined-in_1","title":"Defined in","text":"<p>packages/plugin-test-support/lib/harness.js:15</p>"},{"location":"reference/modules/appium_relaxed_caps_plugin/","title":"Module: @appium/relaxed-caps-plugin","text":""},{"location":"reference/modules/appium_relaxed_caps_plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_relaxed_caps_plugin/#classes","title":"Classes","text":"<ul> <li>RelaxedCapsPlugin</li> </ul>"},{"location":"reference/modules/appium_schema/","title":"Module: @appium/schema","text":""},{"location":"reference/modules/appium_schema/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_schema/#variables","title":"Variables","text":"<ul> <li>AppiumConfigJsonSchema</li> </ul>"},{"location":"reference/modules/appium_schema/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_schema/#appiumconfigjsonschema","title":"AppiumConfigJsonSchema","text":"<p>\u2022 <code>Const</code> AppiumConfigJsonSchema: <code>Object</code></p> <p>The single-source-of-truth of the Appium server configuration</p> <p>This defines both what the CLI supports and what the config files support.</p>"},{"location":"reference/modules/appium_schema/#type-declaration","title":"Type declaration","text":"Name Type <code>$defs</code> { <code>logFilter</code>: { <code>allOf</code>: readonly [{ <code>properties</code>: { <code>flags</code>: { <code>description</code>: <code>\"Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\"</code> = 'Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags'; <code>pattern</code>: <code>\"^[igmsduy](,[igmsduy])*$\"</code> = '^igmsduy$'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>replacer</code>: { <code>default</code>: <code>\"**SECURE**\"</code> = 'SECURE*'; <code>description</code>: <code>\"Replacement string for matched text\"</code> = 'Replacement string for matched text'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>type</code>: <code>\"object\"</code> = 'object' }, { <code>anyOf</code>: readonly [{ <code>$ref</code>: <code>\"#/$defs/logFilterText\"</code> = '#/$defs/logFilterText' }, { <code>$ref</code>: <code>\"#/$defs/logFilterRegex\"</code> = '#/$defs/logFilterRegex' }]  }] ; <code>description</code>: <code>\"Log filtering rule\"</code> = 'Log filtering rule'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>logFilterRegex</code>: { <code>description</code>: <code>\"Log filter with regular expression\"</code> = 'Log filter with regular expression'; <code>not</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  } ; <code>properties</code>: { <code>pattern</code>: { <code>description</code>: <code>\"Regex pattern to match\"</code> = 'Regex pattern to match'; <code>format</code>: <code>\"regex\"</code> = 'regex'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>required</code>: readonly [<code>\"pattern\"</code>] ; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>logFilterText</code>: { <code>description</code>: <code>\"Log filter with plain text\"</code> = 'Log filter with plain text'; <code>not</code>: { <code>required</code>: readonly [<code>\"pattern\"</code>]  } ; <code>properties</code>: { <code>text</code>: { <code>description</code>: <code>\"Text to match\"</code> = 'Text to match'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>required</code>: readonly [<code>\"text\"</code>] ; <code>type</code>: <code>\"object\"</code> = 'object' }  } <code>$defs.logFilter</code> { <code>allOf</code>: readonly [{ <code>properties</code>: { <code>flags</code>: { <code>description</code>: <code>\"Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\"</code> = 'Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags'; <code>pattern</code>: <code>\"^[igmsduy](,[igmsduy])*$\"</code> = '^igmsduy$'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>replacer</code>: { <code>default</code>: <code>\"**SECURE**\"</code> = 'SECURE*'; <code>description</code>: <code>\"Replacement string for matched text\"</code> = 'Replacement string for matched text'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>type</code>: <code>\"object\"</code> = 'object' }, { <code>anyOf</code>: readonly [{ <code>$ref</code>: <code>\"#/$defs/logFilterText\"</code> = '#/$defs/logFilterText' }, { <code>$ref</code>: <code>\"#/$defs/logFilterRegex\"</code> = '#/$defs/logFilterRegex' }]  }] ; <code>description</code>: <code>\"Log filtering rule\"</code> = 'Log filtering rule'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>$defs.logFilter.allOf</code> readonly [{ <code>properties</code>: { <code>flags</code>: { <code>description</code>: <code>\"Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags\"</code> = 'Matching flags; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#advanced_searching_with_flags'; <code>pattern</code>: <code>\"^[igmsduy](,[igmsduy])*$\"</code> = '^igmsduy$'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>replacer</code>: { <code>default</code>: <code>\"**SECURE**\"</code> = 'SECURE*'; <code>description</code>: <code>\"Replacement string for matched text\"</code> = 'Replacement string for matched text'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>type</code>: <code>\"object\"</code> = 'object' }, { <code>anyOf</code>: readonly [{ <code>$ref</code>: <code>\"#/$defs/logFilterText\"</code> = '#/$defs/logFilterText' }, { <code>$ref</code>: <code>\"#/$defs/logFilterRegex\"</code> = '#/$defs/logFilterRegex' }]  }] <code>$defs.logFilter.description</code> <code>\"Log filtering rule\"</code> <code>$defs.logFilter.type</code> <code>\"object\"</code> <code>$defs.logFilterRegex</code> { <code>description</code>: <code>\"Log filter with regular expression\"</code> = 'Log filter with regular expression'; <code>not</code>: { <code>required</code>: readonly [<code>\"text\"</code>]  } ; <code>properties</code>: { <code>pattern</code>: { <code>description</code>: <code>\"Regex pattern to match\"</code> = 'Regex pattern to match'; <code>format</code>: <code>\"regex\"</code> = 'regex'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>required</code>: readonly [<code>\"pattern\"</code>] ; <code>type</code>: <code>\"object\"</code> = 'object' } <code>$defs.logFilterRegex.description</code> <code>\"Log filter with regular expression\"</code> <code>$defs.logFilterRegex.not</code> { <code>required</code>: readonly [<code>\"text\"</code>]  } <code>$defs.logFilterRegex.not.required</code> readonly [<code>\"text\"</code>] <code>$defs.logFilterRegex.properties</code> { <code>pattern</code>: { <code>description</code>: <code>\"Regex pattern to match\"</code> = 'Regex pattern to match'; <code>format</code>: <code>\"regex\"</code> = 'regex'; <code>type</code>: <code>\"string\"</code> = 'string' }  } <code>$defs.logFilterRegex.properties.pattern</code> { <code>description</code>: <code>\"Regex pattern to match\"</code> = 'Regex pattern to match'; <code>format</code>: <code>\"regex\"</code> = 'regex'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>$defs.logFilterRegex.properties.pattern.description</code> <code>\"Regex pattern to match\"</code> <code>$defs.logFilterRegex.properties.pattern.format</code> <code>\"regex\"</code> <code>$defs.logFilterRegex.properties.pattern.type</code> <code>\"string\"</code> <code>$defs.logFilterRegex.required</code> readonly [<code>\"pattern\"</code>] <code>$defs.logFilterRegex.type</code> <code>\"object\"</code> <code>$defs.logFilterText</code> { <code>description</code>: <code>\"Log filter with plain text\"</code> = 'Log filter with plain text'; <code>not</code>: { <code>required</code>: readonly [<code>\"pattern\"</code>]  } ; <code>properties</code>: { <code>text</code>: { <code>description</code>: <code>\"Text to match\"</code> = 'Text to match'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>required</code>: readonly [<code>\"text\"</code>] ; <code>type</code>: <code>\"object\"</code> = 'object' } <code>$defs.logFilterText.description</code> <code>\"Log filter with plain text\"</code> <code>$defs.logFilterText.not</code> { <code>required</code>: readonly [<code>\"pattern\"</code>]  } <code>$defs.logFilterText.not.required</code> readonly [<code>\"pattern\"</code>] <code>$defs.logFilterText.properties</code> { <code>text</code>: { <code>description</code>: <code>\"Text to match\"</code> = 'Text to match'; <code>type</code>: <code>\"string\"</code> = 'string' }  } <code>$defs.logFilterText.properties.text</code> { <code>description</code>: <code>\"Text to match\"</code> = 'Text to match'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>$defs.logFilterText.properties.text.description</code> <code>\"Text to match\"</code> <code>$defs.logFilterText.properties.text.type</code> <code>\"string\"</code> <code>$defs.logFilterText.required</code> readonly [<code>\"text\"</code>] <code>$defs.logFilterText.type</code> <code>\"object\"</code> <code>$schema</code> <code>\"http://json-schema.org/draft-07/schema\"</code> <code>additionalProperties</code> <code>false</code> <code>description</code> <code>\"A schema for Appium configuration files\"</code> <code>properties</code> { <code>$schema</code>: { <code>default</code>: <code>\"https://raw.githubusercontent.com/appium/appium/master/packages/schema/lib/appium-config.schema.json\"</code> = 'https://raw.githubusercontent.com/appium/appium/master/packages/schema/lib/appium-config.schema.json'; <code>description</code>: <code>\"The JSON schema for this file\"</code> = 'The JSON schema for this file'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>server</code>: { <code>additionalProperties</code>: <code>false</code> = false; <code>description</code>: <code>\"Configuration when running Appium as a server\"</code> = 'Configuration when running Appium as a server'; <code>properties</code>: { <code>address</code>: { <code>anyOf</code>: readonly [{ <code>format</code>: <code>\"hostname\"</code> = 'hostname'; <code>type</code>: <code>\"string\"</code> = 'string' }, { <code>format</code>: <code>\"ipv6\"</code> = 'ipv6'; <code>type</code>: <code>\"string\"</code> = 'string' }] ; <code>appiumCliAliases</code>: readonly [<code>\"a\"</code>] ; <code>default</code>: <code>\"0.0.0.0\"</code> = '0.0.0.0'; <code>description</code>: <code>\"IPv4/IPv6 address or a hostname to listen on\"</code> = 'IPv4/IPv6 address or a hostname to listen on'; <code>title</code>: <code>\"address config\"</code> = 'address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>allow-cors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Whether the Appium server should allow web browser connections from any host\"</code> = 'Whether the Appium server should allow web browser connections from any host'; <code>title</code>: <code>\"allow-cors config\"</code> = 'allow-cors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>allow-insecure</code>: { <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \\\"deny-insecure\\\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"allow-insecure config\"</code> = 'allow-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>base-path</code>: { <code>appiumCliAliases</code>: readonly [<code>\"pa\"</code>] ; <code>default</code>: <code>\"\"</code> = ''; <code>description</code>: <code>\"Base path to use as the prefix for all webdriver routes running on the server\"</code> = 'Base path to use as the prefix for all webdriver routes running on the server'; <code>title</code>: <code>\"base-path config\"</code> = 'base-path config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-address</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ca\"</code>] ; <code>description</code>: <code>\"Callback IP address (default: same as \\\"address\\\")\"</code> = 'Callback IP address (default: same as \"address\")'; <code>title</code>: <code>\"callback-address config\"</code> = 'callback-address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"cp\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Callback port (default: same as \\\"port\\\")\"</code> = 'Callback port (default: same as \"port\")'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"callback-port config\"</code> = 'callback-port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>debug-log-spacing</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add exaggerated spacing in logs to help with visual inspection\"</code> = 'Add exaggerated spacing in logs to help with visual inspection'; <code>title</code>: <code>\"debug-log-spacing config\"</code> = 'debug-log-spacing config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>default-capabilities</code>: { <code>$comment</code>: <code>\"TODO\"</code> = 'TODO'; <code>appiumCliAliases</code>: readonly [<code>\"dc\"</code>] ; <code>description</code>: <code>\"Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.\"</code> = 'Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.'; <code>title</code>: <code>\"default-capabilities config\"</code> = 'default-capabilities config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>deny-insecure</code>: { <code>$comment</code>: <code>\"Allowed values are defined by drivers\"</code> = 'Allowed values are defined by drivers'; <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \\\"allow-insecure\\\", and even if \\\"relaxed-security\\\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are not allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"deny-insecure config\"</code> = 'deny-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>driver</code>: { <code>description</code>: <code>\"Driver-specific configuration. Keys should correspond to driver package names\"</code> = 'Driver-specific configuration. Keys should correspond to driver package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"driver config\"</code> = 'driver config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>keep-alive-timeout</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ka\"</code>] ; <code>default</code>: <code>600</code> = 600; <code>description</code>: <code>\"Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.\"</code> = 'Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.'; <code>minimum</code>: <code>0</code> = 0; <code>title</code>: <code>\"keep-alive-timeout config\"</code> = 'keep-alive-timeout config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>local-timezone</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Use local timezone for timestamps\"</code> = 'Use local timezone for timestamps'; <code>title</code>: <code>\"local-timezone config\"</code> = 'local-timezone config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log</code>: { <code>appiumCliAliases</code>: readonly [<code>\"g\"</code>] ; <code>appiumCliDest</code>: <code>\"logFile\"</code> = 'logFile'; <code>description</code>: <code>\"Also send log output to this file\"</code> = 'Also send log output to this file'; <code>title</code>: <code>\"log config\"</code> = 'log config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-filters</code>: { <code>appiumCliTransformer</code>: <code>\"json\"</code> = 'json'; <code>description</code>: <code>\"One or more log filtering rules\"</code> = 'One or more log filtering rules'; <code>items</code>: { <code>$ref</code>: <code>\"#/$defs/logFilter\"</code> = '#/$defs/logFilter' } ; <code>title</code>: <code>\"log-filters config\"</code> = 'log-filters config'; <code>type</code>: <code>\"array\"</code> = 'array' } ; <code>log-level</code>: { <code>appiumCliDest</code>: <code>\"loglevel\"</code> = 'loglevel'; <code>default</code>: <code>\"debug\"</code> = 'debug'; <code>description</code>: <code>\"Log level (console[:file])\"</code> = 'Log level (console[:file])'; <code>enum</code>: readonly [<code>\"info\"</code>, <code>\"info:debug\"</code>, <code>\"info:info\"</code>, <code>\"info:warn\"</code>, <code>\"info:error\"</code>, <code>\"warn\"</code>, <code>\"warn:debug\"</code>, <code>\"warn:info\"</code>, <code>\"warn:warn\"</code>, <code>\"warn:error\"</code>, <code>\"error\"</code>, <code>\"error:debug\"</code>, <code>\"error:info\"</code>, <code>\"error:warn\"</code>, <code>\"error:error\"</code>, <code>\"debug\"</code>, <code>\"debug:debug\"</code>, <code>\"debug:info\"</code>, <code>\"debug:warn\"</code>, <code>\"debug:error\"</code>] ; <code>title</code>: <code>\"log-level config\"</code> = 'log-level config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-no-colors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not use color in console output\"</code> = 'Do not use color in console output'; <code>title</code>: <code>\"log-no-colors config\"</code> = 'log-no-colors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log-timestamp</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Show timestamps in console output\"</code> = 'Show timestamps in console output'; <code>title</code>: <code>\"log-timestamp config\"</code> = 'log-timestamp config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>long-stacktrace</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add long stack traces to log entries. Recommended for debugging only.\"</code> = 'Add long stack traces to log entries. Recommended for debugging only.'; <code>title</code>: <code>\"long-stacktrace config\"</code> = 'long-stacktrace config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>no-perms-check</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not check that needed files are readable and/or writable\"</code> = 'Do not check that needed files are readable and/or writable'; <code>title</code>: <code>\"no-perms-check config\"</code> = 'no-perms-check config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>nodeconfig</code>: { <code>$comment</code>: <code>\"Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.\"</code> = 'Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.'; <code>description</code>: <code>\"Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself\"</code> = 'Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself'; <code>title</code>: <code>\"nodeconfig config\"</code> = 'nodeconfig config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>plugin</code>: { <code>description</code>: <code>\"Plugin-specific configuration. Keys should correspond to plugin package names\"</code> = 'Plugin-specific configuration. Keys should correspond to plugin package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"plugin config\"</code> = 'plugin config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"p\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Port to listen on\"</code> = 'Port to listen on'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"port config\"</code> = 'port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>relaxed-security</code>: { <code>appiumCliDest</code>: <code>\"relaxedSecurityEnabled\"</code> = 'relaxedSecurityEnabled'; <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \\\"deny-insecure\\\"\"</code> = 'Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it\\'s not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\"'; <code>title</code>: <code>\"relaxed-security config\"</code> = 'relaxed-security config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>session-override</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Enables session override (clobbering)\"</code> = 'Enables session override (clobbering)'; <code>title</code>: <code>\"session-override config\"</code> = 'session-override config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>strict-caps</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\"</code> = 'Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device'; <code>title</code>: <code>\"strict-caps config\"</code> = 'strict-caps config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>tmp</code>: { <code>appiumCliDest</code>: <code>\"tmpDir\"</code> = 'tmpDir'; <code>description</code>: <code>\"Absolute path to directory Appium can use to manage temp files. Defaults to C:\\\\Windows\\\\Temp on Windows and /tmp otherwise.\"</code> = 'Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise.'; <code>title</code>: <code>\"tmp config\"</code> = 'tmp config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>trace-dir</code>: { <code>description</code>: <code>\"Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments\"</code> = 'Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments'; <code>title</code>: <code>\"trace-dir config\"</code> = 'trace-dir config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>use-drivers</code>: { <code>appiumCliDescription</code>: <code>\"A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of drivers to activate. By default, all installed drivers will be activated.\"</code> = 'A list of drivers to activate. By default, all installed drivers will be activated.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-drivers config\"</code> = 'use-drivers config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>use-plugins</code>: { <code>appiumCliDescription</code>: <code>\"A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \\\"all\\\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \"all\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of plugins to activate. To activate all plugins, the value should be an array with a single item \\\"all\\\".\"</code> = 'A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\".'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-plugins config\"</code> = 'use-plugins config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>webhook</code>: { <code>$comment</code>: <code>\"This should probably use a uri-template format to restrict the protocol to http/https\"</code> = 'This should probably use a uri-template format to restrict the protocol to http/https'; <code>appiumCliAliases</code>: readonly [<code>\"G\"</code>] ; <code>description</code>: <code>\"Also send log output to this http listener\"</code> = 'Also send log output to this http listener'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>title</code>: <code>\"webhook config\"</code> = 'webhook config'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>title</code>: <code>\"server config\"</code> = 'server config'; <code>type</code>: <code>\"object\"</code> = 'object' }  } <code>properties.$schema</code> { <code>default</code>: <code>\"https://raw.githubusercontent.com/appium/appium/master/packages/schema/lib/appium-config.schema.json\"</code> = 'https://raw.githubusercontent.com/appium/appium/master/packages/schema/lib/appium-config.schema.json'; <code>description</code>: <code>\"The JSON schema for this file\"</code> = 'The JSON schema for this file'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.$schema.default</code> <code>\"https://raw.githubusercontent.com/appium/appium/master/packages/schema/lib/appium-config.schema.json\"</code> <code>properties.$schema.description</code> <code>\"The JSON schema for this file\"</code> <code>properties.$schema.format</code> <code>\"uri\"</code> <code>properties.$schema.type</code> <code>\"string\"</code> <code>properties.server</code> { <code>additionalProperties</code>: <code>false</code> = false; <code>description</code>: <code>\"Configuration when running Appium as a server\"</code> = 'Configuration when running Appium as a server'; <code>properties</code>: { <code>address</code>: { <code>anyOf</code>: readonly [{ <code>format</code>: <code>\"hostname\"</code> = 'hostname'; <code>type</code>: <code>\"string\"</code> = 'string' }, { <code>format</code>: <code>\"ipv6\"</code> = 'ipv6'; <code>type</code>: <code>\"string\"</code> = 'string' }] ; <code>appiumCliAliases</code>: readonly [<code>\"a\"</code>] ; <code>default</code>: <code>\"0.0.0.0\"</code> = '0.0.0.0'; <code>description</code>: <code>\"IPv4/IPv6 address or a hostname to listen on\"</code> = 'IPv4/IPv6 address or a hostname to listen on'; <code>title</code>: <code>\"address config\"</code> = 'address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>allow-cors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Whether the Appium server should allow web browser connections from any host\"</code> = 'Whether the Appium server should allow web browser connections from any host'; <code>title</code>: <code>\"allow-cors config\"</code> = 'allow-cors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>allow-insecure</code>: { <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \\\"deny-insecure\\\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"allow-insecure config\"</code> = 'allow-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>base-path</code>: { <code>appiumCliAliases</code>: readonly [<code>\"pa\"</code>] ; <code>default</code>: <code>\"\"</code> = ''; <code>description</code>: <code>\"Base path to use as the prefix for all webdriver routes running on the server\"</code> = 'Base path to use as the prefix for all webdriver routes running on the server'; <code>title</code>: <code>\"base-path config\"</code> = 'base-path config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-address</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ca\"</code>] ; <code>description</code>: <code>\"Callback IP address (default: same as \\\"address\\\")\"</code> = 'Callback IP address (default: same as \"address\")'; <code>title</code>: <code>\"callback-address config\"</code> = 'callback-address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"cp\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Callback port (default: same as \\\"port\\\")\"</code> = 'Callback port (default: same as \"port\")'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"callback-port config\"</code> = 'callback-port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>debug-log-spacing</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add exaggerated spacing in logs to help with visual inspection\"</code> = 'Add exaggerated spacing in logs to help with visual inspection'; <code>title</code>: <code>\"debug-log-spacing config\"</code> = 'debug-log-spacing config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>default-capabilities</code>: { <code>$comment</code>: <code>\"TODO\"</code> = 'TODO'; <code>appiumCliAliases</code>: readonly [<code>\"dc\"</code>] ; <code>description</code>: <code>\"Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.\"</code> = 'Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.'; <code>title</code>: <code>\"default-capabilities config\"</code> = 'default-capabilities config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>deny-insecure</code>: { <code>$comment</code>: <code>\"Allowed values are defined by drivers\"</code> = 'Allowed values are defined by drivers'; <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \\\"allow-insecure\\\", and even if \\\"relaxed-security\\\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are not allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"deny-insecure config\"</code> = 'deny-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>driver</code>: { <code>description</code>: <code>\"Driver-specific configuration. Keys should correspond to driver package names\"</code> = 'Driver-specific configuration. Keys should correspond to driver package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"driver config\"</code> = 'driver config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>keep-alive-timeout</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ka\"</code>] ; <code>default</code>: <code>600</code> = 600; <code>description</code>: <code>\"Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.\"</code> = 'Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.'; <code>minimum</code>: <code>0</code> = 0; <code>title</code>: <code>\"keep-alive-timeout config\"</code> = 'keep-alive-timeout config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>local-timezone</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Use local timezone for timestamps\"</code> = 'Use local timezone for timestamps'; <code>title</code>: <code>\"local-timezone config\"</code> = 'local-timezone config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log</code>: { <code>appiumCliAliases</code>: readonly [<code>\"g\"</code>] ; <code>appiumCliDest</code>: <code>\"logFile\"</code> = 'logFile'; <code>description</code>: <code>\"Also send log output to this file\"</code> = 'Also send log output to this file'; <code>title</code>: <code>\"log config\"</code> = 'log config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-filters</code>: { <code>appiumCliTransformer</code>: <code>\"json\"</code> = 'json'; <code>description</code>: <code>\"One or more log filtering rules\"</code> = 'One or more log filtering rules'; <code>items</code>: { <code>$ref</code>: <code>\"#/$defs/logFilter\"</code> = '#/$defs/logFilter' } ; <code>title</code>: <code>\"log-filters config\"</code> = 'log-filters config'; <code>type</code>: <code>\"array\"</code> = 'array' } ; <code>log-level</code>: { <code>appiumCliDest</code>: <code>\"loglevel\"</code> = 'loglevel'; <code>default</code>: <code>\"debug\"</code> = 'debug'; <code>description</code>: <code>\"Log level (console[:file])\"</code> = 'Log level (console[:file])'; <code>enum</code>: readonly [<code>\"info\"</code>, <code>\"info:debug\"</code>, <code>\"info:info\"</code>, <code>\"info:warn\"</code>, <code>\"info:error\"</code>, <code>\"warn\"</code>, <code>\"warn:debug\"</code>, <code>\"warn:info\"</code>, <code>\"warn:warn\"</code>, <code>\"warn:error\"</code>, <code>\"error\"</code>, <code>\"error:debug\"</code>, <code>\"error:info\"</code>, <code>\"error:warn\"</code>, <code>\"error:error\"</code>, <code>\"debug\"</code>, <code>\"debug:debug\"</code>, <code>\"debug:info\"</code>, <code>\"debug:warn\"</code>, <code>\"debug:error\"</code>] ; <code>title</code>: <code>\"log-level config\"</code> = 'log-level config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-no-colors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not use color in console output\"</code> = 'Do not use color in console output'; <code>title</code>: <code>\"log-no-colors config\"</code> = 'log-no-colors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log-timestamp</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Show timestamps in console output\"</code> = 'Show timestamps in console output'; <code>title</code>: <code>\"log-timestamp config\"</code> = 'log-timestamp config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>long-stacktrace</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add long stack traces to log entries. Recommended for debugging only.\"</code> = 'Add long stack traces to log entries. Recommended for debugging only.'; <code>title</code>: <code>\"long-stacktrace config\"</code> = 'long-stacktrace config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>no-perms-check</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not check that needed files are readable and/or writable\"</code> = 'Do not check that needed files are readable and/or writable'; <code>title</code>: <code>\"no-perms-check config\"</code> = 'no-perms-check config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>nodeconfig</code>: { <code>$comment</code>: <code>\"Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.\"</code> = 'Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.'; <code>description</code>: <code>\"Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself\"</code> = 'Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself'; <code>title</code>: <code>\"nodeconfig config\"</code> = 'nodeconfig config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>plugin</code>: { <code>description</code>: <code>\"Plugin-specific configuration. Keys should correspond to plugin package names\"</code> = 'Plugin-specific configuration. Keys should correspond to plugin package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"plugin config\"</code> = 'plugin config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"p\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Port to listen on\"</code> = 'Port to listen on'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"port config\"</code> = 'port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>relaxed-security</code>: { <code>appiumCliDest</code>: <code>\"relaxedSecurityEnabled\"</code> = 'relaxedSecurityEnabled'; <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \\\"deny-insecure\\\"\"</code> = 'Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it\\'s not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\"'; <code>title</code>: <code>\"relaxed-security config\"</code> = 'relaxed-security config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>session-override</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Enables session override (clobbering)\"</code> = 'Enables session override (clobbering)'; <code>title</code>: <code>\"session-override config\"</code> = 'session-override config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>strict-caps</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\"</code> = 'Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device'; <code>title</code>: <code>\"strict-caps config\"</code> = 'strict-caps config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>tmp</code>: { <code>appiumCliDest</code>: <code>\"tmpDir\"</code> = 'tmpDir'; <code>description</code>: <code>\"Absolute path to directory Appium can use to manage temp files. Defaults to C:\\\\Windows\\\\Temp on Windows and /tmp otherwise.\"</code> = 'Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise.'; <code>title</code>: <code>\"tmp config\"</code> = 'tmp config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>trace-dir</code>: { <code>description</code>: <code>\"Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments\"</code> = 'Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments'; <code>title</code>: <code>\"trace-dir config\"</code> = 'trace-dir config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>use-drivers</code>: { <code>appiumCliDescription</code>: <code>\"A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of drivers to activate. By default, all installed drivers will be activated.\"</code> = 'A list of drivers to activate. By default, all installed drivers will be activated.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-drivers config\"</code> = 'use-drivers config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>use-plugins</code>: { <code>appiumCliDescription</code>: <code>\"A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \\\"all\\\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \"all\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of plugins to activate. To activate all plugins, the value should be an array with a single item \\\"all\\\".\"</code> = 'A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\".'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-plugins config\"</code> = 'use-plugins config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>webhook</code>: { <code>$comment</code>: <code>\"This should probably use a uri-template format to restrict the protocol to http/https\"</code> = 'This should probably use a uri-template format to restrict the protocol to http/https'; <code>appiumCliAliases</code>: readonly [<code>\"G\"</code>] ; <code>description</code>: <code>\"Also send log output to this http listener\"</code> = 'Also send log output to this http listener'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>title</code>: <code>\"webhook config\"</code> = 'webhook config'; <code>type</code>: <code>\"string\"</code> = 'string' }  } ; <code>title</code>: <code>\"server config\"</code> = 'server config'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>properties.server.additionalProperties</code> <code>false</code> <code>properties.server.description</code> <code>\"Configuration when running Appium as a server\"</code> <code>properties.server.properties</code> { <code>address</code>: { <code>anyOf</code>: readonly [{ <code>format</code>: <code>\"hostname\"</code> = 'hostname'; <code>type</code>: <code>\"string\"</code> = 'string' }, { <code>format</code>: <code>\"ipv6\"</code> = 'ipv6'; <code>type</code>: <code>\"string\"</code> = 'string' }] ; <code>appiumCliAliases</code>: readonly [<code>\"a\"</code>] ; <code>default</code>: <code>\"0.0.0.0\"</code> = '0.0.0.0'; <code>description</code>: <code>\"IPv4/IPv6 address or a hostname to listen on\"</code> = 'IPv4/IPv6 address or a hostname to listen on'; <code>title</code>: <code>\"address config\"</code> = 'address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>allow-cors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Whether the Appium server should allow web browser connections from any host\"</code> = 'Whether the Appium server should allow web browser connections from any host'; <code>title</code>: <code>\"allow-cors config\"</code> = 'allow-cors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>allow-insecure</code>: { <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \\\"deny-insecure\\\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"allow-insecure config\"</code> = 'allow-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>base-path</code>: { <code>appiumCliAliases</code>: readonly [<code>\"pa\"</code>] ; <code>default</code>: <code>\"\"</code> = ''; <code>description</code>: <code>\"Base path to use as the prefix for all webdriver routes running on the server\"</code> = 'Base path to use as the prefix for all webdriver routes running on the server'; <code>title</code>: <code>\"base-path config\"</code> = 'base-path config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-address</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ca\"</code>] ; <code>description</code>: <code>\"Callback IP address (default: same as \\\"address\\\")\"</code> = 'Callback IP address (default: same as \"address\")'; <code>title</code>: <code>\"callback-address config\"</code> = 'callback-address config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>callback-port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"cp\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Callback port (default: same as \\\"port\\\")\"</code> = 'Callback port (default: same as \"port\")'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"callback-port config\"</code> = 'callback-port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>debug-log-spacing</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add exaggerated spacing in logs to help with visual inspection\"</code> = 'Add exaggerated spacing in logs to help with visual inspection'; <code>title</code>: <code>\"debug-log-spacing config\"</code> = 'debug-log-spacing config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>default-capabilities</code>: { <code>$comment</code>: <code>\"TODO\"</code> = 'TODO'; <code>appiumCliAliases</code>: readonly [<code>\"dc\"</code>] ; <code>description</code>: <code>\"Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.\"</code> = 'Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.'; <code>title</code>: <code>\"default-capabilities config\"</code> = 'default-capabilities config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>deny-insecure</code>: { <code>$comment</code>: <code>\"Allowed values are defined by drivers\"</code> = 'Allowed values are defined by drivers'; <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \\\"allow-insecure\\\", and even if \\\"relaxed-security\\\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are not allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"deny-insecure config\"</code> = 'deny-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>driver</code>: { <code>description</code>: <code>\"Driver-specific configuration. Keys should correspond to driver package names\"</code> = 'Driver-specific configuration. Keys should correspond to driver package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"driver config\"</code> = 'driver config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>keep-alive-timeout</code>: { <code>appiumCliAliases</code>: readonly [<code>\"ka\"</code>] ; <code>default</code>: <code>600</code> = 600; <code>description</code>: <code>\"Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.\"</code> = 'Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.'; <code>minimum</code>: <code>0</code> = 0; <code>title</code>: <code>\"keep-alive-timeout config\"</code> = 'keep-alive-timeout config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>local-timezone</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Use local timezone for timestamps\"</code> = 'Use local timezone for timestamps'; <code>title</code>: <code>\"local-timezone config\"</code> = 'local-timezone config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log</code>: { <code>appiumCliAliases</code>: readonly [<code>\"g\"</code>] ; <code>appiumCliDest</code>: <code>\"logFile\"</code> = 'logFile'; <code>description</code>: <code>\"Also send log output to this file\"</code> = 'Also send log output to this file'; <code>title</code>: <code>\"log config\"</code> = 'log config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-filters</code>: { <code>appiumCliTransformer</code>: <code>\"json\"</code> = 'json'; <code>description</code>: <code>\"One or more log filtering rules\"</code> = 'One or more log filtering rules'; <code>items</code>: { <code>$ref</code>: <code>\"#/$defs/logFilter\"</code> = '#/$defs/logFilter' } ; <code>title</code>: <code>\"log-filters config\"</code> = 'log-filters config'; <code>type</code>: <code>\"array\"</code> = 'array' } ; <code>log-level</code>: { <code>appiumCliDest</code>: <code>\"loglevel\"</code> = 'loglevel'; <code>default</code>: <code>\"debug\"</code> = 'debug'; <code>description</code>: <code>\"Log level (console[:file])\"</code> = 'Log level (console[:file])'; <code>enum</code>: readonly [<code>\"info\"</code>, <code>\"info:debug\"</code>, <code>\"info:info\"</code>, <code>\"info:warn\"</code>, <code>\"info:error\"</code>, <code>\"warn\"</code>, <code>\"warn:debug\"</code>, <code>\"warn:info\"</code>, <code>\"warn:warn\"</code>, <code>\"warn:error\"</code>, <code>\"error\"</code>, <code>\"error:debug\"</code>, <code>\"error:info\"</code>, <code>\"error:warn\"</code>, <code>\"error:error\"</code>, <code>\"debug\"</code>, <code>\"debug:debug\"</code>, <code>\"debug:info\"</code>, <code>\"debug:warn\"</code>, <code>\"debug:error\"</code>] ; <code>title</code>: <code>\"log-level config\"</code> = 'log-level config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>log-no-colors</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not use color in console output\"</code> = 'Do not use color in console output'; <code>title</code>: <code>\"log-no-colors config\"</code> = 'log-no-colors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>log-timestamp</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Show timestamps in console output\"</code> = 'Show timestamps in console output'; <code>title</code>: <code>\"log-timestamp config\"</code> = 'log-timestamp config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>long-stacktrace</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add long stack traces to log entries. Recommended for debugging only.\"</code> = 'Add long stack traces to log entries. Recommended for debugging only.'; <code>title</code>: <code>\"long-stacktrace config\"</code> = 'long-stacktrace config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>no-perms-check</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not check that needed files are readable and/or writable\"</code> = 'Do not check that needed files are readable and/or writable'; <code>title</code>: <code>\"no-perms-check config\"</code> = 'no-perms-check config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>nodeconfig</code>: { <code>$comment</code>: <code>\"Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.\"</code> = 'Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.'; <code>description</code>: <code>\"Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself\"</code> = 'Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself'; <code>title</code>: <code>\"nodeconfig config\"</code> = 'nodeconfig config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>plugin</code>: { <code>description</code>: <code>\"Plugin-specific configuration. Keys should correspond to plugin package names\"</code> = 'Plugin-specific configuration. Keys should correspond to plugin package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"plugin config\"</code> = 'plugin config'; <code>type</code>: <code>\"object\"</code> = 'object' } ; <code>port</code>: { <code>appiumCliAliases</code>: readonly [<code>\"p\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Port to listen on\"</code> = 'Port to listen on'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"port config\"</code> = 'port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } ; <code>relaxed-security</code>: { <code>appiumCliDest</code>: <code>\"relaxedSecurityEnabled\"</code> = 'relaxedSecurityEnabled'; <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \\\"deny-insecure\\\"\"</code> = 'Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it\\'s not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\"'; <code>title</code>: <code>\"relaxed-security config\"</code> = 'relaxed-security config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>session-override</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Enables session override (clobbering)\"</code> = 'Enables session override (clobbering)'; <code>title</code>: <code>\"session-override config\"</code> = 'session-override config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>strict-caps</code>: { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\"</code> = 'Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device'; <code>title</code>: <code>\"strict-caps config\"</code> = 'strict-caps config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } ; <code>tmp</code>: { <code>appiumCliDest</code>: <code>\"tmpDir\"</code> = 'tmpDir'; <code>description</code>: <code>\"Absolute path to directory Appium can use to manage temp files. Defaults to C:\\\\Windows\\\\Temp on Windows and /tmp otherwise.\"</code> = 'Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise.'; <code>title</code>: <code>\"tmp config\"</code> = 'tmp config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>trace-dir</code>: { <code>description</code>: <code>\"Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments\"</code> = 'Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments'; <code>title</code>: <code>\"trace-dir config\"</code> = 'trace-dir config'; <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>use-drivers</code>: { <code>appiumCliDescription</code>: <code>\"A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of drivers to activate. By default, all installed drivers will be activated.\"</code> = 'A list of drivers to activate. By default, all installed drivers will be activated.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-drivers config\"</code> = 'use-drivers config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>use-plugins</code>: { <code>appiumCliDescription</code>: <code>\"A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \\\"all\\\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \"all\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of plugins to activate. To activate all plugins, the value should be an array with a single item \\\"all\\\".\"</code> = 'A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\".'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-plugins config\"</code> = 'use-plugins config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } ; <code>webhook</code>: { <code>$comment</code>: <code>\"This should probably use a uri-template format to restrict the protocol to http/https\"</code> = 'This should probably use a uri-template format to restrict the protocol to http/https'; <code>appiumCliAliases</code>: readonly [<code>\"G\"</code>] ; <code>description</code>: <code>\"Also send log output to this http listener\"</code> = 'Also send log output to this http listener'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>title</code>: <code>\"webhook config\"</code> = 'webhook config'; <code>type</code>: <code>\"string\"</code> = 'string' }  } <code>properties.server.properties.address</code> { <code>anyOf</code>: readonly [{ <code>format</code>: <code>\"hostname\"</code> = 'hostname'; <code>type</code>: <code>\"string\"</code> = 'string' }, { <code>format</code>: <code>\"ipv6\"</code> = 'ipv6'; <code>type</code>: <code>\"string\"</code> = 'string' }] ; <code>appiumCliAliases</code>: readonly [<code>\"a\"</code>] ; <code>default</code>: <code>\"0.0.0.0\"</code> = '0.0.0.0'; <code>description</code>: <code>\"IPv4/IPv6 address or a hostname to listen on\"</code> = 'IPv4/IPv6 address or a hostname to listen on'; <code>title</code>: <code>\"address config\"</code> = 'address config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.address.anyOf</code> readonly [{ <code>format</code>: <code>\"hostname\"</code> = 'hostname'; <code>type</code>: <code>\"string\"</code> = 'string' }, { <code>format</code>: <code>\"ipv6\"</code> = 'ipv6'; <code>type</code>: <code>\"string\"</code> = 'string' }] <code>properties.server.properties.address.appiumCliAliases</code> readonly [<code>\"a\"</code>] <code>properties.server.properties.address.default</code> <code>\"0.0.0.0\"</code> <code>properties.server.properties.address.description</code> <code>\"IPv4/IPv6 address or a hostname to listen on\"</code> <code>properties.server.properties.address.title</code> <code>\"address config\"</code> <code>properties.server.properties.address.type</code> <code>\"string\"</code> <code>properties.server.properties.allow-cors</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Whether the Appium server should allow web browser connections from any host\"</code> = 'Whether the Appium server should allow web browser connections from any host'; <code>title</code>: <code>\"allow-cors config\"</code> = 'allow-cors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.allow-cors.default</code> <code>false</code> <code>properties.server.properties.allow-cors.description</code> <code>\"Whether the Appium server should allow web browser connections from any host\"</code> <code>properties.server.properties.allow-cors.title</code> <code>\"allow-cors config\"</code> <code>properties.server.properties.allow-cors.type</code> <code>\"boolean\"</code> <code>properties.server.properties.allow-insecure</code> { <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \\\"deny-insecure\\\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"allow-insecure config\"</code> = 'allow-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } <code>properties.server.properties.allow-insecure.appiumCliTransformer</code> <code>\"csv\"</code> <code>properties.server.properties.allow-insecure.default</code> readonly [] <code>properties.server.properties.allow-insecure.description</code> <code>\"Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \\\"deny-insecure\\\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.\"</code> <code>properties.server.properties.allow-insecure.items</code> { <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.allow-insecure.items.type</code> <code>\"string\"</code> <code>properties.server.properties.allow-insecure.title</code> <code>\"allow-insecure config\"</code> <code>properties.server.properties.allow-insecure.type</code> <code>\"array\"</code> <code>properties.server.properties.allow-insecure.uniqueItems</code> <code>true</code> <code>properties.server.properties.base-path</code> { <code>appiumCliAliases</code>: readonly [<code>\"pa\"</code>] ; <code>default</code>: <code>\"\"</code> = ''; <code>description</code>: <code>\"Base path to use as the prefix for all webdriver routes running on the server\"</code> = 'Base path to use as the prefix for all webdriver routes running on the server'; <code>title</code>: <code>\"base-path config\"</code> = 'base-path config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.base-path.appiumCliAliases</code> readonly [<code>\"pa\"</code>] <code>properties.server.properties.base-path.default</code> <code>\"\"</code> <code>properties.server.properties.base-path.description</code> <code>\"Base path to use as the prefix for all webdriver routes running on the server\"</code> <code>properties.server.properties.base-path.title</code> <code>\"base-path config\"</code> <code>properties.server.properties.base-path.type</code> <code>\"string\"</code> <code>properties.server.properties.callback-address</code> { <code>appiumCliAliases</code>: readonly [<code>\"ca\"</code>] ; <code>description</code>: <code>\"Callback IP address (default: same as \\\"address\\\")\"</code> = 'Callback IP address (default: same as \"address\")'; <code>title</code>: <code>\"callback-address config\"</code> = 'callback-address config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.callback-address.appiumCliAliases</code> readonly [<code>\"ca\"</code>] <code>properties.server.properties.callback-address.description</code> <code>\"Callback IP address (default: same as \\\"address\\\")\"</code> <code>properties.server.properties.callback-address.title</code> <code>\"callback-address config\"</code> <code>properties.server.properties.callback-address.type</code> <code>\"string\"</code> <code>properties.server.properties.callback-port</code> { <code>appiumCliAliases</code>: readonly [<code>\"cp\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Callback port (default: same as \\\"port\\\")\"</code> = 'Callback port (default: same as \"port\")'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"callback-port config\"</code> = 'callback-port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } <code>properties.server.properties.callback-port.appiumCliAliases</code> readonly [<code>\"cp\"</code>] <code>properties.server.properties.callback-port.default</code> <code>4723</code> <code>properties.server.properties.callback-port.description</code> <code>\"Callback port (default: same as \\\"port\\\")\"</code> <code>properties.server.properties.callback-port.maximum</code> <code>65535</code> <code>properties.server.properties.callback-port.minimum</code> <code>1</code> <code>properties.server.properties.callback-port.title</code> <code>\"callback-port config\"</code> <code>properties.server.properties.callback-port.type</code> <code>\"integer\"</code> <code>properties.server.properties.debug-log-spacing</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add exaggerated spacing in logs to help with visual inspection\"</code> = 'Add exaggerated spacing in logs to help with visual inspection'; <code>title</code>: <code>\"debug-log-spacing config\"</code> = 'debug-log-spacing config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.debug-log-spacing.default</code> <code>false</code> <code>properties.server.properties.debug-log-spacing.description</code> <code>\"Add exaggerated spacing in logs to help with visual inspection\"</code> <code>properties.server.properties.debug-log-spacing.title</code> <code>\"debug-log-spacing config\"</code> <code>properties.server.properties.debug-log-spacing.type</code> <code>\"boolean\"</code> <code>properties.server.properties.default-capabilities</code> { <code>$comment</code>: <code>\"TODO\"</code> = 'TODO'; <code>appiumCliAliases</code>: readonly [<code>\"dc\"</code>] ; <code>description</code>: <code>\"Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.\"</code> = 'Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.'; <code>title</code>: <code>\"default-capabilities config\"</code> = 'default-capabilities config'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>properties.server.properties.default-capabilities.$comment</code> <code>\"TODO\"</code> <code>properties.server.properties.default-capabilities.appiumCliAliases</code> readonly [<code>\"dc\"</code>] <code>properties.server.properties.default-capabilities.description</code> <code>\"Set the default desired capabilities, which will be set on each session unless overridden by received capabilities. If a string, a path to a JSON file containing the capabilities, or raw JSON.\"</code> <code>properties.server.properties.default-capabilities.title</code> <code>\"default-capabilities config\"</code> <code>properties.server.properties.default-capabilities.type</code> <code>\"object\"</code> <code>properties.server.properties.deny-insecure</code> { <code>$comment</code>: <code>\"Allowed values are defined by drivers\"</code> = 'Allowed values are defined by drivers'; <code>appiumCliTransformer</code>: <code>\"csv\"</code> = 'csv'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \\\"allow-insecure\\\", and even if \\\"relaxed-security\\\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.\"</code> = 'Set which insecure features are not allowed to run in this server\\'s sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"deny-insecure config\"</code> = 'deny-insecure config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } <code>properties.server.properties.deny-insecure.$comment</code> <code>\"Allowed values are defined by drivers\"</code> <code>properties.server.properties.deny-insecure.appiumCliTransformer</code> <code>\"csv\"</code> <code>properties.server.properties.deny-insecure.default</code> readonly [] <code>properties.server.properties.deny-insecure.description</code> <code>\"Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \\\"allow-insecure\\\", and even if \\\"relaxed-security\\\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.\"</code> <code>properties.server.properties.deny-insecure.items</code> { <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.deny-insecure.items.type</code> <code>\"string\"</code> <code>properties.server.properties.deny-insecure.title</code> <code>\"deny-insecure config\"</code> <code>properties.server.properties.deny-insecure.type</code> <code>\"array\"</code> <code>properties.server.properties.deny-insecure.uniqueItems</code> <code>true</code> <code>properties.server.properties.driver</code> { <code>description</code>: <code>\"Driver-specific configuration. Keys should correspond to driver package names\"</code> = 'Driver-specific configuration. Keys should correspond to driver package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"driver config\"</code> = 'driver config'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>properties.server.properties.driver.description</code> <code>\"Driver-specific configuration. Keys should correspond to driver package names\"</code> <code>properties.server.properties.driver.properties</code> <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; <code>properties.server.properties.driver.title</code> <code>\"driver config\"</code> <code>properties.server.properties.driver.type</code> <code>\"object\"</code> <code>properties.server.properties.keep-alive-timeout</code> { <code>appiumCliAliases</code>: readonly [<code>\"ka\"</code>] ; <code>default</code>: <code>600</code> = 600; <code>description</code>: <code>\"Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.\"</code> = 'Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.'; <code>minimum</code>: <code>0</code> = 0; <code>title</code>: <code>\"keep-alive-timeout config\"</code> = 'keep-alive-timeout config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } <code>properties.server.properties.keep-alive-timeout.appiumCliAliases</code> readonly [<code>\"ka\"</code>] <code>properties.server.properties.keep-alive-timeout.default</code> <code>600</code> <code>properties.server.properties.keep-alive-timeout.description</code> <code>\"Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.\"</code> <code>properties.server.properties.keep-alive-timeout.minimum</code> <code>0</code> <code>properties.server.properties.keep-alive-timeout.title</code> <code>\"keep-alive-timeout config\"</code> <code>properties.server.properties.keep-alive-timeout.type</code> <code>\"integer\"</code> <code>properties.server.properties.local-timezone</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Use local timezone for timestamps\"</code> = 'Use local timezone for timestamps'; <code>title</code>: <code>\"local-timezone config\"</code> = 'local-timezone config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.local-timezone.default</code> <code>false</code> <code>properties.server.properties.local-timezone.description</code> <code>\"Use local timezone for timestamps\"</code> <code>properties.server.properties.local-timezone.title</code> <code>\"local-timezone config\"</code> <code>properties.server.properties.local-timezone.type</code> <code>\"boolean\"</code> <code>properties.server.properties.log</code> { <code>appiumCliAliases</code>: readonly [<code>\"g\"</code>] ; <code>appiumCliDest</code>: <code>\"logFile\"</code> = 'logFile'; <code>description</code>: <code>\"Also send log output to this file\"</code> = 'Also send log output to this file'; <code>title</code>: <code>\"log config\"</code> = 'log config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.log.appiumCliAliases</code> readonly [<code>\"g\"</code>] <code>properties.server.properties.log.appiumCliDest</code> <code>\"logFile\"</code> <code>properties.server.properties.log.description</code> <code>\"Also send log output to this file\"</code> <code>properties.server.properties.log.title</code> <code>\"log config\"</code> <code>properties.server.properties.log.type</code> <code>\"string\"</code> <code>properties.server.properties.log-filters</code> { <code>appiumCliTransformer</code>: <code>\"json\"</code> = 'json'; <code>description</code>: <code>\"One or more log filtering rules\"</code> = 'One or more log filtering rules'; <code>items</code>: { <code>$ref</code>: <code>\"#/$defs/logFilter\"</code> = '#/$defs/logFilter' } ; <code>title</code>: <code>\"log-filters config\"</code> = 'log-filters config'; <code>type</code>: <code>\"array\"</code> = 'array' } <code>properties.server.properties.log-filters.appiumCliTransformer</code> <code>\"json\"</code> <code>properties.server.properties.log-filters.description</code> <code>\"One or more log filtering rules\"</code> <code>properties.server.properties.log-filters.items</code> { <code>$ref</code>: <code>\"#/$defs/logFilter\"</code> = '#/$defs/logFilter' } <code>properties.server.properties.log-filters.items.$ref</code> <code>\"#/$defs/logFilter\"</code> <code>properties.server.properties.log-filters.title</code> <code>\"log-filters config\"</code> <code>properties.server.properties.log-filters.type</code> <code>\"array\"</code> <code>properties.server.properties.log-level</code> { <code>appiumCliDest</code>: <code>\"loglevel\"</code> = 'loglevel'; <code>default</code>: <code>\"debug\"</code> = 'debug'; <code>description</code>: <code>\"Log level (console[:file])\"</code> = 'Log level (console[:file])'; <code>enum</code>: readonly [<code>\"info\"</code>, <code>\"info:debug\"</code>, <code>\"info:info\"</code>, <code>\"info:warn\"</code>, <code>\"info:error\"</code>, <code>\"warn\"</code>, <code>\"warn:debug\"</code>, <code>\"warn:info\"</code>, <code>\"warn:warn\"</code>, <code>\"warn:error\"</code>, <code>\"error\"</code>, <code>\"error:debug\"</code>, <code>\"error:info\"</code>, <code>\"error:warn\"</code>, <code>\"error:error\"</code>, <code>\"debug\"</code>, <code>\"debug:debug\"</code>, <code>\"debug:info\"</code>, <code>\"debug:warn\"</code>, <code>\"debug:error\"</code>] ; <code>title</code>: <code>\"log-level config\"</code> = 'log-level config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.log-level.appiumCliDest</code> <code>\"loglevel\"</code> <code>properties.server.properties.log-level.default</code> <code>\"debug\"</code> <code>properties.server.properties.log-level.description</code> <code>\"Log level (console[:file])\"</code> <code>properties.server.properties.log-level.enum</code> readonly [<code>\"info\"</code>, <code>\"info:debug\"</code>, <code>\"info:info\"</code>, <code>\"info:warn\"</code>, <code>\"info:error\"</code>, <code>\"warn\"</code>, <code>\"warn:debug\"</code>, <code>\"warn:info\"</code>, <code>\"warn:warn\"</code>, <code>\"warn:error\"</code>, <code>\"error\"</code>, <code>\"error:debug\"</code>, <code>\"error:info\"</code>, <code>\"error:warn\"</code>, <code>\"error:error\"</code>, <code>\"debug\"</code>, <code>\"debug:debug\"</code>, <code>\"debug:info\"</code>, <code>\"debug:warn\"</code>, <code>\"debug:error\"</code>] <code>properties.server.properties.log-level.title</code> <code>\"log-level config\"</code> <code>properties.server.properties.log-level.type</code> <code>\"string\"</code> <code>properties.server.properties.log-no-colors</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not use color in console output\"</code> = 'Do not use color in console output'; <code>title</code>: <code>\"log-no-colors config\"</code> = 'log-no-colors config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.log-no-colors.default</code> <code>false</code> <code>properties.server.properties.log-no-colors.description</code> <code>\"Do not use color in console output\"</code> <code>properties.server.properties.log-no-colors.title</code> <code>\"log-no-colors config\"</code> <code>properties.server.properties.log-no-colors.type</code> <code>\"boolean\"</code> <code>properties.server.properties.log-timestamp</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Show timestamps in console output\"</code> = 'Show timestamps in console output'; <code>title</code>: <code>\"log-timestamp config\"</code> = 'log-timestamp config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.log-timestamp.default</code> <code>false</code> <code>properties.server.properties.log-timestamp.description</code> <code>\"Show timestamps in console output\"</code> <code>properties.server.properties.log-timestamp.title</code> <code>\"log-timestamp config\"</code> <code>properties.server.properties.log-timestamp.type</code> <code>\"boolean\"</code> <code>properties.server.properties.long-stacktrace</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Add long stack traces to log entries. Recommended for debugging only.\"</code> = 'Add long stack traces to log entries. Recommended for debugging only.'; <code>title</code>: <code>\"long-stacktrace config\"</code> = 'long-stacktrace config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.long-stacktrace.default</code> <code>false</code> <code>properties.server.properties.long-stacktrace.description</code> <code>\"Add long stack traces to log entries. Recommended for debugging only.\"</code> <code>properties.server.properties.long-stacktrace.title</code> <code>\"long-stacktrace config\"</code> <code>properties.server.properties.long-stacktrace.type</code> <code>\"boolean\"</code> <code>properties.server.properties.no-perms-check</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Do not check that needed files are readable and/or writable\"</code> = 'Do not check that needed files are readable and/or writable'; <code>title</code>: <code>\"no-perms-check config\"</code> = 'no-perms-check config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.no-perms-check.default</code> <code>false</code> <code>properties.server.properties.no-perms-check.description</code> <code>\"Do not check that needed files are readable and/or writable\"</code> <code>properties.server.properties.no-perms-check.title</code> <code>\"no-perms-check config\"</code> <code>properties.server.properties.no-perms-check.type</code> <code>\"boolean\"</code> <code>properties.server.properties.nodeconfig</code> { <code>$comment</code>: <code>\"Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.\"</code> = 'Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.'; <code>description</code>: <code>\"Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself\"</code> = 'Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself'; <code>title</code>: <code>\"nodeconfig config\"</code> = 'nodeconfig config'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>properties.server.properties.nodeconfig.$comment</code> <code>\"Selenium Grid 3 is unmaintained and Selenium Grid 4 no longer supports this file.\"</code> <code>properties.server.properties.nodeconfig.description</code> <code>\"Path to configuration JSON file to register Appium as a node with Selenium Grid 3; otherwise the configuration itself\"</code> <code>properties.server.properties.nodeconfig.title</code> <code>\"nodeconfig config\"</code> <code>properties.server.properties.nodeconfig.type</code> <code>\"object\"</code> <code>properties.server.properties.plugin</code> { <code>description</code>: <code>\"Plugin-specific configuration. Keys should correspond to plugin package names\"</code> = 'Plugin-specific configuration. Keys should correspond to plugin package names'; <code>properties</code>: <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; ; <code>title</code>: <code>\"plugin config\"</code> = 'plugin config'; <code>type</code>: <code>\"object\"</code> = 'object' } <code>properties.server.properties.plugin.description</code> <code>\"Plugin-specific configuration. Keys should correspond to plugin package names\"</code> <code>properties.server.properties.plugin.properties</code> <code>Record</code>&lt;<code>string</code>, <code>JSONSchema7</code>&gt; <code>properties.server.properties.plugin.title</code> <code>\"plugin config\"</code> <code>properties.server.properties.plugin.type</code> <code>\"object\"</code> <code>properties.server.properties.port</code> { <code>appiumCliAliases</code>: readonly [<code>\"p\"</code>] ; <code>default</code>: <code>4723</code> = 4723; <code>description</code>: <code>\"Port to listen on\"</code> = 'Port to listen on'; <code>maximum</code>: <code>65535</code> = 65535; <code>minimum</code>: <code>1</code> = 1; <code>title</code>: <code>\"port config\"</code> = 'port config'; <code>type</code>: <code>\"integer\"</code> = 'integer' } <code>properties.server.properties.port.appiumCliAliases</code> readonly [<code>\"p\"</code>] <code>properties.server.properties.port.default</code> <code>4723</code> <code>properties.server.properties.port.description</code> <code>\"Port to listen on\"</code> <code>properties.server.properties.port.maximum</code> <code>65535</code> <code>properties.server.properties.port.minimum</code> <code>1</code> <code>properties.server.properties.port.title</code> <code>\"port config\"</code> <code>properties.server.properties.port.type</code> <code>\"integer\"</code> <code>properties.server.properties.relaxed-security</code> { <code>appiumCliDest</code>: <code>\"relaxedSecurityEnabled\"</code> = 'relaxedSecurityEnabled'; <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \\\"deny-insecure\\\"\"</code> = 'Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it\\'s not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\"'; <code>title</code>: <code>\"relaxed-security config\"</code> = 'relaxed-security config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.relaxed-security.appiumCliDest</code> <code>\"relaxedSecurityEnabled\"</code> <code>properties.server.properties.relaxed-security.default</code> <code>false</code> <code>properties.server.properties.relaxed-security.description</code> <code>\"Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \\\"deny-insecure\\\"\"</code> <code>properties.server.properties.relaxed-security.title</code> <code>\"relaxed-security config\"</code> <code>properties.server.properties.relaxed-security.type</code> <code>\"boolean\"</code> <code>properties.server.properties.session-override</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Enables session override (clobbering)\"</code> = 'Enables session override (clobbering)'; <code>title</code>: <code>\"session-override config\"</code> = 'session-override config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.session-override.default</code> <code>false</code> <code>properties.server.properties.session-override.description</code> <code>\"Enables session override (clobbering)\"</code> <code>properties.server.properties.session-override.title</code> <code>\"session-override config\"</code> <code>properties.server.properties.session-override.type</code> <code>\"boolean\"</code> <code>properties.server.properties.strict-caps</code> { <code>default</code>: <code>false</code> = false; <code>description</code>: <code>\"Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\"</code> = 'Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device'; <code>title</code>: <code>\"strict-caps config\"</code> = 'strict-caps config'; <code>type</code>: <code>\"boolean\"</code> = 'boolean' } <code>properties.server.properties.strict-caps.default</code> <code>false</code> <code>properties.server.properties.strict-caps.description</code> <code>\"Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device\"</code> <code>properties.server.properties.strict-caps.title</code> <code>\"strict-caps config\"</code> <code>properties.server.properties.strict-caps.type</code> <code>\"boolean\"</code> <code>properties.server.properties.tmp</code> { <code>appiumCliDest</code>: <code>\"tmpDir\"</code> = 'tmpDir'; <code>description</code>: <code>\"Absolute path to directory Appium can use to manage temp files. Defaults to C:\\\\Windows\\\\Temp on Windows and /tmp otherwise.\"</code> = 'Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise.'; <code>title</code>: <code>\"tmp config\"</code> = 'tmp config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.tmp.appiumCliDest</code> <code>\"tmpDir\"</code> <code>properties.server.properties.tmp.description</code> <code>\"Absolute path to directory Appium can use to manage temp files. Defaults to C:\\\\Windows\\\\Temp on Windows and /tmp otherwise.\"</code> <code>properties.server.properties.tmp.title</code> <code>\"tmp config\"</code> <code>properties.server.properties.tmp.type</code> <code>\"string\"</code> <code>properties.server.properties.trace-dir</code> { <code>description</code>: <code>\"Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments\"</code> = 'Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments'; <code>title</code>: <code>\"trace-dir config\"</code> = 'trace-dir config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.trace-dir.description</code> <code>\"Absolute path to directory Appium can use to save iOS instrument traces; defaults to &lt;tmp&gt;/appium-instruments\"</code> <code>properties.server.properties.trace-dir.title</code> <code>\"trace-dir config\"</code> <code>properties.server.properties.trace-dir.type</code> <code>\"string\"</code> <code>properties.server.properties.use-drivers</code> { <code>appiumCliDescription</code>: <code>\"A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of drivers to activate. By default, all installed drivers will be activated.\"</code> = 'A list of drivers to activate. By default, all installed drivers will be activated.'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-drivers config\"</code> = 'use-drivers config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } <code>properties.server.properties.use-drivers.appiumCliDescription</code> <code>\"A list of drivers to activate. Can be a comma-delimited string or path to CSV file. By default, all installed drivers will be activated. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> <code>properties.server.properties.use-drivers.default</code> readonly [] <code>properties.server.properties.use-drivers.description</code> <code>\"A list of drivers to activate. By default, all installed drivers will be activated.\"</code> <code>properties.server.properties.use-drivers.items</code> { <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.use-drivers.items.type</code> <code>\"string\"</code> <code>properties.server.properties.use-drivers.title</code> <code>\"use-drivers config\"</code> <code>properties.server.properties.use-drivers.type</code> <code>\"array\"</code> <code>properties.server.properties.use-drivers.uniqueItems</code> <code>true</code> <code>properties.server.properties.use-plugins</code> { <code>appiumCliDescription</code>: <code>\"A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \\\"all\\\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> = 'A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \"all\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.'; <code>default</code>: readonly [] = []; <code>description</code>: <code>\"A list of plugins to activate. To activate all plugins, the value should be an array with a single item \\\"all\\\".\"</code> = 'A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\".'; <code>items</code>: { <code>type</code>: <code>\"string\"</code> = 'string' } ; <code>title</code>: <code>\"use-plugins config\"</code> = 'use-plugins config'; <code>type</code>: <code>\"array\"</code> = 'array'; <code>uniqueItems</code>: <code>true</code> = true } <code>properties.server.properties.use-plugins.appiumCliDescription</code> <code>\"A list of plugins to activate. Can be a comma-delimited string, path to CSV file, or the string \\\"all\\\" to use all installed plugins. Windows environments may require wrapping the comma-delimited string with quotes to escape the comma.\"</code> <code>properties.server.properties.use-plugins.default</code> readonly [] <code>properties.server.properties.use-plugins.description</code> <code>\"A list of plugins to activate. To activate all plugins, the value should be an array with a single item \\\"all\\\".\"</code> <code>properties.server.properties.use-plugins.items</code> { <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.use-plugins.items.type</code> <code>\"string\"</code> <code>properties.server.properties.use-plugins.title</code> <code>\"use-plugins config\"</code> <code>properties.server.properties.use-plugins.type</code> <code>\"array\"</code> <code>properties.server.properties.use-plugins.uniqueItems</code> <code>true</code> <code>properties.server.properties.webhook</code> { <code>$comment</code>: <code>\"This should probably use a uri-template format to restrict the protocol to http/https\"</code> = 'This should probably use a uri-template format to restrict the protocol to http/https'; <code>appiumCliAliases</code>: readonly [<code>\"G\"</code>] ; <code>description</code>: <code>\"Also send log output to this http listener\"</code> = 'Also send log output to this http listener'; <code>format</code>: <code>\"uri\"</code> = 'uri'; <code>title</code>: <code>\"webhook config\"</code> = 'webhook config'; <code>type</code>: <code>\"string\"</code> = 'string' } <code>properties.server.properties.webhook.$comment</code> <code>\"This should probably use a uri-template format to restrict the protocol to http/https\"</code> <code>properties.server.properties.webhook.appiumCliAliases</code> readonly [<code>\"G\"</code>] <code>properties.server.properties.webhook.description</code> <code>\"Also send log output to this http listener\"</code> <code>properties.server.properties.webhook.format</code> <code>\"uri\"</code> <code>properties.server.properties.webhook.title</code> <code>\"webhook config\"</code> <code>properties.server.properties.webhook.type</code> <code>\"string\"</code> <code>properties.server.title</code> <code>\"server config\"</code> <code>properties.server.type</code> <code>\"object\"</code> <code>title</code> <code>\"Appium Configuration\"</code> <code>type</code> <code>\"object\"</code>"},{"location":"reference/modules/appium_schema/#defined-in","title":"Defined in","text":"<p>packages/schema/lib/appium-config-schema.js:7</p>"},{"location":"reference/modules/appium_strongbox/","title":"Module: @appium/strongbox","text":""},{"location":"reference/modules/appium_strongbox/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_strongbox/#classes","title":"Classes","text":"<ul> <li>BaseItem</li> <li>Strongbox</li> </ul>"},{"location":"reference/modules/appium_strongbox/#interfaces","title":"Interfaces","text":"<ul> <li>Item</li> <li>StrongboxOpts</li> </ul>"},{"location":"reference/modules/appium_strongbox/#type-aliases","title":"Type Aliases","text":"<ul> <li>ItemCtor</li> <li>ItemEncoding</li> <li>Value</li> </ul>"},{"location":"reference/modules/appium_strongbox/#variables","title":"Variables","text":"<ul> <li>DEFAULT_SUFFIX</li> </ul>"},{"location":"reference/modules/appium_strongbox/#functions","title":"Functions","text":"<ul> <li>strongbox</li> </ul>"},{"location":"reference/modules/appium_strongbox/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_strongbox/#itemctor","title":"ItemCtor","text":"<p>\u01ac ItemCtor&lt;<code>T</code>, <code>U</code>, <code>V</code>&gt;: (<code>name</code>: <code>string</code>, <code>parent</code>: <code>V</code>, <code>encoding?</code>: <code>ItemEncoding</code>) =&gt; <code>Item</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/modules/appium_strongbox/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Value</code> <code>U</code> extends <code>StrongboxOpts</code> = <code>StrongboxOpts</code> <code>V</code> extends <code>Strongbox</code>&lt;<code>U</code>&gt; = <code>Strongbox</code>&lt;<code>U</code>&gt;"},{"location":"reference/modules/appium_strongbox/#type-declaration","title":"Type declaration","text":"<p>\u2022 (<code>name</code>, <code>parent</code>, <code>encoding?</code>)</p> <p>A constructor function which instantiates a <code>Item</code>.</p>"},{"location":"reference/modules/appium_strongbox/#parameters","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>parent</code> <code>V</code> <code>encoding?</code> <code>ItemEncoding</code>"},{"location":"reference/modules/appium_strongbox/#defined-in","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:98</p>"},{"location":"reference/modules/appium_strongbox/#itemencoding","title":"ItemEncoding","text":"<p>\u01ac ItemEncoding: <code>BufferEncoding</code> | <code>null</code></p> <p>Valid file encodings.</p> <p><code>null</code> means the file should be read and written as a <code>Buffer</code>.</p>"},{"location":"reference/modules/appium_strongbox/#defined-in_1","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:12</p>"},{"location":"reference/modules/appium_strongbox/#value","title":"Value","text":"<p>\u01ac Value: <code>string</code> | <code>Buffer</code></p> <p>Valid value wrapped by <code>Item</code>. Can be an encoded string or <code>Buffer</code></p>"},{"location":"reference/modules/appium_strongbox/#defined-in_2","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:17</p>"},{"location":"reference/modules/appium_strongbox/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_strongbox/#default_suffix","title":"DEFAULT_SUFFIX","text":"<p>\u2022 <code>Const</code> DEFAULT_SUFFIX: <code>\"strongbox\"</code></p> <p>Default container suffix if no explicit container is provided.</p> <p><code>See</code></p> <p><code>StrongboxOpts</code></p>"},{"location":"reference/modules/appium_strongbox/#defined-in_3","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:93</p>"},{"location":"reference/modules/appium_strongbox/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_strongbox/#strongbox","title":"strongbox","text":"<p>\u25b8 strongbox&lt;<code>Options</code>&gt;(<code>name</code>, <code>opts?</code>): <code>Strongbox</code>&lt;<code>Options</code>&gt;</p>"},{"location":"reference/modules/appium_strongbox/#type-parameters_1","title":"Type parameters","text":"Name Type <code>Options</code> extends <code>StrongboxOpts</code> = <code>StrongboxOpts</code>"},{"location":"reference/modules/appium_strongbox/#parameters_1","title":"Parameters","text":"Name Type <code>name</code> <code>string</code> <code>opts?</code> <code>Partial</code>&lt;<code>Options</code>&gt;"},{"location":"reference/modules/appium_strongbox/#returns","title":"Returns","text":"<p><code>Strongbox</code>&lt;<code>Options</code>&gt;</p>"},{"location":"reference/modules/appium_strongbox/#defined-in_4","title":"Defined in","text":"<p>packages/strongbox/lib/index.ts:158</p>"},{"location":"reference/modules/appium_test_support/","title":"Module: @appium/test-support","text":""},{"location":"reference/modules/appium_test_support/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_test_support/#functions","title":"Functions","text":"<ul> <li>fakeTime</li> <li>stubEnv</li> <li>stubLog</li> <li>verifyMocks</li> <li>verifySandbox</li> <li>withMocks</li> <li>withSandbox</li> </ul>"},{"location":"reference/modules/appium_test_support/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_test_support/#faketime","title":"fakeTime","text":"<p>\u25b8 fakeTime(<code>sandbox</code>): <code>TimeLord</code></p> <p><code>Deprecated</code></p>"},{"location":"reference/modules/appium_test_support/#parameters","title":"Parameters","text":"Name Type <code>sandbox</code> <code>any</code>"},{"location":"reference/modules/appium_test_support/#returns","title":"Returns","text":"<p><code>TimeLord</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in","title":"Defined in","text":"<p>packages/test-support/lib/time-utils.js:2</p>"},{"location":"reference/modules/appium_test_support/#stubenv","title":"stubEnv","text":"<p>\u25b8 stubEnv(): <code>void</code></p> <p>Creates Mocha \"before each\" and \"after each\" hooks to restore <code>process.env</code> after every test.</p>"},{"location":"reference/modules/appium_test_support/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_1","title":"Defined in","text":"<p>packages/test-support/lib/env-utils.js:4</p>"},{"location":"reference/modules/appium_test_support/#stublog","title":"stubLog","text":"<p>\u25b8 stubLog(<code>sandbox</code>, <code>log</code>, <code>opts?</code>): <code>LogStub</code></p> <p>Instantiates a LogStub object</p>"},{"location":"reference/modules/appium_test_support/#parameters_1","title":"Parameters","text":"Name Type <code>sandbox</code> <code>SinonSandbox</code> <code>log</code> <code>AppiumLogger</code> <code>opts?</code> <code>LogStubOptions</code>"},{"location":"reference/modules/appium_test_support/#returns_2","title":"Returns","text":"<p><code>LogStub</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_2","title":"Defined in","text":"<p>packages/test-support/lib/log-utils.js:35</p>"},{"location":"reference/modules/appium_test_support/#verifymocks","title":"verifyMocks","text":"<p>\u25b8 verifyMocks(<code>mocks</code>): <code>void</code></p> <p>Convenience function for calling <code>mocks.verify()</code>.</p>"},{"location":"reference/modules/appium_test_support/#parameters_2","title":"Parameters","text":"Name Type Description <code>mocks</code> <code>MockStore</code>&lt;<code>any</code>&gt; Returned by callback from <code>withMocks</code>"},{"location":"reference/modules/appium_test_support/#returns_3","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_3","title":"Defined in","text":"<p>packages/test-support/lib/mock-utils.js:33</p>"},{"location":"reference/modules/appium_test_support/#verifysandbox","title":"verifySandbox","text":"<p>\u25b8 verifySandbox(<code>sbxOrMocks</code>): <code>void</code></p> <p>Convenience function for calling SandboxStore.verify.</p>"},{"location":"reference/modules/appium_test_support/#parameters_3","title":"Parameters","text":"Name Type <code>sbxOrMocks</code> <code>MockStore</code>&lt;<code>any</code>&gt; | <code>SandboxStore</code>&lt;<code>any</code>&gt;"},{"location":"reference/modules/appium_test_support/#returns_4","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_4","title":"Defined in","text":"<p>packages/test-support/lib/sandbox-utils.js:34</p>"},{"location":"reference/modules/appium_test_support/#withmocks","title":"withMocks","text":"<p>\u25b8 withMocks(<code>mockDefs</code>, <code>fn</code>): () =&gt; <code>void</code></p> <p>Creates a function which creates Mocha \"before each\" and \"after each\" hooks to automatically mock (and un-mock) the mocks provided by <code>libs</code>.</p> <p>The values of <code>libs</code> are provided directly to SinonSandbox.mock.</p> <p>Synchronously calls <code>fn</code> with the MockStore after hooks have been created, but not before they have been run.</p>"},{"location":"reference/modules/appium_test_support/#parameters_4","title":"Parameters","text":"Name Type <code>mockDefs</code> <code>Record</code>&lt;<code>string</code> | <code>symbol</code>, <code>any</code>&gt; <code>fn</code> (<code>mocks</code>: <code>MockStore</code>&lt;<code>any</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/modules/appium_test_support/#returns_5","title":"Returns","text":"<p><code>fn</code></p> <p>\u25b8 (): <code>void</code></p>"},{"location":"reference/modules/appium_test_support/#returns_6","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_5","title":"Defined in","text":"<p>packages/test-support/lib/mock-utils.js:16</p>"},{"location":"reference/modules/appium_test_support/#withsandbox","title":"withSandbox","text":"<p>\u25b8 withSandbox&lt;<code>Mocks</code>&gt;(<code>mockDefs</code>, <code>fn</code>): () =&gt; <code>void</code></p>"},{"location":"reference/modules/appium_test_support/#type-parameters","title":"Type parameters","text":"Name Type <code>Mocks</code> extends <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt; | { <code>mocks</code>: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;  }"},{"location":"reference/modules/appium_test_support/#parameters_5","title":"Parameters","text":"Name Type <code>mockDefs</code> <code>Mocks</code> <code>fn</code> (<code>sandboxStore</code>: <code>SandboxStore</code>&lt;<code>any</code>&gt;) =&gt; <code>void</code>"},{"location":"reference/modules/appium_test_support/#returns_7","title":"Returns","text":"<p><code>fn</code></p> <p>\u25b8 (): <code>void</code></p>"},{"location":"reference/modules/appium_test_support/#returns_8","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_test_support/#defined-in_6","title":"Defined in","text":"<p>packages/test-support/lib/sandbox-utils.js:12</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/","title":"Module: @appium/typedoc-plugin-appium","text":"<p>Contains the entry point for  <code>@appium/typedoc-plugin-appium</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_typedoc_plugin_appium/#enumerations","title":"Enumerations","text":"<ul> <li>AppiumThemeTemplate</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#classes","title":"Classes","text":"<ul> <li>AppiumPluginLogger</li> <li>AppiumPluginOptionsReader</li> <li>AppiumTheme</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#interfaces","title":"Interfaces","text":"<ul> <li>ConvertResult</li> <li>PostProcessResult</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-aliases","title":"Type Aliases","text":"<ul> <li>AppiumPluginOptions</li> <li>AppiumPluginParentLogger</li> <li>TemplateMapping</li> <li>TemplateRenderer</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#variables","title":"Variables","text":"<ul> <li>THEME_NAME</li> <li>declarations</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#functions","title":"Functions","text":"<ul> <li>configureOptions</li> <li>configureTheme</li> <li>convert</li> <li>load</li> <li>postProcess</li> <li>setup</li> </ul>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_typedoc_plugin_appium/#appiumpluginoptions","title":"AppiumPluginOptions","text":"<p>\u01ac AppiumPluginOptions: { [O in keyof OptionDeclarations]: OptionDeclarations[O][\"type\"] extends ParameterType.Boolean ? boolean : OptionDeclarations[O][\"type\"] extends ParameterType.String ? string : unknown }</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/index.ts:28</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#appiumpluginparentlogger","title":"AppiumPluginParentLogger","text":"<p>\u01ac AppiumPluginParentLogger: (<code>level</code>: <code>LogLevel</code>, <code>message</code>: <code>string</code>, ...<code>args</code>: <code>any</code>[]) =&gt; <code>void</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-declaration","title":"Type declaration","text":"<p>\u25b8 (<code>level</code>, <code>message</code>, <code>...args</code>): <code>void</code></p> <p>Used internally by createChildLogger to pass log messages to the parent.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters","title":"Parameters","text":"Name Type <code>level</code> <code>LogLevel</code> <code>message</code> <code>string</code> <code>...args</code> <code>any</code>[]"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_1","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/logger.ts:191</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#templatemapping","title":"TemplateMapping","text":"<p>\u01ac TemplateMapping: <code>Object</code></p> <p>A mapping of <code>ReflectionKind</code> to a template and other metadata.</p> <p>Defined by <code>MarkdownTheme</code>.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-declaration_1","title":"Type declaration","text":"Name Type <code>directory</code> <code>string</code> <code>isLeaf</code> <code>boolean</code> <code>kind</code> <code>ReflectionKind</code>[] <code>template</code> (<code>pageEvent</code>: <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;) =&gt; <code>string</code>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_2","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:132</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#templaterenderer","title":"TemplateRenderer","text":"<p>\u01ac TemplateRenderer: (<code>pageEvent</code>: <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;) =&gt; <code>string</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-declaration_2","title":"Type declaration","text":"<p>\u25b8 (<code>pageEvent</code>): <code>string</code></p> <p>A function which accepts PageEvent as its model and returns the final markdown.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_1","title":"Parameters","text":"Name Type <code>pageEvent</code> <code>PageEvent</code>&lt;<code>ContainerReflection</code>&gt;"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_1","title":"Returns","text":"<p><code>string</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_3","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:125</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_typedoc_plugin_appium/#theme_name","title":"THEME_NAME","text":"<p>\u2022 <code>Const</code> THEME_NAME: <code>\"appium\"</code></p> <p>Name of the theme; used at definition time</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_4","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:20</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#declarations","title":"declarations","text":"<p>\u2022 <code>Const</code> declarations: <code>Object</code></p> <p>List of options for the plugin</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#type-declaration_3","title":"Type declaration","text":"Name Type <code>commandsDir</code> { <code>defaultValue</code>: <code>\"commands\"</code> = 'commands'; <code>help</code>: <code>\"(appium) Name of \\\"commands\\\" directory under the TypeDoc output directory. Not a full path\"</code> ; <code>name</code>: <code>\"commandsDir\"</code> = 'commandsDir'; <code>type</code>: <code>String</code> = ParameterType.String } <code>commandsDir.defaultValue</code> <code>\"commands\"</code> <code>commandsDir.help</code> <code>\"(appium) Name of \\\"commands\\\" directory under the TypeDoc output directory. Not a full path\"</code> <code>commandsDir.name</code> <code>\"commandsDir\"</code> <code>commandsDir.type</code> <code>String</code> <code>forceBreadcrumbs</code> { <code>defaultValue</code>: <code>false</code> = false; <code>help</code>: <code>\"(appium) Force breadcrumbs to be shown; overrides \\\"hideBreadcrumbs\\\"\"</code> ; <code>name</code>: <code>\"forceBreadcrumbs\"</code> = 'forceBreadcrumbs'; <code>type</code>: <code>Boolean</code> = ParameterType.Boolean } <code>forceBreadcrumbs.defaultValue</code> <code>false</code> <code>forceBreadcrumbs.help</code> <code>\"(appium) Force breadcrumbs to be shown; overrides \\\"hideBreadcrumbs\\\"\"</code> <code>forceBreadcrumbs.name</code> <code>\"forceBreadcrumbs\"</code> <code>forceBreadcrumbs.type</code> <code>Boolean</code> <code>outputBuiltinCommands</code> { <code>defaultValue</code>: <code>false</code> = false; <code>help</code>: <code>\"(appium) Output builtin commands\"</code> ; <code>name</code>: <code>\"outputBuiltinCommands\"</code> = 'outputBuiltinCommands'; <code>type</code>: <code>Boolean</code> = ParameterType.Boolean } <code>outputBuiltinCommands.defaultValue</code> <code>false</code> <code>outputBuiltinCommands.help</code> <code>\"(appium) Output builtin commands\"</code> <code>outputBuiltinCommands.name</code> <code>\"outputBuiltinCommands\"</code> <code>outputBuiltinCommands.type</code> <code>Boolean</code> <code>outputModules</code> { <code>defaultValue</code>: <code>true</code> = true; <code>help</code>: <code>\"(appium) Output modules APIs in addition to commands. This is needed for complete typing information\"</code> ; <code>name</code>: <code>\"outputModules\"</code> = 'outputModules'; <code>type</code>: <code>Boolean</code> = ParameterType.Boolean } <code>outputModules.defaultValue</code> <code>true</code> <code>outputModules.help</code> <code>\"(appium) Output modules APIs in addition to commands. This is needed for complete typing information\"</code> <code>outputModules.name</code> <code>\"outputModules\"</code> <code>outputModules.type</code> <code>Boolean</code> <code>packageTitles</code> { <code>defaultValue</code>: readonly [] = []; <code>help</code>: <code>\"(appium) An array of objects with props \\\"name\\\" (module name) and \\\"title\\\" (display name)\"</code> ; <code>name</code>: <code>\"packageTitles\"</code> = 'packageTitles'; <code>type</code>: <code>Mixed</code> = ParameterType.Mixed; <code>validate</code>: (<code>val</code>: <code>unknown</code>) =&gt; <code>void</code>  } <code>packageTitles.defaultValue</code> readonly [] <code>packageTitles.help</code> <code>\"(appium) An array of objects with props \\\"name\\\" (module name) and \\\"title\\\" (display name)\"</code> <code>packageTitles.name</code> <code>\"packageTitles\"</code> <code>packageTitles.type</code> <code>Mixed</code> <code>packageTitles.validate</code> [object Object]"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_5","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/declarations.ts:11</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_typedoc_plugin_appium/#configureoptions","title":"configureOptions","text":"<p>\u25b8 configureOptions(<code>app</code>): <code>Application</code></p> <p>Configures how this plugin handles TypeDoc options.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_2","title":"Parameters","text":"Name Type Description <code>app</code> <code>Application</code> TypeDoc Application"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_2","title":"Returns","text":"<p><code>Application</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_6","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/options/index.ts:13</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#configuretheme","title":"configureTheme","text":"<p>\u25b8 configureTheme(<code>app</code>): <code>Application</code></p> <p>Registers <code>AppiumTheme</code> with TypeDoc.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_3","title":"Parameters","text":"Name Type Description <code>app</code> <code>Application</code> TypeDoc application"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_3","title":"Returns","text":"<p><code>Application</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_7","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/theme/index.ts:145</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#convert","title":"convert","text":"<p>\u25b8 convert(<code>app</code>): <code>Promise</code>&lt;<code>ConvertResult</code>&gt;</p> <p>Finds commands and creates new reflections for them, adding them to the project.</p> <p>Resolves after Converter.EVENT_RESOLVE_END emits and when it's finished.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_4","title":"Parameters","text":"Name Type Description <code>app</code> <code>Application</code> Typedoc Application"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>ConvertResult</code>&gt;</p> <p>A <code>ConvertResult</code> receipt from the conversion</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_8","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:52</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#load","title":"load","text":"<p>\u25b8 load(<code>app</code>): <code>Promise</code>&lt;[<code>PromiseSettledResult</code>&lt;<code>ConvertResult</code>&gt;, <code>PromiseSettledResult</code>&lt;<code>PostProcessResult</code>&gt;]&gt;</p> <p>Loads the Appium TypeDoc plugin.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_5","title":"Parameters","text":"Name Type Description <code>app</code> <code>Application</code> TypeDoc Application"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_5","title":"Returns","text":"<p><code>Promise</code>&lt;[<code>PromiseSettledResult</code>&lt;<code>ConvertResult</code>&gt;, <code>PromiseSettledResult</code>&lt;<code>PostProcessResult</code>&gt;]&gt;</p> <p>Unused by TypeDoc, but can be consumed programmatically.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_9","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:28</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#postprocess","title":"postProcess","text":"<p>\u25b8 postProcess(<code>app</code>): <code>Promise</code>&lt;<code>PostProcessResult</code>&gt;</p> <p>Optionally omits the default TypeDoc reflections from the project based on the <code>outputModules</code> option.</p> <p>Resolves after Converter.EVENT_RESOLVE_END emits and when it's finished.</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_6","title":"Parameters","text":"Name Type Description <code>app</code> <code>Application</code> Typedoc application"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_6","title":"Returns","text":"<p><code>Promise</code>&lt;<code>PostProcessResult</code>&gt;</p> <p>Typedoc <code>Context</code> at the time of the Converter.EVENT_RESOLVE_END event</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_10","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:118</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#setup","title":"setup","text":"<p>\u25b8 setup(<code>app</code>): <code>Application</code></p> <p>Registers theme and options, then monkeys with the options</p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#parameters_7","title":"Parameters","text":"Name Type <code>app</code> <code>Application</code>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#returns_7","title":"Returns","text":"<p><code>Application</code></p>"},{"location":"reference/modules/appium_typedoc_plugin_appium/#defined-in_11","title":"Defined in","text":"<p>packages/typedoc-plugin-appium/lib/index.ts:43</p>"},{"location":"reference/modules/appium_types/","title":"Module: @appium/types","text":""},{"location":"reference/modules/appium_types/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_types/#actions","title":"Actions","text":"<ul> <li>Key</li> <li>ActionSequence</li> <li>KeyAction</li> <li>KeyActionSequence</li> <li>KeyDownAction</li> <li>KeyUpAction</li> <li>NullAction</li> <li>NullActionSequence</li> <li>PauseAction</li> <li>PointerAction</li> <li>PointerActionSequence</li> <li>PointerDownAction</li> <li>PointerMoveAction</li> <li>PointerParameters</li> <li>PointerUpAction</li> </ul>"},{"location":"reference/modules/appium_types/#classes","title":"Classes","text":"<ul> <li>WSServer</li> </ul>"},{"location":"reference/modules/appium_types/#interfaces","title":"Interfaces","text":"<ul> <li>AppiumConfiguration</li> <li>AppiumLogger</li> <li>AppiumServerExtension</li> <li>AppiumServerSocket</li> <li>BaseExecuteMethodDef</li> <li>BaseMethodDef</li> <li>CachedAppInfo</li> <li>ConfigureAppOptions</li> <li>Constraint</li> <li>Cookie</li> <li>Core</li> <li>Credential</li> <li>DefaultCapabilitiesConfig</li> <li>Driver</li> <li>DriverConfig</li> <li>DriverExecuteMethodDef</li> <li>DriverHelpers</li> <li>DriverMethodDef</li> <li>DriverMethodMap</li> <li>DriverStatic</li> <li>Element</li> <li>EventHistory</li> <li>EventHistoryCommand</li> <li>ExecuteMethodDef</li> <li>ExternalDriver</li> <li>ExtraDriverOpts</li> <li>IDeviceSettings</li> <li>IEventCommands</li> <li>IExecuteCommands</li> <li>IFindCommands</li> <li>ILogCommands</li> <li>ISessionHandler</li> <li>ISettingsCommands</li> <li>ITimeoutCommands</li> <li>Location</li> <li>LogDef</li> <li>LogFilterRegex</li> <li>LogFilterText</li> <li>MultiSessionData</li> <li>NewWindow</li> <li>NodeconfigConfig</li> <li>PayloadParams</li> <li>Plugin</li> <li>PluginConfig</li> <li>PluginExecuteMethodDef</li> <li>PluginMethodDef</li> <li>PluginMethodMap</li> <li>PluginStatic</li> <li>PostProcessOptions</li> <li>PostProcessResult</li> <li>Rect</li> <li>Rotation</li> <li>ServerConfig</li> <li>StandardCapabilities</li> <li>W3CCapabilities</li> </ul>"},{"location":"reference/modules/appium_types/#type-aliases","title":"Type Aliases","text":"<ul> <li>AddressConfig</li> <li>AddressConfig1</li> <li>AddressConfig2</li> <li>AllowCorsConfig</li> <li>AllowInsecureConfig</li> <li>AnyCase</li> <li>AppiumConfig</li> <li>AppiumLoggerLevel</li> <li>AppiumLoggerPrefix</li> <li>AppiumServer</li> <li>Associated</li> <li>BaseCapabilities</li> <li>BaseDriverCapConstraints</li> <li>BaseNSCapabilities</li> <li>BasePathConfig</li> <li>BaseW3CCapabilities</li> <li>CallbackAddressConfig</li> <li>CallbackPortConfig</li> <li>Capabilities</li> <li>CapsToNSCaps</li> <li>Class</li> <li>ConstraintChoice</li> <li>ConstraintToCap</li> <li>ConstraintToCapKind</li> <li>Constraints</li> <li>ConstraintsToCaps</li> <li>DebugLogSpacingConfig</li> <li>DefaultCreateSessionResult</li> <li>DefaultDeleteSessionResult</li> <li>DenyInsecureConfig</li> <li>DriverCaps</li> <li>DriverClass</li> <li>DriverCommand</li> <li>DriverCommandToPluginCommand</li> <li>DriverData</li> <li>DriverOpts</li> <li>DriverType</li> <li>ExecuteMethodMap</li> <li>ExtensionType</li> <li>HTTPHeaders</li> <li>HTTPMethod</li> <li>InitialOpts</li> <li>KebabToCamel</li> <li>KeepAliveTimeoutConfig</li> <li>KeysToCamelCase</li> <li>LocalTimezoneConfig</li> <li>LogConfig</li> <li>LogDefRecord</li> <li>LogFilter</li> <li>LogFiltersConfig</li> <li>LogLevelConfig</li> <li>LogNoColorsConfig</li> <li>LogTimestampConfig</li> <li>LongStacktraceConfig</li> <li>MethodMap</li> <li>NSCapabilities</li> <li>NSDriverCaps</li> <li>NamespacedString</li> <li>NewWindowType</li> <li>NextPluginCallback</li> <li>NoPermsCheckConfig</li> <li>NormalizedAppiumConfig</li> <li>NormalizedServerConfig</li> <li>ObjectToCamel</li> <li>Orientation</li> <li>PluginClass</li> <li>PluginCommand</li> <li>PluginType</li> <li>PortConfig</li> <li>Position</li> <li>Protocol</li> <li>RelaxedSecurityConfig</li> <li>RouteMatcher</li> <li>ServerArgs</li> <li>SessionOverrideConfig</li> <li>SettingsUpdateListener</li> <li>SingularSessionData</li> <li>Size</li> <li>StrictCapsConfig</li> <li>StringRecord</li> <li>TmpConfig</li> <li>TraceDirConfig</li> <li>UpdateServerCallback</li> <li>UseDriversConfig</li> <li>UsePluginsConfig</li> <li>W3CDriverCaps</li> <li>W3C_APPIUM_PREFIX</li> <li>WebhookConfig</li> </ul>"},{"location":"reference/modules/appium_types/#variables","title":"Variables","text":"<ul> <li>BASE_DESIRED_CAP_CONSTRAINTS</li> </ul>"},{"location":"reference/modules/appium_types/#actions_1","title":"Actions","text":"<p>\u2022 Key: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#defined-in","title":"Defined in","text":"<p>packages/types/lib/action.ts:118</p>"},{"location":"reference/modules/appium_types/#actionsequence","title":"ActionSequence","text":"<p>\u01ac ActionSequence: <code>NullActionSequence</code> | <code>KeyActionSequence</code> | <code>PointerActionSequence</code></p>"},{"location":"reference/modules/appium_types/#defined-in_1","title":"Defined in","text":"<p>packages/types/lib/action.ts:113</p>"},{"location":"reference/modules/appium_types/#keyaction","title":"KeyAction","text":"<p>\u01ac KeyAction: <code>PauseAction</code> | <code>KeyDownAction</code> | <code>KeyUpAction</code></p>"},{"location":"reference/modules/appium_types/#defined-in_2","title":"Defined in","text":"<p>packages/types/lib/action.ts:68</p>"},{"location":"reference/modules/appium_types/#keyactionsequence","title":"KeyActionSequence","text":"<p>\u01ac KeyActionSequence: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration","title":"Type declaration","text":"Name Type <code>actions</code> <code>KeyAction</code>[] <code>id</code> <code>string</code> <code>type</code> <code>\"key\"</code>"},{"location":"reference/modules/appium_types/#defined-in_3","title":"Defined in","text":"<p>packages/types/lib/action.ts:87</p>"},{"location":"reference/modules/appium_types/#keydownaction","title":"KeyDownAction","text":"<p>\u01ac KeyDownAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_1","title":"Type declaration","text":"Name Type <code>type</code> <code>\"keyDown\"</code> <code>value</code> <code>Key</code> | <code>string</code>"},{"location":"reference/modules/appium_types/#defined-in_4","title":"Defined in","text":"<p>packages/types/lib/action.ts:20</p>"},{"location":"reference/modules/appium_types/#keyupaction","title":"KeyUpAction","text":"<p>\u01ac KeyUpAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_2","title":"Type declaration","text":"Name Type <code>type</code> <code>\"keyUp\"</code> <code>value</code> <code>Key</code> | <code>string</code>"},{"location":"reference/modules/appium_types/#defined-in_5","title":"Defined in","text":"<p>packages/types/lib/action.ts:28</p>"},{"location":"reference/modules/appium_types/#nullaction","title":"NullAction","text":"<p>\u01ac NullAction: <code>PauseAction</code></p>"},{"location":"reference/modules/appium_types/#defined-in_6","title":"Defined in","text":"<p>packages/types/lib/action.ts:63</p>"},{"location":"reference/modules/appium_types/#nullactionsequence","title":"NullActionSequence","text":"<p>\u01ac NullActionSequence: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_3","title":"Type declaration","text":"Name Type <code>actions</code> <code>NullAction</code>[] <code>id</code> <code>string</code> <code>type</code> <code>\"none\"</code>"},{"location":"reference/modules/appium_types/#defined-in_7","title":"Defined in","text":"<p>packages/types/lib/action.ts:78</p>"},{"location":"reference/modules/appium_types/#pauseaction","title":"PauseAction","text":"<p>\u01ac PauseAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_4","title":"Type declaration","text":"Name Type <code>duration</code> <code>number</code> <code>type</code> <code>\"pause\"</code>"},{"location":"reference/modules/appium_types/#defined-in_8","title":"Defined in","text":"<p>packages/types/lib/action.ts:12</p>"},{"location":"reference/modules/appium_types/#pointeraction","title":"PointerAction","text":"<p>\u01ac PointerAction: <code>PauseAction</code> | <code>PointerMoveAction</code> | <code>PointerUpAction</code> | <code>PointerDownAction</code></p>"},{"location":"reference/modules/appium_types/#defined-in_9","title":"Defined in","text":"<p>packages/types/lib/action.ts:73</p>"},{"location":"reference/modules/appium_types/#pointeractionsequence","title":"PointerActionSequence","text":"<p>\u01ac PointerActionSequence: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_5","title":"Type declaration","text":"Name Type <code>actions</code> <code>PointerAction</code>[] <code>id</code> <code>string</code> <code>parameters?</code> <code>PointerParameters</code> <code>type</code> <code>\"pointer\"</code>"},{"location":"reference/modules/appium_types/#defined-in_10","title":"Defined in","text":"<p>packages/types/lib/action.ts:103</p>"},{"location":"reference/modules/appium_types/#pointerdownaction","title":"PointerDownAction","text":"<p>\u01ac PointerDownAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_6","title":"Type declaration","text":"Name Type <code>button</code> <code>number</code> <code>type</code> <code>\"pointerDown\"</code>"},{"location":"reference/modules/appium_types/#defined-in_11","title":"Defined in","text":"<p>packages/types/lib/action.ts:55</p>"},{"location":"reference/modules/appium_types/#pointermoveaction","title":"PointerMoveAction","text":"<p>\u01ac PointerMoveAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_7","title":"Type declaration","text":"Name Type <code>duration?</code> <code>number</code> <code>origin?</code> <code>\"viewport\"</code> | <code>\"pointer\"</code> | <code>Element</code> <code>type</code> <code>\"pointerMove\"</code> <code>x</code> <code>number</code> <code>y</code> <code>number</code>"},{"location":"reference/modules/appium_types/#defined-in_12","title":"Defined in","text":"<p>packages/types/lib/action.ts:36</p>"},{"location":"reference/modules/appium_types/#pointerparameters","title":"PointerParameters","text":"<p>\u01ac PointerParameters: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_8","title":"Type declaration","text":"Name Type <code>pointerType</code> <code>\"mouse\"</code> | <code>\"pen\"</code> | <code>\"touch\"</code>"},{"location":"reference/modules/appium_types/#defined-in_13","title":"Defined in","text":"<p>packages/types/lib/action.ts:96</p>"},{"location":"reference/modules/appium_types/#pointerupaction","title":"PointerUpAction","text":"<p>\u01ac PointerUpAction: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_9","title":"Type declaration","text":"Name Type <code>button</code> <code>number</code> <code>type</code> <code>\"pointerUp\"</code>"},{"location":"reference/modules/appium_types/#defined-in_14","title":"Defined in","text":"<p>packages/types/lib/action.ts:47</p>"},{"location":"reference/modules/appium_types/#type-aliases_1","title":"Type Aliases","text":""},{"location":"reference/modules/appium_types/#addressconfig","title":"AddressConfig","text":"<p>\u01ac AddressConfig: <code>AddressConfig1</code> &amp; <code>AddressConfig2</code></p> <p>IPv4/IPv6 address or a hostname to listen on</p>"},{"location":"reference/modules/appium_types/#defined-in_15","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:11</p>"},{"location":"reference/modules/appium_types/#addressconfig1","title":"AddressConfig1","text":"<p>\u01ac AddressConfig1: <code>string</code></p>"},{"location":"reference/modules/appium_types/#defined-in_16","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:12</p>"},{"location":"reference/modules/appium_types/#addressconfig2","title":"AddressConfig2","text":"<p>\u01ac AddressConfig2: <code>string</code></p>"},{"location":"reference/modules/appium_types/#defined-in_17","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:13</p>"},{"location":"reference/modules/appium_types/#allowcorsconfig","title":"AllowCorsConfig","text":"<p>\u01ac AllowCorsConfig: <code>boolean</code></p> <p>Whether the Appium server should allow web browser connections from any host</p>"},{"location":"reference/modules/appium_types/#defined-in_18","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:17</p>"},{"location":"reference/modules/appium_types/#allowinsecureconfig","title":"AllowInsecureConfig","text":"<p>\u01ac AllowInsecureConfig: <code>string</code>[]</p> <p>Set which insecure features are allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Note that features defined via \"deny-insecure\" will be disabled, even if also listed here. If string, a path to a text file containing policy or a comma-delimited list.</p>"},{"location":"reference/modules/appium_types/#defined-in_19","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:21</p>"},{"location":"reference/modules/appium_types/#anycase","title":"AnyCase","text":"<p>\u01ac AnyCase&lt;<code>T</code>&gt;: <code>string</code> extends <code>T</code> ? <code>string</code> : <code>T</code> extends `${infer F1}${infer F2}${infer R}` ? `${Uppercase&lt;F1&gt; | Lowercase&lt;F1&gt;}${Uppercase&lt;F2&gt; | Lowercase&lt;F2&gt;}${AnyCase&lt;R&gt;}` : <code>T</code> extends `${infer F}${infer R}` ? `${Uppercase&lt;F&gt; | Lowercase&lt;F&gt;}${AnyCase&lt;R&gt;}` : <code>\"\"</code></p> <p>Given <code>string</code> <code>T</code>, this is a case-insensitive version of <code>T</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters","title":"Type parameters","text":"Name Type <code>T</code> extends <code>string</code>"},{"location":"reference/modules/appium_types/#defined-in_20","title":"Defined in","text":"<p>packages/types/lib/util.ts:68</p>"},{"location":"reference/modules/appium_types/#appiumconfig","title":"AppiumConfig","text":"<p>\u01ac AppiumConfig: <code>Partial</code>&lt;<code>AppiumConfiguration</code>&gt;</p> <p>The Appium configuration as it would be in a user-provided configuration file.</p>"},{"location":"reference/modules/appium_types/#defined-in_21","title":"Defined in","text":"<p>packages/types/lib/config.ts:8</p>"},{"location":"reference/modules/appium_types/#appiumloggerlevel","title":"AppiumLoggerLevel","text":"<p>\u01ac AppiumLoggerLevel: <code>\"silly\"</code> | <code>\"verbose\"</code> | <code>\"debug\"</code> | <code>\"info\"</code> | <code>\"http\"</code> | <code>\"warn\"</code> | <code>\"error\"</code></p> <p>Possible \"log levels\" for <code>AppiumLogger</code>.</p> <p>Extracted from <code>npmlog</code>.</p>"},{"location":"reference/modules/appium_types/#defined-in_22","title":"Defined in","text":"<p>packages/types/lib/logger.ts:15</p>"},{"location":"reference/modules/appium_types/#appiumloggerprefix","title":"AppiumLoggerPrefix","text":"<p>\u01ac AppiumLoggerPrefix: <code>string</code> | () =&gt; <code>string</code></p> <p>A log prefix for <code>AppiumLogger</code></p> <p>If a function, the function will return the prefix.  Log messages will be prefixed with this value.</p>"},{"location":"reference/modules/appium_types/#defined-in_23","title":"Defined in","text":"<p>packages/types/lib/logger.ts:8</p>"},{"location":"reference/modules/appium_types/#appiumserver","title":"AppiumServer","text":"<p>\u01ac AppiumServer: <code>Omit</code>&lt;<code>HTTPServer</code>, <code>\"close\"</code>&gt; &amp; <code>AppiumServerExtension</code></p> <p>Appium's slightly-modified HTTPServer http.Server.</p>"},{"location":"reference/modules/appium_types/#defined-in_24","title":"Defined in","text":"<p>packages/types/lib/server.ts:10</p>"},{"location":"reference/modules/appium_types/#associated","title":"Associated","text":"<p>\u01ac Associated&lt;<code>A</code>, <code>B</code>&gt;: { [Prop in keyof Required&lt;A&gt;]: B[Prop] }</p> <p>Object <code>B</code> has all the keys as object <code>A</code> (even if those keys in <code>A</code> are otherwise optional).</p>"},{"location":"reference/modules/appium_types/#type-parameters_1","title":"Type parameters","text":"Name Type <code>A</code> extends <code>object</code> <code>B</code> extends"},{"location":"reference/modules/appium_types/#defined-in_25","title":"Defined in","text":"<p>packages/types/lib/util.ts:61</p>"},{"location":"reference/modules/appium_types/#basecapabilities","title":"BaseCapabilities","text":"<p>\u01ac BaseCapabilities: <code>Capabilities</code>&lt;<code>BaseDriverCapConstraints</code>&gt;</p> <p>Base capabilities as derived from <code>BaseDriverCapConstraints</code>.</p>"},{"location":"reference/modules/appium_types/#defined-in_26","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:13</p>"},{"location":"reference/modules/appium_types/#basedrivercapconstraints","title":"BaseDriverCapConstraints","text":"<p>\u01ac BaseDriverCapConstraints: typeof <code>BASE_DESIRED_CAP_CONSTRAINTS</code></p>"},{"location":"reference/modules/appium_types/#defined-in_27","title":"Defined in","text":"<p>packages/types/lib/constraints.ts:55</p>"},{"location":"reference/modules/appium_types/#basenscapabilities","title":"BaseNSCapabilities","text":"<p>\u01ac BaseNSCapabilities: <code>NSCapabilities</code>&lt;<code>BaseDriverCapConstraints</code>&gt;</p> <p>Like <code>BaseCapabilities</code>, except all Appium-specific keys are namespaced.</p>"},{"location":"reference/modules/appium_types/#defined-in_28","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:18</p>"},{"location":"reference/modules/appium_types/#basepathconfig","title":"BasePathConfig","text":"<p>\u01ac BasePathConfig: <code>string</code></p> <p>Base path to use as the prefix for all webdriver routes running on the server</p>"},{"location":"reference/modules/appium_types/#defined-in_29","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:25</p>"},{"location":"reference/modules/appium_types/#basew3ccapabilities","title":"BaseW3CCapabilities","text":"<p>\u01ac BaseW3CCapabilities: <code>W3CCapabilities</code>&lt;<code>BaseDriverCapConstraints</code>&gt;</p> <p>Like NSBaseCapabilities, except W3C-style.</p> <p><code>See</code></p> <p><code>W3CCapabilities</code></p>"},{"location":"reference/modules/appium_types/#defined-in_30","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:24</p>"},{"location":"reference/modules/appium_types/#callbackaddressconfig","title":"CallbackAddressConfig","text":"<p>\u01ac CallbackAddressConfig: <code>string</code></p> <p>Callback IP address (default: same as \"address\")</p>"},{"location":"reference/modules/appium_types/#defined-in_31","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:29</p>"},{"location":"reference/modules/appium_types/#callbackportconfig","title":"CallbackPortConfig","text":"<p>\u01ac CallbackPortConfig: <code>number</code></p> <p>Callback port (default: same as \"port\")</p>"},{"location":"reference/modules/appium_types/#defined-in_32","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:33</p>"},{"location":"reference/modules/appium_types/#capabilities","title":"Capabilities","text":"<p>\u01ac Capabilities&lt;<code>C</code>&gt;: <code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;</p> <p>Given some constraints, return the entire set of supported capabilities it supports (including whatever is in its desired caps).</p> <p>Does not contain <code>BaseCapabilities</code>; see <code>DriverCaps</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_2","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_33","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:100</p>"},{"location":"reference/modules/appium_types/#capstonscaps","title":"CapsToNSCaps","text":"<p>\u01ac CapsToNSCaps&lt;<code>T</code>, <code>NS</code>&gt;: { [K in keyof T as K extends keyof StandardCapabilities ? K : NamespacedString&lt;K &amp; string, NS&gt;]: T[K] }</p> <p>Given <code>StringRecord</code> <code>T</code> and namespace string <code>NS</code>, a type with the key names prefixed by <code>${NS}:</code> except for standard capabilities.  <code>NS</code> defaults to <code>appium</code>.</p> <p>If <code>T</code> is already namespaced, well, it'll get double-namespaced.</p>"},{"location":"reference/modules/appium_types/#type-parameters_3","title":"Type parameters","text":"Name Type <code>T</code> extends <code>StringRecord</code> <code>NS</code> extends <code>string</code> = <code>W3C_APPIUM_PREFIX</code>"},{"location":"reference/modules/appium_types/#defined-in_34","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:72</p>"},{"location":"reference/modules/appium_types/#class","title":"Class","text":"<p>\u01ac Class&lt;<code>Proto</code>, <code>StaticMembers</code>, <code>Args</code>&gt;: <code>_Class</code>&lt;<code>Proto</code>, <code>Args</code>&gt; &amp; <code>StaticMembers</code></p> <p>Wraps _Class <code>type-fest</code>'s <code>Class</code> to include static members.</p>"},{"location":"reference/modules/appium_types/#type-parameters_4","title":"Type parameters","text":"Name Type <code>Proto</code> <code>Proto</code> <code>StaticMembers</code> extends <code>object</code> = <code>object</code> <code>Args</code> extends <code>unknown</code>[] = <code>any</code>[]"},{"location":"reference/modules/appium_types/#defined-in_35","title":"Defined in","text":"<p>packages/types/lib/util.ts:11</p>"},{"location":"reference/modules/appium_types/#constraintchoice","title":"ConstraintChoice","text":"<p>\u01ac ConstraintChoice&lt;<code>C</code>, <code>T</code>&gt;: <code>C</code>[<code>\"inclusionCaseInsensitive\"</code>] extends <code>T</code>[] ? <code>AnyCase</code>&lt;<code>C</code>[<code>\"inclusionCaseInsensitive\"</code>][<code>number</code>]&gt; : <code>C</code>[<code>\"inclusion\"</code>] extends <code>ReadonlyArray</code>&lt;<code>T</code>&gt; ? <code>C</code>[<code>\"inclusion\"</code>][<code>number</code>] : <code>T</code></p> <p>Given a <code>Constraint</code> <code>C</code> and a type <code>T</code>, see if <code>inclusion</code>/<code>inclusionCaseInsensitive</code> is present, and create a union of its allowed literals; otherwise just use <code>T</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_5","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraint</code> <code>T</code> <code>T</code>"},{"location":"reference/modules/appium_types/#defined-in_36","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:29</p>"},{"location":"reference/modules/appium_types/#constrainttocap","title":"ConstraintToCap","text":"<p>\u01ac ConstraintToCap&lt;<code>C</code>&gt;: <code>C</code>[<code>\"presence\"</code>] extends <code>true</code> | { <code>allowEmpty</code>: <code>boolean</code>  } ? <code>ConstraintToCapKind</code>&lt;<code>C</code>&gt; : <code>ConstraintToCapKind</code>&lt;<code>C</code>&gt; | <code>undefined</code></p> <p>Given <code>Constraint</code> <code>C</code>, determine if it is required or optional.</p> <p>In practice, all capabilities are considered optional per types, but various errors might be thrown if some are not present.</p>"},{"location":"reference/modules/appium_types/#type-parameters_6","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraint</code>"},{"location":"reference/modules/appium_types/#defined-in_37","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:61</p>"},{"location":"reference/modules/appium_types/#constrainttocapkind","title":"ConstraintToCapKind","text":"<p>\u01ac ConstraintToCapKind&lt;<code>C</code>&gt;: <code>C</code>[<code>\"isString\"</code>] extends <code>true</code> ? <code>ConstraintChoice</code>&lt;<code>C</code>, <code>string</code>&gt; : <code>C</code>[<code>\"isNumber\"</code>] extends <code>true</code> ? <code>ConstraintChoice</code>&lt;<code>C</code>, <code>number</code>&gt; : <code>C</code>[<code>\"isBoolean\"</code>] extends <code>true</code> ? <code>boolean</code> : <code>C</code>[<code>\"isArray\"</code>] extends <code>true</code> ? <code>string</code>[] : <code>C</code>[<code>\"isObject\"</code>] extends <code>true</code> ? <code>StringRecord</code> : <code>unknown</code></p> <p>Given <code>Constraint</code> <code>C</code>, determine the associated type of the capability.</p> <p>Notes:</p> <ul> <li>Only <code>number</code> and <code>string</code> values can have \"choices\" (<code>inclusion</code>/<code>inclusionCaseInesnsitive</code>) associated with them.</li> <li>If <code>isArray</code> is <code>true</code>, the type is always of type <code>string[]</code>. If this is incorrect, then it will be <code>any[]</code>.</li> <li>There is no way to express the shape of an object if <code>ifObject</code> is <code>true</code>.</li> </ul>"},{"location":"reference/modules/appium_types/#type-parameters_7","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraint</code>"},{"location":"reference/modules/appium_types/#defined-in_38","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:44</p>"},{"location":"reference/modules/appium_types/#constraints","title":"Constraints","text":"<p>\u01ac Constraints: <code>Object</code></p> <p>A collection of constraints describing the allowed capabilities for a driver.</p>"},{"location":"reference/modules/appium_types/#index-signature","title":"Index signature","text":"<p>\u25aa [name: <code>string</code>]: <code>Constraint</code></p>"},{"location":"reference/modules/appium_types/#defined-in_39","title":"Defined in","text":"<p>packages/types/lib/driver.ts:481</p>"},{"location":"reference/modules/appium_types/#constraintstocaps","title":"ConstraintsToCaps","text":"<p>\u01ac ConstraintsToCaps&lt;<code>C</code>&gt;: { -readonly [K in keyof C]: ConstraintToCap&lt;C[K]&gt; }</p> <p>Converts <code>Constraint</code> <code>C</code> to a <code>Capabilities</code> object.</p>"},{"location":"reference/modules/appium_types/#type-parameters_8","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_40","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:91</p>"},{"location":"reference/modules/appium_types/#debuglogspacingconfig","title":"DebugLogSpacingConfig","text":"<p>\u01ac DebugLogSpacingConfig: <code>boolean</code></p> <p>Add exaggerated spacing in logs to help with visual inspection</p>"},{"location":"reference/modules/appium_types/#defined-in_41","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:37</p>"},{"location":"reference/modules/appium_types/#defaultcreatesessionresult","title":"DefaultCreateSessionResult","text":"<p>\u01ac DefaultCreateSessionResult&lt;<code>C</code>&gt;: [sessionId: string, capabilities: DriverCaps&lt;C&gt;]</p> <p><code>See</code></p> <p><code>ISessionHandler</code></p>"},{"location":"reference/modules/appium_types/#type-parameters_9","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_42","title":"Defined in","text":"<p>packages/types/lib/driver.ts:394</p>"},{"location":"reference/modules/appium_types/#defaultdeletesessionresult","title":"DefaultDeleteSessionResult","text":"<p>\u01ac DefaultDeleteSessionResult: <code>void</code></p> <p><code>See</code></p> <p><code>ISessionHandler</code></p>"},{"location":"reference/modules/appium_types/#defined-in_43","title":"Defined in","text":"<p>packages/types/lib/driver.ts:402</p>"},{"location":"reference/modules/appium_types/#denyinsecureconfig","title":"DenyInsecureConfig","text":"<p>\u01ac DenyInsecureConfig: <code>string</code>[]</p> <p>Set which insecure features are not allowed to run in this server's sessions. Features are defined on a driver level; see documentation for more details. Features listed here will not be enabled even if also listed in \"allow-insecure\", and even if \"relaxed-security\" is enabled. If string, a path to a text file containing policy or a comma-delimited list.</p>"},{"location":"reference/modules/appium_types/#defined-in_44","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:41</p>"},{"location":"reference/modules/appium_types/#drivercaps","title":"DriverCaps","text":"<p>\u01ac DriverCaps&lt;<code>C</code>&gt;: <code>BaseCapabilities</code> &amp; <code>Capabilities</code>&lt;<code>C</code>&gt;</p> <p>Normalized capabilities for drivers extending <code>BaseDriver</code>. Includes <code>BaseCapabilities</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_10","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_45","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:144</p>"},{"location":"reference/modules/appium_types/#driverclass","title":"DriverClass","text":"<p>\u01ac DriverClass&lt;<code>T</code>&gt;: <code>Class</code>&lt;<code>T</code>, <code>DriverStatic</code>&lt;<code>T</code>&gt;, [] | [<code>Partial</code>&lt;<code>ServerArgs</code>&gt;] | [<code>Partial</code>&lt;<code>ServerArgs</code>&gt;, <code>boolean</code>]&gt;</p> <p>Represents a driver class, which is used internally by Appium.</p> <p>This is likely unusable by external consumers, but YMMV!</p>"},{"location":"reference/modules/appium_types/#type-parameters_11","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Driver</code> = <code>Driver</code>"},{"location":"reference/modules/appium_types/#defined-in_46","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2010</p>"},{"location":"reference/modules/appium_types/#drivercommand","title":"DriverCommand","text":"<p>\u01ac DriverCommand&lt;<code>TArgs</code>, <code>TRetval</code>&gt;: (...<code>args</code>: <code>TArgs</code>) =&gt; <code>Promise</code>&lt;<code>TRetval</code>&gt;</p>"},{"location":"reference/modules/appium_types/#type-parameters_12","title":"Type parameters","text":"Name Type <code>TArgs</code> extends readonly <code>any</code>[] = <code>any</code>[] <code>TRetval</code> <code>unknown</code>"},{"location":"reference/modules/appium_types/#type-declaration_10","title":"Type declaration","text":"<p>\u25b8 (<code>...args</code>): <code>Promise</code>&lt;<code>TRetval</code>&gt;</p> <p>An instance method of a driver class, whose name may be referenced by MethodDef.command, and serves as an Appium command.</p> <p>Note that this signature differs from a <code>PluginCommand</code>.</p>"},{"location":"reference/modules/appium_types/#parameters","title":"Parameters","text":"Name Type <code>...args</code> <code>TArgs</code>"},{"location":"reference/modules/appium_types/#returns","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TRetval</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_47","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2035</p>"},{"location":"reference/modules/appium_types/#drivercommandtoplugincommand","title":"DriverCommandToPluginCommand","text":"<p>\u01ac DriverCommandToPluginCommand&lt;<code>DC</code>, <code>TArgs</code>, <code>TReturn</code>, <code>NextRetval</code>&gt;: <code>PluginCommand</code>&lt;<code>ExternalDriver</code>, <code>TArgs</code>, <code>TReturn</code>, <code>NextRetval</code>&gt;</p> <p>This utility type can presently be used by Plugin authors to mark a method in their plugin as one which overrides a method in a Driver.</p> <p><code>Example</code></p> <p>class MyPlugin extends BasePlugin implements Plugin {   public getPageSource: DriverCommandToPluginCommand&lt;     ExternalDriver['getPageSource'], // method to override     [flag: boolean], // new arguments; defaults to the args of the method     string|Buffer, // new return type; defaults to the async return type of the method     string // async return type of <code>next()</code></p> <p>= async function (next, driver, flag = boolean) {     const source = await next();     return flag ? source : Buffer.from(source);   } }</p>"},{"location":"reference/modules/appium_types/#type-parameters_13","title":"Type parameters","text":"Name Type <code>DC</code> extends <code>DriverCommand</code> <code>TArgs</code> extends readonly <code>any</code>[] = <code>Parameters</code>&lt;<code>DC</code>&gt; <code>TReturn</code> <code>AsyncReturnType</code>&lt;<code>DC</code>&gt; <code>NextRetval</code> <code>unknown</code>"},{"location":"reference/modules/appium_types/#defined-in_48","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:51</p>"},{"location":"reference/modules/appium_types/#driverdata","title":"DriverData","text":"<p>\u01ac DriverData: <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;</p> <p>Custom session data for a driver.</p>"},{"location":"reference/modules/appium_types/#defined-in_49","title":"Defined in","text":"<p>packages/types/lib/driver.ts:464</p>"},{"location":"reference/modules/appium_types/#driveropts","title":"DriverOpts","text":"<p>\u01ac DriverOpts&lt;<code>C</code>&gt;: <code>InitialOpts</code> &amp; <code>DriverCaps</code>&lt;<code>C</code>&gt;</p> <p>Options as set within <code>createSession</code>, which is a union of <code>InitialOpts</code> and <code>DriverCaps</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_14","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_50","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2023</p>"},{"location":"reference/modules/appium_types/#drivertype","title":"DriverType","text":"<p>\u01ac DriverType: <code>\"driver\"</code></p> <p>The string referring to a \"driver\"-type extension</p>"},{"location":"reference/modules/appium_types/#defined-in_51","title":"Defined in","text":"<p>packages/types/lib/util.ts:20</p>"},{"location":"reference/modules/appium_types/#executemethodmap","title":"ExecuteMethodMap","text":"<p>\u01ac ExecuteMethodMap&lt;<code>T</code>&gt;: <code>T</code> extends <code>Plugin</code> ? <code>Readonly</code>&lt;<code>StringRecord</code>&lt;<code>PluginExecuteMethodDef</code>&lt;<code>T</code>&gt;&gt;&gt; : <code>T</code> extends <code>Driver</code> ? <code>Readonly</code>&lt;<code>StringRecord</code>&lt;<code>DriverExecuteMethodDef</code>&lt;<code>T</code>&gt;&gt;&gt; : <code>never</code></p> <p>Definition of an execute method (which overloads the behavior of the <code>execute</code> command) in a <code>Driver</code> or <code>Plugin</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_15","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Plugin</code> | <code>Driver</code>"},{"location":"reference/modules/appium_types/#defined-in_52","title":"Defined in","text":"<p>packages/types/lib/command.ts:135</p>"},{"location":"reference/modules/appium_types/#extensiontype","title":"ExtensionType","text":"<p>\u01ac ExtensionType: <code>DriverType</code> | <code>PluginType</code></p> <p>The strings referring to all extension types.</p>"},{"location":"reference/modules/appium_types/#defined-in_53","title":"Defined in","text":"<p>packages/types/lib/util.ts:31</p>"},{"location":"reference/modules/appium_types/#httpheaders","title":"HTTPHeaders","text":"<p>\u01ac HTTPHeaders: <code>Record</code>&lt;<code>string</code>, <code>string</code> | <code>string</code>[] | <code>number</code> | <code>boolean</code> | <code>null</code>&gt;</p> <p>An object of HTTP headers.</p>"},{"location":"reference/modules/appium_types/#defined-in_54","title":"Defined in","text":"<p>packages/types/lib/http.ts:4</p>"},{"location":"reference/modules/appium_types/#httpmethod","title":"HTTPMethod","text":"<p>\u01ac HTTPMethod: <code>\"get\"</code> | <code>\"GET\"</code> | <code>\"delete\"</code> | <code>\"DELETE\"</code> | <code>\"head\"</code> | <code>\"HEAD\"</code> | <code>\"options\"</code> | <code>\"OPTIONS\"</code> | <code>\"post\"</code> | <code>\"POST\"</code> | <code>\"put\"</code> | <code>\"PUT\"</code> | <code>\"patch\"</code> | <code>\"PATCH\"</code> | <code>\"purge\"</code> | <code>\"PURGE\"</code> | <code>\"link\"</code> | <code>\"LINK\"</code> | <code>\"unlink\"</code> | <code>\"UNLINK\"</code></p> <p>Possible HTTP methods, as stolen from <code>axios</code>.</p> <p><code>See</code></p> <p>https://npm.im/axios</p>"},{"location":"reference/modules/appium_types/#defined-in_55","title":"Defined in","text":"<p>packages/types/lib/http.ts:11</p>"},{"location":"reference/modules/appium_types/#initialopts","title":"InitialOpts","text":"<p>\u01ac InitialOpts: <code>Merge</code>&lt;<code>ServerArgs</code>, <code>ExtraDriverOpts</code>&gt;</p> <p>Options as provided to the <code>Driver</code> constructor.</p>"},{"location":"reference/modules/appium_types/#defined-in_56","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2028</p>"},{"location":"reference/modules/appium_types/#kebabtocamel","title":"KebabToCamel","text":"<p>\u01ac KebabToCamel&lt;<code>S</code>&gt;: <code>S</code> extends `${infer P1}-${infer P2}${infer P3}` ? `${Lowercase&lt;P1&gt;}${Uppercase&lt;P2&gt;}${KebabToCamel&lt;P3&gt;}` : <code>Lowercase</code>&lt;<code>S</code>&gt;</p> <p>Converts a kebab-cased string into a camel-cased string.</p>"},{"location":"reference/modules/appium_types/#type-parameters_16","title":"Type parameters","text":"Name Type <code>S</code> extends <code>string</code>"},{"location":"reference/modules/appium_types/#defined-in_57","title":"Defined in","text":"<p>packages/types/lib/util.ts:36</p>"},{"location":"reference/modules/appium_types/#keepalivetimeoutconfig","title":"KeepAliveTimeoutConfig","text":"<p>\u01ac KeepAliveTimeoutConfig: <code>number</code></p> <p>Number of seconds the Appium server should apply as both the keep-alive timeout and the connection timeout for all requests. A value of 0 disables the timeout.</p>"},{"location":"reference/modules/appium_types/#defined-in_58","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:45</p>"},{"location":"reference/modules/appium_types/#keystocamelcase","title":"KeysToCamelCase","text":"<p>\u01ac KeysToCamelCase&lt;<code>T</code>&gt;: { [K in keyof T as KebabToCamel&lt;string &amp; K&gt;]: T[K] extends any[] ? KeysToCamelCase&lt;T[K][number]&gt;[] : ObjectToCamel&lt;T[K]&gt; }</p> <p>Converts an object or array to have camel-cased keys.</p>"},{"location":"reference/modules/appium_types/#type-parameters_17","title":"Type parameters","text":"Name <code>T</code>"},{"location":"reference/modules/appium_types/#defined-in_59","title":"Defined in","text":"<p>packages/types/lib/util.ts:52</p>"},{"location":"reference/modules/appium_types/#localtimezoneconfig","title":"LocalTimezoneConfig","text":"<p>\u01ac LocalTimezoneConfig: <code>boolean</code></p> <p>Use local timezone for timestamps</p>"},{"location":"reference/modules/appium_types/#defined-in_60","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:49</p>"},{"location":"reference/modules/appium_types/#logconfig","title":"LogConfig","text":"<p>\u01ac LogConfig: <code>string</code></p> <p>Also send log output to this file</p>"},{"location":"reference/modules/appium_types/#defined-in_61","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:53</p>"},{"location":"reference/modules/appium_types/#logdefrecord","title":"LogDefRecord","text":"<p>\u01ac LogDefRecord: <code>Record</code>&lt;<code>string</code>, <code>LogDef</code>&gt;</p> <p>A record of <code>LogDef</code> objects, keyed by the log type name. Used in <code>supportedLogTypes</code></p>"},{"location":"reference/modules/appium_types/#defined-in_62","title":"Defined in","text":"<p>packages/types/lib/driver.ts:353</p>"},{"location":"reference/modules/appium_types/#logfilter","title":"LogFilter","text":"<p>\u01ac LogFilter: { <code>[k: string]</code>: <code>unknown</code>; <code>flags?</code>: <code>string</code> ; <code>replacer?</code>: <code>string</code>  } &amp; <code>LogFilterText</code> | <code>LogFilterRegex</code></p> <p>Log filtering rule</p>"},{"location":"reference/modules/appium_types/#defined-in_63","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:57</p>"},{"location":"reference/modules/appium_types/#logfiltersconfig","title":"LogFiltersConfig","text":"<p>\u01ac LogFiltersConfig: <code>LogFilter</code>[]</p> <p>One or more log filtering rules</p>"},{"location":"reference/modules/appium_types/#defined-in_64","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:71</p>"},{"location":"reference/modules/appium_types/#loglevelconfig","title":"LogLevelConfig","text":"<p>\u01ac LogLevelConfig: <code>\"info\"</code> | <code>\"info:debug\"</code> | <code>\"info:info\"</code> | <code>\"info:warn\"</code> | <code>\"info:error\"</code> | <code>\"warn\"</code> | <code>\"warn:debug\"</code> | <code>\"warn:info\"</code> | <code>\"warn:warn\"</code> | <code>\"warn:error\"</code> | <code>\"error\"</code> | <code>\"error:debug\"</code> | <code>\"error:info\"</code> | <code>\"error:warn\"</code> | <code>\"error:error\"</code> | <code>\"debug\"</code> | <code>\"debug:debug\"</code> | <code>\"debug:info\"</code> | <code>\"debug:warn\"</code> | <code>\"debug:error\"</code></p> <p>Log level (console[:file])</p>"},{"location":"reference/modules/appium_types/#defined-in_65","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:75</p>"},{"location":"reference/modules/appium_types/#lognocolorsconfig","title":"LogNoColorsConfig","text":"<p>\u01ac LogNoColorsConfig: <code>boolean</code></p> <p>Do not use color in console output</p>"},{"location":"reference/modules/appium_types/#defined-in_66","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:99</p>"},{"location":"reference/modules/appium_types/#logtimestampconfig","title":"LogTimestampConfig","text":"<p>\u01ac LogTimestampConfig: <code>boolean</code></p> <p>Show timestamps in console output</p>"},{"location":"reference/modules/appium_types/#defined-in_67","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:103</p>"},{"location":"reference/modules/appium_types/#longstacktraceconfig","title":"LongStacktraceConfig","text":"<p>\u01ac LongStacktraceConfig: <code>boolean</code></p> <p>Add long stack traces to log entries. Recommended for debugging only.</p>"},{"location":"reference/modules/appium_types/#defined-in_68","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:107</p>"},{"location":"reference/modules/appium_types/#methodmap","title":"MethodMap","text":"<p>\u01ac MethodMap&lt;<code>T</code>&gt;: <code>T</code> extends <code>Plugin</code> ? <code>Readonly</code>&lt;<code>PluginMethodMap</code>&lt;<code>T</code>&gt;&gt; : <code>T</code> extends <code>Driver</code> ? <code>Readonly</code>&lt;<code>DriverMethodMap</code>&lt;<code>T</code>&gt;&gt; : <code>never</code></p> <p>A mapping of URL paths to HTTP methods to either a <code>DriverMethodDef</code> or <code>PluginMethodDef</code>.</p> <p>Extensions can define new methods for the Appium server to map to command names, of the same format as used in Appium's <code>routes.js</code>.</p> <p><code>Example</code></p> <pre><code>{\n'/session/:sessionId/new_method': {\nGET: {command: 'getNewThing'},\nPOST: {command: 'setNewThing', payloadParams: {required: ['someParam']}}\n}\n}\n</code></pre>"},{"location":"reference/modules/appium_types/#type-parameters_18","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Plugin</code> | <code>Driver</code>"},{"location":"reference/modules/appium_types/#defined-in_69","title":"Defined in","text":"<p>packages/types/lib/command.ts:33</p>"},{"location":"reference/modules/appium_types/#nscapabilities","title":"NSCapabilities","text":"<p>\u01ac NSCapabilities&lt;<code>C</code>, <code>NS</code>&gt;: <code>Partial</code>&lt;<code>CapsToNSCaps</code>&lt;<code>ConstraintsToCaps</code>&lt;<code>C</code>&gt;, <code>NS</code>&gt;&gt;</p> <p>Namespaced caps (where appropriate).</p> <p>Does not contain <code>BaseCapabilities</code>; see <code>NSDriverCaps</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_19","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> <code>NS</code> extends <code>string</code> = <code>W3C_APPIUM_PREFIX</code>"},{"location":"reference/modules/appium_types/#defined-in_70","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:117</p>"},{"location":"reference/modules/appium_types/#nsdrivercaps","title":"NSDriverCaps","text":"<p>\u01ac NSDriverCaps&lt;<code>C</code>&gt;: <code>BaseNSCapabilities</code> &amp; <code>NSCapabilities</code>&lt;<code>C</code>&gt;</p> <p>Namespaced capabilities for drivers extending <code>BaseDriver</code>.</p> <p>Includes <code>BaseNSCapabilities</code>.</p>"},{"location":"reference/modules/appium_types/#type-parameters_20","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_71","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:168</p>"},{"location":"reference/modules/appium_types/#namespacedstring","title":"NamespacedString","text":"<p>\u01ac NamespacedString&lt;<code>S</code>, <code>NS</code>&gt;: `${NS}:${S}`</p> <p>A namespaced string of the format <code>&lt;NS&gt;:&lt;S&gt;</code> where <code>NS</code> defaults to the value of <code>W3C_APPIUM_PREFIX</code> and <code>S</code> is a string.</p>"},{"location":"reference/modules/appium_types/#type-parameters_21","title":"Type parameters","text":"Name Type <code>S</code> extends <code>string</code> <code>NS</code> extends <code>string</code> = <code>W3C_APPIUM_PREFIX</code>"},{"location":"reference/modules/appium_types/#defined-in_72","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:82</p>"},{"location":"reference/modules/appium_types/#newwindowtype","title":"NewWindowType","text":"<p>\u01ac NewWindowType: <code>\"tab\"</code> | <code>\"window\"</code></p>"},{"location":"reference/modules/appium_types/#defined-in_73","title":"Defined in","text":"<p>packages/types/lib/driver.ts:511</p>"},{"location":"reference/modules/appium_types/#nextplugincallback","title":"NextPluginCallback","text":"<p>\u01ac NextPluginCallback&lt;<code>T</code>&gt;: () =&gt; <code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/modules/appium_types/#type-parameters_22","title":"Type parameters","text":"Name Type <code>T</code> <code>unknown</code>"},{"location":"reference/modules/appium_types/#type-declaration_11","title":"Type declaration","text":"<p>\u25b8 (): <code>Promise</code>&lt;<code>T</code>&gt;</p> <p>A reference to an async function which encapsulates what would normally happen if this plugin were not handling a command. Used by PluginInterface.handle.</p> <p>Given <code>next()</code> is a <code>NextPluginCallback</code>: if this is the only plugin handling the command, <code>await next()</code> would therefore trigger the normal handling logic in the driver which is in use. If another plugin is registered, it would run that plugin's <code>handle</code> method and return the result for use here. Note that if this plugin does not call <code>await next()</code>, then the normal command logic will not be run, and this plugin is responsible for managing new command timeouts and command logging, for example: <code>driver.stopNewCommandTimeout()</code> -- before running plugin logic <code>driver.startNewCommandTimeout()</code> -- after running plugin logic <code>driver._eventHistory.commands.push({cmd: cmdName, startTime, endTime})</code> -- after running plugin logic</p>"},{"location":"reference/modules/appium_types/#returns_1","title":"Returns","text":"<p><code>Promise</code>&lt;<code>T</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_74","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:103</p>"},{"location":"reference/modules/appium_types/#nopermscheckconfig","title":"NoPermsCheckConfig","text":"<p>\u01ac NoPermsCheckConfig: <code>boolean</code></p> <p>Do not check that needed files are readable and/or writable</p>"},{"location":"reference/modules/appium_types/#defined-in_75","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:111</p>"},{"location":"reference/modules/appium_types/#normalizedappiumconfig","title":"NormalizedAppiumConfig","text":"<p>\u01ac NormalizedAppiumConfig: <code>Object</code></p> <p>\"Normalized\" config, which is camel-cased (instead of kebab-case, like the schema). It is not flattened.</p>"},{"location":"reference/modules/appium_types/#type-declaration_12","title":"Type declaration","text":"Name Type <code>server</code> <code>NormalizedServerConfig</code>"},{"location":"reference/modules/appium_types/#defined-in_76","title":"Defined in","text":"<p>packages/types/lib/config.ts:33</p>"},{"location":"reference/modules/appium_types/#normalizedserverconfig","title":"NormalizedServerConfig","text":"<p>\u01ac NormalizedServerConfig: { [Prop in keyof ServerConfigMapping as AppiumServerJsonSchema[Prop] extends WithDest ? AppiumServerJsonSchema[Prop][\"appiumCliDest\"] : KebabToCamel&lt;Prop&gt;]: ServerConfig[Prop] }</p> <p>Camel-cased server config. Not flattened.</p>"},{"location":"reference/modules/appium_types/#defined-in_77","title":"Defined in","text":"<p>packages/types/lib/config.ts:24</p>"},{"location":"reference/modules/appium_types/#objecttocamel","title":"ObjectToCamel","text":"<p>\u01ac ObjectToCamel&lt;<code>T</code>&gt;: { [K in keyof T as KebabToCamel&lt;string &amp; K&gt;]: T[K] extends Record&lt;string, any&gt; ? KeysToCamelCase&lt;T[K]&gt; : T[K] }</p> <p>Converts an object with kebab-cased keys into camel-cased keys.</p>"},{"location":"reference/modules/appium_types/#type-parameters_23","title":"Type parameters","text":"Name <code>T</code>"},{"location":"reference/modules/appium_types/#defined-in_78","title":"Defined in","text":"<p>packages/types/lib/util.ts:43</p>"},{"location":"reference/modules/appium_types/#orientation","title":"Orientation","text":"<p>\u01ac Orientation: <code>\"LANDSCAPE\"</code> | <code>\"PORTRAIT\"</code></p>"},{"location":"reference/modules/appium_types/#defined-in_79","title":"Defined in","text":"<p>packages/types/lib/driver.ts:558</p>"},{"location":"reference/modules/appium_types/#pluginclass","title":"PluginClass","text":"<p>\u01ac PluginClass&lt;<code>P</code>&gt;: <code>Class</code>&lt;<code>P</code>, <code>PluginStatic</code>&lt;<code>P</code>&gt;, [pluginName: string, cliArgs: StringRecord&lt;unknown&gt;]&gt;</p> <p>Mainly for internal use.</p> <p>The third parameter is the possible constructor signatures for the plugin class.</p>"},{"location":"reference/modules/appium_types/#type-parameters_24","title":"Type parameters","text":"Name Type <code>P</code> extends <code>Plugin</code> = <code>Plugin</code>"},{"location":"reference/modules/appium_types/#defined-in_80","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:122</p>"},{"location":"reference/modules/appium_types/#plugincommand","title":"PluginCommand","text":"<p>\u01ac PluginCommand&lt;<code>D</code>, <code>TArgs</code>, <code>TReturn</code>, <code>NextReturn</code>&gt;: (<code>next</code>: <code>NextPluginCallback</code>&lt;<code>NextReturn</code>&gt;, <code>driver</code>: <code>D</code>, ...<code>args</code>: <code>TArgs</code>) =&gt; <code>Promise</code>&lt;<code>TReturn</code>&gt;</p>"},{"location":"reference/modules/appium_types/#type-parameters_25","title":"Type parameters","text":"Name Type <code>D</code> extends <code>ExternalDriver</code> = <code>ExternalDriver</code> <code>TArgs</code> extends readonly <code>any</code>[] = <code>any</code>[] <code>TReturn</code> <code>unknown</code> <code>NextReturn</code> <code>unknown</code>"},{"location":"reference/modules/appium_types/#type-declaration_13","title":"Type declaration","text":"<p>\u25b8 (<code>next</code>, <code>driver</code>, <code>...args</code>): <code>Promise</code>&lt;<code>TReturn</code>&gt;</p> <p>Implementation of a command within a plugin</p> <p>At minimum, <code>D</code> must be <code>ExternalDriver</code>, but a plugin can be more narrow about which drivers it supports.</p>"},{"location":"reference/modules/appium_types/#parameters_1","title":"Parameters","text":"Name Type <code>next</code> <code>NextPluginCallback</code>&lt;<code>NextReturn</code>&gt; <code>driver</code> <code>D</code> <code>...args</code> <code>TArgs</code>"},{"location":"reference/modules/appium_types/#returns_2","title":"Returns","text":"<p><code>Promise</code>&lt;<code>TReturn</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_81","title":"Defined in","text":"<p>packages/types/lib/plugin.ts:110</p>"},{"location":"reference/modules/appium_types/#plugintype","title":"PluginType","text":"<p>\u01ac PluginType: <code>\"plugin\"</code></p> <p>The string referring to a \"plugin\"-type extension</p>"},{"location":"reference/modules/appium_types/#defined-in_82","title":"Defined in","text":"<p>packages/types/lib/util.ts:26</p>"},{"location":"reference/modules/appium_types/#portconfig","title":"PortConfig","text":"<p>\u01ac PortConfig: <code>number</code></p> <p>Port to listen on</p>"},{"location":"reference/modules/appium_types/#defined-in_83","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:115</p>"},{"location":"reference/modules/appium_types/#position","title":"Position","text":"<p>\u01ac Position: <code>Pick</code>&lt;<code>Rect</code>, <code>\"x\"</code> | <code>\"y\"</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_84","title":"Defined in","text":"<p>packages/types/lib/driver.ts:532</p>"},{"location":"reference/modules/appium_types/#protocol","title":"Protocol","text":"<p>\u01ac Protocol: <code>\"MJSONWP\"</code> | <code>\"W3C\"</code></p>"},{"location":"reference/modules/appium_types/#defined-in_85","title":"Defined in","text":"<p>packages/types/lib/driver.ts:571</p>"},{"location":"reference/modules/appium_types/#relaxedsecurityconfig","title":"RelaxedSecurityConfig","text":"<p>\u01ac RelaxedSecurityConfig: <code>boolean</code></p> <p>Disable additional security checks, so it is possible to use some advanced features, provided by drivers supporting this option. Only enable it if all the clients are in the trusted network and it's not the case if a client could potentially break out of the session sandbox. Specific features can be overridden by using \"deny-insecure\"</p>"},{"location":"reference/modules/appium_types/#defined-in_86","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:119</p>"},{"location":"reference/modules/appium_types/#routematcher","title":"RouteMatcher","text":"<p>\u01ac RouteMatcher: [<code>HTTPMethod</code>, <code>RegExp</code>]</p> <p>Tuple of an HTTP method with a regex matching a request path</p>"},{"location":"reference/modules/appium_types/#defined-in_87","title":"Defined in","text":"<p>packages/types/lib/driver.ts:2042</p>"},{"location":"reference/modules/appium_types/#serverargs","title":"ServerArgs","text":"<p>\u01ac ServerArgs: { [Prop in keyof ServerConfigMapping as SetKeyForProp&lt;Prop&gt;]: KeyOrDefaultForProp&lt;Prop&gt; }</p> <p>The final shape of the parsed CLI arguments.</p> <p>These will be camel-cased unless overridden by <code>appiumCliDest</code> field in schema(s).</p>"},{"location":"reference/modules/appium_types/#defined-in_88","title":"Defined in","text":"<p>packages/types/lib/config.ts:62</p>"},{"location":"reference/modules/appium_types/#sessionoverrideconfig","title":"SessionOverrideConfig","text":"<p>\u01ac SessionOverrideConfig: <code>boolean</code></p> <p>Enables session override (clobbering)</p>"},{"location":"reference/modules/appium_types/#defined-in_89","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:123</p>"},{"location":"reference/modules/appium_types/#settingsupdatelistener","title":"SettingsUpdateListener","text":"<p>\u01ac SettingsUpdateListener&lt;<code>T</code>&gt;: (<code>prop</code>: keyof <code>T</code>, <code>newValue</code>: <code>unknown</code>, <code>curValue</code>: <code>unknown</code>) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_types/#type-parameters_26","title":"Type parameters","text":"Name Type <code>T</code> extends <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt; = <code>Record</code>&lt;<code>string</code>, <code>unknown</code>&gt;"},{"location":"reference/modules/appium_types/#type-declaration_14","title":"Type declaration","text":"<p>\u25b8 (<code>prop</code>, <code>newValue</code>, <code>curValue</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_types/#parameters_2","title":"Parameters","text":"Name Type <code>prop</code> keyof <code>T</code> <code>newValue</code> <code>unknown</code> <code>curValue</code> <code>unknown</code>"},{"location":"reference/modules/appium_types/#returns_3","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_90","title":"Defined in","text":"<p>packages/types/lib/driver.ts:496</p>"},{"location":"reference/modules/appium_types/#singularsessiondata","title":"SingularSessionData","text":"<p>\u01ac SingularSessionData&lt;<code>C</code>, <code>T</code>&gt;: <code>DriverCaps</code>&lt;<code>C</code>&gt; &amp; { <code>error?</code>: <code>string</code> ; <code>events?</code>: <code>EventHistory</code>  } &amp; <code>T</code></p> <p>Data returned by ISessionCommands.getSession.</p>"},{"location":"reference/modules/appium_types/#type-parameters_27","title":"Type parameters","text":"Name Type Description <code>C</code> extends <code>Constraints</code> = <code>Constraints</code> The driver's constraints <code>T</code> extends <code>StringRecord</code> = <code>StringRecord</code> Any extra data the driver stuffs in here"},{"location":"reference/modules/appium_types/#defined-in_91","title":"Defined in","text":"<p>packages/types/lib/driver.ts:191</p>"},{"location":"reference/modules/appium_types/#size","title":"Size","text":"<p>\u01ac Size: <code>Pick</code>&lt;<code>Rect</code>, <code>\"width\"</code> | <code>\"height\"</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_92","title":"Defined in","text":"<p>packages/types/lib/driver.ts:530</p>"},{"location":"reference/modules/appium_types/#strictcapsconfig","title":"StrictCapsConfig","text":"<p>\u01ac StrictCapsConfig: <code>boolean</code></p> <p>Cause sessions to fail if desired caps are sent in that Appium does not recognize as valid for the selected device</p>"},{"location":"reference/modules/appium_types/#defined-in_93","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:127</p>"},{"location":"reference/modules/appium_types/#stringrecord","title":"StringRecord","text":"<p>\u01ac StringRecord&lt;<code>T</code>&gt;: <code>Record</code>&lt;<code>string</code>, <code>T</code>&gt;</p> <p>Utility type for a object with string-only props</p>"},{"location":"reference/modules/appium_types/#type-parameters_28","title":"Type parameters","text":"Name Type <code>T</code> <code>any</code>"},{"location":"reference/modules/appium_types/#defined-in_94","title":"Defined in","text":"<p>packages/types/lib/util.ts:6</p>"},{"location":"reference/modules/appium_types/#tmpconfig","title":"TmpConfig","text":"<p>\u01ac TmpConfig: <code>string</code></p> <p>Absolute path to directory Appium can use to manage temp files. Defaults to C:\\Windows\\Temp on Windows and /tmp otherwise.</p>"},{"location":"reference/modules/appium_types/#defined-in_95","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:131</p>"},{"location":"reference/modules/appium_types/#tracedirconfig","title":"TraceDirConfig","text":"<p>\u01ac TraceDirConfig: <code>string</code></p> <p>Absolute path to directory Appium can use to save iOS instrument traces; defaults to /appium-instruments"},{"location":"reference/modules/appium_types/#defined-in_96","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:135</p>"},{"location":"reference/modules/appium_types/#updateservercallback","title":"UpdateServerCallback","text":"<p>\u01ac UpdateServerCallback: (<code>expressApp</code>: <code>Express</code>, <code>httpServer</code>: <code>AppiumServer</code>, <code>cliArgs</code>: <code>Partial</code>&lt;<code>ServerArgs</code>&gt;) =&gt; <code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_types/#type-declaration_15","title":"Type declaration","text":"<p>\u25b8 (<code>expressApp</code>, <code>httpServer</code>, <code>cliArgs</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p> <p>Optionally updates an Appium express app and http server, by calling methods that may mutate those objects. For example, you could call:</p> <p><code>expressApp.get('/foo', handler)</code></p> <p>In order to add a new route to Appium with this plugin. Or, you could add new listeners to the httpServer object.</p>"},{"location":"reference/modules/appium_types/#parameters_3","title":"Parameters","text":"Name Type Description <code>expressApp</code> <code>Express</code> the Express 'app' object used by Appium for route handling <code>httpServer</code> <code>AppiumServer</code> the node HTTP server that hosts the app <code>cliArgs</code> <code>Partial</code>&lt;<code>ServerArgs</code>&gt; Arguments from config files, CLI, etc."},{"location":"reference/modules/appium_types/#returns_4","title":"Returns","text":"<p><code>Promise</code>&lt;<code>void</code>&gt;</p>"},{"location":"reference/modules/appium_types/#defined-in_97","title":"Defined in","text":"<p>packages/types/lib/server.ts:69</p>"},{"location":"reference/modules/appium_types/#usedriversconfig","title":"UseDriversConfig","text":"<p>\u01ac UseDriversConfig: <code>string</code>[]</p> <p>A list of drivers to activate. By default, all installed drivers will be activated.</p>"},{"location":"reference/modules/appium_types/#defined-in_98","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:139</p>"},{"location":"reference/modules/appium_types/#usepluginsconfig","title":"UsePluginsConfig","text":"<p>\u01ac UsePluginsConfig: <code>string</code>[]</p> <p>A list of plugins to activate. To activate all plugins, the value should be an array with a single item \"all\".</p>"},{"location":"reference/modules/appium_types/#defined-in_99","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:143</p>"},{"location":"reference/modules/appium_types/#w3cdrivercaps","title":"W3CDriverCaps","text":"<p>\u01ac W3CDriverCaps&lt;<code>C</code>&gt;: <code>BaseW3CCapabilities</code> &amp; <code>W3CCapabilities</code>&lt;<code>C</code>&gt;</p> <p>W3C-style capabilities for drivers extending <code>BaseDriver</code>.</p> <p>Includes <code>BaseW3CCapabilities</code>.</p> <p><code>Example</code></p> <pre><code>class MyDriver extends BaseDriver&lt;MyDriverConstraints&gt; {\nasync createSession (w3ccaps: W3CDriverCaps&lt;MyDriverConstraints&gt;, ...args: any[]) {\n// ...\n}\n}\n</code></pre>"},{"location":"reference/modules/appium_types/#type-parameters_29","title":"Type parameters","text":"Name Type <code>C</code> extends <code>Constraints</code> = <code>Constraints</code>"},{"location":"reference/modules/appium_types/#defined-in_100","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:160</p>"},{"location":"reference/modules/appium_types/#w3c_appium_prefix","title":"W3C_APPIUM_PREFIX","text":"<p>\u01ac W3C_APPIUM_PREFIX: <code>\"appium\"</code></p>"},{"location":"reference/modules/appium_types/#defined-in_101","title":"Defined in","text":"<p>packages/types/lib/capabilities.ts:8</p>"},{"location":"reference/modules/appium_types/#webhookconfig","title":"WebhookConfig","text":"<p>\u01ac WebhookConfig: <code>string</code></p> <p>Also send log output to this http listener</p>"},{"location":"reference/modules/appium_types/#defined-in_102","title":"Defined in","text":"<p>packages/types/lib/appium-config.ts:147</p>"},{"location":"reference/modules/appium_types/#variables_1","title":"Variables","text":""},{"location":"reference/modules/appium_types/#base_desired_cap_constraints","title":"BASE_DESIRED_CAP_CONSTRAINTS","text":"<p>\u2022 <code>Const</code> BASE_DESIRED_CAP_CONSTRAINTS: <code>Object</code></p>"},{"location":"reference/modules/appium_types/#type-declaration_16","title":"Type declaration","text":"Name Type <code>app</code> { <code>isString</code>: <code>true</code> = true } <code>app.isString</code> <code>true</code> <code>autoLaunch</code> { <code>isBoolean</code>: <code>true</code> = true } <code>autoLaunch.isBoolean</code> <code>true</code> <code>autoWebview</code> { <code>isBoolean</code>: <code>true</code> = true } <code>autoWebview.isBoolean</code> <code>true</code> <code>automationName</code> { <code>isString</code>: <code>true</code> = true } <code>automationName.isString</code> <code>true</code> <code>eventTimings</code> { <code>isBoolean</code>: <code>true</code> = true } <code>eventTimings.isBoolean</code> <code>true</code> <code>fullReset</code> { <code>isBoolean</code>: <code>true</code> = true } <code>fullReset.isBoolean</code> <code>true</code> <code>language</code> { <code>isString</code>: <code>true</code> = true } <code>language.isString</code> <code>true</code> <code>locale</code> { <code>isString</code>: <code>true</code> = true } <code>locale.isString</code> <code>true</code> <code>newCommandTimeout</code> { <code>isNumber</code>: <code>true</code> = true } <code>newCommandTimeout.isNumber</code> <code>true</code> <code>noReset</code> { <code>isBoolean</code>: <code>true</code> = true } <code>noReset.isBoolean</code> <code>true</code> <code>orientation</code> { <code>inclusion</code>: readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>]  } <code>orientation.inclusion</code> readonly [<code>\"LANDSCAPE\"</code>, <code>\"PORTRAIT\"</code>] <code>platformName</code> { <code>isString</code>: <code>true</code> = true; <code>presence</code>: <code>true</code> = true } <code>platformName.isString</code> <code>true</code> <code>platformName.presence</code> <code>true</code> <code>platformVersion</code> { <code>isString</code>: <code>true</code> = true } <code>platformVersion.isString</code> <code>true</code> <code>printPageSourceOnFindFailure</code> { <code>isBoolean</code>: <code>true</code> = true } <code>printPageSourceOnFindFailure.isBoolean</code> <code>true</code> <code>udid</code> { <code>isString</code>: <code>true</code> = true } <code>udid.isString</code> <code>true</code> <code>webSocketUrl</code> { <code>isBoolean</code>: <code>true</code> = true } <code>webSocketUrl.isBoolean</code> <code>true</code>"},{"location":"reference/modules/appium_types/#defined-in_103","title":"Defined in","text":"<p>packages/types/lib/constraints.ts:3</p>"},{"location":"reference/modules/appium_universal_xml_plugin/","title":"Module: @appium/universal-xml-plugin","text":""},{"location":"reference/modules/appium_universal_xml_plugin/#table-of-contents","title":"Table of contents","text":""},{"location":"reference/modules/appium_universal_xml_plugin/#references","title":"References","text":"<ul> <li>default</li> </ul>"},{"location":"reference/modules/appium_universal_xml_plugin/#classes","title":"Classes","text":"<ul> <li>UniversalXMLPlugin</li> </ul>"},{"location":"reference/modules/appium_universal_xml_plugin/#functions","title":"Functions","text":"<ul> <li>main</li> </ul>"},{"location":"reference/modules/appium_universal_xml_plugin/#references_1","title":"References","text":""},{"location":"reference/modules/appium_universal_xml_plugin/#default","title":"default","text":"<p>Renames and re-exports UniversalXMLPlugin</p>"},{"location":"reference/modules/appium_universal_xml_plugin/#functions_1","title":"Functions","text":""},{"location":"reference/modules/appium_universal_xml_plugin/#main","title":"main","text":"<p>\u25b8 main(): <code>void</code></p>"},{"location":"reference/modules/appium_universal_xml_plugin/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"reference/modules/appium_universal_xml_plugin/#defined-in","title":"Defined in","text":"<p>packages/universal-xml-plugin/lib/index.js:7</p>"}]}